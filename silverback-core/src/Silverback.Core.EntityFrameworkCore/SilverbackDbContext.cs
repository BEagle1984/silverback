using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Silverback.Domain;
using Silverback.Infrastructure;
using Silverback.Messaging.Publishing;

namespace Silverback.Core.EntityFrameworkCore
{
    /// <summary>
    /// The base class to be used for a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to be used with Silverback.Core.
    /// When saving changes it automatically publishes the <see cref="T:Silverback.Core.Domain.IDomainEvent`1" /> generated by the tracked entities.
    /// </summary>
    /// <seealso cref="T:Microsoft.EntityFrameworkCore.DbContext" />
    /// <seealso cref="T:Silverback.Core.Domain.IUnitOfWork" />
    public class SilverbackDbContext : DbContext, IUnitOfWork
    {
        private readonly IEventPublisher<IDomainEvent<IDomainEntity>> _eventPublisher;

        /// <summary>
        /// Initializes a new instance of the <see cref="SilverbackDbContext"/> class.
        /// </summary>
        /// <param name="eventPublisher">The event publisher.</param>
        public SilverbackDbContext(IEventPublisher<IDomainEvent<IDomainEntity>> eventPublisher)
        {
            _eventPublisher = eventPublisher;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SilverbackDbContext" /> class.
        /// </summary>
        /// <param name="options">The options.</param>
        /// <param name="eventPublisher">The event publisher.</param>
        public SilverbackDbContext(DbContextOptions options, IEventPublisher<IDomainEvent<IDomainEntity>> eventPublisher)
            : base(options)
        {
            _eventPublisher = eventPublisher;
        }

        /// <summary>
        /// Asynchronously saves all pending changes and published all queued events.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns></returns>
        Task IUnitOfWork.SaveChangesAsync(CancellationToken cancellationToken)
        {
            return SaveChangesAsync(true, cancellationToken);
        }

        /// <summary>
        /// Saves all pending changes and published all queued events.
        /// </summary>
        /// <param name="acceptAllChangesOnSuccess">Indicates whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" /> is called after the changes have
        /// been sent successfully to the database.</param>
        /// <returns>
        /// The number of state entries written to the database.
        /// </returns>
        /// <remarks>
        /// This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
        /// changes to entity instances before saving to the underlying database. This can be disabled via
        /// <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
        /// </remarks>
        public override int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            _eventPublisher.PublishDomainEvents(this);
            return base.SaveChanges(acceptAllChangesOnSuccess);
        }

        /// <summary>
        /// Asynchronously saves all pending changes and published all queued events.
        /// </summary>
        /// <param name="acceptAllChangesOnSuccess">Indicates whether <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges" /> is called after the changes have
        /// been sent successfully to the database.</param>
        /// <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
        /// <returns>
        /// A task that represents the asynchronous save operation. The task result contains the
        /// number of state entries written to the database.
        /// </returns>
        /// <remarks>
        /// <para>
        /// This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
        /// changes to entity instances before saving to the underlying database. This can be disabled via
        /// <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" />.
        /// </para>
        /// <para>
        /// Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
        /// that any asynchronous operations have completed before calling another method on this context.
        /// </para>
        /// </remarks>
        public override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess,
            CancellationToken cancellationToken = new CancellationToken())
        {
            _eventPublisher.PublishDomainEvents(this);
            return base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
        }
    }
}
