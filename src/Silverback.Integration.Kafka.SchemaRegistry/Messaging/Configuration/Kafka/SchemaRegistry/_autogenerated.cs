// Copyright (c) 2025 Sergio Aquilini
// This code is licensed under MIT license (see LICENSE file for details)

using System.Diagnostics.CodeAnalysis;
using Confluent.SchemaRegistry;

namespace Silverback.Messaging.Configuration.Kafka.SchemaRegistry;

/// <content>
///     The autogenerated part of the <see cref="KafkaSchemaRegistryConfiguration" /> class.
/// </content>
[SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:File may only contain a single type", Justification = "Autogenerated all at once")]
[SuppressMessage("Design", "CA1044:Properties should not be write only", Justification = "Accessors generated according to wrapped class")]
public partial record KafkaSchemaRegistryConfiguration
{
    /// <summary>
    ///     Gets the source of the basic authentication credentials. This specifies whether the credentials are specified in the <see cref="BasicAuthUserInfo" />
    ///     or they are inherited from the producer or consumer configuration.
    /// </summary>
    public AuthCredentialsSource? BasicAuthCredentialsSource { get; init; }

    /// <summary>
    ///     Gets the comma-separated list of URLs for schema registry instances that are used to register or lookup schemas.
    /// </summary>
    [SuppressMessage("Design", "CA1056:URI-like properties should not be strings", Justification = "Generated according to wrapped class.")]
    public string? Url { get; init; }

    /// <summary>
    ///     Gets the timeout in milliseconds for the requests to the Confluent schema registry.
    /// </summary>
    public int? RequestTimeoutMs { get; init; }

    /// <summary>
    ///     Gets the maximum number of retries for a request.
    /// </summary>
    public int? MaxRetries { get; init; }

    /// <summary>
    ///     Gets the time to wait for the first retry in milliseconds.
    /// </summary>
    public int? RetriesWaitMs { get; init; }

    /// <summary>
    ///     Gets the time to wait for any retry in milliseconds.
    /// </summary>
    public int? RetriesMaxWaitMs { get; init; }

    /// <summary>
    ///     Gets the file or directory path to the CA certificate(s) for verifying the registry's key. Defaults: On Windows the system's CA certificates are automatically looked up in the Windows Root certificate store.
    ///     On Mac OSX this configuration defaults to <c>probe</c>. It is recommended to install openssl using Homebrew, to provide CA certificates. On Linux install the distribution's ca-certificates package.
    ///     If OpenSSL is statically linked or <see cref="SslCaLocation" /> is set to <c>probe</c> a list of standard paths will be probed and the first one found will be used as the default CA certificate location path.
    ///     If OpenSSL is dynamically linked the OpenSSL library's default path will be used (see <c>OPENSSLDIR</c> in <c>openssl version -a</c>).
    /// </summary>
    public string? SslCaLocation { get; init; }

    /// <summary>
    ///     Gets the path to the client's keystore (PKCS#12) used for the authentication.
    /// </summary>
    public string? SslKeystoreLocation { get; init; }

    /// <summary>
    ///     Gets the client's keystore (PKCS#12) password.
    /// </summary>
    public string? SslKeystorePassword { get; init; }

    /// <summary>
    ///     Gets a value indicating whether the registry (server) certificate must be verified.
    /// </summary>
    public bool? EnableSslCertificateVerification { get; init; }

    /// <summary>
    ///     Gets the maximum number of schemas that are cached by the schema registry client.
    /// </summary>
    public int? MaxCachedSchemas { get; init; }

    /// <summary>
    ///     Gets the TTL in seconds for caches holding latest schemas, or -1 for no TTL.
    /// </summary>
    public int? LatestCacheTtlSecs { get; init; }

    /// <summary>
    ///     Gets the basic authentication credentials in the form {username}:{password}.
    /// </summary>
    public string? BasicAuthUserInfo { get; init; }

    /// <summary>
    ///     Maps to the Confluent client configuration.
    /// </summary>
    /// <returns>
    ///     The Confluent client configuration.
    /// </returns>
    private SchemaRegistryConfig MapCore() =>
        new()
        {
            BasicAuthCredentialsSource = BasicAuthCredentialsSource,
            Url = Url,
            RequestTimeoutMs = RequestTimeoutMs,
            MaxRetries = MaxRetries,
            RetriesWaitMs = RetriesWaitMs,
            RetriesMaxWaitMs = RetriesMaxWaitMs,
            SslCaLocation = SslCaLocation,
            SslKeystoreLocation = SslKeystoreLocation,
            SslKeystorePassword = SslKeystorePassword,
            EnableSslCertificateVerification = EnableSslCertificateVerification,
            MaxCachedSchemas = MaxCachedSchemas,
            LatestCacheTtlSecs = LatestCacheTtlSecs,
            BasicAuthUserInfo = BasicAuthUserInfo
        };
}

/// <content>
///     The autogenerated part of the <see cref="KafkaSchemaRegistryConfigurationBuilder" /> class.
/// </content>
[SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:File may only contain a single type", Justification = "Autogenerated all at once")]
[SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1202: 'public' members should come before 'internal' members", Justification = "Autogenerated")]
[SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1600:Elements should be documented", Justification = "Documented in other partial")]
[SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1601:Partial elements should be documented", Justification = "Autogenerated")]
public partial class KafkaSchemaRegistryConfigurationBuilder
{
    private AuthCredentialsSource? _basicAuthCredentialsSource;

    private string? _url;

    private int? _requestTimeoutMs;

    private int? _maxRetries;

    private int? _retriesWaitMs;

    private int? _retriesMaxWaitMs;

    private string? _sslCaLocation;

    private string? _sslKeystoreLocation;

    private string? _sslKeystorePassword;

    private bool? _enableSslCertificateVerification;

    private int? _maxCachedSchemas;

    private int? _latestCacheTtlSecs;

    private string? _basicAuthUserInfo;

    public partial KafkaSchemaRegistryConfigurationBuilder WithBasicAuthCredentialsSource(AuthCredentialsSource? basicAuthCredentialsSource)
    {
        _basicAuthCredentialsSource = basicAuthCredentialsSource;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithUrl(string? url)
    {
        _url = url;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithRequestTimeoutMs(int? requestTimeoutMs)
    {
        _requestTimeoutMs = requestTimeoutMs;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithMaxRetries(int? maxRetries)
    {
        _maxRetries = maxRetries;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithRetriesWaitMs(int? retriesWaitMs)
    {
        _retriesWaitMs = retriesWaitMs;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithRetriesMaxWaitMs(int? retriesMaxWaitMs)
    {
        _retriesMaxWaitMs = retriesMaxWaitMs;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithSslCaLocation(string? sslCaLocation)
    {
        _sslCaLocation = sslCaLocation;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithSslKeystoreLocation(string? sslKeystoreLocation)
    {
        _sslKeystoreLocation = sslKeystoreLocation;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithSslKeystorePassword(string? sslKeystorePassword)
    {
        _sslKeystorePassword = sslKeystorePassword;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithMaxCachedSchemas(int? maxCachedSchemas)
    {
        _maxCachedSchemas = maxCachedSchemas;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithLatestCacheTtlSecs(int? latestCacheTtlSecs)
    {
        _latestCacheTtlSecs = latestCacheTtlSecs;
        return this;
    }

    public partial KafkaSchemaRegistryConfigurationBuilder WithBasicAuthUserInfo(string? basicAuthUserInfo)
    {
        _basicAuthUserInfo = basicAuthUserInfo;
        return this;
    }

    internal KafkaSchemaRegistryConfigurationBuilder WithEnableSslCertificateVerification(bool? enableSslCertificateVerification)
    {
        _enableSslCertificateVerification = enableSslCertificateVerification;
        return this;
    }

    private KafkaSchemaRegistryConfiguration BuildCore() =>
        new()
        {
            BasicAuthCredentialsSource = _basicAuthCredentialsSource,
            Url = _url,
            RequestTimeoutMs = _requestTimeoutMs,
            MaxRetries = _maxRetries,
            RetriesWaitMs = _retriesWaitMs,
            RetriesMaxWaitMs = _retriesMaxWaitMs,
            SslCaLocation = _sslCaLocation,
            SslKeystoreLocation = _sslKeystoreLocation,
            SslKeystorePassword = _sslKeystorePassword,
            EnableSslCertificateVerification = _enableSslCertificateVerification,
            MaxCachedSchemas = _maxCachedSchemas,
            LatestCacheTtlSecs = _latestCacheTtlSecs,
            BasicAuthUserInfo = _basicAuthUserInfo
        };
}
