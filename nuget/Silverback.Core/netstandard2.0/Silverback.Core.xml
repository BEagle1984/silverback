<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Silverback.Core</name>
    </assembly>
    <members>
        <member name="T:Silverback.Domain.DomainEvent`1">
            <summary>
            Represent an event published by an aggregate root or an entity.
            </summary>
            <typeparam name="T">The type of the source entity.</typeparam>
            <seealso cref="T:Silverback.Domain.IDomainEvent`1" />
        </member>
        <member name="P:Silverback.Domain.DomainEvent`1.Source">
            <summary>
            Gets the reference to the entity instance that generated this event.
            </summary>
        </member>
        <member name="M:Silverback.Domain.DomainEvent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Domain.DomainEvent`1"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Silverback.Domain.DomainEvent`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Domain.DomainEvent`1"/> class.
            </summary>
        </member>
        <member name="P:Silverback.Domain.DomainEvent`1.Silverback#Domain#IDomainEvent#Source">
            <summary>
            Gets the entity instance that generated this event.
            </summary>
        </member>
        <member name="T:Silverback.Domain.Entity">
            <summary>
            A base class for the domain entities implementing <see cref="T:Silverback.Domain.IDomainEntity"/>.
            </summary>
        </member>
        <member name="M:Silverback.Domain.Entity.GetDomainEvents">
            <summary>
            Gets the domain events published by this entity.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Silverback.Domain.Entity.ClearEvents">
            <summary>
            Clears all domain events.
            </summary>
        </member>
        <member name="M:Silverback.Domain.Entity.AddEvent(Silverback.Domain.IDomainEvent{Silverback.Domain.IDomainEntity})">
            <summary>
            Adds the specified domain event.
            </summary>
            <param name="domainEvent">The domain event.</param>
        </member>
        <member name="M:Silverback.Domain.Entity.AddEvent``1">
            <summary>
            Adds a new event of the specified type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Silverback.Domain.Entity.RemoveEvent(Silverback.Domain.IDomainEvent{Silverback.Domain.Entity})">
            <summary>
            Removes the specified domain event.
            </summary>
            <param name="domainEvent">The domain event.</param>
        </member>
        <member name="T:Silverback.Domain.IAggregateRoot">
            <summary>
            Marks an aggregate root.
            </summary>
        </member>
        <member name="T:Silverback.Domain.IDomainEntity">
            <summary>
            Exposes the methods to retrieve the <see cref="T:Silverback.Domain.IDomainEvent`1"/> collection related to 
            an entity.
            <see cref="T:Silverback.Domain.Entity"/> already implements this interface
            </summary>
        </member>
        <member name="M:Silverback.Domain.IDomainEntity.GetDomainEvents">
            <summary>
            Gets the domain events published by this entity.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Silverback.Domain.IDomainEntity.ClearEvents">
            <summary>
            Clears all domain events.
            </summary>
        </member>
        <member name="T:Silverback.Domain.IDomainEvent">
            <summary>
            Represent an event published by an aggregate root or an entity.
            </summary>
            <typeparam name="T">The type of the source entity.</typeparam>
            <seealso cref="T:Silverback.Messaging.Messages.IEvent" />
        </member>
        <member name="P:Silverback.Domain.IDomainEvent.Source">
            <summary>
            Gets or sets the entity instance that generated this event.
            </summary>
        </member>
        <member name="T:Silverback.Domain.IDomainEvent`1">
            <summary>
            Represent an event published by an aggregate root or an entity.
            </summary>
            <typeparam name="T">The type of the source entity.</typeparam>
            <seealso cref="T:Silverback.Messaging.Messages.IEvent" />
        </member>
        <member name="P:Silverback.Domain.IDomainEvent`1.Source">
            <summary>
            Gets the entity instance that generated this event.
            </summary>
        </member>
        <member name="T:Silverback.Infrastructure.IRepository`1">
            <summary>
            A repository.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="P:Silverback.Infrastructure.IRepository`1.Queryable">
            <summary>
            Gets an <see cref="T:System.Linq.IQueryable" /> to query this repository.
            </summary>
        </member>
        <member name="P:Silverback.Infrastructure.IRepository`1.NoTrackingQueryable">
            <summary>
            Gets an <see cref="T:System.Linq.IQueryable" /> to query this repository. The loaded entities will not be tracked or cached.
            </summary>
        </member>
        <member name="M:Silverback.Infrastructure.IRepository`1.Add(`0)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Silverback.Infrastructure.IRepository`1.Update(`0)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Silverback.Infrastructure.IRepository`1.Remove(`0)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Silverback.Infrastructure.IRepository`1.UnitOfWork">
            <summary>
            Gets the unit of work instance.
            </summary>
        </member>
        <member name="T:Silverback.Infrastructure.IUnitOfWork">
            <summary>
            The unit of work.
            </summary>
        </member>
        <member name="M:Silverback.Infrastructure.IUnitOfWork.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously saves all pending changes and published all pending events
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Bus">
            <summary>
            The standard in-process bus.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Bus.Publish(Silverback.Messaging.Messages.IMessage)">
            <summary>
            Publishes the specified message.
            </summary>
            <param name="message">The message to be published.</param>
            <exception cref="T:System.ArgumentNullException">message</exception>
        </member>
        <member name="M:Silverback.Messaging.Bus.PublishAsync(Silverback.Messaging.Messages.IMessage)">
            <summary>
            Asynchronously publishes the specified message.
            </summary>
            <param name="message">The message to be published.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">message</exception>
        </member>
        <member name="M:Silverback.Messaging.Bus.Subscribe(System.Action{System.IObservable{Silverback.Messaging.Messages.IMessage}})">
            <summary>
            Subscribes to the messages stream. The function should return an <see cref="T:System.IDisposable"/> 
            to let the <see cref="T:Silverback.Messaging.IBus"/> handle the subscriber lifecycle.
            </summary>
            <param name="subscription">The method performing the subscription.</param>
        </member>
        <member name="M:Silverback.Messaging.Bus.Subscribe(System.Func{System.IObservable{Silverback.Messaging.Messages.IMessage},System.IDisposable})">
            <summary>
            Subscribes to the messages stream. The function must return an <see cref="T:System.IDisposable" />
            to let the <see cref="T:Silverback.Messaging.IBus" /> handle the subscriber lifecycle.
            </summary>
            <param name="subscription">The method performing the subscription.</param>
            <returns>
            Returns the subscriber.
            </returns>
        </member>
        <member name="M:Silverback.Messaging.Bus.Unsubscribe(System.IDisposable)">
            <summary>
            Dispose the specified subscriber.
            </summary>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:Silverback.Messaging.Bus.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Silverback.Messaging.Bus.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Bus.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Silverback.Messaging.Bus"/> class.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.BusPublisherExtensions">
            <summary>
            Provides some extension methods for <see cref="T:Silverback.Messaging.IBus"/> to help building the publishers.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.BusPublisherExtensions.GetPublisher(Silverback.Messaging.IBus)">
            <summary>
            Gets an instance of <see cref="T:Silverback.Messaging.Publishing.IPublisher"/> to publish <see cref="T:Silverback.Messaging.Messages.IMessage"/> instances to the bus.
            </summary>
            <param name="bus">The bus.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.BusPublisherExtensions.GetEventPublisher``1(Silverback.Messaging.IBus)">
            <summary>
            Gets an instance of <see cref="T:Silverback.Messaging.Publishing.IEventPublisher`1"/> to publish <see cref="T:Silverback.Messaging.Messages.IEvent"/> instances to the bus.
            </summary>
            <param name="bus">The bus.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.BusPublisherExtensions.GetCommandPublisher``1(Silverback.Messaging.IBus)">
            <summary>
            Gets an instance of <see cref="T:Silverback.Messaging.Publishing.ICommandPublisher`1"/> to publish <see cref="T:Silverback.Messaging.Messages.ICommand"/> instances to the bus.
            </summary>
            <param name="bus">The bus.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.BusPublisherExtensions.GetRequestPublisher``2(Silverback.Messaging.IBus)">
            <summary>
            Gets an instance of <see cref="T:Silverback.Messaging.Publishing.IRequestPublisher`2"/> to publish <see cref="T:Silverback.Messaging.Messages.IRequest"/> instances to the bus.
            </summary>
            <param name="bus">The bus.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.BusPublisherExtensions.GetResponsePublisher``1(Silverback.Messaging.IBus)">
            <summary>
            Gets an instance of <see cref="T:Silverback.Messaging.Publishing.IResponsePublisher`1"/> to publish <see cref="T:Silverback.Messaging.Messages.IResponse"/> instances to the bus.
            </summary>
            <param name="bus">The bus.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Configuration.BusConfig">
            <summary>
            Exposes a fluent API to configure the <see cref="T:Silverback.Messaging.IBus"/>.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfig.#ctor(Silverback.Messaging.IBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Configuration.BusConfig"/> class.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfig.Create(System.Action{Silverback.Messaging.Configuration.BusConfig})">
            <summary>
            Creates a new <see cref="P:Silverback.Messaging.Configuration.BusConfig.Bus"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfig.WithFactory(System.Func{System.Type,System.Object})">
            <summary>
            Set the function to be used to dinamically instantiate the types needed to handle the messages.
            </summary>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfig.WithFactory(Silverback.Messaging.ITypeFactory)">
            <summary>
            Set the <see cref="T:Silverback.Messaging.ITypeFactory" /> to be used to dinamically instantiate the types needed to handle the messages.
            </summary>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfig.Subscribe``1(System.Func{System.IObservable{``0},Silverback.Messaging.Subscriber{``0}})">
            <summary>
            Subscribes a <see cref="T:Silverback.Messaging.Subscriber`1" /> derived type to the messages of the specified type <see cref="!:TMessage" />.
            </summary>
            <typeparam name="TMessage">The type of the messages.</typeparam>
            <param name="subscriberFactory">The subscriber factory method.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfig.Subscribe``1(System.Type,System.Func{``0,System.Boolean})">
            <summary>
            Subscribes an <see cref="T:Silverback.Messaging.IMessageHandler`1" /> using the <see cref="T:Silverback.Messaging.DefaultSubscriber`1" />.
            </summary>
            <typeparam name="TMessage">The type of the messages.</typeparam>
            <param name="handlerType">Type of the <see cref="T:Silverback.Messaging.IMessageHandler`1" /> to be used to handle the messages.</param>
            <param name="filter">An optional filter to be applied to the published messages.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfig.Subscribe``2(System.Func{``0,System.Boolean})">
            <summary>
            Subscribes an <see cref="T:Silverback.Messaging.IMessageHandler`1" /> using the <see cref="T:Silverback.Messaging.DefaultSubscriber`1" />.
            </summary>
            <typeparam name="TMessage">The type of the messages.</typeparam>
            <typeparam name="THandler">Type of the <see cref="T:Silverback.Messaging.IMessageHandler`1" /> to be used to handle the messages.</typeparam>
            <param name="filter">An optional filter to be applied to the published messages.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfig.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribes an action method using the <see cref="T:Silverback.Messaging.DefaultSubscriber`1" />.
            </summary>
            <typeparam name="TMessage">The type of the messages.</typeparam>
            <param name="handler">The message handler method.</param>
            <param name="filter">An optional filter to be applied to the published messages.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Configuration.BusConfigurationExtensions">
            <summary>
            Provides some extension methods for <see cref="T:Silverback.Messaging.IBus"/> to help building the publishers.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfigurationExtensions.Config(Silverback.Messaging.IBus)">
            <summary>
            Configure the <see cref="T:Silverback.Messaging.IBus"/> using the fluent API.
            </summary>
            <param name="bus">The bus.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.DefaultSubscriber`1">
            <summary>
            The standard subscriber, suitable for most cases.
            In more advanced use cases, when a greater degree of flexibility is required, it is advised to create an ad-hoc implementation of <see cref="T:Silverback.Messaging.Subscriber`1"/>. 
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Silverback.Messaging.DefaultSubscriber`1.#ctor(System.IObservable{`0},Silverback.Messaging.ITypeFactory,System.Type,System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.DefaultSubscriber`1" /> class.
            </summary>
            <param name="messages">The observable stream of messages.</param>
            <param name="typeFactory">The <see cref="T:Silverback.Messaging.ITypeFactory" /> that will be used to get an <see cref="T:Silverback.Messaging.IMessageHandler`1" /> instance to process each received message.</param>
            <param name="handlerType">Type of the <see cref="T:Silverback.Messaging.IMessageHandler`1" /> to be used to handle the messages.</param>
            <param name="filter">An optional filter to be applied to the published messages.</param>
        </member>
        <member name="M:Silverback.Messaging.DefaultSubscriber`1.ApplyFilter(System.IObservable{`0},System.Func{`0,System.Boolean})">
            <summary>
            Applies the filter.
            </summary>
            <param name="messages">The message stream.</param>
            <param name="filter">The filter to be applied.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.DefaultSubscriber`1.OnNext(`0)">
            <summary>
            Called when a message is published.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Silverback.Messaging.GenericMessageHandler`1">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage"/> of type <see cref="!:TMessage"/> executing the provided action.
            </summary>
            <typeparam name="TMessage">The type of <see cref="T:Silverback.Messaging.Messages.IMessage"/> to be handled.</typeparam>
            <seealso cref="T:Silverback.Messaging.MessageHandler`1" />
        </member>
        <member name="M:Silverback.Messaging.GenericMessageHandler`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.GenericMessageHandler`1"/> class.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Silverback.Messaging.GenericMessageHandler`1.Handle(`0)">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage" />.
            </summary>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="T:Silverback.Messaging.GenericTypeFactory">
            <summary>
            Wraps a <see cref="T:System.Func`2"/> that is used to dinamically instanciate the types needed to handle the messages.
            </summary>
            <seealso cref="T:Silverback.Messaging.ITypeFactory" />
        </member>
        <member name="M:Silverback.Messaging.GenericTypeFactory.#ctor(System.Func{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.GenericTypeFactory" /> class.
            </summary>
            <param name="actualProvider">The actual provider method.</param>
        </member>
        <member name="M:Silverback.Messaging.GenericTypeFactory.GetInstance(System.Type)">
            <summary>
            Returns an instance of the specified type.
            </summary>
            <param name="type">The type to be instanciated.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.IBus">
            <summary>
            A publish-subscribe based observable bus.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.IBus.Publish(Silverback.Messaging.Messages.IMessage)">
            <summary>
            Publishes the specified message.
            </summary>
            <param name="message">The message to be published.</param>
        </member>
        <member name="M:Silverback.Messaging.IBus.PublishAsync(Silverback.Messaging.Messages.IMessage)">
            <summary>
            Asynchronously publishes the specified message.
            </summary>
            <param name="message">The message to be published.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.IBus.Subscribe(System.Action{System.IObservable{Silverback.Messaging.Messages.IMessage}})">
            <summary>
            Subscribes to the messages stream. The function should return an <see cref="T:System.IDisposable"/> 
            to let the <see cref="T:Silverback.Messaging.IBus"/> handle the subscriber lifecycle.
            </summary>
            <param name="subscription">The method performing the subscription.</param>
        </member>
        <member name="M:Silverback.Messaging.IBus.Subscribe(System.Func{System.IObservable{Silverback.Messaging.Messages.IMessage},System.IDisposable})">
            <summary>
            Subscribes to the messages stream. The function must return an <see cref="T:System.IDisposable" />
            to let the <see cref="T:Silverback.Messaging.IBus" /> handle the subscriber lifecycle.
            </summary>
            <param name="subscription">The method performing the subscription.</param>
            <returns>
            Returns the subscriber.
            </returns>
        </member>
        <member name="M:Silverback.Messaging.IBus.Unsubscribe(System.IDisposable)">
            <summary>
            Dispose the specified subscriber.
            </summary>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="T:Silverback.Messaging.IMessageHandler`1">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage"/> of type <see cref="!:TMessage"/>.
            </summary>
            <typeparam name="TMessage">The type of <see cref="T:Silverback.Messaging.Messages.IMessage"/> to be handled.</typeparam>
        </member>
        <member name="M:Silverback.Messaging.IMessageHandler`1.Handle(`0)">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage"/>.
            </summary>
            <param name="message">The message to be handled.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.IMessageHandler">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage"/>.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.IMessageHandler.Handle(Silverback.Messaging.Messages.IMessage)">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage"/>.
            </summary>
            <param name="message">The message to be handled.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.ITypeFactory">
            <summary>
            Provides an instance of the specified type and is used to resolve message handlers and other types that
            need to be dinamically instanciated.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.ITypeFactory.GetInstance(System.Type)">
            <summary>
            Returns an instance of the specified type.
            </summary>
            <param name="type">The type to be instanciated.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.MessageHandler`1">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage"/> of type <see cref="!:TMessage"/>.
            </summary>
            <typeparam name="TMessage">The type of <see cref="T:Silverback.Messaging.Messages.IMessage"/> to be handled.</typeparam>
            <seealso cref="T:Silverback.Messaging.IMessageHandler`1" />
            <seealso cref="T:Silverback.Messaging.IMessageHandler" />
        </member>
        <member name="M:Silverback.Messaging.MessageHandler`1.Handle(`0)">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage" />.
            </summary>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="M:Silverback.Messaging.MessageHandler`1.Silverback#Messaging#IMessageHandler#Handle(Silverback.Messaging.Messages.IMessage)">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage" />.
            </summary>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="T:Silverback.Messaging.Messages.ICommand">
            <summary>
            Represent a command message.
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IMessage" />
        </member>
        <member name="T:Silverback.Messaging.Messages.IEvent">
            <summary>
            Represent an event message.
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IMessage" />
        </member>
        <member name="T:Silverback.Messaging.Messages.IMessage">
            <summary>
            Represent a message, either an event or command.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Messages.IRequest">
            <summary>
            Reprensent a request message awaiting a response (see <see cref="T:Silverback.Messaging.Messages.IResponse"/>).
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IMessage" />
        </member>
        <member name="P:Silverback.Messaging.Messages.IRequest.RequestId">
            <summary>
            Gets or sets the request identifier.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Messages.IResponse">
            <summary>
            Reprensent the response received to a <see cref="T:Silverback.Messaging.Messages.IRequest"/>.
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IMessage" />
        </member>
        <member name="P:Silverback.Messaging.Messages.IResponse.RequestId">
            <summary>
            Gets or sets the request identifier.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Publishing.CommandPublisher`1">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.ICommand"/> to the bus.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <seealso cref="T:Silverback.Messaging.Publishing.ICommandPublisher`1" />
        </member>
        <member name="M:Silverback.Messaging.Publishing.CommandPublisher`1.#ctor(Silverback.Messaging.IBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Publishing.CommandPublisher`1"/> class.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.CommandPublisher`1.Send(`0)">
            <summary>
            Sends the specified command to the bus.
            </summary>
            <param name="message">The command to be sent.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.CommandPublisher`1.SendAsync(`0)">
            <summary>
            Sends the specified command to the bus.
            </summary>
            <param name="message">The command to be sent.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Publishing.EventPublisher`1">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.IEvent" /> to the bus.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <seealso cref="T:Silverback.Messaging.Publishing.IEventPublisher`1" />
        </member>
        <member name="M:Silverback.Messaging.Publishing.EventPublisher`1.#ctor(Silverback.Messaging.IBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Publishing.EventPublisher`1"/> class.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.EventPublisher`1.Publish(`0)">
            <summary>
            Publishes the specified event to the bus.
            </summary>
            <param name="message">The event to be published.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.EventPublisher`1.PublishAsync(`0)">
            <summary>
            Asynchronously publishes the specified event to the bus.
            </summary>
            <param name="message">The event to be published.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Publishing.ICommandPublisher`1">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.ICommand"/> to the bus.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Publishing.ICommandPublisher`1.Send(`0)">
            <summary>
            Sends the specified command to the bus.
            </summary>
            <param name="message">The command to be sent.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.ICommandPublisher`1.SendAsync(`0)">
            <summary>
            Sends the specified command to the bus.
            </summary>
            <param name="message">The command to be sent.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Publishing.IEventPublisher`1">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.IEvent"/> to the bus.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IEventPublisher`1.Publish(`0)">
            <summary>
            Publishes the specified event to the bus.
            </summary>
            <param name="message">The event to be published.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IEventPublisher`1.PublishAsync(`0)">
            <summary>
            Asynchronously publishes the specified event to the bus.
            </summary>
            <param name="message">The event to be published.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Publishing.IPublisher">
            <summary>
            Publishes all kind of <see cref="T:Silverback.Messaging.Messages.IMessage"/> to the bus.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.Publish``1(``0)">
            <summary>
            Publishes the specified event to the bus.
            </summary>
            <param name="message">The event to be published.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.PublishAsync``1(``0)">
            <summary>
            Asynchronously publishes the specified event to the bus.
            </summary>
            <param name="message">The event to be published.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.Send``1(``0)">
            <summary>
            Sends the specified command to the bus.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="message">The command to be sent.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.SendAsync``1(``0)">
            <summary>
            Sends the specified command to the bus.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="message">The command to be sent.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.GetResponse``2(``0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.GetResponseAsync``2(``0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.GetResponse``2(Silverback.Messaging.IBus,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received on another bus.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="replyBus">The reply bus.</param>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.GetResponseAsync``2(Silverback.Messaging.IBus,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received on another bus.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="replyBus">The reply bus.</param>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.Reply``1(``0)">
            <summary>
            Sends the specified response to the bus.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The response.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IPublisher.ReplyAsync``1(``0)">
            <summary>
            Sends the specified response to the bus.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The response.</param>
        </member>
        <member name="T:Silverback.Messaging.Publishing.IRequestPublisher`2">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.IRequest"/> to the bus.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IRequestPublisher`2.GetResponse(`0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received.
            </summary>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IRequestPublisher`2.GetResponseAsync(`0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received.
            </summary>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IRequestPublisher`2.GetResponse(Silverback.Messaging.IBus,`0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received on another bus.
            </summary>
            <param name="replyBus">The reply bus.</param>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IRequestPublisher`2.GetResponseAsync(Silverback.Messaging.IBus,`0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received on another bus.
            </summary>
            <param name="replyBus">The reply bus.</param>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Publishing.IResponsePublisher`1">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.IResponse"/> to the bus.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IResponsePublisher`1.Reply(`0)">
            <summary>
            Sends the specified response to the bus.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The response.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.IResponsePublisher`1.ReplyAsync(`0)">
            <summary>
            Sends the specified response to the bus.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The response.</param>
        </member>
        <member name="T:Silverback.Messaging.Publishing.Publisher">
            <summary>
            Publishes all kind of <see cref="T:Silverback.Messaging.Messages.IMessage"/> to the bus.
            </summary>
            <seealso cref="T:Silverback.Messaging.Publishing.IPublisher" />
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.#ctor(Silverback.Messaging.IBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Publishing.Publisher"/> class.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.Publish``1(``0)">
            <summary>
            Publishes the specified event to the bus.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="message">The event to be published.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.PublishAsync``1(``0)">
            <summary>
            Asynchronously publishes the specified event to the bus.
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="message">The event to be published.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.Send``1(``0)">
            <summary>
            Sends the specified command to the bus.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="message">The command to be sent.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.SendAsync``1(``0)">
            <summary>
            Sends the specified command to the bus.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="message">The command to be sent.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.GetResponse``2(``0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.GetResponseAsync``2(``0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.GetResponse``2(Silverback.Messaging.IBus,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received on another bus.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="replyBus">The reply bus.</param>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.GetResponseAsync``2(Silverback.Messaging.IBus,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received on another bus.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="replyBus">The reply bus.</param>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.CheckRequestMessage``1(``0)">
            <summary>
            Checks the request message ensuring that the RequestId is set.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">message</exception>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.Reply``1(``0)">
            <summary>
            Sends the specified response to the bus.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The response.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.Publisher.ReplyAsync``1(``0)">
            <summary>
            Sends the specified response to the bus.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="message">The response.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Publishing.RequestPublisher`2">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.IRequest"/> to the bus.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <seealso cref="T:Silverback.Messaging.Publishing.IRequestPublisher`2" />
        </member>
        <member name="M:Silverback.Messaging.Publishing.RequestPublisher`2.#ctor(Silverback.Messaging.IBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Publishing.RequestPublisher`2"/> class.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.RequestPublisher`2.GetResponse(`0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received.
            </summary>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.RequestPublisher`2.GetResponseAsync(`0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received.
            </summary>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.RequestPublisher`2.GetResponse(Silverback.Messaging.IBus,`0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received on another bus.
            </summary>
            <param name="replyBus">The reply bus.</param>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Publishing.RequestPublisher`2.GetResponseAsync(Silverback.Messaging.IBus,`0,System.Nullable{System.TimeSpan})">
            <summary>
            Sends the specified request to the bus and wait for the response to be received on another bus.
            </summary>
            <param name="replyBus">The reply bus.</param>
            <param name="message">The request.</param>
            <param name="timeout">The timeout. If not specified, the default timeout of 2 seconds will be used.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Publishing.ResponsePublisher`1">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.IResponse"/> to the bus.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <seealso cref="T:Silverback.Messaging.Publishing.IResponsePublisher`1" />
        </member>
        <member name="M:Silverback.Messaging.Publishing.ResponsePublisher`1.#ctor(Silverback.Messaging.IBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Publishing.ResponsePublisher`1"/> class.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.ResponsePublisher`1.Reply(`0)">
            <summary>
            Sends the specified response to the bus.
            </summary>
            <param name="message">The response.</param>
        </member>
        <member name="M:Silverback.Messaging.Publishing.ResponsePublisher`1.ReplyAsync(`0)">
            <summary>
            Sends the specified response to the bus.
            </summary>
            <param name="message">The response.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Subscriber`1">
            <summary>
            The base class for all subscribers.
            </summary>
            <typeparam name="TMessage">The type of the subscribed message.</typeparam>
        </member>
        <member name="M:Silverback.Messaging.Subscriber`1.#ctor(System.IObservable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.DefaultSubscriber`1" /> class.
            </summary>
            <param name="messages">The observable stream of messages.</param>
            <exception cref="T:System.ArgumentNullException">messages</exception>
        </member>
        <member name="M:Silverback.Messaging.Subscriber`1.OnNext(`0)">
            <summary>
            Called when a message is published.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Silverback.Messaging.Subscriber`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Silverback.Messaging.Subscriber`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Subscriber`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Silverback.Messaging.Subscriber`1"/> class.
            </summary>
        </member>
    </members>
</doc>
