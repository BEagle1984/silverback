<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Silverback.Integration</name>
    </assembly>
    <members>
        <member name="T:Silverback.IConfigurationValidation">
            <summary>
            Exposes the interface to let verify the object's configuration.
            </summary>
        </member>
        <member name="M:Silverback.IConfigurationValidation.ValidateConfiguration">
            <summary>
            Called after the fluent configuration is applied, should verify the consistency of the 
            configuration.
            </summary>
            <remarks>An exception must be thrown if the confgiuration is not conistent.</remarks>
        </member>
        <member name="T:Silverback.Messaging.Adapters.DbInboundAdapter`1">
            <summary>
            An adapter that subscribes to the message broker and forwards the messages to the internal bus.<br/>
            This implementation uses an inbox table to prevent duplicated processing of the same message. 
            </summary>
            <seealso cref="T:Silverback.Messaging.Adapters.IInboundAdapter" />
        </member>
        <member name="M:Silverback.Messaging.Adapters.DbInboundAdapter`1.#ctor(Silverback.Messaging.Repositories.IInboundMessagesRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Adapters.DbInboundAdapter`1"/> class.
            </summary>
            <param name="inboxRepository">The inbox repository.</param>
            <exception cref="T:System.ArgumentNullException">inboxRepository</exception>
        </member>
        <member name="M:Silverback.Messaging.Adapters.DbInboundAdapter`1.RelayMessage(Silverback.Messaging.Messages.IIntegrationMessage)">
            <summary>
            Relays the message ensuring that it wasn't processed already by this microservice.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Silverback.Messaging.Adapters.DbOutboundAdapter`1">
            <summary>
            Stores the <see cref="T:Silverback.Messaging.Messages.IMessage"/> into an outbox table to be fowarded to the message broker later on.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <seealso cref="T:Silverback.Messaging.Adapters.IOutboundAdapter" />
        </member>
        <member name="M:Silverback.Messaging.Adapters.DbOutboundAdapter`1.#ctor(Silverback.Messaging.Repositories.IOutboundMessagesRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Integration.Adapters.DbOutboundAdapter`1" /> class.
            </summary>
            <param name="outboxRepository">The outbox repository.</param>
        </member>
        <member name="M:Silverback.Messaging.Adapters.DbOutboundAdapter`1.Relay(Silverback.Messaging.Messages.IIntegrationMessage,Silverback.Messaging.IEndpoint)">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage" /> to the specified <see cref="T:Silverback.Messaging.IEndpoint" />.
            </summary>
            <param name="message">The message to be handled.</param>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="T:Silverback.Messaging.Adapters.GenericMessageTranslator`2">
            <summary>
            Translates the internal <see cref="T:Silverback.Messaging.Messages.IMessage"/> into an <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage"/> that can be sent over 
            the message broker.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <typeparam name="TIntegrationMessage">The type of the integration message.</typeparam>
            <seealso cref="T:Silverback.Messaging.Adapters.MessageTranslator`2" />
        </member>
        <member name="M:Silverback.Messaging.Adapters.GenericMessageTranslator`2.#ctor(System.Func{`0,`1},Silverback.Messaging.IBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Adapters.GenericMessageTranslator`2"/> class.
            </summary>
            <param name="mapper">The mapper.</param>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:Silverback.Messaging.Adapters.GenericMessageTranslator`2.Map(`0)">
            <summary>
            Maps the specified <see cref="T:Silverback.Messaging.Messages.IMessage" /> to an <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage" />.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Adapters.IInboundAdapter">
            <summary>
            An adapter that subscribes to the message broker and forwards the messages to the internal bus.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Adapters.IInboundAdapter.Init(Silverback.Messaging.IBus,Silverback.Messaging.IEndpoint)">
            <summary>
            Initializes the <see cref="T:Silverback.Messaging.Adapters.IInboundAdapter" />.
            </summary>
            <param name="bus">The internal <see cref="T:Silverback.Messaging.IBus" /> where the messages have to be relayed.</param>
            <param name="endpoint">The endpoint this adapter has to connect to.</param>
        </member>
        <member name="T:Silverback.Messaging.Adapters.IOutboundAdapter">
            <summary>
            An adapter that publishes the outgoing messages to the message queue
            (either forwarding them directly to the message broker or storing them in the outbox table).
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Adapters.IOutboundAdapter.Relay(Silverback.Messaging.Messages.IIntegrationMessage,Silverback.Messaging.IEndpoint)">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage" /> to the specified <see cref="T:Silverback.Messaging.IEndpoint" />.
            </summary>
            <param name="message">The message to be handled.</param>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="T:Silverback.Messaging.Adapters.MessageTranslator`2">
            <summary>
            Translates the internal <see cref="T:Silverback.Messaging.Messages.IMessage"/> into an <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage"/> that can be sent over 
            the message broker.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Adapters.MessageTranslator`2.#ctor(Silverback.Messaging.IBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Adapters.MessageTranslator`2"/> class.
            </summary>
            <param name="bus">The bus.</param>
        </member>
        <member name="M:Silverback.Messaging.Adapters.MessageTranslator`2.Handle(`0)">
            <summary>
            Handles the <see cref="T:Silverback.Messaging.Messages.IMessage" />.
            </summary>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="M:Silverback.Messaging.Adapters.MessageTranslator`2.Map(`0)">
            <summary>
            Maps the specified <see cref="T:Silverback.Messaging.Messages.IMessage"/> to an <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage"/>.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Adapters.SimpleInboundAdapter">
            <summary>
            An adapter that subscribes to the message broker and forwards the messages to the internal bus.<br/>
            This is the simplest implementation and it doesn't prevent duplicated processing of the same message. 
            </summary>
            <seealso cref="T:Silverback.Messaging.Adapters.IInboundAdapter" />
        </member>
        <member name="M:Silverback.Messaging.Adapters.SimpleInboundAdapter.Init(Silverback.Messaging.IBus,Silverback.Messaging.IEndpoint)">
            <summary>
            Initializes the <see cref="T:Silverback.Messaging.Adapters.IInboundAdapter" />.
            </summary>
            <param name="bus">The internal <see cref="T:Silverback.Messaging.IBus" /> where the messages have to be relayed.</param>
            <param name="endpoint">The endpoint this adapter has to connect to.</param>
        </member>
        <member name="M:Silverback.Messaging.Adapters.SimpleInboundAdapter.Connect(Silverback.Messaging.IEndpoint)">
            <summary>
            Implements the logic to connect and start listening to the specified endpoint.
            </summary>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:Silverback.Messaging.Adapters.SimpleInboundAdapter.RelayMessage(Silverback.Messaging.Messages.IIntegrationMessage)">
            <summary>
            Relays the message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Silverback.Messaging.Adapters.SimpleInboundAdapter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Silverback.Messaging.Adapters.SimpleInboundAdapter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Adapters.SimpleInboundAdapter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Silverback.Messaging.Adapters.SimpleInboundAdapter"/> class.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Adapters.SimpleOutboundAdapter">
            <summary>
            The basic outbound adapter that sends the messages directly through the message broker.
            </summary>
            <seealso cref="T:Silverback.Messaging.Adapters.IOutboundAdapter" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Silverback.Messaging.Adapters.SimpleOutboundAdapter.Relay(Silverback.Messaging.Messages.IIntegrationMessage,Silverback.Messaging.IEndpoint)">
            <summary>
            Publishes the <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage" /> to the specified <see cref="T:Silverback.Messaging.IEndpoint" />.
            </summary>
            <param name="message">The message to be handled.</param>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="T:Silverback.Messaging.BasicEndpoint">
            <summary>
            A simple <see cref="T:Silverback.Messaging.IEndpoint"/> containing the basic information.
            Can be used as base class for more complex endpoints.
            </summary>
            <seealso cref="T:Silverback.Messaging.IEndpoint" />
        </member>
        <member name="M:Silverback.Messaging.BasicEndpoint.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Silverback.Messaging.BasicEndpoint"/> pointing to the specified topic/queue.
            </summary>
            <param name="name">The queue/topic name.</param>
            <returns></returns>
        </member>
        <member name="P:Silverback.Messaging.BasicEndpoint.BrokerName">
            <summary>
            Gets or sets the name of the broker to be used.
            If not set the default one will be used.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.BasicEndpoint.Name">
            <summary>
            Gets or sets the topic/queue name.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.BasicEndpoint.UseBroker(System.String)">
            <summary>
            Specifies which broker configuration is to be used.
            </summary>
            <param name="brokerName">The name of the broker.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.BasicEndpoint.ValidateConfiguration">
            <summary>
            Called after the fluent configuration is applied, should verify the consistency of the
            configuration.
            </summary>
            <remarks>
            An exception must be thrown if the confgiuration is not conistent.
            </remarks>
        </member>
        <member name="M:Silverback.Messaging.BasicEndpoint.GetBroker">
            <summary>
            Gets the <see cref="T:Silverback.Messaging.Broker.IBroker" /> to be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.BasicEndpoint.GetBroker``1">
            <summary>
            Gets the <see cref="T:Silverback.Messaging.Broker.IBroker" /> to be used casting it to the specified type.
            </summary>
            <typeparam name="TBroker">The type of the broker.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.BasicEndpoint.GetProducer">
            <summary>
            Gets an <see cref="T:Silverback.Messaging.Broker.IProducer" /> instance to produce messages to this endpoint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.BasicEndpoint.GetConsumer">
            <summary>
            Gets an <see cref="T:Silverback.Messaging.Broker.IConsumer" /> instance to consume messages from this enpoint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Broker.Broker">
            <summary>
            The base class for the <see cref="T:Silverback.Messaging.Broker.IBroker"/> implementation.
            </summary>
            <seealso cref="T:Silverback.Messaging.Broker.IBroker" />
        </member>
        <member name="P:Silverback.Messaging.Broker.Broker.Name">
            <summary>
            Gets the configuration name. This is necessary only if working with multiple
            brokers.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Broker.Broker.IsDefault">
            <summary>
            Gets a value indicating whether this configuration is the default one.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Broker.Broker.GetSerializer">
            <summary>
            Gets the <see cref="T:Silverback.Messaging.Serialization.IMessageSerializer" /> to be used to serialize and deserialize the messages
            being sent through the broker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Broker.Broker.GetProducer(Silverback.Messaging.IEndpoint)">
            <summary>
            Gets a new <see cref="T:Silverback.Messaging.Broker.IProducer" /> instance.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Broker.Broker.GetConsumer(Silverback.Messaging.IEndpoint)">
            <summary>
            Gets a new <see cref="T:Silverback.Messaging.Broker.IConsumer" /> instance.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Broker.Broker.WithName(System.String)">
            <summary>
            Set a name to the configuration. Necessary if working with multiple
            brokers.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Broker.Broker.AsDefault">
            <summary>
            Set this as the default configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Broker.Broker.SerializeUsing``1">
            <summary>
            Set the <see cref="T:Silverback.Messaging.Serialization.IMessageSerializer"/> to be used to serialize/deserialize the messages
            sent through the message broker.
            </summary>
            <typeparam name="TSerializer">The type of the serializer.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Broker.Broker.ValidateConfiguration">
            <summary>
            Called after the fluent configuration is applied, should verify the consistency of the 
            configuration.
            </summary>
            <remarks>An exception must be thrown if the confgiuration is not conistent.</remarks>
        </member>
        <member name="T:Silverback.Messaging.Broker.Consumer">
            <summary>
            The default <see cref="T:Silverback.Messaging.Broker.IConsumer"/> implementation.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Broker.Consumer.Endpoint">
            <summary>
            Gets the endpoint.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Broker.Consumer.#ctor(Silverback.Messaging.IEndpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Broker.Consumer" /> class.
            </summary>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:Silverback.Messaging.Broker.Consumer.Consume(System.Action{Silverback.Messaging.Messages.IEnvelope})">
            <summary>
            Start listening to the specified enpoint and consume the messages delivered
            through the message broker.
            </summary>
            <param name="handler">The message handler.</param>
        </member>
        <member name="M:Silverback.Messaging.Broker.Consumer.Consume(System.Action{System.Byte[]})">
            <summary>
            Start listening to the specified enpoint and consume the messages delivered
            through the message broker.
            </summary>
            <param name="handler">The message handler.</param>
        </member>
        <member name="T:Silverback.Messaging.Broker.IBroker">
            <summary>
            The basic interface to interact with the message broker.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Broker.IBroker.Name">
            <summary>
            Gets the configuration name. This is necessary only if working with multiple 
            brokers.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Broker.IBroker.IsDefault">
            <summary>
            Gets a value indicating whether this configuration is the default one.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Broker.IBroker.GetSerializer">
            <summary>
            Gets the <see cref="T:Silverback.Messaging.Serialization.IMessageSerializer"/> to be used to serialize and deserialize the messages
            being sent through the broker.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Broker.IBroker.GetProducer(Silverback.Messaging.IEndpoint)">
            <summary>
            Gets a new <see cref="T:Silverback.Messaging.Broker.IProducer" /> instance.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Broker.IBroker.GetConsumer(Silverback.Messaging.IEndpoint)">
            <summary>
            Gets a new <see cref="T:Silverback.Messaging.Broker.IConsumer" /> instance.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Broker.IConsumer">
            <summary>
            Exposes the methods to receive messages through the message broker.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Broker.IConsumer.Consume(System.Action{Silverback.Messaging.Messages.IEnvelope})">
            <summary>
            Start listening to the specified enpoint and consume the messages delivered
            through the message broker.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="T:Silverback.Messaging.Broker.IProducer">
            <summary>
            Exposes the methods to send messages through over the message broker.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Broker.IProducer.Produce(Silverback.Messaging.Messages.IEnvelope)">
            <summary>
            Sends the specified message through the message broker.
            </summary>
            <param name="envelope">The envelope containing the message to be sent.</param>
        </member>
        <member name="T:Silverback.Messaging.Broker.Producer">
            <summary>
            The default <see cref="T:Silverback.Messaging.Broker.IProducer"/> implementation.
            </summary>
            <seealso cref="T:Silverback.Messaging.Broker.IProducer" />
        </member>
        <member name="P:Silverback.Messaging.Broker.Producer.Endpoint">
            <summary>
            Gets the endpoint.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Broker.Producer.#ctor(Silverback.Messaging.IEndpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Broker.Consumer" /> class.
            </summary>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:Silverback.Messaging.Broker.Producer.Produce(Silverback.Messaging.Messages.IEnvelope)">
            <summary>
            Sends the specified message through the message broker.
            </summary>
            <param name="envelope">The envelope containing the message to be sent.</param>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:Silverback.Messaging.Broker.Producer.Produce(Silverback.Messaging.Messages.IIntegrationMessage,System.Byte[])">
            <summary>
            Sends the specified message through the message broker.
            </summary>
            <param name="message">The original message.</param>
            <param name="serializedMessage">The serialized <see cref="T:Silverback.Messaging.Messages.IEnvelope"/> including the <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage"/>.
            This is what is supposed to be sent through the broker.</param>
        </member>
        <member name="T:Silverback.Messaging.Configuration.BrokersConfig">
            <summary>
            Holds the collection of <see cref="T:Silverback.Messaging.Broker.IBroker"/> for the current instance.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Configuration.BrokersConfig.Instance">
            <summary>
            Gets the current instance of the BrokerConfig.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Configuration.BrokersConfig.Default">
            <summary>
            Gets the default <see cref="T:Silverback.Messaging.Broker.IBroker"/>.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="P:Silverback.Messaging.Configuration.BrokersConfig.Count">
            <summary>
            Gets the configurations count.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BrokersConfig.Add``1(System.Action{``0})">
            <summary>
            Adds the an <see cref="T:Silverback.Messaging.Broker.IBroker"/> of the specified type TBroker.
            </summary>
            <param name="config">The method applying the configuration.</param>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BrokersConfig.Get(System.String)">
            <summary>
            Gets the <see cref="T:Silverback.Messaging.Broker.IBroker"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BrokersConfig.Get``1(System.String)">
            <summary>
            Gets the <see cref="T:Silverback.Messaging.Broker.IBroker" /> with the specified name.
            </summary>
            <typeparam name="TBroker">The type of the broker.</typeparam>
            <param name="name">The name of the broker.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BrokersConfig.GetDefault``1">
            <summary>
            Gets the default <see cref="T:Silverback.Messaging.Broker.IBroker" />.
            </summary>
            <typeparam name="TBroker">The type of the broker.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BrokersConfig.Clear">
            <summary>
            Clears all configurations.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BrokersConfig.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BrokersConfig.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Configuration.BusConfigExtensions">
            <summary>
            Adds some methods to <see cref="T:Silverback.Messaging.Configuration.BusConfig"/> to add inbound and outbound adapters.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfigExtensions.AddOutbound``1(Silverback.Messaging.Configuration.BusConfig,System.Type,Silverback.Messaging.IEndpoint)">
            <summary>
            Attaches the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter"/> to the bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="config">The configuration.</param>
            <param name="adapterType">The type of the adapter to be instanciated to relay the messages.</param>
            <param name="endpoint">The endpoint to be passed to the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfigExtensions.AddOutbound``2(Silverback.Messaging.Configuration.BusConfig,Silverback.Messaging.IEndpoint)">
            <summary>
            Attaches the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter" /> to the bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <typeparam name="TAdapter">The type of the adapter.</typeparam>
            <param name="config">The configuration.</param>
            <param name="endpoint">The endpoint to be passed to the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter" />.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfigExtensions.AddOutbound(Silverback.Messaging.Configuration.BusConfig,System.Type,Silverback.Messaging.IEndpoint)">
            <summary>
            Attaches the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter"/> to the bus.
            </summary>
            <param name="config">The configuration.</param>
            <param name="adapterType">The type of the adapter to be instanciated to relay the messages.</param>
            <param name="endpoint">The endpoint to be passed to the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfigExtensions.AddOutbound``1(Silverback.Messaging.Configuration.BusConfig,Silverback.Messaging.IEndpoint)">
            <summary>
            Attaches the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter" /> to the bus.
            </summary>
            <typeparam name="TAdapter">The type of the adapter.</typeparam>
            <param name="config">The configuration.</param>
            <param name="endpoint">The endpoint to be passed to the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter" />.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfigExtensions.AddInbound(Silverback.Messaging.Configuration.BusConfig,Silverback.Messaging.Adapters.IInboundAdapter,Silverback.Messaging.IEndpoint)">
            <summary>
            Configures the <see cref="T:Silverback.Messaging.Adapters.IInboundAdapter" /> to forward the messages to the internal bus.
            </summary>
            <param name="config">The configuration.</param>
            <param name="adapter">The adapter.</param>
            <param name="endpoint">The endpoint to be passed to the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter" />.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfigExtensions.AddTranslator``3(Silverback.Messaging.Configuration.BusConfig,System.Func{``0,System.Boolean})">
            <summary>
            Configures a <see cref="T:Silverback.Messaging.Adapters.MessageTranslator`2" />.
            </summary>
            <typeparam name="TMessage">The type of the messages.</typeparam>
            <typeparam name="TIntegrationMessage">The type of the integration message.</typeparam>
            <typeparam name="THandler">Type of the <see cref="T:Silverback.Messaging.IMessageHandler`1" /> to be used to handle the messages.</typeparam>
            <param name="config">The configuration.</param>
            <param name="filter">An optional filter to be applied to the published messages.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Configuration.BusConfigExtensions.AddTranslator``2(Silverback.Messaging.Configuration.BusConfig,System.Func{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Configures a <see cref="T:Silverback.Messaging.Adapters.MessageTranslator`2" />.
            </summary>
            <typeparam name="TMessage">The type of the messages.</typeparam>
            <typeparam name="TIntegrationMessage">The type of the integration message.</typeparam>
            <param name="config">The configuration.</param>
            <param name="mapper">The mapper method.</param>
            <param name="filter">An optional filter to be applied to the published messages.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.IEndpoint">
            <summary>
            Contains information to identify the endpoint on the message broker (server address, topic, queue name, ...).
            </summary>
        </member>
        <member name="P:Silverback.Messaging.IEndpoint.Name">
            <summary>
            Gets or sets the topic/queue name.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.IEndpoint.GetBroker">
            <summary>
            Gets the <see cref="T:Silverback.Messaging.Broker.IBroker" /> to be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.IEndpoint.GetBroker``1">
            <summary>
            Gets the <see cref="T:Silverback.Messaging.Broker.IBroker" /> to be used casting it to the specified type.
            </summary>
            <typeparam name="TBroker">The type of the broker.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.IEndpoint.GetProducer">
            <summary>
            Gets an <see cref="T:Silverback.Messaging.Broker.IProducer"/> instance to produce messages to this endpoint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.IEndpoint.GetConsumer">
            <summary>
            Gets an <see cref="T:Silverback.Messaging.Broker.IConsumer"/> instance to consume messages from this enpoint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Messages.Envelope">
            <summary>
            The envelope enclosing the <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage" /> that is sent over a message broker.
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IEnvelope" />
        </member>
        <member name="M:Silverback.Messaging.Messages.Envelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Messages.Envelope"/> class.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Messages.Envelope.#ctor(Silverback.Messaging.Messages.IIntegrationMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.Messages.Envelope"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Silverback.Messaging.Messages.Envelope.Source">
            <summary>
            Gets or sets a string identifying the source of the <see cref="T:Silverback.Messaging.Messages.IMessage" />.
            By default contains the name of the assembly that generated the <see cref="T:Silverback.Messaging.Messages.IMessage" />.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Messages.Envelope.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Messages.Envelope.Create(Silverback.Messaging.Messages.IIntegrationMessage)">
            <summary>
            Creates a new envelope enclosing the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Messages.IEnvelope">
            <summary>
            The envelope enclosing the <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage"/> that is sent over a message broker.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Messages.IEnvelope.Source">
            <summary>
            Gets or sets a string identifying the source of the <see cref="T:Silverback.Messaging.Messages.IMessage"/>.
            It usually contains the name of the microservice that generated the <see cref="T:Silverback.Messaging.Messages.IMessage"/>.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Messages.IEnvelope.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Messages.IIntegrationCommand">
            <summary>
            Represent a command message that is sent to another service through a message broker.
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IMessage" />
        </member>
        <member name="T:Silverback.Messaging.Messages.IIntegrationEvent">
            <summary>
            Represent an event message that is exposed to other services through a message broker.
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IEvent" />
            <seealso cref="T:Silverback.Messaging.Messages.IIntegrationMessage" />
            <seealso cref="T:Silverback.Messaging.Messages.IMessage" />
        </member>
        <member name="T:Silverback.Messaging.Messages.IIntegrationMessage">
            <summary>
            Represent a message that is exposed to other services through a message broker.
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IMessage" />
        </member>
        <member name="P:Silverback.Messaging.Messages.IIntegrationMessage.Id">
            <summary>
            Gets or sets the message unique identifier.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Messages.IIntegrationRequest">
            <summary>
            Reprensent a request message awaiting a response (see <see cref="T:Silverback.Messaging.Messages.IResponse"/>).
            This request is sent to another service through a message broker. 
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IMessage" />
        </member>
        <member name="T:Silverback.Messaging.Messages.IIntegrationResponse">
            <summary>
            Reprensent the response received to an <see cref="T:Silverback.Messaging.Messages.IIntegrationRequest"/>.
            </summary>
            <seealso cref="T:Silverback.Messaging.Messages.IMessage" />
        </member>
        <member name="T:Silverback.Messaging.OutboundMessagesWorker`1">
            <summary>
            Publishes the messages in the outbox queue to the configured message broker.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.OutboundMessagesWorker`1.#ctor(Silverback.Messaging.Repositories.IOutboundMessagesRepository{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.OutboundMessagesWorker`1" /> class.
            </summary>
            <param name="repository">The repository.</param>
        </member>
        <member name="M:Silverback.Messaging.OutboundMessagesWorker`1.SendPendingMessages">
            <summary>
            Sends the pending messages.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.OutboundMessagesWorker`1.SendMessage(Silverback.Messaging.Messages.IIntegrationMessage,Silverback.Messaging.IEndpoint)">
            <summary>
            Sends the specified message to the message broker.
            </summary>
            <param name="message">The original message.</param>
            <param name="serializedMessage">The serialized <see cref="T:Silverback.Messaging.Messages.IEnvelope"/> including the <see cref="T:Silverback.Messaging.Messages.IIntegrationMessage"/>.
            This is what is supposed to be sent through the broker.</param>
            <param name="endpoint">The message broker endpoint.</param>
        </member>
        <member name="T:Silverback.Messaging.OutboundSubscriber`1">
            <summary>
            The standard subscriber used to attach the <see cref="!:IOutboundAdapter&lt;TMessage&gt;"/>, suitable for most cases.
            In more advanced use cases, when a greater degree of flexibility is required, it is advised to create an ad-hoc implementation of <see cref="T:Silverback.Messaging.Subscriber`1"/>. 
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <seealso cref="T:Silverback.Messaging.DefaultSubscriber`1" />
        </member>
        <member name="M:Silverback.Messaging.OutboundSubscriber`1.#ctor(System.IObservable{`0},Silverback.Messaging.ITypeFactory,System.Type,Silverback.Messaging.IEndpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Silverback.Messaging.OutboundSubscriber`1" /> class.
            </summary>
            <param name="messages">The observable stream of messages.</param>
            <param name="typeFactory">The <see cref="T:Silverback.Messaging.ITypeFactory" /> that will be used to get an <see cref="T:Silverback.Messaging.IMessageHandler`1" /> instance to process each received message.</param>
            <param name="handlerType">Type of the <see cref="T:Silverback.Messaging.IMessageHandler`1" /> to be used to handle the messages.</param>
            <param name="endpoint">The endpoint to be passed to the <see cref="T:Silverback.Messaging.Adapters.IOutboundAdapter"/>.</param>
        </member>
        <member name="M:Silverback.Messaging.OutboundSubscriber`1.OnNext(`0)">
            <summary>
            Called when a message is published.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Silverback.Messaging.ReflectionHelper">
            <summary>
            Helps finding the <see cref="T:System.Type"/> from it's qualified name.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.ReflectionHelper.GetType(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> corresponsind to the provided assembly qualified name.
            </summary>
            <param name="assemblyQualifiedName">The assembly qualified name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Silverback.Messaging.Repositories.IInboundMessageEntity">
            <summary>
            The interface for the entity to be stored in the inbox table.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Repositories.IInboundMessageEntity.MessageId">
            <summary>
            Gets or sets the message unique identifier.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Repositories.IInboundMessageEntity.Received">
            <summary>
            Gets or sets the received timestamp.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Repositories.IInboundMessagesRepository`1">
            <summary>
            The repository to access the inbox table.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Silverback.Messaging.Repositories.IInboundMessagesRepository`1.Create">
            <summary>
            Creates a new entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Repositories.IInboundMessagesRepository`1.Add(`0)">
            <summary>
            Adds the specified entity to the inbox.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Silverback.Messaging.Repositories.IInboundMessagesRepository`1.Exists(System.Guid)">
            <summary>
            Returns a boolean value indicating whether a message with the specified Id is already
            stored in the inbox table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Repositories.IInboundMessagesRepository`1.SaveChanges">
            <summary>
            Saves the changes made to the tracked entities.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Repositories.IOutboundMessageEntity">
            <summary>
            The interface for the entity to be stored in the outbox table.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Repositories.IOutboundMessageEntity.MessageId">
            <summary>
            Gets or sets the message unique identifier.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Repositories.IOutboundMessageEntity.MessageType">
            <summary>
            Gets or sets the fully qualified name of the message type.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Repositories.IOutboundMessageEntity.Message">
            <summary>
            Gets or sets the JSON serialized message.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Repositories.IOutboundMessageEntity.EndpointType">
            <summary>
            Gets or sets the fully qualified name of the endpoint.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Repositories.IOutboundMessageEntity.Endpoint">
            <summary>
            Gets or sets the JSON serialized endpoint information.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Repositories.IOutboundMessageEntity.Created">
            <summary>
            Gets or sets the created timestamp.
            </summary>
        </member>
        <member name="P:Silverback.Messaging.Repositories.IOutboundMessageEntity.Sent">
            <summary>
            Gets or sets the sent timestamp.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Repositories.IOutboundMessagesRepository`1">
            <summary>
            The repository to access the outbox table.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Silverback.Messaging.Repositories.IOutboundMessagesRepository`1.Create">
            <summary>
            Creates a new entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Repositories.IOutboundMessagesRepository`1.Add(`0)">
            <summary>
            Adds the specified entity to the outbox.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Silverback.Messaging.Repositories.IOutboundMessagesRepository`1.GetPending">
            <summary>
            Gets the pending messages that needs to be sent to the message broker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Repositories.IOutboundMessagesRepository`1.SaveChanges">
            <summary>
            Saves the changes made to the tracked entities.
            </summary>
        </member>
        <member name="T:Silverback.Messaging.Serialization.IMessageSerializer">
            <summary>
            Serializes and deserializes the messages sent through the broker.
            </summary>
        </member>
        <member name="M:Silverback.Messaging.Serialization.IMessageSerializer.Serialize(Silverback.Messaging.Messages.IEnvelope)">
            <summary>
            Serializes the specified message into a byte array.
            </summary>
            <param name="envelope">The envelope containing the message.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Serialization.IMessageSerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes the specified message from a byte array.
            </summary>
            <param name="message">The serialized message.</param>
            <returns></returns>
        </member>
        <member name="T:Silverback.Messaging.Serialization.JsonMessageSerializer">
            <summary>
            Serializes the message as JSON and then converts them to a UTF8 encoded byte array. 
            </summary>
            <seealso cref="T:Silverback.Messaging.Serialization.IMessageSerializer" />
        </member>
        <member name="M:Silverback.Messaging.Serialization.JsonMessageSerializer.Serialize(Silverback.Messaging.Messages.IEnvelope)">
            <summary>
            Serializes the specified message into a byte array.
            </summary>
            <param name="envelope">The envelope containing the message.</param>
            <returns></returns>
        </member>
        <member name="M:Silverback.Messaging.Serialization.JsonMessageSerializer.Deserialize(System.Byte[])">
            <summary>
            Deserializes the specified message from a byte array.
            </summary>
            <param name="message">The serialized message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">message</exception>
        </member>
    </members>
</doc>
