// Copyright (c) 2020 Sergio Aquilini
// This code is licensed under MIT license (see LICENSE file for details)

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Text;
using Confluent.Kafka;
using Silverback.Tools.Generators.Common;

namespace Silverback.Tools.Generators.KafkaConfigProxies;

internal sealed class BuilderGenerator
{
    private readonly Type _proxiedType;

    private readonly string _generatedClassName;

    private readonly bool _isChildType;

    private readonly StringBuilder _stringBuilder = new();

    public BuilderGenerator(Type proxiedType)
    {
        _proxiedType = proxiedType;
        _isChildType = _proxiedType != typeof(ClientConfig);
        _generatedClassName = _isChildType ? $"Kafka{_proxiedType.Name}urationBuilder" : "KafkaClientConfigurationBuilder";
    }

    public string Generate()
    {
        if (!_isChildType)
        {
            GenerateInterfaceHeading();
            MapInterfaceProperties();
            GenerateBasicFooter();

            _stringBuilder.AppendLine();

            GenerateClientsBuilderClassHeading();
            MapClientsBuilderClassProperties();
            GenerateBasicFooter();

            _stringBuilder.AppendLine();
        }

        GenerateClassHeading();
        MapClassProperties();
        GenerateBasicFooter();

        return _stringBuilder.ToString();
    }

    private static bool MustBeInternal(string propertyName) =>
        propertyName == "EnableAutoCommit" ||
        propertyName == "EnablePartitionEof" ||
        propertyName == "AllowAutoCreateTopics" ||
        propertyName == "EnableDeliveryReports" ||
        propertyName == "EnableIdempotence";

    private void GenerateClassHeading()
    {
        _stringBuilder.AppendLine("/// <content>");
        _stringBuilder.AppendLine(
            _isChildType
                ? $"///     The autogenerated part of the <see cref=\"{_generatedClassName}\" /> class."
                : $"///     The autogenerated part of the <see cref=\"{_generatedClassName}{{TClientConfig,TBuilder}}\" /> class.");
        _stringBuilder.AppendLine("/// </content>");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1649\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1402\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"CA1200\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1623\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1629\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1625:Element documentation should not be copied and pasted\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine(
            _isChildType
                ? $"public partial class {_generatedClassName}"
                : $"public partial class {_generatedClassName}<TClientConfig, TBuilder> : IKafkaClientConfigurationBuilder");
        _stringBuilder.AppendLine("{");
    }

    private void GenerateInterfaceHeading()
    {
        _stringBuilder.AppendLine("/// <summary>");
        _stringBuilder.AppendLine("///     Builds the <see cref=\"KafkaProducerConfiguration\" /> or <see cref=\"KafkaConsumerConfiguration\" />.");
        _stringBuilder.AppendLine("/// </summary>");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1649\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1402\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"CA1200\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1623\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1629\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1625:Element documentation should not be copied and pasted\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.OrderingRules\", \"SA1201:Elements should appear in the correct order\", Justification = \"Autogenerated\")]");
        _stringBuilder.AppendLine($"internal interface I{_generatedClassName}");
        _stringBuilder.AppendLine("{");
    }

    private void GenerateClientsBuilderClassHeading()
    {
        _stringBuilder.AppendLine("/// <content>");
        _stringBuilder.AppendLine("///     The autogenerated part of the <see cref=\"KafkaClientsConfigurationBuilder\" /> class.");
        _stringBuilder.AppendLine("/// </content>");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1649\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1402\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"CA1200\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1623\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1629\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1625:Element documentation should not be copied and pasted\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("public partial class KafkaClientsConfigurationBuilder");
        _stringBuilder.AppendLine("{");
    }

    [SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "False positive, it makes no sense")]
    private void MapClassProperties()
    {
        IEnumerable<PropertyInfo> properties =
            ReflectionHelper.GetProperties(_proxiedType, !_isChildType)
                .Where(
                    property => property.Name != "EnableAutoOffsetStore" &&
                                property.Name != "GroupId");

        foreach (PropertyInfo property in properties)
        {
            string propertyType = ReflectionHelper.GetTypeString(property.PropertyType, true);
            string valueVariableName = property.Name.ToCamelCase();
            string visibility = MustBeInternal(property.Name) ? "internal" : "public";

            if (!_isChildType)
            {
                _stringBuilder.AppendLine($"    /// <inheritdoc cref=\"IKafkaClientConfigurationBuilder.With{property.Name}\" />");
                _stringBuilder.Append($"    void IKafkaClientConfigurationBuilder.With{property.Name}({propertyType} {valueVariableName})");
                _stringBuilder.AppendLine($" => With{property.Name}({valueVariableName});");
            }

            WriteMethodSummary(property, valueVariableName);

            _stringBuilder.AppendLine(
                _isChildType
                    ? $"    {visibility} {_generatedClassName} With{property.Name}({propertyType} {valueVariableName})"
                    : $"    {visibility} TBuilder With{property.Name}({propertyType} {valueVariableName})");
            _stringBuilder.AppendLine("    {");
            _stringBuilder.AppendLine($"        ClientConfig.{property.Name} = {valueVariableName};");
            _stringBuilder.AppendLine("        return This;");
            _stringBuilder.AppendLine("    }");
            _stringBuilder.AppendLine();
        }
    }

    private void MapInterfaceProperties()
    {
        IEnumerable<PropertyInfo> properties =
            ReflectionHelper.GetProperties(_proxiedType, !_isChildType)
                .Where(property => property.Name != "EnableAutoOffsetStore");

        foreach (PropertyInfo property in properties)
        {
            string propertyType = ReflectionHelper.GetTypeString(property.PropertyType, true);
            string valueVariableName = property.Name.ToCamelCase();

            WriteMethodSummary(property, valueVariableName, false);

            _stringBuilder.AppendLine($"    void With{property.Name}({propertyType} {valueVariableName});");
            _stringBuilder.AppendLine();
        }
    }

    private void MapClientsBuilderClassProperties()
    {
        IEnumerable<PropertyInfo> properties =
            ReflectionHelper.GetProperties(_proxiedType, !_isChildType)
                .Where(
                    property => property.Name != "EnableAutoOffsetStore" &&
                                property.Name != "ClientId");

        foreach (PropertyInfo property in properties)
        {
            string propertyType = ReflectionHelper.GetTypeString(property.PropertyType, true);
            string valueVariableName = property.Name.ToCamelCase();

            WriteMethodSummary(property, valueVariableName);

            _stringBuilder.AppendLine($"    public KafkaClientsConfigurationBuilder With{property.Name}({propertyType} {valueVariableName})");
            _stringBuilder.AppendLine("    {");
            _stringBuilder.AppendLine($"        _sharedConfigurationActions.Add(builder => builder.With{property.Name}({valueVariableName}));");
            _stringBuilder.AppendLine("        return this;");
            _stringBuilder.AppendLine("    }");
            _stringBuilder.AppendLine();
        }
    }

    private void WriteMethodSummary(PropertyInfo property, string valueVariableName, bool hasReturnValue = true)
    {
        SummaryText summaryText = DocumentationHelper.GetSummary(property);

        _stringBuilder.AppendLine("    /// <summary>");
        _stringBuilder.Append(summaryText.Main);
        _stringBuilder.AppendLine("    /// </summary>");
        _stringBuilder.AppendLine($"    /// <param name=\"{valueVariableName}\">");
        _stringBuilder.Append(summaryText.Main);
        _stringBuilder.AppendLine("    /// </param>");

        if (hasReturnValue)
        {
            _stringBuilder.AppendLine("    /// <returns>");
            _stringBuilder.AppendLine("    /// The client configuration builder so that additional calls can be chained.");
            _stringBuilder.AppendLine("    /// </returns>");
        }
    }

    private void GenerateBasicFooter()
    {
        _stringBuilder.AppendLine("}");
    }
}
