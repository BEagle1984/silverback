// Copyright (c) 2024 Sergio Aquilini
// This code is licensed under MIT license (see LICENSE file for details)

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using Silverback.Tools.Generators.Common;

namespace Silverback.Tools.Generators.KafkaConfigProxies;

public class ParentBuilderGenerator : BuilderGenerator
{
    public ParentBuilderGenerator(Type proxiedType)
        : base(proxiedType, "KafkaClientConfigurationBuilder")
    {
    }

    public override string Generate()
    {
        GenerateInterfaceHeading();
        MapInterfaceProperties();
        GenerateBasicFooter();

        StringBuilder.AppendLine();

        GenerateClientsBuilderClassHeading();
        MapClientsBuilderClassProperties();
        GenerateBasicFooter();

        StringBuilder.AppendLine();

        return base.Generate();
    }

    protected override string GetClassSummary() => $"The autogenerated part of the <see cref=\"{GeneratedClassName}{{TClientConfig,TBuilder}}\" /> class.";

    protected override string GetClassSignature() => $"public partial class {GeneratedClassName}<TClientConfig, TBuilder> : IKafkaClientConfigurationBuilder";

    [SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "False positive, it makes no sense")]
    protected override void MapClassProperties()
    {
        IEnumerable<PropertyInfo> properties =
            ReflectionHelper.GetProperties(ProxiedType, true)
                .Where(property => !IgnoredProperties.Contains(property));

        foreach (PropertyInfo property in properties)
        {
            string propertyType = ReflectionHelper.GetTypeString(property.PropertyType, true);
            string valueVariableName = property.Name.ToCamelCase();

            StringBuilder.Append($"    void IKafkaClientConfigurationBuilder.With{property.Name}({propertyType} {valueVariableName})");
            StringBuilder.AppendLine($" => With{property.Name}({valueVariableName});");
            StringBuilder.AppendLine();
            StringBuilder.AppendLine($"    public partial TBuilder With{property.Name}({propertyType} {valueVariableName})");
            StringBuilder.AppendLine("    {");
            StringBuilder.AppendLine($"        ClientConfig.{property.Name} = {valueVariableName};");
            StringBuilder.AppendLine("        return This;");
            StringBuilder.AppendLine("    }");
            StringBuilder.AppendLine();
        }
    }

    private void GenerateInterfaceHeading()
    {
        StringBuilder.AppendLine("/// <summary>");
        StringBuilder.AppendLine("///     Builds the <see cref=\"KafkaProducerConfiguration\" /> or <see cref=\"KafkaConsumerConfiguration\" />.");
        StringBuilder.AppendLine("/// </summary>");
        StringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.MaintainabilityRules\", \"SA1402:File may only contain a single type\", Justification = \"Autogenerated all at once\")]");
        StringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1600:Elements should be documented\", Justification = \"Internal interface\")]");
        StringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.OrderingRules\", \"SA1201:Elements should appear in the correct order\", Justification = \"Autogenerated\")]");
        StringBuilder.AppendLine($"internal interface I{GeneratedClassName}");
        StringBuilder.AppendLine("{");
    }

    private void GenerateClientsBuilderClassHeading()
    {
        StringBuilder.AppendLine("/// <content>");
        StringBuilder.AppendLine("///     The autogenerated part of the <see cref=\"KafkaClientsConfigurationBuilder\" /> class.");
        StringBuilder.AppendLine("/// </content>");
        StringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.MaintainabilityRules\", \"SA1402:File may only contain a single type\", Justification = \"Autogenerated all at once\")]");
        StringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1600:Elements should be documented\", Justification = \"Documented in other partial\")]");
        StringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1601:Partial elements should be documented\", Justification = \"Autogenerated\")]");
        StringBuilder.AppendLine("public partial class KafkaClientsConfigurationBuilder");
        StringBuilder.AppendLine("{");
    }

    private void MapInterfaceProperties()
    {
        IEnumerable<PropertyInfo> properties =
            ReflectionHelper.GetProperties(ProxiedType, true)
                .Where(property => !IgnoredProperties.Contains(property));

        foreach (PropertyInfo property in properties)
        {
            string propertyType = ReflectionHelper.GetTypeString(property.PropertyType, true);
            string valueVariableName = property.Name.ToCamelCase();

            StringBuilder.AppendLine($"    void With{property.Name}({propertyType} {valueVariableName});");
            StringBuilder.AppendLine();
        }
    }

    private void MapClientsBuilderClassProperties()
    {
        IEnumerable<PropertyInfo> properties =
            ReflectionHelper.GetProperties(ProxiedType, true)
                .Where(
                    property => !IgnoredProperties.Contains(property) &&
                                property.Name != "ClientId");

        foreach (PropertyInfo property in properties)
        {
            string propertyType = ReflectionHelper.GetTypeString(property.PropertyType, true);
            string valueVariableName = property.Name.ToCamelCase();

            StringBuilder.AppendLine($"    public partial KafkaClientsConfigurationBuilder With{property.Name}({propertyType} {valueVariableName})");
            StringBuilder.AppendLine("    {");
            StringBuilder.AppendLine($"        _sharedConfigurationActions.Add(builder => builder.With{property.Name}({valueVariableName}));");
            StringBuilder.AppendLine("        return this;");
            StringBuilder.AppendLine("    }");
            StringBuilder.AppendLine();
        }
    }
}
