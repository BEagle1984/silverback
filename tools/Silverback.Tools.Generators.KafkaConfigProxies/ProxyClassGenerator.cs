// Copyright (c) 2025 Sergio Aquilini
// This code is licensed under MIT license (see LICENSE file for details)

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Text;
using Confluent.Kafka;
using Silverback.Tools.Generators.Common;

namespace Silverback.Tools.Generators.KafkaConfigProxies;

public class ProxyClassGenerator
{
    public ProxyClassGenerator(Type proxiedType)
        : this(proxiedType, $"Kafka{proxiedType.Name}uration")
    {
    }

    protected ProxyClassGenerator(Type proxiedType, string generatedClassName)
    {
        ProxiedType = proxiedType;
        GeneratedClassName = generatedClassName;
    }

    protected Type ProxiedType { get; }

    protected string GeneratedClassName { get; }

    protected StringBuilder StringBuilder { get; } = new();

    public string Generate()
    {
        GenerateHeading();
        MapProperties();
        GenerateFooter();

        return StringBuilder.ToString();
    }

    protected virtual string GetClassSummary() => $"The autogenerated part of the <see cref=\"{GeneratedClassName}\" /> class.";

    protected virtual string GetClassSignature() => $"public partial record {GeneratedClassName}";

    [SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "Makes no sense")]
    protected virtual void MapProperties()
    {
        IEnumerable<PropertyInfo> properties =
            ReflectionHelper.GetProperties(ProxiedType, false)
                .Where(
                    property => !IgnoredProperties.Contains(property)
                                && property.Name != "GroupId");

        StringBuilder propertiesStringBuilder = new();
        StringBuilder mapMethodStringBuilder = new();

        foreach (PropertyInfo property in properties)
        {
            string propertyType = ReflectionHelper.GetTypeString(property.PropertyType);

            propertiesStringBuilder.AppendSummary(property);

            if (property.Name.EndsWith("Url") && property.PropertyType == typeof(string))
                propertiesStringBuilder.AppendLine("    [SuppressMessage(\"Design\", \"CA1056:URI-like properties should not be strings\", Justification = \"Generated according to wrapped class.\")]");

            propertiesStringBuilder.AppendLine($"    public {propertyType} {property.Name} {{ get; init; }}");
            propertiesStringBuilder.AppendLine();

            if (property.Name == nameof(ProducerConfig.DeliveryReportFields))
            {
                mapMethodStringBuilder.AppendLine();
                mapMethodStringBuilder.AppendLine($"        if ({property.Name} != null)");
                mapMethodStringBuilder.AppendLine($"            confluentConfig.{property.Name} = {property.Name};");
                mapMethodStringBuilder.AppendLine();
            }
            else
            {
                mapMethodStringBuilder.AppendLine($"        confluentConfig.{property.Name} = {property.Name};");
            }
        }

        StringBuilder.Append(propertiesStringBuilder);
        StringBuilder.AppendLine("    /// <summary>");
        StringBuilder.AppendLine("    ///     Maps to the Confluent client configuration.");
        StringBuilder.AppendLine("    /// </summary>");
        StringBuilder.AppendLine("    /// <returns>");
        StringBuilder.AppendLine("    ///     The Confluent client configuration.");
        StringBuilder.AppendLine("    /// </returns>");
        StringBuilder.AppendLine($"    protected override {ProxiedType.FullName} MapCore()");
        StringBuilder.AppendLine("    {");
        StringBuilder.AppendLine($"        {ProxiedType.FullName} confluentConfig = base.MapCore();");
        StringBuilder.AppendLine();
        StringBuilder.Append(mapMethodStringBuilder);
        StringBuilder.AppendLine();
        StringBuilder.AppendLine("        return confluentConfig;");
        StringBuilder.AppendLine("    }");
    }

    private void GenerateHeading()
    {
        StringBuilder.AppendLine("/// <content>");
        StringBuilder.AppendLine($"///     {GetClassSummary()}");
        StringBuilder.AppendLine("/// </content>");
        StringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.MaintainabilityRules\", \"SA1402:File may only contain a single type\", Justification = \"Autogenerated all at once\")]");
        StringBuilder.AppendLine("[SuppressMessage(\"Design\", \"CA1044:Properties should not be write only\", Justification = \"Accessors generated according to wrapped class\")]");
        StringBuilder.AppendLine(GetClassSignature());
        StringBuilder.AppendLine("{");
        StringBuilder.AppendLine();
    }

    private void GenerateFooter() => StringBuilder.AppendLine("}");
}
