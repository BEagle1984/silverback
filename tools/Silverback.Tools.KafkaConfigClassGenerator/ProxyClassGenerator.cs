// Copyright (c) 2020 Sergio Aquilini
// This code is licensed under MIT license (see LICENSE file for details)

using System;
using System.Reflection;
using System.Text;
using Confluent.Kafka;

namespace Silverback.Tools.KafkaConfigClassGenerator;

internal sealed class ProxyClassGenerator
{
    private readonly Type _proxiedType;

    private readonly string _generatedClassName;

    private readonly string? _baseClassName;

    private readonly string _proxiedTypeName;

    private readonly StringBuilder _stringBuilder = new();

    public ProxyClassGenerator(Type proxiedType)
    {
        _proxiedType = proxiedType;

        _proxiedTypeName = _proxiedType.Name;

        _generatedClassName = _proxiedType == typeof(ClientConfig)
            ? "KafkaClientConfiguration"
            : $"KafkaClient{_proxiedTypeName}uration";
        _baseClassName = proxiedType == typeof(ClientConfig) ? null : "KafkaClientConfiguration";
    }

    public string Generate()
    {
        GenerateHeading();
        MapProperties();
        GenerateFooter();

        return _stringBuilder.ToString();
    }

    private void GenerateHeading()
    {
        _stringBuilder.AppendLine("/// <content>");
        _stringBuilder.AppendLine($"///     The autogenerated part of the <see cref=\"{_generatedClassName}\" /> class.");
        _stringBuilder.AppendLine("/// </content>");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1649\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1402\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"CA1200\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1623\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1629\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"CA1044\", Justification = \"Accessors generated according to wrapped class\")]");

        _stringBuilder.AppendLine(
            _baseClassName == null
                ? $"public partial record {_generatedClassName} : IValidatableEndpointSettings"
                : $"public partial record {_generatedClassName} : {_baseClassName}");

        _stringBuilder.AppendLine("{");
        _stringBuilder.AppendLine();
    }

    private void MapProperties()
    {
        foreach (PropertyInfo property in ReflectionHelper.GetProperties(_proxiedType, _baseClassName == null))
        {
            string propertyType = ReflectionHelper.GetPropertyTypeString(property.PropertyType);

            WritePropertySummary(property);

            _stringBuilder.AppendLine($"    public {propertyType} {property.Name}");
            _stringBuilder.AppendLine("    {");

            if (property.GetGetMethod() != null)
                _stringBuilder.AppendLine($"        get => _clientConfig.{property.Name};");

            if (property.Name == "DeliveryReportFields")
            {
                _stringBuilder.AppendLine("        init");
                _stringBuilder.AppendLine("        {");
                _stringBuilder.AppendLine("            if (value != null)");
                _stringBuilder.AppendLine($"                _clientConfig.{property.Name} = value;");
                _stringBuilder.AppendLine("        }");
            }
            else if (property.GetSetMethod() != null)
            {
                _stringBuilder.AppendLine($"        init => _clientConfig.{property.Name} = value;");
            }

            _stringBuilder.AppendLine("    }");
            _stringBuilder.AppendLine();
        }
    }

    private void WritePropertySummary(PropertyInfo property)
    {
        SummaryText summaryText = ReflectionHelper.GetSummary(property);

        _stringBuilder.AppendLine("    /// <summary>");
        _stringBuilder.Append(summaryText.Main);

        if (summaryText.DefaultInfo != null)
            _stringBuilder.AppendLine(summaryText.DefaultInfo);

        if (summaryText.Importance != null)
            _stringBuilder.AppendLine(summaryText.Importance);

        _stringBuilder.AppendLine("    /// </summary>");

        if (summaryText.Remarks != null)
        {
            _stringBuilder.AppendLine("    /// <remarks>");
            _stringBuilder.Append(summaryText.Remarks);
            _stringBuilder.AppendLine("    /// </remarks>");
        }
    }

    private void GenerateFooter()
    {
        _stringBuilder.AppendLine("}");
    }
}
