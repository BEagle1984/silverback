// Copyright (c) 2020 Sergio Aquilini
// This code is licensed under MIT license (see LICENSE file for details)

using System;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using System.Text;
using Confluent.Kafka;

namespace Silverback.Tools.KafkaConfigClassGenerator;

internal sealed class BuilderGenerator
{
    private readonly Type _proxiedType;

    private readonly string _generatedClassName;

    private readonly string? _baseClassName;

    private readonly StringBuilder _stringBuilder = new();

    public BuilderGenerator(Type proxiedType)
    {
        _proxiedType = proxiedType;

        _generatedClassName = _proxiedType == typeof(ClientConfig)
            ? "KafkaClientConfigurationBuilder"
            : $"KafkaClient{_proxiedType.Name}urationBuilder";
        _baseClassName = proxiedType == typeof(ClientConfig) ? null : "KafkaClientConfigurationBuilder";
    }

    public string Generate()
    {
        GenerateHeading();
        MapProperties();
        GenerateFooter();

        return _stringBuilder.ToString();
    }

    private static bool MustBeInternal(string propertyName) =>
        propertyName == "EnableAutoCommit" ||
        propertyName == "EnablePartitionEof" ||
        propertyName == "AllowAutoCreateTopics" ||
        propertyName == "EnableDeliveryReports" ||
        propertyName == "EnableIdempotence";

    private void GenerateHeading()
    {
        if (_baseClassName == null)
        {
            _stringBuilder.AppendLine("/// <summary>");
            _stringBuilder.AppendLine("///     The base class for all Kafka client configuration builders.");
            _stringBuilder.AppendLine("/// </summary>");
            _stringBuilder.AppendLine("/// <typeparam name=\"TBuilder\">");
            _stringBuilder.AppendLine("///     The actual builder type.");
            _stringBuilder.AppendLine("/// </typeparam>");
        }
        else
        {
            _stringBuilder.AppendLine("/// <content>");
            _stringBuilder.AppendLine($"///     The autogenerated part of the <see cref=\"{_generatedClassName}\" /> class.");
            _stringBuilder.AppendLine("/// </content>");
        }

        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1649\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1402\", Justification = \"Autogenerated all at once\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"CA1200\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1623\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1629\", Justification = \"Summary copied from wrapped class\")]");
        _stringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1625:Element documentation should not be copied and pasted\", Justification = \"Summary copied from wrapped class\")]");

        if (_baseClassName == null)
        {
            _stringBuilder.AppendLine($"public abstract class {_generatedClassName}<TBuilder>");
            _stringBuilder.AppendLine($"    where TBuilder : {_generatedClassName}<TBuilder>");
            _stringBuilder.AppendLine("{");
            _stringBuilder.AppendLine("    private readonly ClientConfig _clientConfig;");
            _stringBuilder.AppendLine();
            _stringBuilder.AppendLine("    /// <summary>");
            _stringBuilder.AppendLine($"    ///     Initializes a new instance of the <see cref=\"{_generatedClassName}{{TBuilder}}\" /> class.");
            _stringBuilder.AppendLine("    /// </summary>");
            _stringBuilder.AppendLine("    /// <param name=\"clientConfig\">");
            _stringBuilder.AppendLine("    ///     The <see cref=\"ClientConfig\"/> to be used to initialize the builder.");
            _stringBuilder.AppendLine("    /// </param>");
            _stringBuilder.AppendLine($"    protected {_generatedClassName}(ClientConfig clientConfig)");
            _stringBuilder.AppendLine("    {");
            _stringBuilder.AppendLine("        _clientConfig = clientConfig;");
            _stringBuilder.AppendLine("    }");
            _stringBuilder.AppendLine();
            _stringBuilder.AppendLine("    /// <summary>");
            _stringBuilder.AppendLine("    ///     Gets this instance.");
            _stringBuilder.AppendLine("    /// </summary>");
            _stringBuilder.AppendLine("    /// <remarks>");
            _stringBuilder.AppendLine("    ///     This is necessary to work around casting in the base classes.");
            _stringBuilder.AppendLine("    /// </remarks>");
            _stringBuilder.AppendLine("    protected abstract TBuilder This { get; }");
            _stringBuilder.AppendLine();
        }
        else
        {
            _stringBuilder.AppendLine($"public partial class {_generatedClassName} : {_baseClassName}<{_generatedClassName}>");
            _stringBuilder.AppendLine("{");
            _stringBuilder.AppendLine();
        }
    }

    [SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "False positive, it makes no sense")]
    private void MapProperties()
    {
        foreach (PropertyInfo property in ReflectionHelper.GetProperties(_proxiedType, _baseClassName == null))
        {
            string propertyType = ReflectionHelper.GetPropertyTypeString(property.PropertyType);
            string valueVariableName = $"{property.Name[..1].ToLowerInvariant()}{property.Name[1..]}";
            string visibility = MustBeInternal(property.Name) ? "internal" : "public";

            WriteMethodSummary(property, valueVariableName);

            _stringBuilder.AppendLine(
                _baseClassName == null
                    ? $"    {visibility} TBuilder With{property.Name}({propertyType} {valueVariableName})"
                    : $"    {visibility} {_generatedClassName} With{property.Name}({propertyType} {valueVariableName})");
            _stringBuilder.AppendLine("    {");
            _stringBuilder.AppendLine($"        _clientConfig.{property.Name} = {valueVariableName};");
            _stringBuilder.AppendLine("        return This;");
            _stringBuilder.AppendLine("    }");
            _stringBuilder.AppendLine();
        }
    }

    private void WriteMethodSummary(PropertyInfo property, string valueVariableName)
    {
        SummaryText summaryText = ReflectionHelper.GetSummary(property);

        _stringBuilder.AppendLine("    /// <summary>");
        _stringBuilder.Append(summaryText.Main);
        _stringBuilder.AppendLine("    /// </summary>");
        _stringBuilder.AppendLine($"    /// <param name=\"{valueVariableName}\">");
        _stringBuilder.Append(summaryText.Main);
        _stringBuilder.AppendLine("    /// </param>");

        _stringBuilder.AppendLine("    /// <returns>");
        _stringBuilder.AppendLine("    /// The client configuration builder so that additional calls can be chained.");
        _stringBuilder.AppendLine("    /// </returns>");
    }

    private void GenerateFooter()
    {
        _stringBuilder.AppendLine("}");

        if (_baseClassName == null)
        {
            _stringBuilder.AppendLine();
            _stringBuilder.AppendLine("/// <content>");
            _stringBuilder.AppendLine($"///     The autogenerated part of the <see cref=\"{_generatedClassName}\" /> class.");
            _stringBuilder.AppendLine("/// </content>");
            _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1649\", Justification = \"Autogenerated all at once\")]");
            _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1402\", Justification = \"Autogenerated all at once\")]");
            _stringBuilder.AppendLine("[SuppressMessage(\"\", \"CA1200\", Justification = \"Summary copied from wrapped class\")]");
            _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1623\", Justification = \"Summary copied from wrapped class\")]");
            _stringBuilder.AppendLine("[SuppressMessage(\"\", \"SA1629\", Justification = \"Summary copied from wrapped class\")]");
            _stringBuilder.AppendLine("[SuppressMessage(\"StyleCop.CSharp.DocumentationRules\", \"SA1625:Element documentation should not be copied and pasted\", Justification = \"Summary copied from wrapped class\")]");
            _stringBuilder.AppendLine($"public partial class {_generatedClassName} : {_generatedClassName}<{_generatedClassName}>");
            _stringBuilder.AppendLine("{");
            _stringBuilder.AppendLine("}");
        }
    }
}
