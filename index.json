{
  "about.html": {
    "href": "about.html",
    "title": "About | Silverback",
    "keywords": "About Author Silverback is an open-source project maintained by Sergio Aquilini (BEagle1984 on GitHub). GitHub LinkedIn Personal E-Mail Project E-Mail License The code is licensed under MIT license (see LICENSE file for details). Credits Silverback uses the following libraries under the hood: Rx.Net Json.NET Confluent's .NET Client for Apache Kafka MQTTNet RabbitMQ .NET Client Special Thanks A very big thank you to all the contributors and especially to my friends and colleagues: Fabio for the help with Kafka Laurent for constantly challenging, pushing and bringing new ideas and feedbacks Marc for his contributions and the valuable constant feedbacks and ideas"
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddBrokerExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddBrokerExtensions.html",
    "title": "Class BrokerOptionsBuilderAddBrokerExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddBrokerExtensions Adds the AddBroker method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddBrokerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddBrokerExtensions Methods | Improve this doc View source AddBroker<TBroker>(IBrokerOptionsBuilder) Adds the specified IBroker implementation to allow producing and consuming messages. Declaration public static IBrokerOptionsBuilder AddBroker<TBroker>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TBroker : class, IBroker Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TBroker The type of the IBroker implementation to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddInboundLogExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddInboundLogExtensions.html",
    "title": "Class BrokerOptionsBuilderAddInboundLogExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddInboundLogExtensions Adds the AddInboundLog and related methods to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddInboundLogExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddInboundLogExtensions Methods | Improve this doc View source AddInboundLog<TInboundLog>(IBrokerOptionsBuilder) Adds the necessary services to enable the LogExactlyOnceStrategy . The LogExactlyOnceStrategy stores uses an IInboundLog to keep track of to keep track of each processed message and guarantee that each one is processed only once. Declaration public static IBrokerOptionsBuilder AddInboundLog<TInboundLog>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TInboundLog : class, IInboundLog Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TInboundLog The type of the IInboundLog to be used. | Improve this doc View source AddInboundLogDatabaseTable(IBrokerOptionsBuilder) Adds the necessary services to enable the LogExactlyOnceStrategy using a database table as store. The LogExactlyOnceStrategy stores uses an IInboundLog to keep track of to keep track of each processed message and guarantee that each one is processed only once. Declaration public static IBrokerOptionsBuilder AddInboundLogDatabaseTable(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. | Improve this doc View source AddInMemoryInboundLog(IBrokerOptionsBuilder) Adds the necessary services to enable the LogExactlyOnceStrategy storing the messages identifiers in memory. The LogExactlyOnceStrategy stores uses an IInboundLog to keep track of to keep track of each processed message and guarantee that each one is processed only once. Declaration public static IBrokerOptionsBuilder AddInMemoryInboundLog(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddMockedMqttExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddMockedMqttExtensions.html",
    "title": "Class BrokerOptionsBuilderAddMockedMqttExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddMockedMqttExtensions Adds the AddMockedMqtt method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddMockedMqttExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public static class BrokerOptionsBuilderAddMockedMqttExtensions Methods | Improve this doc View source AddMockedMqtt(IBrokerOptionsBuilder, Action<IMockedMqttOptionsBuilder>) Registers Apache Mqtt as message broker but replaces the MQTT connectivity based on MQTTnet with a mocked in-memory message broker that more or less replicates the MQTT broker behavior. Declaration public static IBrokerOptionsBuilder AddMockedMqtt(this IBrokerOptionsBuilder brokerOptionsBuilder, Action<IMockedMqttOptionsBuilder> optionsAction = null) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Action < IMockedMqttOptionsBuilder > optionsAction Configures the mock options. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOffsetStoreExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOffsetStoreExtensions.html",
    "title": "Class BrokerOptionsBuilderAddOffsetStoreExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddOffsetStoreExtensions Adds the AddOffsetStore and related methods to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddOffsetStoreExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddOffsetStoreExtensions Methods | Improve this doc View source AddInMemoryOffsetStore(IBrokerOptionsBuilder) Adds the necessary services to enable the OffsetStoreExactlyOnceStrategy storing the offsets in memory. The OffsetStoreExactlyOnceStrategy stores uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration public static IBrokerOptionsBuilder AddInMemoryOffsetStore(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. | Improve this doc View source AddOffsetStore<TOffsetStore>(IBrokerOptionsBuilder) Adds the necessary services to enable the OffsetStoreExactlyOnceStrategy . The OffsetStoreExactlyOnceStrategy stores uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration public static IBrokerOptionsBuilder AddOffsetStore<TOffsetStore>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TOffsetStore : class, IOffsetStore Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TOffsetStore The type of the IOffsetStore to be used. | Improve this doc View source AddOffsetStoreDatabaseTable(IBrokerOptionsBuilder) Adds the necessary services to enable the OffsetStoreExactlyOnceStrategy using a database table as store. The OffsetStoreExactlyOnceStrategy stores uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration public static IBrokerOptionsBuilder AddOffsetStoreDatabaseTable(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOutboxExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOutboxExtensions.html",
    "title": "Class BrokerOptionsBuilderAddOutboxExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddOutboxExtensions Adds the AddOutbox and related methods to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddOutboxExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddOutboxExtensions Methods | Improve this doc View source AddOutbox<TOutbox>(IBrokerOptionsBuilder) Adds the necessary services to enable the OutboxProduceStrategy . The OutboxProduceStrategy stores the outbound messages into an intermediate outbox, participating in the database transaction. The outbound messages become therefore transactional with the side effects on the local database. Declaration public static IBrokerOptionsBuilder AddOutbox<TOutbox>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TOutbox : class, IOutboxWriter, IOutboxReader Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TOutbox The type implementing both the IOutboxWriter and the IOutboxReader interfaces. | Improve this doc View source AddOutbox<TOutboxWriter, TOutboxReader>(IBrokerOptionsBuilder) Adds the necessary services to enable the OutboxProduceStrategy . The OutboxProduceStrategy stores the outbound messages into an intermediate outbox, participating in the database transaction. The outbound messages become therefore transactional with the side effects on the local database. Declaration public static IBrokerOptionsBuilder AddOutbox<TOutboxWriter, TOutboxReader>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TOutboxWriter : class, IOutboxWriter where TOutboxReader : class, IOutboxReader Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TOutboxWriter The type of the IOutboxWriter to be used. TOutboxReader The type of the IOutboxReader to be used. | Improve this doc View source AddOutboxDatabaseTable(IBrokerOptionsBuilder) Adds the necessary services to enable the OutboxProduceStrategy using a database table as outbox. The OutboxProduceStrategy stores the outbound messages into an intermediate outbox, participating in the database transaction. The outbound messages become therefore transactional with the side effects on the local database. Declaration public static IBrokerOptionsBuilder AddOutboxDatabaseTable(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOutboxWorkerExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOutboxWorkerExtensions.html",
    "title": "Class BrokerOptionsBuilderAddOutboxWorkerExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddOutboxWorkerExtensions Adds the AddOutboxWorker and related methods to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddOutboxWorkerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddOutboxWorkerExtensions Methods | Improve this doc View source AddOutboxWorker(IBrokerOptionsBuilder, Nullable<TimeSpan>, Boolean, Int32, DistributedLockSettings) Adds an OutboxWorker to publish the messages stored in the outbox to the configured broker. Declaration public static IBrokerOptionsBuilder AddOutboxWorker(this IBrokerOptionsBuilder brokerOptionsBuilder, TimeSpan? interval = default(TimeSpan? ), bool enforceMessageOrder = true, int batchSize = 1000, DistributedLockSettings distributedLockSettings = null) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Nullable < System.TimeSpan > interval The interval between each run. The default is 500ms. System.Boolean enforceMessageOrder If set to true the message order will be ensured, retrying the same message until it can be successfully produced. System.Int32 batchSize The number of messages to be loaded and processed at once. Silverback.Background.DistributedLockSettings distributedLockSettings The settings for the locking mechanism. The default settings will be used if not specified. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAllowDuplicateEndpointsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAllowDuplicateEndpointsExtensions.html",
    "title": "Class BrokerOptionsBuilderAllowDuplicateEndpointsExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAllowDuplicateEndpointsExtensions Adds the AllowDuplicateEndpointRegistrations method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAllowDuplicateEndpointsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAllowDuplicateEndpointsExtensions Methods | Improve this doc View source AllowDuplicateEndpointRegistrations(IBrokerOptionsBuilder) Enables registration of duplicate endpoints. Declaration public static IBrokerOptionsBuilder AllowDuplicateEndpointRegistrations(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder . Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderWithConnectionOptionsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderWithConnectionOptionsExtensions.html",
    "title": "Class BrokerOptionsBuilderWithConnectionOptionsExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderWithConnectionOptionsExtensions Adds the WithConnectionOptions method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderWithConnectionOptionsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderWithConnectionOptionsExtensions Methods | Improve this doc View source WithConnectionOptions(IBrokerOptionsBuilder, BrokerConnectionOptions) Specifies the BrokerConnectionOptions . Declaration public static IBrokerOptionsBuilder WithConnectionOptions(this IBrokerOptionsBuilder brokerOptionsBuilder, BrokerConnectionOptions connectionOptions) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. BrokerConnectionOptions connectionOptions The BrokerConnectionOptions to apply. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.HealthCheckBuilderExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.HealthCheckBuilderExtensions.html",
    "title": "Class HealthCheckBuilderExtensions | Silverback",
    "keywords": "Class HealthCheckBuilderExtensions Adds methods such as AddOutboundEndpointsCheck and AddOutboundQueueCheck to the Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . Inheritance System.Object HealthCheckBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.HealthChecks.dll Syntax public static class HealthCheckBuilderExtensions Methods | Improve this doc View source AddConsumersCheck(IHealthChecksBuilder, ConsumerStatus, Nullable<TimeSpan>, Func<IConsumerEndpoint, Boolean>, String, Nullable<HealthStatus>, IEnumerable<String>) Adds a health check that verifies that all consumers are connected. Declaration public static IHealthChecksBuilder AddConsumersCheck(this IHealthChecksBuilder builder, ConsumerStatus minHealthyStatus = ConsumerStatus.Ready, TimeSpan? gracePeriod = default(TimeSpan? ), Func<IConsumerEndpoint, bool> endpointsFilter = null, string name = \"Consumers\", HealthStatus? failureStatus = default(HealthStatus? ), IEnumerable<string> tags = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . ConsumerStatus minHealthyStatus The minimum ConsumerStatus a consumer must have to be considered healthy. System.Nullable < System.TimeSpan > gracePeriod The grace period to observe after each status change before a consumer is considered unhealthy. System.Func < IConsumerEndpoint , System.Boolean > endpointsFilter An optional filter to be applied to the endpoints to be tested. System.String name The health check name. The default is \"Consumers\". System.Nullable < Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus > failureStatus The Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus that should be reported when the health check reports a failure. The default is Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy . System.Collections.Generic.IEnumerable < System.String > tags An optional list of tags that can be used for filtering health checks. Returns Type Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder so that additional calls can be chained. | Improve this doc View source AddOutboundEndpointsCheck(IHealthChecksBuilder, String, Nullable<HealthStatus>, IEnumerable<String>) Adds a health check that sends a ping message to all the outbound endpoints. Declaration public static IHealthChecksBuilder AddOutboundEndpointsCheck(this IHealthChecksBuilder builder, string name = \"OutboundEndpoints\", HealthStatus? failureStatus = default(HealthStatus? ), IEnumerable<string> tags = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . System.String name The health check name. The default is \"OutboundEndpoints\". System.Nullable < Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus > failureStatus The Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus that should be reported when the health check reports a failure. The default is Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy . System.Collections.Generic.IEnumerable < System.String > tags An optional list of tags that can be used for filtering health checks. Returns Type Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder so that additional calls can be chained. | Improve this doc View source AddOutboxCheck(IHealthChecksBuilder, String, Nullable<HealthStatus>, IEnumerable<String>) Adds a health check that monitors the outbox, verifying that the messages are being processed. Declaration public static IHealthChecksBuilder AddOutboxCheck(this IHealthChecksBuilder builder, string name = \"OutboundQueue\", HealthStatus? failureStatus = default(HealthStatus? ), IEnumerable<string> tags = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . System.String name The health check name. The default is \"OutboundQueue\". System.Nullable < Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus > failureStatus The Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus that should be reported when the health check reports a failure. The default is Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy . System.Collections.Generic.IEnumerable < System.String > tags An optional list of tags that can be used for filtering health checks. Returns Type Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Silverback",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes BrokerOptionsBuilderAddBrokerExtensions Adds the AddBroker method to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddInboundLogExtensions Adds the AddInboundLog and related methods to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddMockedMqttExtensions Adds the AddMockedMqtt method to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddOffsetStoreExtensions Adds the AddOffsetStore and related methods to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddOutboxExtensions Adds the AddOutbox and related methods to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddOutboxWorkerExtensions Adds the AddOutboxWorker and related methods to the IBrokerOptionsBuilder . BrokerOptionsBuilderAllowDuplicateEndpointsExtensions Adds the AllowDuplicateEndpointRegistrations method to the IBrokerOptionsBuilder . BrokerOptionsBuilderWithConnectionOptionsExtensions Adds the WithConnectionOptions method to the IBrokerOptionsBuilder . HealthCheckBuilderExtensions Adds methods such as AddOutboundEndpointsCheck and AddOutboundQueueCheck to the Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . ServiceCollectionUseMockedMqttExtensions Adds the UseMockedMqtt method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . SilverbackBuilderAddBrokerBehaviorExtensions Adds the AddBrokerBehavior methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderAddBrokerCallbackHandlerExtensions Adds the AddBrokerCallbackHandler methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderAddEndpointsConfiguratorExtensions Adds the AddEndpointsConfigurator methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderAddEndpointsExtensions Adds the AddEndpoints method to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderAddIntegrationSpyExtensions Adds the AddIntegrationSpy and AddIntegrationSpyAndSubscriber methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderAddOutboundRouterExtensions Adds the AddSingletonOutboundRouter method to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderAddSequenceReaderExtensions Adds the AddSequenceReader methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderAddSequenceWriterExtensions Adds the AddSequenceWriter methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderUseMockedMqttExtensions Adds the UseMockedMqtt method to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderUseModelExtensions Adds the UseModel method to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderWithConnectionToExtensions Adds the WithConnectionToMessageBroker method to the Silverback.Messaging.Configuration.ISilverbackBuilder . Interfaces IBrokerOptionsBuilder Exposes the methods to configure the connection with the message broker(s) and add the needed services to the Microsoft.Extensions.DependencyInjection.IServiceCollection . IBrokerOptionsConfigurator<TBroker> The implementations of this class will be located via assembly scanning and invoked when a broker of the matching type TBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection .."
  },
  "api/Microsoft.Extensions.DependencyInjection.IBrokerOptionsBuilder.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.IBrokerOptionsBuilder.html",
    "title": "Interface IBrokerOptionsBuilder | Silverback",
    "keywords": "Interface IBrokerOptionsBuilder Exposes the methods to configure the connection with the message broker(s) and add the needed services to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public interface IBrokerOptionsBuilder Properties | Improve this doc View source SilverbackBuilder Gets the Silverback.Messaging.Configuration.ISilverbackBuilder (that in turn references the Microsoft.Extensions.DependencyInjection.IServiceCollection ). Declaration ISilverbackBuilder SilverbackBuilder { get; } Property Value Type Description Silverback.Messaging.Configuration.ISilverbackBuilder Extension Methods Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddMqttExtensions.AddMqtt(Microsoft.Extensions.DependencyInjection.IBrokerOptionsBuilder) Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddKafkaExtensions.AddKafka(Microsoft.Extensions.DependencyInjection.IBrokerOptionsBuilder) BrokerOptionsBuilderAddBrokerExtensions.AddBroker<TBroker>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddInboundLogExtensions.AddInboundLog<TInboundLog>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddInboundLogExtensions.AddInMemoryInboundLog(IBrokerOptionsBuilder) BrokerOptionsBuilderAddInboundLogExtensions.AddInboundLogDatabaseTable(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOffsetStoreExtensions.AddOffsetStore<TOffsetStore>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOffsetStoreExtensions.AddInMemoryOffsetStore(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOffsetStoreExtensions.AddOffsetStoreDatabaseTable(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOutboxExtensions.AddOutbox<TOutboxWriter, TOutboxReader>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOutboxExtensions.AddOutbox<TOutbox>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOutboxExtensions.AddOutboxDatabaseTable(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOutboxWorkerExtensions.AddOutboxWorker(IBrokerOptionsBuilder, Nullable<TimeSpan>, Boolean, Int32, DistributedLockSettings) BrokerOptionsBuilderAllowDuplicateEndpointsExtensions.AllowDuplicateEndpointRegistrations(IBrokerOptionsBuilder) BrokerOptionsBuilderWithConnectionOptionsExtensions.WithConnectionOptions(IBrokerOptionsBuilder, BrokerConnectionOptions) Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddRabbitExtensions.AddRabbit(Microsoft.Extensions.DependencyInjection.IBrokerOptionsBuilder)"
  },
  "api/Microsoft.Extensions.DependencyInjection.IBrokerOptionsConfigurator-1.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.IBrokerOptionsConfigurator-1.html",
    "title": "Interface IBrokerOptionsConfigurator<TBroker> | Silverback",
    "keywords": "Interface IBrokerOptionsConfigurator<TBroker> The implementations of this class will be located via assembly scanning and invoked when a broker of the matching type TBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection .. Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public interface IBrokerOptionsConfigurator<TBroker> where TBroker : IBroker Type Parameters Name Description TBroker The type of the IBroker implementation being configured. Methods | Improve this doc View source Configure(IBrokerOptionsBuilder) Called while registering the broker to configure the broker-specific services and options (e.g. behaviors). Declaration void Configure(IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionUseMockedMqttExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionUseMockedMqttExtensions.html",
    "title": "Class ServiceCollectionUseMockedMqttExtensions | Silverback",
    "keywords": "Class ServiceCollectionUseMockedMqttExtensions Adds the UseMockedMqtt method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Inheritance System.Object ServiceCollectionUseMockedMqttExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public static class ServiceCollectionUseMockedMqttExtensions Methods | Improve this doc View source UseMockedMqtt(IServiceCollection) Replaces the MQTT connectivity based on MQTTnet with a mocked in-memory message broker that more or less replicates the MQTT broker behavior. Declaration public static IServiceCollection UseMockedMqtt(this IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to add the service to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The Microsoft.Extensions.DependencyInjection.IServiceCollection so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBrokerBehaviorExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBrokerBehaviorExtensions.html",
    "title": "Class SilverbackBuilderAddBrokerBehaviorExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddBrokerBehaviorExtensions Adds the AddBrokerBehavior methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddBrokerBehaviorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddBrokerBehaviorExtensions Methods | Improve this doc View source AddSingletonBrokerBehavior(ISilverbackBuilder, IBrokerBehavior) Adds a singleton behavior with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerBehavior(this ISilverbackBuilder silverbackBuilder, IBrokerBehavior implementationInstance) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. IBrokerBehavior implementationInstance The instance of the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerBehavior(ISilverbackBuilder, Func<IServiceProvider, IBrokerBehavior>) Adds a singleton behavior with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerBehavior(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerBehavior> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IBrokerBehavior > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerBehavior(ISilverbackBuilder, Type) Adds a singleton behavior of the type specified in behaviorType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerBehavior(this ISilverbackBuilder silverbackBuilder, Type behaviorType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type behaviorType The type of the behavior to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerBehavior<TBehavior>(ISilverbackBuilder) Adds a singleton behavior of the type specified in TBehavior to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerBehavior<TBehavior>(this ISilverbackBuilder silverbackBuilder) where TBehavior : class, IBrokerBehavior Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TBehavior The type of the behavior to add. | Improve this doc View source AddTransientBrokerBehavior(ISilverbackBuilder, Func<IServiceProvider, IBrokerBehavior>) Adds a transient behavior with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerBehavior(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerBehavior> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IBrokerBehavior > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBrokerBehavior(ISilverbackBuilder, Type) Adds a transient behavior of the type specified in behaviorType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerBehavior(this ISilverbackBuilder silverbackBuilder, Type behaviorType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type behaviorType The type of the behavior to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBrokerBehavior<TBehavior>(ISilverbackBuilder) Adds a transient behavior of the type specified in TBehavior to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerBehavior<TBehavior>(this ISilverbackBuilder silverbackBuilder) where TBehavior : class, IBrokerBehavior Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TBehavior The type of the behavior to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBrokerCallbackHandlerExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBrokerCallbackHandlerExtensions.html",
    "title": "Class SilverbackBuilderAddBrokerCallbackHandlerExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddBrokerCallbackHandlerExtensions Adds the AddBrokerCallbackHandler methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddBrokerCallbackHandlerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddBrokerCallbackHandlerExtensions Methods | Improve this doc View source AddScopedBrokerCallbackHandler(ISilverbackBuilder, Func<IServiceProvider, IBrokerCallback>) Adds a scoped callback with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerCallback> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Func < System.IServiceProvider , IBrokerCallback > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedBrokerCallbackHandler(ISilverbackBuilder, Type) Adds a scoped callback of the type specified in handlerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Type handlerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Type handlerType The type of the handler to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedBrokerCallbackHandler<THandler>(ISilverbackBuilder) Adds a scoped callback of the type specified in THandler to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedBrokerCallbackHandler<THandler>(this ISilverbackBuilder silverbackBuilder) where THandler : class, IBrokerCallback Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description THandler The type of the handler to add. | Improve this doc View source AddSingletonBrokerCallbackHandler(ISilverbackBuilder, IBrokerCallback) Adds a singleton callback with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, IBrokerCallback implementationInstance) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. IBrokerCallback implementationInstance The instance of the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerCallbackHandler(ISilverbackBuilder, Func<IServiceProvider, IBrokerCallback>) Adds a singleton callback with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerCallback> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Func < System.IServiceProvider , IBrokerCallback > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerCallbackHandler(ISilverbackBuilder, Type) Adds a singleton callback of the type specified in handlerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Type handlerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Type handlerType The type of the handler to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerCallbackHandler<THandler>(ISilverbackBuilder) Adds a singleton callback of the type specified in THandler to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerCallbackHandler<THandler>(this ISilverbackBuilder silverbackBuilder) where THandler : class, IBrokerCallback Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description THandler The type of the handler to add. | Improve this doc View source AddTransientBrokerCallbackHandler(ISilverbackBuilder, Func<IServiceProvider, IBrokerCallback>) Adds a transient callback with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerCallback> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Func < System.IServiceProvider , IBrokerCallback > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBrokerCallbackHandler(ISilverbackBuilder, Type) Adds a transient callback of the type specified in handlerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Type handlerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Type handlerType The type of the handler to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBrokerCallbackHandler<THandler>(ISilverbackBuilder) Adds a transient callback of the type specified in THandler to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerCallbackHandler<THandler>(this ISilverbackBuilder silverbackBuilder) where THandler : class, IBrokerCallback Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description THandler The type of the handler to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddEndpointsConfiguratorExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddEndpointsConfiguratorExtensions.html",
    "title": "Class SilverbackBuilderAddEndpointsConfiguratorExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddEndpointsConfiguratorExtensions Adds the AddEndpointsConfigurator methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddEndpointsConfiguratorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddEndpointsConfiguratorExtensions Methods | Improve this doc View source AddEndpointsConfigurator(ISilverbackBuilder, Func<IServiceProvider, IEndpointsConfigurator>) Adds an IEndpointsConfigurator to be used to setup the broker endpoints. Declaration public static ISilverbackBuilder AddEndpointsConfigurator(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IEndpointsConfigurator> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IEndpointsConfigurator > implementationFactory The factory that creates the IEndpointsConfigurator to add. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddEndpointsConfigurator(ISilverbackBuilder, Type) Adds an IEndpointsConfigurator to be used to setup the broker endpoints. Declaration public static ISilverbackBuilder AddEndpointsConfigurator(this ISilverbackBuilder silverbackBuilder, Type configuratorType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type configuratorType The type of the IEndpointsConfigurator to add. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddEndpointsConfigurator<TConfigurator>(ISilverbackBuilder) Adds an IEndpointsConfigurator to be used to setup the broker endpoints. Declaration public static ISilverbackBuilder AddEndpointsConfigurator<TConfigurator>(this ISilverbackBuilder silverbackBuilder) where TConfigurator : class, IEndpointsConfigurator Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TConfigurator The type of the IEndpointsConfigurator to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddEndpointsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddEndpointsExtensions.html",
    "title": "Class SilverbackBuilderAddEndpointsExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddEndpointsExtensions Adds the AddEndpoints method to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddEndpointsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddEndpointsExtensions Methods | Improve this doc View source AddEndpoints(ISilverbackBuilder, Action<IEndpointsConfigurationBuilder>) Adds the broker endpoints. Declaration public static ISilverbackBuilder AddEndpoints(this ISilverbackBuilder silverbackBuilder, Action<IEndpointsConfigurationBuilder> configureAction) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Action < IEndpointsConfigurationBuilder > configureAction An System.Action<T> that takes the IEndpointsConfigurationBuilder and adds the outbound and inbound endpoints. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddIntegrationSpyExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddIntegrationSpyExtensions.html",
    "title": "Class SilverbackBuilderAddIntegrationSpyExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddIntegrationSpyExtensions Adds the AddIntegrationSpy and AddIntegrationSpyAndSubscriber methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddIntegrationSpyExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.Testing.dll Syntax public static class SilverbackBuilderAddIntegrationSpyExtensions Methods | Improve this doc View source AddIntegrationSpy(ISilverbackBuilder, Boolean) Adds the IIntegrationSpy and its support services to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddIntegrationSpy(this ISilverbackBuilder silverbackBuilder, bool attachSubscriber = false) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Boolean attachSubscriber Specifies whether a generic subscriber ( InboundSpySubscriber must be used to monitor the inbound messages instead of a behavior ( InboundSpyBrokerBehavior ). Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddIntegrationSpyAndSubscriber(ISilverbackBuilder) Adds the IIntegrationSpy and its support services to the Microsoft.Extensions.DependencyInjection.IServiceCollection and uses a generic subscriber to monitor the incoming messages. This is the same as calling AddIntegrationSpy(ISilverbackBuilder, Boolean) with the attachSubscriber parameter set to true . Declaration public static ISilverbackBuilder AddIntegrationSpyAndSubscriber(this ISilverbackBuilder silverbackBuilder) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddOutboundRouterExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddOutboundRouterExtensions.html",
    "title": "Class SilverbackBuilderAddOutboundRouterExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddOutboundRouterExtensions Adds the AddSingletonOutboundRouter method to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddOutboundRouterExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddOutboundRouterExtensions Methods | Improve this doc View source AddScopedOutboundRouter(ISilverbackBuilder, Func<IServiceProvider, IOutboundRouter>) Adds a scoped outbound router with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedOutboundRouter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IOutboundRouter> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IOutboundRouter > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedOutboundRouter(ISilverbackBuilder, Type) Adds a scoped outbound router of the type specified in routerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedOutboundRouter(this ISilverbackBuilder silverbackBuilder, Type routerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type routerType The type of the outbound router to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedOutboundRouter<TRouter>(ISilverbackBuilder) Adds a scoped outbound router of the type specified in TRouter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedOutboundRouter<TRouter>(this ISilverbackBuilder silverbackBuilder) where TRouter : class, IOutboundRouter Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TRouter The type of the outbound router to add. | Improve this doc View source AddSingletonOutboundRouter(ISilverbackBuilder, IOutboundRouter) Adds a singleton outbound router with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonOutboundRouter(this ISilverbackBuilder silverbackBuilder, IOutboundRouter implementationInstance) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. IOutboundRouter implementationInstance The instance of the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonOutboundRouter(ISilverbackBuilder, Func<IServiceProvider, IOutboundRouter>) Adds a singleton outbound router with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonOutboundRouter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IOutboundRouter> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IOutboundRouter > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonOutboundRouter(ISilverbackBuilder, Type) Adds a singleton outbound router of the type specified in routerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonOutboundRouter(this ISilverbackBuilder silverbackBuilder, Type routerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type routerType The type of the outbound router to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonOutboundRouter<TRouter>(ISilverbackBuilder) Adds a singleton outbound router of the type specified in TRouter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonOutboundRouter<TRouter>(this ISilverbackBuilder silverbackBuilder) where TRouter : class, IOutboundRouter Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TRouter The type of the outbound router to add. | Improve this doc View source AddTransientOutboundRouter(ISilverbackBuilder, Func<IServiceProvider, IOutboundRouter>) Adds a transient outbound router with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientOutboundRouter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IOutboundRouter> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IOutboundRouter > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientOutboundRouter(ISilverbackBuilder, Type) Adds a transient outbound router of the type specified in routerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientOutboundRouter(this ISilverbackBuilder silverbackBuilder, Type routerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type routerType The type of the outbound router to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientOutboundRouter<TRouter>(ISilverbackBuilder) Adds a transient outbound router of the type specified in TRouter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientOutboundRouter<TRouter>(this ISilverbackBuilder silverbackBuilder) where TRouter : class, IOutboundRouter Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TRouter The type of the outbound router to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSequenceReaderExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSequenceReaderExtensions.html",
    "title": "Class SilverbackBuilderAddSequenceReaderExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddSequenceReaderExtensions Adds the AddSequenceReader methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddSequenceReaderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddSequenceReaderExtensions Methods | Improve this doc View source AddSingletonSequenceReader(ISilverbackBuilder, ISequenceReader) Adds a singleton sequence reader with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceReader(this ISilverbackBuilder silverbackBuilder, ISequenceReader implementationInstance) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. ISequenceReader implementationInstance The instance of the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceReader(ISilverbackBuilder, Func<IServiceProvider, ISequenceReader>) Adds a singleton sequence reader with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceReader(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, ISequenceReader> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , ISequenceReader > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceReader(ISilverbackBuilder, Type) Adds a singleton sequence reader of the type specified in readerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceReader(this ISilverbackBuilder silverbackBuilder, Type readerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type readerType The type of the reader to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceReader<TReader>(ISilverbackBuilder) Adds a singleton sequence reader of the type specified in TReader to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceReader<TReader>(this ISilverbackBuilder silverbackBuilder) where TReader : class, ISequenceReader Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TReader The type of the reader to add. | Improve this doc View source AddTransientSequenceReader(ISilverbackBuilder, Func<IServiceProvider, ISequenceReader>) Adds a transient sequence reader with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceReader(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, ISequenceReader> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , ISequenceReader > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSequenceReader(ISilverbackBuilder, Type) Adds a transient sequence reader of the type specified in readerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceReader(this ISilverbackBuilder silverbackBuilder, Type readerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type readerType The type of the reader to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSequenceReader<TReader>(ISilverbackBuilder) Adds a transient sequence reader of the type specified in TReader to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceReader<TReader>(this ISilverbackBuilder silverbackBuilder) where TReader : class, ISequenceReader Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TReader The type of the reader to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSequenceWriterExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSequenceWriterExtensions.html",
    "title": "Class SilverbackBuilderAddSequenceWriterExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddSequenceWriterExtensions Adds the AddSequenceWriter methods to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddSequenceWriterExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddSequenceWriterExtensions Methods | Improve this doc View source AddSingletonSequenceWriter(ISilverbackBuilder, ISequenceWriter) Adds a singleton sequence writer with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceWriter(this ISilverbackBuilder silverbackBuilder, ISequenceWriter implementationInstance) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. ISequenceWriter implementationInstance The instance of the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceWriter(ISilverbackBuilder, Func<IServiceProvider, ISequenceWriter>) Adds a singleton sequence writer with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceWriter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, ISequenceWriter> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , ISequenceWriter > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceWriter(ISilverbackBuilder, Type) Adds a singleton sequence writer of the type specified in writerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceWriter(this ISilverbackBuilder silverbackBuilder, Type writerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type writerType The type of the writer to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceWriter<TWriter>(ISilverbackBuilder) Adds a singleton sequence writer of the type specified in TWriter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceWriter<TWriter>(this ISilverbackBuilder silverbackBuilder) where TWriter : class, ISequenceWriter Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TWriter The type of the writer to add. | Improve this doc View source AddTransientSequenceWriter(ISilverbackBuilder, Func<IServiceProvider, ISequenceWriter>) Adds a transient sequence writer with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceWriter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, ISequenceWriter> implementationFactory) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , ISequenceWriter > implementationFactory The factory that creates the service. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSequenceWriter(ISilverbackBuilder, Type) Adds a transient sequence writer of the type specified in writerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceWriter(this ISilverbackBuilder silverbackBuilder, Type writerType) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type writerType The type of the writer to register and the implementation to use. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSequenceWriter<TWriter>(ISilverbackBuilder) Adds a transient sequence writer of the type specified in TWriter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceWriter<TWriter>(this ISilverbackBuilder silverbackBuilder) where TWriter : class, ISequenceWriter Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TWriter The type of the writer to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseMockedMqttExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseMockedMqttExtensions.html",
    "title": "Class SilverbackBuilderUseMockedMqttExtensions | Silverback",
    "keywords": "Class SilverbackBuilderUseMockedMqttExtensions Adds the UseMockedMqtt method to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderUseMockedMqttExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public static class SilverbackBuilderUseMockedMqttExtensions Methods | Improve this doc View source UseMockedMqtt(ISilverbackBuilder, Action<IMockedMqttOptionsBuilder>) Replaces the MQTT connectivity based on MQTTnet with a mocked in-memory message broker that more or less replicates the MQTT broker behavior. Declaration public static ISilverbackBuilder UseMockedMqtt(this ISilverbackBuilder builder, Action<IMockedMqttOptionsBuilder> optionsAction = null) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder builder The Silverback.Messaging.Configuration.ISilverbackBuilder . System.Action < IMockedMqttOptionsBuilder > optionsAction Configures the mock options. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseModelExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseModelExtensions.html",
    "title": "Class SilverbackBuilderUseModelExtensions | Silverback",
    "keywords": "Class SilverbackBuilderUseModelExtensions Adds the UseModel method to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderUseModelExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.Model.dll Syntax public static class SilverbackBuilderUseModelExtensions Methods | Improve this doc View source UseModel(ISilverbackBuilder) Registers the default messages model from Silverback.Core.Model package and the specific publishers ( IEventPublisher , ICommandPublisher and IQueryPublisher ). Declaration public static ISilverbackBuilder UseModel(this ISilverbackBuilder builder) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder builder The Silverback.Messaging.Configuration.ISilverbackBuilder to add the model types to. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderWithConnectionToExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderWithConnectionToExtensions.html",
    "title": "Class SilverbackBuilderWithConnectionToExtensions | Silverback",
    "keywords": "Class SilverbackBuilderWithConnectionToExtensions Adds the WithConnectionToMessageBroker method to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderWithConnectionToExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderWithConnectionToExtensions Methods | Improve this doc View source WithConnectionToMessageBroker(ISilverbackBuilder, Action<IBrokerOptionsBuilder>) Registers the types needed to connect with a message broker. Declaration public static ISilverbackBuilder WithConnectionToMessageBroker(this ISilverbackBuilder silverbackBuilder, Action<IBrokerOptionsBuilder> optionsAction = null) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Action < IBrokerOptionsBuilder > optionsAction Additional options such as the actual message brokers to be used. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Silverback.Database.Model.html": {
    "href": "api/Silverback.Database.Model.html",
    "title": "Namespace Silverback.Database.Model | Silverback",
    "keywords": "Namespace Silverback.Database.Model Classes InboundLogEntry The entity stored in the inbound log table. OutboxMessage The entity stored in the outbox table. StoredOffset The entity stored in the offset storage table."
  },
  "api/Silverback.Database.Model.InboundLogEntry.html": {
    "href": "api/Silverback.Database.Model.InboundLogEntry.html",
    "title": "Class InboundLogEntry | Silverback",
    "keywords": "Class InboundLogEntry The entity stored in the inbound log table. Inheritance System.Object InboundLogEntry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Database.Model Assembly : Silverback.Integration.dll Syntax public class InboundLogEntry Properties | Improve this doc View source Consumed Gets or sets the datetime when the message was consumed. Declaration public DateTime Consumed { get; set; } Property Value Type Description System.DateTime | Improve this doc View source ConsumerGroupName Gets or sets the unique consumer group name of the consumer that received and processed the message. Declaration [Key] [MaxLength(300)] public string ConsumerGroupName { get; set; } Property Value Type Description System.String | Improve this doc View source EndpointName Gets or sets the name of the endpoint the message was consumed from. Declaration [Key] [MaxLength(300)] public string EndpointName { get; set; } Property Value Type Description System.String | Improve this doc View source MessageId Gets or sets the unique identifier of the inbound message. Declaration [Key] [MaxLength(300)] public string MessageId { get; set; } Property Value Type Description System.String"
  },
  "api/Silverback.Database.Model.OutboxMessage.html": {
    "href": "api/Silverback.Database.Model.OutboxMessage.html",
    "title": "Class OutboxMessage | Silverback",
    "keywords": "Class OutboxMessage The entity stored in the outbox table. Inheritance System.Object OutboxMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Database.Model Assembly : Silverback.Integration.dll Syntax public class OutboxMessage Properties | Improve this doc View source ActualEndpointName Gets or sets the name of the actual target endpoint that was resolved for the message. Declaration [MaxLength(300)] public string ActualEndpointName { get; set; } Property Value Type Description System.String | Improve this doc View source Content Gets or sets the message content (body). Declaration public byte[] Content { get; set; } Property Value Type Description System.Byte [] | Improve this doc View source Created Gets or sets the datetime when the message was stored in the queue. Declaration public DateTime Created { get; set; } Property Value Type Description System.DateTime | Improve this doc View source EndpointName Gets or sets the name of the producer endpoint. Declaration [MaxLength(300)] public string EndpointName { get; set; } Property Value Type Description System.String | Improve this doc View source Headers Gets or sets the serialized message headers. Declaration [Obsolete(\"Replaced by SerializedHeaders.\")] public string Headers { get; set; } Property Value Type Description System.String Remarks This field is no longer used (replaced by SerializedHeaders) and will be removed with the next major release. | Improve this doc View source Id Gets or sets the primary key (identity). Declaration [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public int Id { get; set; } Property Value Type Description System.Int32 | Improve this doc View source MessageType Gets or sets the assembly qualified name of the message class. Declaration public string MessageType { get; set; } Property Value Type Description System.String | Improve this doc View source SerializedHeaders Gets or sets the serialized message headers. Declaration public byte[] SerializedHeaders { get; set; } Property Value Type Description System.Byte []"
  },
  "api/Silverback.Database.Model.StoredOffset.html": {
    "href": "api/Silverback.Database.Model.StoredOffset.html",
    "title": "Class StoredOffset | Silverback",
    "keywords": "Class StoredOffset The entity stored in the offset storage table. Inheritance System.Object StoredOffset Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Database.Model Assembly : Silverback.Integration.dll Syntax public class StoredOffset Properties | Improve this doc View source ClrType Gets or sets the assembly qualified name of the stored offset class. Declaration [MaxLength(300)] public string ClrType { get; set; } Property Value Type Description System.String | Improve this doc View source Key Gets or sets the offset key. Declaration [Key] [MaxLength(300)] public string Key { get; set; } Property Value Type Description System.String | Improve this doc View source Offset Gets or sets the serialized offset. Declaration [MaxLength(500)] [Obsolete(\"Replaced by ClrType and Value.\")] public string Offset { get; set; } Property Value Type Description System.String Remarks This field is no longer used (replaced by ClrType and Value) and will be removed with the next major release. | Improve this doc View source Value Gets or sets the offset value. Declaration [MaxLength(300)] public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/Silverback.Diagnostics.html": {
    "href": "api/Silverback.Diagnostics.html",
    "title": "Namespace Silverback.Diagnostics | Silverback",
    "keywords": "Namespace Silverback.Diagnostics Classes IntegrationLogEvents Contains the Silverback.Diagnostics.LogEvent constants of all events logged by the Silverback.Integration package. Interfaces IBrokerLogEnricher Provides enrichment for the logs written in the context of the consumers and producers. IBrokerLogEnricher<TEndpoint> Provides enrichment for the logs written in the context of the consumers and producers, for the specified endpoint type. IInboundLogger<TCategoryName> An Microsoft.Extensions.Logging.ILogger<TCategoryName> with some specific methods to log inbound messages related events. IOutboundLogger<TCategoryName> An Silverback.Diagnostics.ISilverbackLogger<TCategoryName> with some specific methods to log outbound messages related events."
  },
  "api/Silverback.Diagnostics.IBrokerLogEnricher.html": {
    "href": "api/Silverback.Diagnostics.IBrokerLogEnricher.html",
    "title": "Interface IBrokerLogEnricher | Silverback",
    "keywords": "Interface IBrokerLogEnricher Provides enrichment for the logs written in the context of the consumers and producers. Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IBrokerLogEnricher Properties | Improve this doc View source AdditionalPropertyName1 Gets the name of the first additional property. Declaration string AdditionalPropertyName1 { get; } Property Value Type Description System.String | Improve this doc View source AdditionalPropertyName2 Gets the name of the second additional property. Declaration string AdditionalPropertyName2 { get; } Property Value Type Description System.String Methods | Improve this doc View source GetAdditionalValues(IEndpoint, IReadOnlyCollection<MessageHeader>, IBrokerMessageIdentifier) Returns the values for the two additional properties. Declaration (string Value1, string Value2) GetAdditionalValues(IEndpoint endpoint, IReadOnlyCollection<MessageHeader> headers, IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IEndpoint endpoint The target endpoint. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. IBrokerMessageIdentifier brokerMessageIdentifier The message identifier at broker level (e.g. the Kafka offset). Returns Type Description System.ValueTuple < System.String , System.String > Returns a tuple containing the values for the two additional properties."
  },
  "api/Silverback.Diagnostics.IBrokerLogEnricher-1.html": {
    "href": "api/Silverback.Diagnostics.IBrokerLogEnricher-1.html",
    "title": "Interface IBrokerLogEnricher<TEndpoint> | Silverback",
    "keywords": "Interface IBrokerLogEnricher<TEndpoint> Provides enrichment for the logs written in the context of the consumers and producers, for the specified endpoint type. Inherited Members IBrokerLogEnricher.AdditionalPropertyName1 IBrokerLogEnricher.AdditionalPropertyName2 IBrokerLogEnricher.GetAdditionalValues(IEndpoint, IReadOnlyCollection<MessageHeader>, IBrokerMessageIdentifier) Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IBrokerLogEnricher<TEndpoint> : IBrokerLogEnricher where TEndpoint : Endpoint Type Parameters Name Description TEndpoint The type of the endpoint that this enricher can be used for."
  },
  "api/Silverback.Diagnostics.IInboundLogger-1.html": {
    "href": "api/Silverback.Diagnostics.IInboundLogger-1.html",
    "title": "Interface IInboundLogger<TCategoryName> | Silverback",
    "keywords": "Interface IInboundLogger<TCategoryName> An Microsoft.Extensions.Logging.ILogger<TCategoryName> with some specific methods to log inbound messages related events. Inherited Members Silverback.Diagnostics.ISilverbackLogger.InnerLogger Silverback.Diagnostics.ISilverbackLogger.IsEnabled(Silverback.Diagnostics.LogEvent) Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IInboundLogger<out TCategoryName> : ISilverbackLogger<TCategoryName>, ISilverbackLogger Type Parameters Name Description TCategoryName The type who's name is used for the logger category name. Methods | Improve this doc View source LogAlreadyProcessed(IRawInboundEnvelope) Logs the MessageAlreadyProcessed event. Declaration void LogAlreadyProcessed(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . | Improve this doc View source LogCannotMoveSequences(IRawInboundEnvelope, ISequence) Logs the CannotMoveSequences event. Declaration void LogCannotMoveSequences(IRawInboundEnvelope envelope, ISequence sequence) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . ISequence sequence The ISequence . | Improve this doc View source LogInboundLowLevelTrace(String, IRawInboundEnvelope, Exception, Func<Object[]>) Logs the LowLevelTracing event. Declaration void LogInboundLowLevelTrace(string message, IRawInboundEnvelope envelope, Exception exception, Func<object[]> argumentsProvider = null) Parameters Type Name Description System.String message The log message format string. IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception to be logged. System.Func < System.Object []> argumentsProvider The System.Func<TResult> returning the arguments to be used to format the message. | Improve this doc View source LogInboundLowLevelTrace(String, IRawInboundEnvelope, Func<Object[]>) Logs the LowLevelTracing event. Declaration void LogInboundLowLevelTrace(string message, IRawInboundEnvelope envelope, Func<object[]> argumentsProvider = null) Parameters Type Name Description System.String message The log message format string. IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Func < System.Object []> argumentsProvider The System.Func<TResult> returning the arguments to be used to format the message. | Improve this doc View source LogInboundTrace(LogEvent, IRawInboundEnvelope, Exception, Func<Object[]>) Logs the LowLevelTracing event. Declaration void LogInboundTrace(LogEvent logEvent, IRawInboundEnvelope envelope, Exception exception, Func<object[]> argumentsProvider = null) Parameters Type Name Description Silverback.Diagnostics.LogEvent logEvent The Silverback.Diagnostics.LogEvent . IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception to be logged. System.Func < System.Object []> argumentsProvider The System.Func<TResult> returning the arguments to be used to format the message. Remarks This method is less performing and therefore only events with Microsoft.Extensions.Logging.LogLevel.Trace level are allowed. | Improve this doc View source LogInboundTrace(LogEvent, IRawInboundEnvelope, Func<Object[]>) Logs the LowLevelTracing event. Declaration void LogInboundTrace(LogEvent logEvent, IRawInboundEnvelope envelope, Func<object[]> argumentsProvider = null) Parameters Type Name Description Silverback.Diagnostics.LogEvent logEvent The Silverback.Diagnostics.LogEvent . IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Func < System.Object []> argumentsProvider The System.Func<TResult> returning the arguments to be used to format the message. Remarks This method is less performing and therefore only events with Microsoft.Extensions.Logging.LogLevel.Trace level are allowed. | Improve this doc View source LogMoved(IRawInboundEnvelope, IProducerEndpoint) Logs the MessageMoved event. Declaration void LogMoved(IRawInboundEnvelope envelope, IProducerEndpoint targetEndpoint) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . IProducerEndpoint targetEndpoint The target IProducerEndpoint . | Improve this doc View source LogNullMessageSkipped(IRawInboundEnvelope) Logs the NullMessageSkipped event. Declaration void LogNullMessageSkipped(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . | Improve this doc View source LogProcessing(IRawInboundEnvelope) Logs the ProcessingInboundMessage event. Declaration void LogProcessing(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . | Improve this doc View source LogProcessingError(IRawInboundEnvelope, Exception) Logs the ErrorProcessingInboundMessage event. Declaration void LogProcessingError(IRawInboundEnvelope envelope, Exception exception) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogProcessingFatalError(IRawInboundEnvelope, Exception) Logs the ConsumerFatalError event. Declaration void LogProcessingFatalError(IRawInboundEnvelope envelope, Exception exception) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogRetryProcessing(IRawInboundEnvelope) Logs the RetryMessageProcessing event. Declaration void LogRetryProcessing(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . | Improve this doc View source LogRollbackToRetryFailed(IRawInboundEnvelope, Exception) Logs the RollbackToRetryFailed event. Declaration void LogRollbackToRetryFailed(IRawInboundEnvelope envelope, Exception exception) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogRollbackToSkipFailed(IRawInboundEnvelope, Exception) Logs the RollbackToSkipFailed event. Declaration void LogRollbackToSkipFailed(IRawInboundEnvelope envelope, Exception exception) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogSkipped(IRawInboundEnvelope) Logs the MessageSkipped event. Declaration void LogSkipped(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope ."
  },
  "api/Silverback.Diagnostics.IntegrationLogEvents.html": {
    "href": "api/Silverback.Diagnostics.IntegrationLogEvents.html",
    "title": "Class IntegrationLogEvents | Silverback",
    "keywords": "Class IntegrationLogEvents Contains the Silverback.Diagnostics.LogEvent constants of all events logged by the Silverback.Integration package. Inheritance System.Object IntegrationLogEvents Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public static class IntegrationLogEvents Properties | Improve this doc View source BrokerConnected Gets the Silverback.Diagnostics.LogEvent representing the log that is written when connected to the message broker. Declaration public static LogEvent BrokerConnected { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source BrokerConnecting Gets the Silverback.Diagnostics.LogEvent representing the log that is written when connecting to the message broker. Declaration public static LogEvent BrokerConnecting { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source BrokerConnectionError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an exception is thrown when connecting to the message broker. Declaration public static LogEvent BrokerConnectionError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source BrokerDisconnected Gets the Silverback.Diagnostics.LogEvent representing the log that is written when disconnected from the message broker. Declaration public static LogEvent BrokerDisconnected { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source BrokerDisconnecting Gets the Silverback.Diagnostics.LogEvent representing the log that is written when disconnecting from the message broker. Declaration public static LogEvent BrokerDisconnecting { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source CallbackHandlerError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an exception is thrown by a broker callback handler. Declaration public static LogEvent CallbackHandlerError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source CannotMoveSequences Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the MoveMessageErrorPolicy cannot be applied because the failing message belongs to a sequences (it's either chunked, being processed in batch, etc.). Declaration public static LogEvent CannotMoveSequences { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerCommitError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an error occurs in the consumer during the commit operation. Declaration public static LogEvent ConsumerCommitError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerConnected Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the consumer is connected to the endpoint and will start consuming. Declaration public static LogEvent ConsumerConnected { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerConnectError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an exception is thrown connecting the consumer. Declaration public static LogEvent ConsumerConnectError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerDisconnected Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the consumer is disconnected from the endpoint. Declaration public static LogEvent ConsumerDisconnected { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerDisconnectError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an exception is thrown disconnecting the consumer. Declaration public static LogEvent ConsumerDisconnectError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerDisposingError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an error occurs while the consumer is disconnecting. This may in some cases cause inconsistencies, with some messages not being properly committed. Declaration public static LogEvent ConsumerDisposingError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerFatalError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an unhandled error occurs while consuming and the consumer will be stopped. Declaration public static LogEvent ConsumerFatalError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerRollbackError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an error occurs in the consumer during the rollback operation. Declaration public static LogEvent ConsumerRollbackError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerStartError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an exception is thrown starting the consumer. Declaration public static LogEvent ConsumerStartError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ConsumerStopError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an exception is thrown stopping the consumer. Declaration public static LogEvent ConsumerStopError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source CreatingNewConsumer Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a new consumer is being instantiated. Declaration public static LogEvent CreatingNewConsumer { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source CreatingNewProducer Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a new producer is being instantiated. Declaration public static LogEvent CreatingNewProducer { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source EndpointConfiguratorError Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an exception is thrown from within an IEndpointsConfigurator . Declaration public static LogEvent EndpointConfiguratorError { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ErrorAbortingInboundSequence Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an error occurs while aborting an inbound sequence. Declaration public static LogEvent ErrorAbortingInboundSequence { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ErrorInitializingActivity Reserved, not used anymore. Declaration [Obsolete(\"Not used anymore.\", true)] public static LogEvent ErrorInitializingActivity { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ErrorProcessingInboundMessage Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an error occurs while processing an inbound message. Declaration public static LogEvent ErrorProcessingInboundMessage { get; } Property Value Type Description Silverback.Diagnostics.LogEvent Remarks If the message belongs to a sequence the ErrorProcessingInboundSequence event is logged instead. | Improve this doc View source ErrorProcessingInboundSequence Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an error occurs while processing an inbound sequence. Declaration public static LogEvent ErrorProcessingInboundSequence { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ErrorProcessingOutbox Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an error occurs while the IOutboxWorker processes the outbox queue. Declaration public static LogEvent ErrorProcessingOutbox { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ErrorProducingMessage Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an error occurs producing a message. Declaration public static LogEvent ErrorProducingMessage { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ErrorProducingOutboxStoredMessage Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an error occurs while producing the message stored in the outbox. Declaration public static LogEvent ErrorProducingOutboxStoredMessage { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ErrorReconnectingConsumer Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an exception is thrown reconnecting the consumer (auto recovery from errors). Declaration public static LogEvent ErrorReconnectingConsumer { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source IncompleteSequenceAborted Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an incomplete sequence is aborted because a new sequence starts before the current one is completed or the timeout elapses before the sequence can be completed). Declaration public static LogEvent IncompleteSequenceAborted { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source InvalidEndpointConfiguration Gets the Silverback.Diagnostics.LogEvent representing the log that is written when trying to connect an endpoint with an invalid configuration. Declaration public static LogEvent InvalidEndpointConfiguration { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source InvalidMessageProcessed Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an invalid message has been processed (see MessageValidationMode ). Declaration public static LogEvent InvalidMessageProcessed { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source InvalidMessageProduced Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an invalid message has been produced (see MessageValidationMode ). Declaration public static LogEvent InvalidMessageProduced { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source LowLevelTracing Gets the Microsoft.Extensions.Logging.EventId of the low level tracing logs. Declaration public static LogEvent LowLevelTracing { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source MessageAddedToSequence Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an inbound message is added to a sequence (e.g. ChunkSequence or a BatchSequence ). Declaration public static LogEvent MessageAddedToSequence { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source MessageAlreadyProcessed Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the message is being skipped since already processed (according to the stored offsets or message id). Declaration public static LogEvent MessageAlreadyProcessed { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source MessageMoved Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a message couldn't be processed and is moved to another endpoint. This event occurs when the MoveMessageErrorPolicy is applied. Declaration public static LogEvent MessageMoved { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source MessageProduced Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a message is produced. Declaration public static LogEvent MessageProduced { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source MessageSkipped Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a message couldn't be processed and is skipped. This event occurs when the SkipMessageErrorPolicy is applied. Declaration public static LogEvent MessageSkipped { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source MessageWrittenToOutbox Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the message is being written to the outbox. Declaration public static LogEvent MessageWrittenToOutbox { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source NullMessageSkipped Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a null message is skipped (see Skip . Declaration public static LogEvent NullMessageSkipped { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source OutboxEmpty Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the IOutboxWorker doesn't find any message in the outbox. Declaration public static LogEvent OutboxEmpty { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source PolicyApplyRuleReturnedFalse Gets the Silverback.Diagnostics.LogEvent representing the log that is written during the evaluation of an error policy, when the policy isn't applied because of it's apply rule. Declaration public static LogEvent PolicyApplyRuleReturnedFalse { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source PolicyChainCompleted Gets the Silverback.Diagnostics.LogEvent representing the log that is written when all chained policies have been applied but the processing still failed and the consumer will therefore be stopped. Declaration public static LogEvent PolicyChainCompleted { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source PolicyExceptionExcluded Gets the Silverback.Diagnostics.LogEvent representing the log that is written during the evaluation of an error policy, when the policy isn't applied because the current exception type is in the exclusion list. Declaration public static LogEvent PolicyExceptionExcluded { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source PolicyExceptionNotIncluded Gets the Silverback.Diagnostics.LogEvent representing the log that is written during the evaluation of an error policy, when the policy isn't applied because the current exception type is not in the inclusion list. Declaration public static LogEvent PolicyExceptionNotIncluded { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source PolicyMaxFailedAttemptsExceeded Gets the Silverback.Diagnostics.LogEvent representing the log that is written during the evaluation of an error policy, when the maximum configured failed attempts for the policies are exceeded and the policy isn't applied anymore. Declaration public static LogEvent PolicyMaxFailedAttemptsExceeded { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ProcessingInboundMessage Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an inbound message is being processed. Declaration public static LogEvent ProcessingInboundMessage { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ProcessingOutboxStoredMessage Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the message stored in the outbox is being processed. Declaration public static LogEvent ProcessingOutboxStoredMessage { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ProducerConnected Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the producer is connected to the endpoint and ready to produce. Declaration public static LogEvent ProducerConnected { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ProducerDisconnected Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the producer is disconnected from the endpoint. Declaration public static LogEvent ProducerDisconnected { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source ReadingMessagesFromOutbox Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the IOutboxWorker loads a batch of enqueued messages. Declaration public static LogEvent ReadingMessagesFromOutbox { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source RetryDelayed Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a message couldn't be processed and a delay is applied before retrying it. Declaration public static LogEvent RetryDelayed { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source RetryMessageProcessing Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a message couldn't be processed and the retry policy is applied, processing the message again. This event occurs when the RetryErrorPolicy is applied. Declaration public static LogEvent RetryMessageProcessing { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source RollbackToRetryFailed Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a the rollback initiated by the RetryErrorPolicy fails with an exception. This will cause the consumer to be disconnected and reconnected. Declaration public static LogEvent RollbackToRetryFailed { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source RollbackToSkipFailed Gets the Silverback.Diagnostics.LogEvent representing the log that is written when a the rollback initiated by the SkipMessageErrorPolicy fails with an exception. This will cause the consumer to be disconnected and reconnected. Declaration public static LogEvent RollbackToSkipFailed { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source SequenceCompleted Gets the Silverback.Diagnostics.LogEvent representing the log that is written when all messages belonging to the sequence have been consumed and published to the internal bus. Declaration public static LogEvent SequenceCompleted { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source SequenceProcessingAborted Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the processing of a sequence of messages is aborted, but not because of an error (an ErrorProcessingInboundSequence is logged instead) or an incomplete sequence that gets discarded (an IncompleteSequenceAborted or an SkippingIncompleteSequence is logged instead). Declaration public static LogEvent SequenceProcessingAborted { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source SequenceStarted Gets the Silverback.Diagnostics.LogEvent representing the log that is written when the first message of a new sequence is consumed. Declaration public static LogEvent SequenceStarted { get; } Property Value Type Description Silverback.Diagnostics.LogEvent | Improve this doc View source SkippingIncompleteSequence Gets the Silverback.Diagnostics.LogEvent representing the log that is written when an incomplete sequence is skipped because first consumed message of that sequence doesn't correspond to the actual sequence beginning (e.g. the first chunk). Declaration public static LogEvent SkippingIncompleteSequence { get; } Property Value Type Description Silverback.Diagnostics.LogEvent"
  },
  "api/Silverback.Diagnostics.IOutboundLogger-1.html": {
    "href": "api/Silverback.Diagnostics.IOutboundLogger-1.html",
    "title": "Interface IOutboundLogger<TCategoryName> | Silverback",
    "keywords": "Interface IOutboundLogger<TCategoryName> An Silverback.Diagnostics.ISilverbackLogger<TCategoryName> with some specific methods to log outbound messages related events. Inherited Members Silverback.Diagnostics.ISilverbackLogger.InnerLogger Silverback.Diagnostics.ISilverbackLogger.IsEnabled(Silverback.Diagnostics.LogEvent) Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IOutboundLogger<out TCategoryName> : ISilverbackLogger<TCategoryName>, ISilverbackLogger Type Parameters Name Description TCategoryName The type who's name is used for the logger category name. Methods | Improve this doc View source LogErrorProducingOutboxStoredMessage(IOutboundEnvelope, Exception) Logs the ErrorProducingOutboxStoredMessage event. Declaration void LogErrorProducingOutboxStoredMessage(IOutboundEnvelope envelope, Exception exception) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogProduced(IProducerEndpoint, String, IReadOnlyCollection<MessageHeader>, IBrokerMessageIdentifier) Logs the MessageProduced event. Declaration void LogProduced(IProducerEndpoint endpoint, string actualEndpointName, IReadOnlyCollection<MessageHeader> headers, IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IProducerEndpoint endpoint The IProducerEndpoint . System.String actualEndpointName The name of the actual target endpoint. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. IBrokerMessageIdentifier brokerMessageIdentifier The IBrokerMessageIdentifier . | Improve this doc View source LogProduced(IOutboundEnvelope) Logs the MessageProduced event. Declaration void LogProduced(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope . | Improve this doc View source LogProduceError(IProducerEndpoint, String, IReadOnlyCollection<MessageHeader>, Exception) Logs the ErrorProducingMessage event. Declaration void LogProduceError(IProducerEndpoint endpoint, string actualEndpointName, IReadOnlyCollection<MessageHeader> headers, Exception exception) Parameters Type Name Description IProducerEndpoint endpoint The IProducerEndpoint . System.String actualEndpointName The name of the actual target endpoint. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.Exception exception The System.Exception . | Improve this doc View source LogProduceError(IOutboundEnvelope, Exception) Logs the ErrorProducingMessage event. Declaration void LogProduceError(IOutboundEnvelope envelope, Exception exception) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogWrittenToOutbox(IOutboundEnvelope) Logs the MessageWrittenToOutbox event. Declaration void LogWrittenToOutbox(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope ."
  },
  "api/Silverback.Domain.DomainEntity.html": {
    "href": "api/Silverback.Domain.DomainEntity.html",
    "title": "Class DomainEntity | Silverback",
    "keywords": "Class DomainEntity The base class for the domain entities that encapsulate domain events. Inheritance System.Object Silverback.Messaging.Messages.MessagesSource < IDomainEvent > DomainEntity Implements Silverback.Messaging.Messages.IMessagesSource Inherited Members Silverback.Messaging.Messages.MessagesSource<Silverback.Domain.IDomainEvent>.GetMessages() Silverback.Messaging.Messages.MessagesSource<Silverback.Domain.IDomainEvent>.ClearMessages() Silverback.Messaging.Messages.MessagesSource<Silverback.Domain.IDomainEvent>.AddEvent(Silverback.Domain.IDomainEvent) Silverback.Messaging.Messages.MessagesSource<Silverback.Domain.IDomainEvent>.AddEvent<TEvent>(System.Boolean) Silverback.Messaging.Messages.MessagesSource<Silverback.Domain.IDomainEvent>.RemoveEvent(Silverback.Domain.IDomainEvent) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public abstract class DomainEntity : MessagesSource<IDomainEvent>, IMessagesSource Remarks It's not mandatory to use this base class as long as long as the domain entities implement the Silverback.Messaging.Messages.IMessagesSource interface. Properties | Improve this doc View source DomainEvents Gets the domain events that have been added but not yet published. Declaration [NotMapped] public IEnumerable<IDomainEvent> DomainEvents { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IDomainEvent > Implements Silverback.Messaging.Messages.IMessagesSource"
  },
  "api/Silverback.Domain.DomainEvent-1.html": {
    "href": "api/Silverback.Domain.DomainEvent-1.html",
    "title": "Class DomainEvent<TEntity> | Silverback",
    "keywords": "Class DomainEvent<TEntity> Inheritance System.Object DomainEvent<TEntity> Implements IDomainEvent <TEntity> IDomainEvent Silverback.Messaging.Messages.IMessageWithSource IEvent Silverback.Messaging.Messages.IMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public abstract class DomainEvent<TEntity> : IDomainEvent<TEntity>, IDomainEvent, IMessageWithSource, IEvent, IMessage where TEntity : class Type Parameters Name Description TEntity Properties | Improve this doc View source Source Declaration public TEntity Source { get; set; } Property Value Type Description TEntity Explicit Interface Implementations | Improve this doc View source IMessageWithSource.Source Declaration object IMessageWithSource.Source { get; set; } Returns Type Description System.Object Implements IDomainEvent<TEntity> IDomainEvent Silverback.Messaging.Messages.IMessageWithSource IEvent Silverback.Messaging.Messages.IMessage"
  },
  "api/Silverback.Domain.EntityEvent.html": {
    "href": "api/Silverback.Domain.EntityEvent.html",
    "title": "Class EntityEvent | Silverback",
    "keywords": "Class EntityEvent Inheritance System.Object EntityEvent Implements IEntityEvent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax public abstract class EntityEvent : IEntityEvent Properties | Improve this doc View source Sequence Declaration [JsonIgnore] public int Sequence { get; set; } Property Value Type Description System.Int32 | Improve this doc View source Timestamp Declaration [JsonIgnore] public DateTime Timestamp { get; set; } Property Value Type Description System.DateTime Implements IEntityEvent"
  },
  "api/Silverback.Domain.EventSourcingDomainEntity-1.html": {
    "href": "api/Silverback.Domain.EventSourcingDomainEntity-1.html",
    "title": "Class EventSourcingDomainEntity<TKey> | Silverback",
    "keywords": "Class EventSourcingDomainEntity<TKey> The base class for the domain entities that are persisted in the event store. Inheritance System.Object Silverback.Messaging.Messages.MessagesSource < System.Object > EventSourcingDomainEntity <TKey, System.Object > EventSourcingDomainEntity<TKey> Implements Silverback.Messaging.Messages.IMessagesSource IEventSourcingDomainEntity <TKey> IEventSourcingDomainEntity Inherited Members EventSourcingDomainEntity<TKey, Object>.DomainEvents EventSourcingDomainEntity<TKey, Object>.Events EventSourcingDomainEntity<TKey, Object>.Id EventSourcingDomainEntity<TKey, Object>.GetVersion() EventSourcingDomainEntity<TKey, Object>.GetNewEvents() EventSourcingDomainEntity<TKey, Object>.AddAndApplyEvent(IEntityEvent) Silverback.Messaging.Messages.MessagesSource<System.Object>.GetMessages() Silverback.Messaging.Messages.MessagesSource<System.Object>.ClearMessages() Silverback.Messaging.Messages.MessagesSource<System.Object>.AddEvent(System.Object) Silverback.Messaging.Messages.MessagesSource<System.Object>.AddEvent<TEvent>(System.Boolean) Silverback.Messaging.Messages.MessagesSource<System.Object>.RemoveEvent(System.Object) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax public abstract class EventSourcingDomainEntity<TKey> : EventSourcingDomainEntity<TKey, object>, IMessagesSource, IEventSourcingDomainEntity<TKey>, IEventSourcingDomainEntity Type Parameters Name Description TKey The type of the entity key. Remarks It's not mandatory to use this base class as long as long as the domain entities implement the IEventSourcingDomainEntity<TKey> interface. Constructors | Improve this doc View source EventSourcingDomainEntity() Initializes a new instance of the EventSourcingDomainEntity<TKey> class. Declaration protected EventSourcingDomainEntity() | Improve this doc View source EventSourcingDomainEntity(IReadOnlyCollection<IEntityEvent>) Initializes a new instance of the EventSourcingDomainEntity<TKey> class from the stored events. Declaration protected EventSourcingDomainEntity(IReadOnlyCollection<IEntityEvent> events) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IEntityEvent > events The stored events to be re-applied to rebuild the entity state. Implements Silverback.Messaging.Messages.IMessagesSource IEventSourcingDomainEntity<TKey> IEventSourcingDomainEntity"
  },
  "api/Silverback.Domain.EventSourcingDomainEntity-2.html": {
    "href": "api/Silverback.Domain.EventSourcingDomainEntity-2.html",
    "title": "Class EventSourcingDomainEntity<TKey, TDomainEvent> | Silverback",
    "keywords": "Class EventSourcingDomainEntity<TKey, TDomainEvent> The base class for the domain entities that are persisted in the event store. Inheritance System.Object Silverback.Messaging.Messages.MessagesSource <TDomainEvent> EventSourcingDomainEntity<TKey, TDomainEvent> EventSourcingDomainEntity<TKey> Implements Silverback.Messaging.Messages.IMessagesSource IEventSourcingDomainEntity <TKey> IEventSourcingDomainEntity Inherited Members Silverback.Messaging.Messages.MessagesSource<TDomainEvent>.GetMessages() Silverback.Messaging.Messages.MessagesSource<TDomainEvent>.ClearMessages() Silverback.Messaging.Messages.MessagesSource<TDomainEvent>.AddEvent(TDomainEvent) Silverback.Messaging.Messages.MessagesSource<TDomainEvent>.AddEvent<TEvent>(System.Boolean) Silverback.Messaging.Messages.MessagesSource<TDomainEvent>.RemoveEvent(TDomainEvent) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax public abstract class EventSourcingDomainEntity<TKey, TDomainEvent> : MessagesSource<TDomainEvent>, IMessagesSource, IEventSourcingDomainEntity<TKey>, IEventSourcingDomainEntity Type Parameters Name Description TKey The type of the entity key. TDomainEvent The base type of the domain events. Remarks It's not mandatory to use this base class as long as long as the domain entities implement the IEventSourcingDomainEntity<TKey> interface. Constructors | Improve this doc View source EventSourcingDomainEntity() Initializes a new instance of the EventSourcingDomainEntity<TKey, TDomainEvent> class. Declaration protected EventSourcingDomainEntity() | Improve this doc View source EventSourcingDomainEntity(IReadOnlyCollection<IEntityEvent>) Initializes a new instance of the EventSourcingDomainEntity<TKey, TDomainEvent> class from the stored events. Declaration protected EventSourcingDomainEntity(IReadOnlyCollection<IEntityEvent> events) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IEntityEvent > events The stored events to be re-applied to rebuild the entity state. Properties | Improve this doc View source DomainEvents Gets the domain events that have been added but not yet published. Declaration [NotMapped] public IEnumerable<TDomainEvent> DomainEvents { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TDomainEvent> | Improve this doc View source Events Gets the events that have been applied to build the current state. Declaration [NotMapped] public IEnumerable<IEntityEvent> Events { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntityEvent > | Improve this doc View source Id Declaration public TKey Id { get; protected set; } Property Value Type Description TKey Methods | Improve this doc View source AddAndApplyEvent(IEntityEvent) Adds the specified event and applies it to update the entity state. Declaration protected virtual IEntityEvent AddAndApplyEvent(IEntityEvent entityEvent) Parameters Type Name Description IEntityEvent entityEvent The event to be added. Returns Type Description IEntityEvent The IEntityEvent that was added and applied. | Improve this doc View source GetNewEvents() Declaration public IEnumerable<IEntityEvent> GetNewEvents() Returns Type Description System.Collections.Generic.IEnumerable < IEntityEvent > | Improve this doc View source GetVersion() Declaration public int GetVersion() Returns Type Description System.Int32 Implements Silverback.Messaging.Messages.IMessagesSource IEventSourcingDomainEntity<TKey> IEventSourcingDomainEntity"
  },
  "api/Silverback.Domain.EventSourcingException.html": {
    "href": "api/Silverback.Domain.EventSourcingException.html",
    "title": "Class EventSourcingException | Silverback",
    "keywords": "Class EventSourcingException The exception that is thrown when the stored events cannot be applied back to the domain entity. Inheritance System.Object System.Exception Silverback.SilverbackException EventSourcingException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax [Serializable] public class EventSourcingException : SilverbackException, ISerializable Constructors | Improve this doc View source EventSourcingException() Initializes a new instance of the EventSourcingException class. Declaration public EventSourcingException() | Improve this doc View source EventSourcingException(SerializationInfo, StreamingContext) Initializes a new instance of the EventSourcingException class with the serialized data. Declaration protected EventSourcingException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EventSourcingException(String) Initializes a new instance of the EventSourcingException class with the specified message. Declaration public EventSourcingException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EventSourcingException(String, Exception) Initializes a new instance of the EventSourcingException class with the specified message and inner exception. Declaration public EventSourcingException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Domain.html": {
    "href": "api/Silverback.Domain.html",
    "title": "Namespace Silverback.Domain | Silverback",
    "keywords": "Namespace Silverback.Domain Classes DomainEntity The base class for the domain entities that encapsulate domain events. DomainEvent<TEntity> EntityEvent EventSourcingDomainEntity<TKey> The base class for the domain entities that are persisted in the event store. EventSourcingDomainEntity<TKey, TDomainEvent> The base class for the domain entities that are persisted in the event store. EventSourcingException The exception that is thrown when the stored events cannot be applied back to the domain entity. Interfaces IAggregateRoot This empty interface has no other purpose than help recognizing the aggregate root. IDomainEvent An event that generates inside the domain (model). IDomainEvent<TEntity> IEntityEvent A recorded event that can be re-applied to rebuild the entity status."
  },
  "api/Silverback.Domain.IAggregateRoot.html": {
    "href": "api/Silverback.Domain.IAggregateRoot.html",
    "title": "Interface IAggregateRoot | Silverback",
    "keywords": "Interface IAggregateRoot This empty interface has no other purpose than help recognizing the aggregate root. Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public interface IAggregateRoot"
  },
  "api/Silverback.Domain.IDomainEvent.html": {
    "href": "api/Silverback.Domain.IDomainEvent.html",
    "title": "Interface IDomainEvent | Silverback",
    "keywords": "Interface IDomainEvent An event that generates inside the domain (model). Inherited Members Silverback.Messaging.Messages.IMessageWithSource.Source Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public interface IDomainEvent : IMessageWithSource, IEvent, IMessage"
  },
  "api/Silverback.Domain.IDomainEvent-1.html": {
    "href": "api/Silverback.Domain.IDomainEvent-1.html",
    "title": "Interface IDomainEvent<TEntity> | Silverback",
    "keywords": "Interface IDomainEvent<TEntity> Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public interface IDomainEvent<out TEntity> : IDomainEvent, IMessageWithSource, IEvent, IMessage where TEntity : class Type Parameters Name Description TEntity The type of the related domain entity. Properties | Improve this doc View source Source Gets the reference to the domain entity that generated this event. Declaration TEntity Source { get; } Property Value Type Description TEntity"
  },
  "api/Silverback.Domain.IEntityEvent.html": {
    "href": "api/Silverback.Domain.IEntityEvent.html",
    "title": "Interface IEntityEvent | Silverback",
    "keywords": "Interface IEntityEvent A recorded event that can be re-applied to rebuild the entity status. Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax public interface IEntityEvent Properties | Improve this doc View source Sequence Gets or sets the sequence number that is used to replay the messages in the right order. Declaration int Sequence { get; set; } Property Value Type Description System.Int32 | Improve this doc View source Timestamp Gets or sets the datetime when the event occured. Declaration DateTime Timestamp { get; set; } Property Value Type Description System.DateTime"
  },
  "api/Silverback.EventStore.DbEventStoreRepository-4.html": {
    "href": "api/Silverback.EventStore.DbEventStoreRepository-4.html",
    "title": "Class DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> | Silverback",
    "keywords": "Class DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> The base class for the event store repositories that persist the events into a database. Inheritance System.Object EventStoreRepository <TDomainEntity, TEventStoreEntity, TEventEntity> DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> Inherited Members EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.Store(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.StoreAsync(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.Remove(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.RemoveAsync(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntity(TDomainEntity, Boolean) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntityAsync(TDomainEntity, Boolean) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.AddEventStoreEntity(TEventStoreEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntity(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntityAsync(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.MapEventStoreEntity(TDomainEntity, TEventStoreEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetDomainEntity(TEventStoreEntity, Nullable<DateTime>) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.MapEventEntity(IEntityEvent) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.MapEvent(TEventEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.RemoveCore(TEventStoreEntity) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public abstract class DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> : EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> where TDomainEntity : class, IEventSourcingDomainEntity<TKey> where TEventStoreEntity : EventStoreEntity<TEventEntity>, new() where TEventEntity : class, IEventEntity, new() Type Parameters Name Description TDomainEntity The type of the domain entity whose events are stored in this repository. TKey The type of the domain entity key. TEventStoreEntity The type of event store entity being persisted to the underlying storage. TEventEntity The base type of the events that will be associated to the event store entity. Constructors | Improve this doc View source DbEventStoreRepository(IDbContext) Initializes a new instance of the DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> class. Declaration protected DbEventStoreRepository(IDbContext dbContext) Parameters Type Name Description Silverback.Database.IDbContext dbContext The Silverback.Database.IDbContext to use as storage. Properties | Improve this doc View source EventStores Gets the System.Linq.IQueryable<T> of event store entities. Declaration protected IQueryable<TEventStoreEntity> EventStores { get; } Property Value Type Description System.Linq.IQueryable <TEventStoreEntity> Remarks This System.Linq.IQueryable<T> is pre-configured to include the events and is meant for read only (changes are not being tracked). Methods | Improve this doc View source AddEventStoreEntity(TEventStoreEntity) Declaration protected override void AddEventStoreEntity(TEventStoreEntity eventStoreEntity) Parameters Type Name Description TEventStoreEntity eventStoreEntity Overrides Silverback.EventStore.EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.AddEventStoreEntity(TEventStoreEntity) | Improve this doc View source Find(Expression<Func<TEventStoreEntity, Boolean>>, Nullable<DateTime>) Finds the event store matching the specified predicate and if found returns the domain entity after having applied the stored events. Declaration public TDomainEntity Find(Expression<Func<TEventStoreEntity, bool>> predicate, DateTime? snapshot = default(DateTime? )) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TEventStoreEntity, System.Boolean >> predicate The predicate applied to get the desired event store. System.Nullable < System.DateTime > snapshot The optional snapshot datetime. When not null only the events registered until the specified datetime are applied, returning the entity in its state back in that moment. Returns Type Description TDomainEntity The domain entity or null if not found. | Improve this doc View source FindAsync(Expression<Func<TEventStoreEntity, Boolean>>, Nullable<DateTime>) Finds the event store matching the specified predicate and if found returns the domain entity after having applied the stored events. Declaration public Task<TDomainEntity> FindAsync(Expression<Func<TEventStoreEntity, bool>> predicate, DateTime? snapshot = default(DateTime? )) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TEventStoreEntity, System.Boolean >> predicate The predicate applied to get the desired event store. System.Nullable < System.DateTime > snapshot The optional snapshot datetime. When not null only the events registered until the specified datetime are applied, returning the entity in its state back in that moment. Returns Type Description System.Threading.Tasks.Task <TDomainEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the domain entity or null if not found. | Improve this doc View source GetEventStoreEntity(TDomainEntity) Declaration protected override TEventStoreEntity GetEventStoreEntity(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity Returns Type Description TEventStoreEntity Overrides Silverback.EventStore.EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntity(TDomainEntity) | Improve this doc View source GetEventStoreEntityAsync(TDomainEntity) Declaration protected override Task<TEventStoreEntity> GetEventStoreEntityAsync(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> Overrides Silverback.EventStore.EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntityAsync(TDomainEntity) | Improve this doc View source RemoveCore(TEventStoreEntity) Declaration protected override void RemoveCore(TEventStoreEntity eventStore) Parameters Type Name Description TEventStoreEntity eventStore Overrides Silverback.EventStore.EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.RemoveCore(TEventStoreEntity)"
  },
  "api/Silverback.EventStore.EventEntity.html": {
    "href": "api/Silverback.EventStore.EventEntity.html",
    "title": "Class EventEntity | Silverback",
    "keywords": "Class EventEntity Inheritance System.Object EventEntity Implements IEventEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public abstract class EventEntity : IEventEntity Properties | Improve this doc View source ClrType Declaration [MaxLength(500)] public string ClrType { get; set; } Property Value Type Description System.String | Improve this doc View source Sequence Declaration public int Sequence { get; set; } Property Value Type Description System.Int32 | Improve this doc View source SerializedEvent Declaration public string SerializedEvent { get; set; } Property Value Type Description System.String | Improve this doc View source Timestamp Declaration public DateTime Timestamp { get; set; } Property Value Type Description System.DateTime Implements IEventEntity"
  },
  "api/Silverback.EventStore.EventStoreConcurrencyException.html": {
    "href": "api/Silverback.EventStore.EventStoreConcurrencyException.html",
    "title": "Class EventStoreConcurrencyException | Silverback",
    "keywords": "Class EventStoreConcurrencyException The exception that is thrown when the event store detects that the record being saved has been modified since it was read. Inheritance System.Object System.Exception Silverback.SilverbackException EventStoreException EventStoreConcurrencyException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax [Serializable] public class EventStoreConcurrencyException : EventStoreException, ISerializable Constructors | Improve this doc View source EventStoreConcurrencyException() Initializes a new instance of the EventStoreConcurrencyException class. Declaration public EventStoreConcurrencyException() | Improve this doc View source EventStoreConcurrencyException(SerializationInfo, StreamingContext) Initializes a new instance of the EventStoreConcurrencyException class with the serialized data. Declaration protected EventStoreConcurrencyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EventStoreConcurrencyException(String) Initializes a new instance of the EventStoreConcurrencyException class with the specified message. Declaration public EventStoreConcurrencyException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EventStoreConcurrencyException(String, Exception) Initializes a new instance of the EventStoreConcurrencyException class with the specified message and inner exception. Declaration public EventStoreConcurrencyException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.EventStore.EventStoreEntity-1.html": {
    "href": "api/Silverback.EventStore.EventStoreEntity-1.html",
    "title": "Class EventStoreEntity<TEventEntity> | Silverback",
    "keywords": "Class EventStoreEntity<TEventEntity> Inheritance System.Object Silverback.Messaging.Messages.MessagesSource < System.Object > EventStoreEntity<TEventEntity> Implements Silverback.Messaging.Messages.IMessagesSource IEventStoreEntity <TEventEntity> Inherited Members Silverback.Messaging.Messages.MessagesSource<System.Object>.GetMessages() Silverback.Messaging.Messages.MessagesSource<System.Object>.ClearMessages() Silverback.Messaging.Messages.MessagesSource<System.Object>.AddEvent(System.Object) Silverback.Messaging.Messages.MessagesSource<System.Object>.AddEvent<TEvent>(System.Boolean) Silverback.Messaging.Messages.MessagesSource<System.Object>.RemoveEvent(System.Object) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public class EventStoreEntity<TEventEntity> : MessagesSource<object>, IMessagesSource, IEventStoreEntity<TEventEntity> where TEventEntity : IEventEntity Type Parameters Name Description TEventEntity Properties | Improve this doc View source EntityVersion Declaration public int EntityVersion { get; set; } Property Value Type Description System.Int32 | Improve this doc View source Events Declaration public ICollection<TEventEntity> Events { get; } Property Value Type Description System.Collections.Generic.ICollection <TEventEntity> Methods | Improve this doc View source AddDomainEvents(IEnumerable<Object>) Declaration public void AddDomainEvents(IEnumerable<object> events) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Object > events Implements Silverback.Messaging.Messages.IMessagesSource IEventStoreEntity<TEventEntity>"
  },
  "api/Silverback.EventStore.EventStoreException.html": {
    "href": "api/Silverback.EventStore.EventStoreException.html",
    "title": "Class EventStoreException | Silverback",
    "keywords": "Class EventStoreException The base class for the exceptions related to the event store. Inheritance System.Object System.Exception Silverback.SilverbackException EventStoreException EventStoreConcurrencyException EventStoreNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax [Serializable] public abstract class EventStoreException : SilverbackException, ISerializable Constructors | Improve this doc View source EventStoreException() Initializes a new instance of the EventStoreException class. Declaration protected EventStoreException() | Improve this doc View source EventStoreException(SerializationInfo, StreamingContext) Initializes a new instance of the EventStoreException class with the serialized data. Declaration protected EventStoreException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EventStoreException(String) Initializes a new instance of the EventStoreException class with the specified message. Declaration protected EventStoreException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EventStoreException(String, Exception) Initializes a new instance of the EventStoreException class with the specified message and inner exception. Declaration protected EventStoreException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.EventStore.EventStoreNotFoundException.html": {
    "href": "api/Silverback.EventStore.EventStoreNotFoundException.html",
    "title": "Class EventStoreNotFoundException | Silverback",
    "keywords": "Class EventStoreNotFoundException The exception that is thrown when the event store entity cannot be found. Inheritance System.Object System.Exception Silverback.SilverbackException EventStoreException EventStoreNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax [Serializable] public class EventStoreNotFoundException : EventStoreException, ISerializable Constructors | Improve this doc View source EventStoreNotFoundException() Initializes a new instance of the EventStoreNotFoundException class. Declaration public EventStoreNotFoundException() | Improve this doc View source EventStoreNotFoundException(SerializationInfo, StreamingContext) Initializes a new instance of the EventStoreNotFoundException class with the serialized data. Declaration protected EventStoreNotFoundException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EventStoreNotFoundException(String) Initializes a new instance of the EventStoreNotFoundException class with the specified message. Declaration public EventStoreNotFoundException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EventStoreNotFoundException(String, Exception) Initializes a new instance of the EventStoreNotFoundException class with the specified message and inner exception. Declaration public EventStoreNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.EventStore.EventStoreRepository-3.html": {
    "href": "api/Silverback.EventStore.EventStoreRepository-3.html",
    "title": "Class EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> | Silverback",
    "keywords": "Class EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> The base class for the event store repositories. Inheritance System.Object EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public abstract class EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> where TDomainEntity : class, IEventSourcingDomainEntity where TEventStoreEntity : class, IEventStoreEntity<TEventEntity>, new() where TEventEntity : class, IEventEntity, new() Type Parameters Name Description TDomainEntity The type of the domain entity whose events are stored in this repository. TEventStoreEntity The type of event store entity being persisted to the underlying storage. TEventEntity The base type of the events that will be associated to the event store entity. Methods | Improve this doc View source AddEventStoreEntity(TEventStoreEntity) Adds the new event store entity to the storage, without committing yet. Declaration protected abstract void AddEventStoreEntity(TEventStoreEntity eventStoreEntity) Parameters Type Name Description TEventStoreEntity eventStoreEntity The event store entity to be added. Remarks In EF Core this equals to adding the entity to the DbSet without calling SaveChanges (that will be called later by the framework). | Improve this doc View source GetDomainEntity(TEventStoreEntity, Nullable<DateTime>) Rebuilds the domain entity applying the stored events. Declaration protected virtual TDomainEntity GetDomainEntity(TEventStoreEntity eventStoreEntity, DateTime? snapshot = default(DateTime? )) Parameters Type Name Description TEventStoreEntity eventStoreEntity The event store entity referencing the events to be applied. System.Nullable < System.DateTime > snapshot The optional datetime of the snapshot to build. Specifying it will cause only the events up to this datetime to be applied. Returns Type Description TDomainEntity The domain entity rebuilt from the stored events. | Improve this doc View source GetEventStoreEntity(TDomainEntity) Returns the event store entity related to the specified domain entity. Declaration protected abstract TEventStoreEntity GetEventStoreEntity(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity. Returns Type Description TEventStoreEntity The event store entity. | Improve this doc View source GetEventStoreEntity(TDomainEntity, Boolean) Returns the event store entity related to the specified domain entity. Declaration protected virtual TEventStoreEntity GetEventStoreEntity(TDomainEntity domainEntity, bool addIfNotFound) Parameters Type Name Description TDomainEntity domainEntity The domain entity. System.Boolean addIfNotFound Specifies whether the entity must be created when not found. Returns Type Description TEventStoreEntity The event store entity. | Improve this doc View source GetEventStoreEntityAsync(TDomainEntity) Returns the event store entity related to the specified domain entity. Declaration protected abstract Task<TEventStoreEntity> GetEventStoreEntityAsync(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity. Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the event store entity. | Improve this doc View source GetEventStoreEntityAsync(TDomainEntity, Boolean) Returns the event store entity related to the specified domain entity. Declaration protected virtual Task<TEventStoreEntity> GetEventStoreEntityAsync(TDomainEntity domainEntity, bool addIfNotFound) Parameters Type Name Description TDomainEntity domainEntity The domain entity. System.Boolean addIfNotFound Specifies whether the entity must be created when not found. Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the event store entity. | Improve this doc View source MapEvent(TEventEntity) Maps the persisted entity back to the IEntityEvent . Declaration protected virtual IEntityEvent MapEvent(TEventEntity eventEntity) Parameters Type Name Description TEventEntity eventEntity The stored event entity to be mapped. Returns Type Description IEntityEvent The IEntityEvent . | Improve this doc View source MapEventEntity(IEntityEvent) Maps the IEntityEvent to the related entity being persisted into the underlying storage. Declaration protected virtual TEventEntity MapEventEntity(IEntityEvent entityEvent) Parameters Type Name Description IEntityEvent entityEvent The entity event to be mapped. Returns Type Description TEventEntity The entity representing the IEntityEvent . | Improve this doc View source MapEventStoreEntity(TDomainEntity, TEventStoreEntity) Maps the domain entity to the event store entity. Declaration protected virtual void MapEventStoreEntity(TDomainEntity domainEntity, TEventStoreEntity eventStoreEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be mapped. TEventStoreEntity eventStoreEntity The event store entity to be initialized after the domain entity. Remarks This method should map the entity keys only. The events are handled automatically. | Improve this doc View source Remove(TDomainEntity) Removes the specified domain entity from the event store. Declaration public TEventStoreEntity Remove(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be removed. Returns Type Description TEventStoreEntity The event store entity that was removed. | Improve this doc View source RemoveAsync(TDomainEntity) Removes the specified domain entity from the event store. Declaration public Task<TEventStoreEntity> RemoveAsync(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be removed. Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the event store entity that was removed. | Improve this doc View source RemoveCore(TEventStoreEntity) Removes the event store entity and all related events from the store. Declaration protected abstract void RemoveCore(TEventStoreEntity eventStore) Parameters Type Name Description TEventStoreEntity eventStore The entity to be removed. | Improve this doc View source Store(TDomainEntity) Stores the specified domain entity into the event store. Declaration public TEventStoreEntity Store(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be stored. Returns Type Description TEventStoreEntity The event store entity that was persisted. | Improve this doc View source StoreAsync(TDomainEntity) Stores the specified domain entity into the event store. Declaration public Task<TEventStoreEntity> StoreAsync(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be stored. Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the event store entity that was persisted."
  },
  "api/Silverback.EventStore.html": {
    "href": "api/Silverback.EventStore.html",
    "title": "Namespace Silverback.EventStore | Silverback",
    "keywords": "Namespace Silverback.EventStore Classes DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> The base class for the event store repositories that persist the events into a database. EventEntity EventStoreConcurrencyException The exception that is thrown when the event store detects that the record being saved has been modified since it was read. EventStoreEntity<TEventEntity> EventStoreException The base class for the exceptions related to the event store. EventStoreNotFoundException The exception that is thrown when the event store entity cannot be found. EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> The base class for the event store repositories. Interfaces IEventEntity The stored entity that contains the information about an event applied to a domain entity. IEventSourcingDomainEntity A domain entity that is persisted in the event store. IEventSourcingDomainEntity<TKey> A domain entity that is persisted in the event store. IEventStoreEntity<TEventEntity> The stored entity that contain/references all the events applied to a domain entity."
  },
  "api/Silverback.EventStore.IEventEntity.html": {
    "href": "api/Silverback.EventStore.IEventEntity.html",
    "title": "Interface IEventEntity | Silverback",
    "keywords": "Interface IEventEntity The stored entity that contains the information about an event applied to a domain entity. Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public interface IEventEntity Properties | Improve this doc View source ClrType Gets or sets the assembly qualified name of the event class. Declaration string ClrType { get; set; } Property Value Type Description System.String | Improve this doc View source Sequence Gets or sets the sequence number that is used to replay the messages in the right order. Declaration int Sequence { get; set; } Property Value Type Description System.Int32 | Improve this doc View source SerializedEvent Gets or sets the serialized event. Declaration string SerializedEvent { get; set; } Property Value Type Description System.String | Improve this doc View source Timestamp Gets or sets the datetime when the event occured. Declaration DateTime Timestamp { get; set; } Property Value Type Description System.DateTime"
  },
  "api/Silverback.EventStore.IEventSourcingDomainEntity.html": {
    "href": "api/Silverback.EventStore.IEventSourcingDomainEntity.html",
    "title": "Interface IEventSourcingDomainEntity | Silverback",
    "keywords": "Interface IEventSourcingDomainEntity A domain entity that is persisted in the event store. Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public interface IEventSourcingDomainEntity Methods | Improve this doc View source GetNewEvents() Returns the new events that have to be persisted. Declaration IEnumerable<IEntityEvent> GetNewEvents() Returns Type Description System.Collections.Generic.IEnumerable < IEntityEvent > The new events to be persisted. | Improve this doc View source GetVersion() Returns the version of the entity. In the default implementation this is a sequence that is increment every time a new event is applied. Declaration int GetVersion() Returns Type Description System.Int32 The entity version."
  },
  "api/Silverback.EventStore.IEventSourcingDomainEntity-1.html": {
    "href": "api/Silverback.EventStore.IEventSourcingDomainEntity-1.html",
    "title": "Interface IEventSourcingDomainEntity<TKey> | Silverback",
    "keywords": "Interface IEventSourcingDomainEntity<TKey> A domain entity that is persisted in the event store. Inherited Members IEventSourcingDomainEntity.GetVersion() IEventSourcingDomainEntity.GetNewEvents() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public interface IEventSourcingDomainEntity<out TKey> : IEventSourcingDomainEntity Type Parameters Name Description TKey The type of the entity key. Properties | Improve this doc View source Id Gets the entity identifier. Declaration TKey Id { get; } Property Value Type Description TKey"
  },
  "api/Silverback.EventStore.IEventStoreEntity-1.html": {
    "href": "api/Silverback.EventStore.IEventStoreEntity-1.html",
    "title": "Interface IEventStoreEntity<TEventEntity> | Silverback",
    "keywords": "Interface IEventStoreEntity<TEventEntity> The stored entity that contain/references all the events applied to a domain entity. Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public interface IEventStoreEntity<TEventEntity> where TEventEntity : IEventEntity Type Parameters Name Description TEventEntity The type of the related event entity that will be referenced. Properties | Improve this doc View source EntityVersion Gets or sets the version of the entity. Declaration int EntityVersion { get; set; } Property Value Type Description System.Int32 Remarks In the default implementation this is a sequence that is increment every time a new event is applied. | Improve this doc View source Events Gets the events that have been applied to the domain entity. Declaration ICollection<TEventEntity> Events { get; } Property Value Type Description System.Collections.Generic.ICollection <TEventEntity> Methods | Improve this doc View source AddDomainEvents(IEnumerable<Object>) Adds the specified events. Declaration void AddDomainEvents(IEnumerable<object> events) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Object > events The events to be stored."
  },
  "api/Silverback.Infrastructure.html": {
    "href": "api/Silverback.Infrastructure.html",
    "title": "Namespace Silverback.Infrastructure | Silverback",
    "keywords": "Namespace Silverback.Infrastructure Classes RepositoryBase<TEntity> The base class for the repositories used to read and write data from a persistent storage."
  },
  "api/Silverback.Infrastructure.RepositoryBase-1.html": {
    "href": "api/Silverback.Infrastructure.RepositoryBase-1.html",
    "title": "Class RepositoryBase<TEntity> | Silverback",
    "keywords": "Class RepositoryBase<TEntity> The base class for the repositories used to read and write data from a persistent storage. Inheritance System.Object RepositoryBase<TEntity> DbInboundLog DbOffsetStore DbOutboxReader DbOutboxWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Infrastructure Assembly : Silverback.Integration.dll Syntax public abstract class RepositoryBase<TEntity> where TEntity : class Type Parameters Name Description TEntity The type of the entities being managed by the repository. Constructors | Improve this doc View source RepositoryBase(IDbContext) Initializes a new instance of the RepositoryBase<TEntity> class. Declaration protected RepositoryBase(IDbContext dbContext) Parameters Type Name Description Silverback.Database.IDbContext dbContext The Silverback.Database.IDbContext to be used. Properties | Improve this doc View source DbContext Gets the underlying Silverback.Database.IDbContext . Declaration protected IDbContext DbContext { get; } Property Value Type Description Silverback.Database.IDbContext | Improve this doc View source DbSet Gets the underlying Silverback.Database.IDbSet<TEntity> . Declaration protected IDbSet<TEntity> DbSet { get; } Property Value Type Description Silverback.Database.IDbSet <TEntity>"
  },
  "api/Silverback.Messaging.BinaryFiles.BinaryFileHandlerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.BinaryFileHandlerConsumerBehavior.html",
    "title": "Class BinaryFileHandlerConsumerBehavior | Silverback",
    "keywords": "Class BinaryFileHandlerConsumerBehavior Switches to the BinaryFileMessageSerializer if the message being consumed is a binary message (according to the x-message-type header). Inheritance System.Object BinaryFileHandlerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.BinaryFiles Assembly : Silverback.Integration.dll Syntax public class BinaryFileHandlerConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.BinaryFiles.BinaryFileHandlerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.BinaryFileHandlerProducerBehavior.html",
    "title": "Class BinaryFileHandlerProducerBehavior | Silverback",
    "keywords": "Class BinaryFileHandlerProducerBehavior Switches to the BinaryFileMessageSerializer if the message being produced implements the IBinaryFileMessage interface. Inheritance System.Object BinaryFileHandlerProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.BinaryFiles Assembly : Silverback.Integration.dll Syntax public class BinaryFileHandlerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.BinaryFiles.BinaryFileMessageSerializer.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.BinaryFileMessageSerializer.html",
    "title": "Class BinaryFileMessageSerializer | Silverback",
    "keywords": "Class BinaryFileMessageSerializer Handles the default implementation of IBinaryFileMessage . It's not really a serializer, since the raw binary content is transmitted as-is. Inheritance System.Object BinaryFileMessageSerializer Implements IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.BinaryFiles Assembly : Silverback.Integration.dll Syntax public class BinaryFileMessageSerializer : IMessageSerializer Properties | Improve this doc View source Default Gets the default static instance of BinaryFileMessageSerializer . Declaration public static BinaryFileMessageSerializer Default { get; } Property Value Type Description BinaryFileMessageSerializer | Improve this doc View source RequireHeaders Declaration public bool RequireHeaders { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Declaration public ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Declaration public ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > Implements IMessageSerializer"
  },
  "api/Silverback.Messaging.BinaryFiles.BinaryFileMessageSerializer-1.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.BinaryFileMessageSerializer-1.html",
    "title": "Class BinaryFileMessageSerializer<TModel> | Silverback",
    "keywords": "Class BinaryFileMessageSerializer<TModel> Handles the IBinaryFileMessage . It's not really a serializer, since the raw binary content is transmitted as-is. Inheritance System.Object BinaryFileMessageSerializer<TModel> Implements IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.BinaryFiles Assembly : Silverback.Integration.dll Syntax public class BinaryFileMessageSerializer<TModel> : IMessageSerializer where TModel : IBinaryFileMessage, new() Type Parameters Name Description TModel The type of the IBinaryFileMessage implementation. Properties | Improve this doc View source RequireHeaders Declaration public bool RequireHeaders { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Declaration public ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Declaration public ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > Implements IMessageSerializer"
  },
  "api/Silverback.Messaging.BinaryFiles.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.html",
    "title": "Namespace Silverback.Messaging.BinaryFiles | Silverback",
    "keywords": "Namespace Silverback.Messaging.BinaryFiles Classes BinaryFileHandlerConsumerBehavior Switches to the BinaryFileMessageSerializer if the message being consumed is a binary message (according to the x-message-type header). BinaryFileHandlerProducerBehavior Switches to the BinaryFileMessageSerializer if the message being produced implements the IBinaryFileMessage interface. BinaryFileMessageSerializer Handles the default implementation of IBinaryFileMessage . It's not really a serializer, since the raw binary content is transmitted as-is. BinaryFileMessageSerializer<TModel> Handles the IBinaryFileMessage . It's not really a serializer, since the raw binary content is transmitted as-is."
  },
  "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsProvider-1.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsProvider-1.html",
    "title": "Class BrokerBehaviorsProvider<TBehavior> | Silverback",
    "keywords": "Class BrokerBehaviorsProvider<TBehavior> Inheritance System.Object BrokerBehaviorsProvider<TBehavior> Implements IBrokerBehaviorsProvider <TBehavior> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public class BrokerBehaviorsProvider<TBehavior> : IBrokerBehaviorsProvider<TBehavior> where TBehavior : IBrokerBehavior Type Parameters Name Description TBehavior Constructors | Improve this doc View source BrokerBehaviorsProvider(IServiceProvider) Initializes a new instance of the BrokerBehaviorsProvider<TBehavior> class. Declaration public BrokerBehaviorsProvider(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the behaviors. Methods | Improve this doc View source GetBehaviorsList() Declaration public IReadOnlyList<TBehavior> GetBehaviorsList() Returns Type Description System.Collections.Generic.IReadOnlyList <TBehavior> Implements IBrokerBehaviorsProvider<TBehavior>"
  },
  "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.Consumer.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.Consumer.html",
    "title": "Class BrokerBehaviorsSortIndexes.Consumer | Silverback",
    "keywords": "Class BrokerBehaviorsSortIndexes.Consumer Contains the sort index constants of the consumer behaviors added by Silverback.Integration. Inheritance System.Object BrokerBehaviorsSortIndexes.Consumer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public static class Consumer Fields | Improve this doc View source Activity The ActivityConsumerBehavior sort index. Declaration public const int Activity = 100 Field Value Type Description System.Int32 | Improve this doc View source BinaryFileHandler The BinaryFileHandlerConsumerBehavior sort index. Declaration public const int BinaryFileHandler = 800 Field Value Type Description System.Int32 | Improve this doc View source CustomHeadersMapper The CustomHeadersMapperConsumerBehavior sort index. Declaration public const int CustomHeadersMapper = 300 Field Value Type Description System.Int32 | Improve this doc View source Decryptor The DecryptorConsumerBehavior sort index. Declaration public const int Decryptor = 700 Field Value Type Description System.Int32 | Improve this doc View source Deserializer The DeserializerConsumerBehavior sort index. Declaration public const int Deserializer = 900 Field Value Type Description System.Int32 | Improve this doc View source ExactlyOnceGuard The ExactlyOnceGuardConsumerBehavior sort index. Declaration public const int ExactlyOnceGuard = 600 Field Value Type Description System.Int32 | Improve this doc View source FatalExceptionLogger The FatalExceptionLoggerConsumerBehavior sort index. Declaration public const int FatalExceptionLogger = 200 Field Value Type Description System.Int32 | Improve this doc View source HeadersReader The HeadersReaderConsumerBehavior sort index. Declaration public const int HeadersReader = 1000 Field Value Type Description System.Int32 | Improve this doc View source Publisher The PublisherConsumerBehavior sort index. Declaration public const int Publisher = 2000 Field Value Type Description System.Int32 | Improve this doc View source RawSequencer The RawSequencerConsumerBehavior sort index. Declaration public const int RawSequencer = 500 Field Value Type Description System.Int32 | Improve this doc View source Sequencer The SequencerConsumerBehavior sort index. Declaration public const int Sequencer = 1100 Field Value Type Description System.Int32 | Improve this doc View source TransactionHandler The TransactionHandlerConsumerBehavior sort index. Declaration public const int TransactionHandler = 400 Field Value Type Description System.Int32 | Improve this doc View source Validator The ValidatorConsumerBehavior sort index. Declaration public const int Validator = 950 Field Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.html",
    "title": "Class BrokerBehaviorsSortIndexes | Silverback",
    "keywords": "Class BrokerBehaviorsSortIndexes Contains the sort index constants of the default IBrokerBehavior added by Silverback.Integration. Inheritance System.Object BrokerBehaviorsSortIndexes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public static class BrokerBehaviorsSortIndexes"
  },
  "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.Producer.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.Producer.html",
    "title": "Class BrokerBehaviorsSortIndexes.Producer | Silverback",
    "keywords": "Class BrokerBehaviorsSortIndexes.Producer Contains the sort index constants of the producer behaviors added by Silverback.Integration. Inheritance System.Object BrokerBehaviorsSortIndexes.Producer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public static class Producer Fields | Improve this doc View source Activity The ActivityProducerBehavior sort index. Declaration public const int Activity = 100 Field Value Type Description System.Int32 | Improve this doc View source BinaryFileHandler The BinaryFileHandlerProducerBehavior sort index. Declaration public const int BinaryFileHandler = 500 Field Value Type Description System.Int32 | Improve this doc View source BrokerKeyHeaderInitializer The KafkaMessageKeyInitializerProducerBehavior , RabbitRoutingKeyInitializerProducerBehavior or similar sort index. Declaration public const int BrokerKeyHeaderInitializer = 400 Field Value Type Description System.Int32 | Improve this doc View source CustomHeadersMapper The CustomHeadersMapperProducerBehavior sort index. Declaration public const int CustomHeadersMapper = 1000 Field Value Type Description System.Int32 | Improve this doc View source Encryptor The EncryptorProducerBehavior sort index. Declaration public const int Encryptor = 700 Field Value Type Description System.Int32 | Improve this doc View source EndpointNameResolver The EndpointNameResolverProducerBehavior sort index. Declaration public const int EndpointNameResolver = 900 Field Value Type Description System.Int32 | Improve this doc View source HeadersWriter The HeadersWriterProducerBehavior sort index. Declaration public const int HeadersWriter = 200 Field Value Type Description System.Int32 | Improve this doc View source MessageEnricher The MessageEnricherProducerBehavior sort index. Declaration public const int MessageEnricher = 250 Field Value Type Description System.Int32 | Improve this doc View source MessageIdInitializer The MessageIdInitializerProducerBehavior sort index. Declaration public const int MessageIdInitializer = 300 Field Value Type Description System.Int32 | Improve this doc View source Sequencer The SequencerProducerBehavior sort index. Declaration public const int Sequencer = 800 Field Value Type Description System.Int32 | Improve this doc View source Serializer The SerializerProducerBehavior sort index. Declaration public const int Serializer = 600 Field Value Type Description System.Int32 | Improve this doc View source Validator The ValidatorProducerBehavior sort index. Declaration public const int Validator = 550 Field Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Broker.Behaviors.ConsumerBehaviorHandler.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.ConsumerBehaviorHandler.html",
    "title": "Delegate ConsumerBehaviorHandler | Silverback",
    "keywords": "Delegate ConsumerBehaviorHandler The delegate that describes a message handler in the consumer pipeline. Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public delegate Task ConsumerBehaviorHandler(ConsumerPipelineContext context); Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the consumer behaviors pipeline. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Silverback.Messaging.Broker.Behaviors.ConsumerPipelineContext.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.ConsumerPipelineContext.html",
    "title": "Class ConsumerPipelineContext | Silverback",
    "keywords": "Class ConsumerPipelineContext The context that is passed along the consumer behaviors pipeline. Inheritance System.Object ConsumerPipelineContext Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public sealed class ConsumerPipelineContext : IDisposable Constructors | Improve this doc View source ConsumerPipelineContext(IRawInboundEnvelope, IConsumer, ISequenceStore, IServiceProvider) Initializes a new instance of the ConsumerPipelineContext class. Declaration public ConsumerPipelineContext(IRawInboundEnvelope envelope, IConsumer consumer, ISequenceStore sequenceStore, IServiceProvider serviceProvider) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message being processed. IConsumer consumer The IConsumer that triggered this pipeline. ISequenceStore sequenceStore The ISequenceStore used to temporary store the pending sequences being consumed. System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Properties | Improve this doc View source Consumer Gets the IConsumer that triggered this pipeline. Declaration public IConsumer Consumer { get; } Property Value Type Description IConsumer | Improve this doc View source Envelope Gets or sets the envelopes containing the messages being processed. Declaration public IRawInboundEnvelope Envelope { get; set; } Property Value Type Description IRawInboundEnvelope | Improve this doc View source IsSequenceEnd Gets a value indicating whether the current message was recognized as the end of the sequence. Declaration public bool IsSequenceEnd { get; } Property Value Type Description System.Boolean | Improve this doc View source IsSequenceStart Gets a value indicating whether the current message was recognized as the beginning of a new sequence. Declaration public bool IsSequenceStart { get; } Property Value Type Description System.Boolean | Improve this doc View source ProcessingTask Gets the System.Threading.Tasks.Task representing the message processing when it is not directly awaited (e.g. when starting the processing of a Sequence . This System.Threading.Tasks.Task will complete when all subscribers return. Declaration public Task ProcessingTask { get; } Property Value Type Description System.Threading.Tasks.Task | Improve this doc View source Sequence Gets a the ISequence the current message belongs to. Declaration public ISequence Sequence { get; } Property Value Type Description ISequence | Improve this doc View source SequenceStore Gets the ISequenceStore used to temporary store the pending sequences being consumed. Declaration public ISequenceStore SequenceStore { get; } Property Value Type Description ISequenceStore | Improve this doc View source ServiceProvider Gets the System.IServiceProvider to be used to resolve the required services. Declaration public IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider | Improve this doc View source TransactionManager Gets the IConsumerTransactionManager that is handling the current pipeline transaction. Declaration public IConsumerTransactionManager TransactionManager { get; } Property Value Type Description IConsumerTransactionManager Methods | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source GetBrokerMessageIdentifiers() Gets the identifiers of the messages being handled in this context (either the single message or the sequence). Declaration public IReadOnlyCollection<IBrokerMessageIdentifier> GetBrokerMessageIdentifiers() Returns Type Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > The list of identifiers. | Improve this doc View source ReplaceServiceScope(IServiceScope) Replaces the System.IServiceProvider with the one from the specified scope. Declaration public void ReplaceServiceScope(IServiceScope newServiceScope) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceScope newServiceScope The Microsoft.Extensions.DependencyInjection.IServiceScope to be used. | Improve this doc View source SetIsSequenceEnd() Sets the IsSequenceEnd property to true , indicating that the current message was recognized as the end of the sequence. Declaration public void SetIsSequenceEnd() | Improve this doc View source SetSequence(ISequence, Boolean) Sets the current sequence. Declaration public void SetSequence(ISequence sequence, in bool isSequenceStart) Parameters Type Name Description ISequence sequence The ISequence being processed. System.Boolean isSequenceStart A value indicating whether the current message was recognized as the beginning of a new sequence. Implements System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.Behaviors.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.html",
    "title": "Namespace Silverback.Messaging.Broker.Behaviors | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Behaviors Classes BrokerBehaviorsProvider<TBehavior> BrokerBehaviorsSortIndexes Contains the sort index constants of the default IBrokerBehavior added by Silverback.Integration. BrokerBehaviorsSortIndexes.Consumer Contains the sort index constants of the consumer behaviors added by Silverback.Integration. BrokerBehaviorsSortIndexes.Producer Contains the sort index constants of the producer behaviors added by Silverback.Integration. ConsumerPipelineContext The context that is passed along the consumer behaviors pipeline. MessageIdInitializerProducerBehavior It ensures that an x-message-id header is always produced. ProducerPipelineContext The context that is passed along the producer behaviors pipeline. Interfaces IBrokerBehavior Can be used to build a custom pipeline, plugging some functionality into either the IProducer (see IProducerBehavior ) or the IConsumer (see IConsumerBehavior ). IBrokerBehaviorsProvider<TBehavior> Provides the System.Collections.Generic.IReadOnlyList<T> of IProducerBehavior and IConsumerBehavior to be used in the IProducer and IConsumer pipeline. IConsumerBehavior Can be used to build a custom pipeline, plugging some functionality into the IConsumer . IProducerBehavior Can be used to build a custom pipeline, plugging some functionality into the IProducer . Delegates ConsumerBehaviorHandler The delegate that describes a message handler in the consumer pipeline. ProducerBehaviorHandler The delegate that describes a message handler in the producer pipeline."
  },
  "api/Silverback.Messaging.Broker.Behaviors.IBrokerBehavior.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.IBrokerBehavior.html",
    "title": "Interface IBrokerBehavior | Silverback",
    "keywords": "Interface IBrokerBehavior Can be used to build a custom pipeline, plugging some functionality into either the IProducer (see IProducerBehavior ) or the IConsumer (see IConsumerBehavior ). Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public interface IBrokerBehavior"
  },
  "api/Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider-1.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider-1.html",
    "title": "Interface IBrokerBehaviorsProvider<TBehavior> | Silverback",
    "keywords": "Interface IBrokerBehaviorsProvider<TBehavior> Provides the System.Collections.Generic.IReadOnlyList<T> of IProducerBehavior and IConsumerBehavior to be used in the IProducer and IConsumer pipeline. Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public interface IBrokerBehaviorsProvider<out TBehavior> where TBehavior : IBrokerBehavior Type Parameters Name Description TBehavior The type of the behaviors to be provided, either IProducerBehavior or IConsumerBehavior . Methods | Improve this doc View source GetBehaviorsList() Creates a new System.Collections.Generic.IReadOnlyList<T> of IProducerBehavior or IConsumerBehavior to be used in the IProducer or IConsumer pipeline. Declaration IReadOnlyList<TBehavior> GetBehaviorsList() Returns Type Description System.Collections.Generic.IReadOnlyList <TBehavior> The ready-to-use System.Collections.Generic.Stack<T> of TBehavior ."
  },
  "api/Silverback.Messaging.Broker.Behaviors.IConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.IConsumerBehavior.html",
    "title": "Interface IConsumerBehavior | Silverback",
    "keywords": "Interface IConsumerBehavior Can be used to build a custom pipeline, plugging some functionality into the IConsumer . Inherited Members Silverback.ISorted.SortIndex Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public interface IConsumerBehavior : IBrokerBehavior, ISorted Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Broker.Behaviors.IProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.IProducerBehavior.html",
    "title": "Interface IProducerBehavior | Silverback",
    "keywords": "Interface IProducerBehavior Can be used to build a custom pipeline, plugging some functionality into the IProducer . Inherited Members Silverback.ISorted.SortIndex Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public interface IProducerBehavior : IBrokerBehavior, ISorted Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Broker.Behaviors.MessageIdInitializerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.MessageIdInitializerProducerBehavior.html",
    "title": "Class MessageIdInitializerProducerBehavior | Silverback",
    "keywords": "Class MessageIdInitializerProducerBehavior It ensures that an x-message-id header is always produced. Inheritance System.Object MessageIdInitializerProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public class MessageIdInitializerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Broker.Behaviors.ProducerBehaviorHandler.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.ProducerBehaviorHandler.html",
    "title": "Delegate ProducerBehaviorHandler | Silverback",
    "keywords": "Delegate ProducerBehaviorHandler The delegate that describes a message handler in the producer pipeline. Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public delegate Task ProducerBehaviorHandler(ProducerPipelineContext context); Parameters Type Name Description ProducerPipelineContext context The context that is passed along the producer behaviors pipeline. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Silverback.Messaging.Broker.Behaviors.ProducerPipelineContext.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.ProducerPipelineContext.html",
    "title": "Class ProducerPipelineContext | Silverback",
    "keywords": "Class ProducerPipelineContext The context that is passed along the producer behaviors pipeline. Inheritance System.Object ProducerPipelineContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public class ProducerPipelineContext Constructors | Improve this doc View source ProducerPipelineContext(IOutboundEnvelope, IProducer, IServiceProvider) Initializes a new instance of the ProducerPipelineContext class. Declaration public ProducerPipelineContext(IOutboundEnvelope envelope, IProducer producer, IServiceProvider serviceProvider) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be produced. IProducer producer The IProducer that triggered this pipeline. System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Properties | Improve this doc View source Envelope Gets or sets the envelope containing the message to be produced. Declaration public IOutboundEnvelope Envelope { get; set; } Property Value Type Description IOutboundEnvelope | Improve this doc View source Producer Gets the IProducer that triggered this pipeline. Declaration public IProducer Producer { get; } Property Value Type Description IProducer | Improve this doc View source ServiceProvider Gets or sets the System.IServiceProvider to be used to resolve the required services. Declaration public IServiceProvider ServiceProvider { get; set; } Property Value Type Description System.IServiceProvider"
  },
  "api/Silverback.Messaging.Broker.Broker-2.html": {
    "href": "api/Silverback.Messaging.Broker.Broker-2.html",
    "title": "Class Broker<TProducerEndpoint, TConsumerEndpoint> | Silverback",
    "keywords": "Class Broker<TProducerEndpoint, TConsumerEndpoint> The base class for all IBroker implementations. Inheritance System.Object Broker<TProducerEndpoint, TConsumerEndpoint> TransactionalOutboxBroker Implements IBroker System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Broker<TProducerEndpoint, TConsumerEndpoint> : IBroker, IDisposable where TProducerEndpoint : IProducerEndpoint where TConsumerEndpoint : IConsumerEndpoint Type Parameters Name Description TProducerEndpoint The type of the IProducerEndpoint that is being handled by this broker implementation. TConsumerEndpoint The type of the IConsumerEndpoint that is being handled by this broker implementation. Constructors | Improve this doc View source Broker(IServiceProvider) Initializes a new instance of the Broker<TProducerEndpoint, TConsumerEndpoint> class. Declaration protected Broker(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Properties | Improve this doc View source ConsumerEndpointType Declaration public Type ConsumerEndpointType { get; } Property Value Type Description System.Type | Improve this doc View source Consumers Declaration public IReadOnlyList<IConsumer> Consumers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IConsumer > | Improve this doc View source IsConnected Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source ProducerEndpointType Declaration public Type ProducerEndpointType { get; } Property Value Type Description System.Type | Improve this doc View source Producers Declaration public IReadOnlyList<IProducer> Producers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProducer > Methods | Improve this doc View source AddConsumer(IConsumerEndpoint) Declaration public virtual IConsumer AddConsumer(IConsumerEndpoint endpoint) Parameters Type Name Description IConsumerEndpoint endpoint Returns Type Description IConsumer | Improve this doc View source ConnectAsync() Declaration public Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ConnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Connects all the consumers and starts consuming. Declaration protected virtual Task ConnectAsync(IReadOnlyCollection<IProducer> producers, IReadOnlyCollection<IConsumer> consumers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IProducer > producers The producers to be connected. System.Collections.Generic.IReadOnlyCollection < IConsumer > consumers The consumers to be connected and started. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Declaration public Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source DisconnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Disconnects all the consumers and stops consuming. Declaration protected virtual Task DisconnectAsync(IReadOnlyCollection<IProducer> producers, IReadOnlyCollection<IConsumer> consumers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IProducer > producers The producers to be disconnected. System.Collections.Generic.IReadOnlyCollection < IConsumer > consumers The consumers to be stopped and disconnected. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether the method has been called by the Dispose method and not from the finalizer. | Improve this doc View source GetProducer(IProducerEndpoint) Declaration public virtual IProducer GetProducer(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint Returns Type Description IProducer | Improve this doc View source GetProducer(String) Declaration public virtual IProducer GetProducer(string endpointName) Parameters Type Name Description System.String endpointName Returns Type Description IProducer | Improve this doc View source InstantiateConsumer(TConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Returns a new instance of IConsumer to subscribe to the specified endpoint. Declaration protected abstract IConsumer InstantiateConsumer(TConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description TConsumerEndpoint endpoint The endpoint. IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IConsumer The instantiated IConsumer . | Improve this doc View source InstantiateProducer(TProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Returns a new instance of IProducer to publish to the specified endpoint. The returned instance will be cached and reused for the same endpoint. Declaration protected abstract IProducer InstantiateProducer(TProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description TProducerEndpoint endpoint The endpoint. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IProducer The instantiated IProducer . Implements IBroker System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.BrokerCollection.html": {
    "href": "api/Silverback.Messaging.Broker.BrokerCollection.html",
    "title": "Class BrokerCollection | Silverback",
    "keywords": "Class BrokerCollection Inheritance System.Object BrokerCollection Implements IBrokerCollection System.Collections.Generic.IReadOnlyList < IBroker > System.Collections.Generic.IReadOnlyCollection < IBroker > System.Collections.Generic.IEnumerable < IBroker > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public class BrokerCollection : IBrokerCollection, IReadOnlyList<IBroker>, IReadOnlyCollection<IBroker>, IEnumerable<IBroker>, IEnumerable Constructors | Improve this doc View source BrokerCollection(IEnumerable<IBroker>) Initializes a new instance of the BrokerCollection class. Declaration public BrokerCollection(IEnumerable<IBroker> brokers) Parameters Type Name Description System.Collections.Generic.IEnumerable < IBroker > brokers The brokers to be added to the collection. Properties | Improve this doc View source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this doc View source Item[Int32] Declaration public IBroker this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description IBroker Methods | Improve this doc View source AddConsumer(IConsumerEndpoint) Declaration public IConsumer AddConsumer(IConsumerEndpoint endpoint) Parameters Type Name Description IConsumerEndpoint endpoint Returns Type Description IConsumer | Improve this doc View source ConnectAsync() Declaration public Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source DisconnectAsync() Declaration public Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source GetEnumerator() Declaration public IEnumerator<IBroker> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IBroker > | Improve this doc View source GetProducer(IProducerEndpoint) Declaration public IProducer GetProducer(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint Returns Type Description IProducer Explicit Interface Implementations | Improve this doc View source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IBrokerCollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Silverback.Messaging.Broker.BrokerConnectorService.html": {
    "href": "api/Silverback.Messaging.Broker.BrokerConnectorService.html",
    "title": "Class BrokerConnectorService | Silverback",
    "keywords": "Class BrokerConnectorService Automatically connects the message brokers when the application starts and disconnects them when the application is being stopped. Inheritance System.Object Microsoft.Extensions.Hosting.BackgroundService BrokerConnectorService Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable Inherited Members Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public class BrokerConnectorService : BackgroundService, IHostedService, IDisposable Constructors | Improve this doc View source BrokerConnectorService(IHostApplicationLifetime, IBrokerCollection, BrokerConnectionOptions, ISilverbackLogger<BrokerConnectorService>) Initializes a new instance of the BrokerConnectorService class. Declaration public BrokerConnectorService(IHostApplicationLifetime applicationLifetime, IBrokerCollection brokersCollection, BrokerConnectionOptions connectionOptions, ISilverbackLogger<BrokerConnectorService> logger) Parameters Type Name Description Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime The Microsoft.Extensions.Hosting.IHostApplicationLifetime . IBrokerCollection brokersCollection The IBrokerCollection . BrokerConnectionOptions connectionOptions The BrokerConnectionOptions . Silverback.Diagnostics.ISilverbackLogger < BrokerConnectorService > logger The Silverback.Diagnostics.ISilverbackLogger . Methods | Improve this doc View source ExecuteAsync(CancellationToken) Declaration protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken) Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.Callbacks.BrokerCallbackInvocationException.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.BrokerCallbackInvocationException.html",
    "title": "Class BrokerCallbackInvocationException | Silverback",
    "keywords": "Class BrokerCallbackInvocationException The exception that wraps the exception thrown by a IBrokerCallback . Inheritance System.Object System.Exception Silverback.SilverbackException BrokerCallbackInvocationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.dll Syntax [Serializable] public class BrokerCallbackInvocationException : SilverbackException, ISerializable Constructors | Improve this doc View source BrokerCallbackInvocationException() Initializes a new instance of the BrokerCallbackInvocationException class. Declaration public BrokerCallbackInvocationException() | Improve this doc View source BrokerCallbackInvocationException(SerializationInfo, StreamingContext) Initializes a new instance of the BrokerCallbackInvocationException class with the serialized data. Declaration protected BrokerCallbackInvocationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source BrokerCallbackInvocationException(String) Initializes a new instance of the BrokerCallbackInvocationException class with the specified message. Declaration public BrokerCallbackInvocationException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source BrokerCallbackInvocationException(String, Exception) Initializes a new instance of the BrokerCallbackInvocationException class with the specified message and inner exception. Declaration public BrokerCallbackInvocationException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Broker.Callbacks.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.html",
    "title": "Namespace Silverback.Messaging.Broker.Callbacks | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Callbacks Classes BrokerCallbackInvocationException The exception that wraps the exception thrown by a IBrokerCallback . Interfaces IBrokerCallback The marker interface implemented by all interfaces declaring the broker callbacks handlers. IBrokerCallbacksInvoker Used to invoke the registered IBrokerCallback . IEndpointsConfiguredCallback Declares the OnEndpointsConfiguredAsync() callback."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IBrokerCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IBrokerCallback.html",
    "title": "Interface IBrokerCallback | Silverback",
    "keywords": "Interface IBrokerCallback The marker interface implemented by all interfaces declaring the broker callbacks handlers. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.dll Syntax public interface IBrokerCallback"
  },
  "api/Silverback.Messaging.Broker.Callbacks.IBrokerCallbacksInvoker.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IBrokerCallbacksInvoker.html",
    "title": "Interface IBrokerCallbacksInvoker | Silverback",
    "keywords": "Interface IBrokerCallbacksInvoker Used to invoke the registered IBrokerCallback . Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.dll Syntax public interface IBrokerCallbacksInvoker Methods | Improve this doc View source Invoke<THandler>(Action<THandler>, IServiceProvider, Boolean) Resolves and invokes all handlers of the specified type. Declaration void Invoke<THandler>(Action<THandler> action, IServiceProvider scopedServiceProvider = null, bool invokeDuringShutdown = true) Parameters Type Name Description System.Action <THandler> action The action to be executed for each handler. System.IServiceProvider scopedServiceProvider The scoped System.IServiceProvider . If not provided a new scope will be created. System.Boolean invokeDuringShutdown Specifies whether the callback must be called even if the application is shutting down. Type Parameters Name Description THandler The type of the handler. | Improve this doc View source InvokeAsync<THandler>(Func<THandler, Task>, IServiceProvider, Boolean) Resolves and invokes all handlers of the specified type. Declaration Task InvokeAsync<THandler>(Func<THandler, Task> action, IServiceProvider scopedServiceProvider = null, bool invokeDuringShutdown = true) Parameters Type Name Description System.Func <THandler, System.Threading.Tasks.Task > action The action to be executed for each handler. System.IServiceProvider scopedServiceProvider The scoped System.IServiceProvider . If not provided a new scope will be created. System.Boolean invokeDuringShutdown Specifies whether the callback must be called even if the application is shutting down. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Type Parameters Name Description THandler The type of the handler."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IEndpointsConfiguredCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IEndpointsConfiguredCallback.html",
    "title": "Interface IEndpointsConfiguredCallback | Silverback",
    "keywords": "Interface IEndpointsConfiguredCallback Declares the OnEndpointsConfiguredAsync() callback. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.dll Syntax public interface IEndpointsConfiguredCallback : IBrokerCallback Methods | Improve this doc View source OnEndpointsConfiguredAsync() Called when all endpoints have been configured. Declaration Task OnEndpointsConfiguredAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Broker.Consumer.html": {
    "href": "api/Silverback.Messaging.Broker.Consumer.html",
    "title": "Class Consumer | Silverback",
    "keywords": "Class Consumer Inheritance System.Object Consumer Consumer<TBroker, TEndpoint, TIdentifier> Implements IConsumer System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Consumer : IConsumer, IDisposable Constructors | Improve this doc View source Consumer(IBroker, IConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider, ISilverbackLogger<Consumer>) Initializes a new instance of the Consumer class. Declaration protected Consumer(IBroker broker, IConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider, ISilverbackLogger<Consumer> logger) Parameters Type Name Description IBroker broker The IBroker that is instantiating the consumer. IConsumerEndpoint endpoint The endpoint to be consumed. IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. Silverback.Diagnostics.ISilverbackLogger < Consumer > logger The Silverback.Diagnostics.ISilverbackLogger . Properties | Improve this doc View source Broker Declaration public IBroker Broker { get; } Property Value Type Description IBroker | Improve this doc View source Endpoint Declaration public IConsumerEndpoint Endpoint { get; } Property Value Type Description IConsumerEndpoint | Improve this doc View source Id Declaration public InstanceIdentifier Id { get; } Property Value Type Description Silverback.InstanceIdentifier | Improve this doc View source IsConnected Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source IsConnecting Declaration public bool IsConnecting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsConsuming Declaration public bool IsConsuming { get; protected set; } Property Value Type Description System.Boolean | Improve this doc View source IsDisconnecting Gets a value indicating whether the consumer is being disconnected. Declaration protected bool IsDisconnecting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsStopping Gets a value indicating whether the consumer is being stopped. Declaration protected bool IsStopping { get; } Property Value Type Description System.Boolean | Improve this doc View source SequenceStores Gets the ISequenceStore instances used by this consumer. Some brokers will require multiple stores (e.g. the KafkaConsumer will create a store per each assigned partition). Declaration protected IList<ISequenceStore> SequenceStores { get; } Property Value Type Description System.Collections.Generic.IList < ISequenceStore > | Improve this doc View source ServiceProvider Gets the System.IServiceProvider to be used to resolve the required services. Declaration protected IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider | Improve this doc View source StatusInfo Declaration public IConsumerStatusInfo StatusInfo { get; } Property Value Type Description IConsumerStatusInfo Methods | Improve this doc View source CommitAsync(IBrokerMessageIdentifier) Declaration public Task CommitAsync(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier Returns Type Description System.Threading.Tasks.Task | Improve this doc View source CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Declaration public Task CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task | Improve this doc View source CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Commits the specified messages sending the acknowledgement to the message broker. Declaration protected abstract Task CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be committed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ConnectAsync() Declaration public Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ConnectCoreAsync() Connects to the message broker. Declaration protected abstract Task ConnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Declaration public Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source DisconnectCoreAsync() Disconnects from the message broker. Declaration protected abstract Task DisconnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether the method has been called by the Dispose method and not from the finalizer. | Improve this doc View source GetCurrentSequenceStores() Gets the ISequenceStore instances used by this consumer. Some brokers will require multiple stores (e.g. the KafkaConsumer will create a store per each assigned partition). Declaration public IReadOnlyList<ISequenceStore> GetCurrentSequenceStores() Returns Type Description System.Collections.Generic.IReadOnlyList < ISequenceStore > The list of ISequenceStore . | Improve this doc View source GetSequenceStore(IBrokerMessageIdentifier) Returns the ISequenceStore to be used to store the pending sequences. Declaration protected virtual ISequenceStore GetSequenceStore(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier The message identifier (the offset in Kafka) may determine which store is being used. For example a dedicated sequence store is used per each Kafka partition, since they may be processed concurrently. Returns Type Description ISequenceStore The ISequenceStore . | Improve this doc View source HandleMessageAsync(Byte[], IReadOnlyCollection<MessageHeader>, String, IBrokerMessageIdentifier) Handles the consumed message invoking each IConsumerBehavior in the pipeline. Declaration protected virtual Task HandleMessageAsync(byte[] message, IReadOnlyCollection<MessageHeader> headers, string sourceEndpointName, IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description System.Byte [] message The body of the consumed message. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The headers of the consumed message. System.String sourceEndpointName The name of the actual endpoint (topic) where the message has been delivered. IBrokerMessageIdentifier brokerMessageIdentifier The identifier of the consumed message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source IncrementFailedAttempts(IRawInboundEnvelope) Declaration public int IncrementFailedAttempts(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope Returns Type Description System.Int32 | Improve this doc View source RevertReadyStatus() Called when the connection is lost to transitions the consumer back to Connected . Declaration protected void RevertReadyStatus() | Improve this doc View source RollbackAsync(IBrokerMessageIdentifier) Declaration public Task RollbackAsync(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier Returns Type Description System.Threading.Tasks.Task | Improve this doc View source RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Declaration public Task RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task | Improve this doc View source RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) If necessary notifies the message broker that the specified messages couldn't be processed successfully, to ensure that they will be consumed again. Declaration protected abstract Task RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be rolled back. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source SetReadyStatus() Called when fully connected to transitions the consumer to Ready . Declaration protected void SetReadyStatus() | Improve this doc View source StartAsync() Declaration public Task StartAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source StartCoreAsync() Starts consuming. Called to resume consuming after StopAsync() has been called. Declaration protected abstract Task StartCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source StopAsync() Declaration public Task StopAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source StopCoreAsync() Stops consuming while staying connected to the message broker. Declaration protected abstract Task StopCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source TriggerReconnectAsync() Declaration public Task TriggerReconnectAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source WaitUntilConsumingStoppedCoreAsync() Waits until the consuming is stopped. Declaration protected abstract Task WaitUntilConsumingStoppedCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumer System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.Consumer-3.html": {
    "href": "api/Silverback.Messaging.Broker.Consumer-3.html",
    "title": "Class Consumer<TBroker, TEndpoint, TIdentifier> | Silverback",
    "keywords": "Class Consumer<TBroker, TEndpoint, TIdentifier> Inheritance System.Object Consumer Consumer<TBroker, TEndpoint, TIdentifier> Implements IConsumer System.IDisposable Inherited Members Consumer.Id Consumer.StatusInfo Consumer.IsConnecting Consumer.IsConnected Consumer.IsConsuming Consumer.ServiceProvider Consumer.SequenceStores Consumer.IsDisconnecting Consumer.IsStopping Consumer.ConnectAsync() Consumer.DisconnectAsync() Consumer.TriggerReconnectAsync() Consumer.StartAsync() Consumer.StopAsync() Consumer.CommitAsync(IBrokerMessageIdentifier) Consumer.CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.RollbackAsync(IBrokerMessageIdentifier) Consumer.RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.IncrementFailedAttempts(IRawInboundEnvelope) Consumer.Dispose() Consumer.GetCurrentSequenceStores() Consumer.ConnectCoreAsync() Consumer.DisconnectCoreAsync() Consumer.StartCoreAsync() Consumer.StopCoreAsync() Consumer.WaitUntilConsumingStoppedCoreAsync() Consumer.HandleMessageAsync(Byte[], IReadOnlyCollection<MessageHeader>, String, IBrokerMessageIdentifier) Consumer.SetReadyStatus() Consumer.RevertReadyStatus() Consumer.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Consumer<TBroker, TEndpoint, TIdentifier> : Consumer, IConsumer, IDisposable where TBroker : IBroker where TEndpoint : IConsumerEndpoint where TIdentifier : IBrokerMessageIdentifier Type Parameters Name Description TBroker The type of the related IBroker implementation. TEndpoint The type of the IConsumerEndpoint implementation used by this consumer implementation. TIdentifier The type of the IBrokerMessageIdentifier used by this broker implementation. Constructors | Improve this doc View source Consumer(TBroker, TEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider, IInboundLogger<Consumer<TBroker, TEndpoint, TIdentifier>>) Initializes a new instance of the Consumer<TBroker, TEndpoint, TIdentifier> class. Declaration protected Consumer(TBroker broker, TEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IInboundLogger<Consumer<TBroker, TEndpoint, TIdentifier>> logger) Parameters Type Name Description TBroker broker The IBroker that is instantiating the consumer. TEndpoint endpoint The endpoint to be consumed. IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IInboundLogger < Consumer <TBroker, TEndpoint, TIdentifier>> logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source Broker Gets the IBroker that owns this consumer. Declaration public TBroker Broker { get; } Property Value Type Description TBroker | Improve this doc View source Endpoint Gets the IConsumerEndpoint representing the endpoint that is being consumed. Declaration public TEndpoint Endpoint { get; } Property Value Type Description TEndpoint Methods | Improve this doc View source CommitCoreAsync(IReadOnlyCollection<TIdentifier>) Declaration protected abstract Task CommitCoreAsync(IReadOnlyCollection<TIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection <TIdentifier> brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task | Improve this doc View source CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Declaration protected override Task CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task Overrides Consumer.CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) | Improve this doc View source GetSequenceStore(TIdentifier) Declaration protected virtual ISequenceStore GetSequenceStore(TIdentifier brokerMessageIdentifier) Parameters Type Name Description TIdentifier brokerMessageIdentifier Returns Type Description ISequenceStore | Improve this doc View source GetSequenceStore(IBrokerMessageIdentifier) Declaration protected override ISequenceStore GetSequenceStore(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier Returns Type Description ISequenceStore Overrides Consumer.GetSequenceStore(IBrokerMessageIdentifier) | Improve this doc View source RollbackCoreAsync(IReadOnlyCollection<TIdentifier>) Declaration protected abstract Task RollbackCoreAsync(IReadOnlyCollection<TIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection <TIdentifier> brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task | Improve this doc View source RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Declaration protected override Task RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task Overrides Consumer.RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Implements IConsumer System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.ConsumerStatus.html": {
    "href": "api/Silverback.Messaging.Broker.ConsumerStatus.html",
    "title": "Enum ConsumerStatus | Silverback",
    "keywords": "Enum ConsumerStatus The possible states of the IConsumer as exposed in the IConsumerStatusInfo . Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public enum ConsumerStatus Fields Name Description Connected The consumer has successfully initialized the connection to the message broker. Consuming The consumer is connected and has received some messages. Disconnected The consumer is not connected to the message broker. Ready The consumer is completely initialized and is ready to consume."
  },
  "api/Silverback.Messaging.Broker.html": {
    "href": "api/Silverback.Messaging.Broker.html",
    "title": "Namespace Silverback.Messaging.Broker | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker Classes Broker<TProducerEndpoint, TConsumerEndpoint> The base class for all IBroker implementations. BrokerCollection BrokerConnectorService Automatically connects the message brokers when the application starts and disconnects them when the application is being stopped. Consumer Consumer<TBroker, TEndpoint, TIdentifier> ProduceException The exception that is thrown by the IProducer when the message cannot be produced or the message broker didn't acknowledge it. Producer Producer<TBroker, TEndpoint> Interfaces IBroker The basic interface to interact with the message broker. IBrokerCollection Holds a reference to all the registered IBroker implementations and is able to resolve the right instance according to the IEndpoint type. IBrokerMessageIdentifier Represents the primary identifier used by the message broker to recognize the exact message. It can represent a Kafka offset, a RabbitMQ delivery tag or other similar constructs. The IBrokerMessageOffset interface should be implemented whenever possible to allow the exactly-one delivery using the OffsetStoreExactlyOnceStrategy . If the message broker doesn't provide any message identifier, a local one can be created (e.g. Guid.NewGuid() ) but this will prevent some features to work properly. IBrokerMessageOffset Represents the primary identifier used by the message broker to recognize the exact message. This is different than the base IBrokerMessageIdentifier because it has a ordinal meaning and is comparable. It can represent a Kafka offset or another similar construct. Being able to compare the identifiers (offsets) allows the exactly-one delivery using the OffsetStoreExactlyOnceStrategy and for it to work properly the offsets have to be universally comparable (across restarts and across multiple instances, for a given Key). IConsumer Consumes an endpoint and invokes a callback delegate when a message is received. IConsumerStatusChange Encapsulates the information about the consumer status transition. IConsumerStatusInfo Encapsulates the status details and basic statistics of an IConsumer . IProducer Produces to an endpoint. Enums ConsumerStatus The possible states of the IConsumer as exposed in the IConsumerStatusInfo ."
  },
  "api/Silverback.Messaging.Broker.IBroker.html": {
    "href": "api/Silverback.Messaging.Broker.IBroker.html",
    "title": "Interface IBroker | Silverback",
    "keywords": "Interface IBroker The basic interface to interact with the message broker. Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IBroker Properties | Improve this doc View source ConsumerEndpointType Gets the type of the IConsumerEndpoint that is being handled by this broker implementation. Declaration Type ConsumerEndpointType { get; } Property Value Type Description System.Type | Improve this doc View source Consumers Gets the collection of IConsumer that have been created so far. Declaration IReadOnlyList<IConsumer> Consumers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IConsumer > | Improve this doc View source IsConnected Gets a value indicating whether this broker is currently connected. Declaration bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source ProducerEndpointType Gets the type of the IProducerEndpoint that is being handled by this broker implementation. Declaration Type ProducerEndpointType { get; } Property Value Type Description System.Type | Improve this doc View source Producers Gets the collection of IProducer that have been created so far. Declaration IReadOnlyList<IProducer> Producers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProducer > Methods | Improve this doc View source AddConsumer(IConsumerEndpoint) Adds an IConsumer that will consume from the specified endpoint as soon as the broker is connected. The received messages will be forwarded to the specified callback delegate. Declaration IConsumer AddConsumer(IConsumerEndpoint endpoint) Parameters Type Name Description IConsumerEndpoint endpoint The source endpoint. Returns Type Description IConsumer The IConsumer for the specified endpoint. | Improve this doc View source ConnectAsync() Connect to the message broker to start consuming. Declaration Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnect from the message broker to stop consuming. Declaration Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source GetProducer(IProducerEndpoint) Returns an IProducer to be used to produce to the specified endpoint. Declaration IProducer GetProducer(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint The target endpoint. Returns Type Description IProducer The IProducer for the specified endpoint. | Improve this doc View source GetProducer(String) Returns an existing IProducer to be used to produce to the specified endpoint. Declaration IProducer GetProducer(string endpointName) Parameters Type Name Description System.String endpointName The target endpoint name (or friendly name). Returns Type Description IProducer The IProducer for the specified endpoint."
  },
  "api/Silverback.Messaging.Broker.IBrokerCollection.html": {
    "href": "api/Silverback.Messaging.Broker.IBrokerCollection.html",
    "title": "Interface IBrokerCollection | Silverback",
    "keywords": "Interface IBrokerCollection Holds a reference to all the registered IBroker implementations and is able to resolve the right instance according to the IEndpoint type. Inherited Members System.Collections.Generic.IReadOnlyList<Silverback.Messaging.Broker.IBroker>.Item[System.Int32] System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Broker.IBroker>.Count System.Collections.Generic.IEnumerable<Silverback.Messaging.Broker.IBroker>.GetEnumerator() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IBrokerCollection : IReadOnlyList<IBroker>, IReadOnlyCollection<IBroker>, IEnumerable<IBroker>, IEnumerable Methods | Improve this doc View source AddConsumer(IConsumerEndpoint) Adds an IConsumer that will consume from the specified endpoint as soon as the broker is connected. The received messages will be forwarded to the specified callback delegate. Declaration IConsumer AddConsumer(IConsumerEndpoint endpoint) Parameters Type Name Description IConsumerEndpoint endpoint The source endpoint. Returns Type Description IConsumer The IConsumer for the specified endpoint. | Improve this doc View source ConnectAsync() Connect to all message brokers to start consuming. Declaration Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnect from all message brokers to stop consuming. Declaration Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source GetProducer(IProducerEndpoint) Returns an IProducer to be used to produce to the specified endpoint. Declaration IProducer GetProducer(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint The target endpoint. Returns Type Description IProducer The IProducer for the specified endpoint."
  },
  "api/Silverback.Messaging.Broker.IBrokerMessageIdentifier.html": {
    "href": "api/Silverback.Messaging.Broker.IBrokerMessageIdentifier.html",
    "title": "Interface IBrokerMessageIdentifier | Silverback",
    "keywords": "Interface IBrokerMessageIdentifier Represents the primary identifier used by the message broker to recognize the exact message. It can represent a Kafka offset, a RabbitMQ delivery tag or other similar constructs. The IBrokerMessageOffset interface should be implemented whenever possible to allow the exactly-one delivery using the OffsetStoreExactlyOnceStrategy . If the message broker doesn't provide any message identifier, a local one can be created (e.g. Guid.NewGuid() ) but this will prevent some features to work properly. Inherited Members System.IEquatable<Silverback.Messaging.Broker.IBrokerMessageIdentifier>.Equals(Silverback.Messaging.Broker.IBrokerMessageIdentifier) Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IBrokerMessageIdentifier : IEquatable<IBrokerMessageIdentifier> Remarks The classes implementing this interface should also implement a public constructor accepting key and value as string arguments. Properties | Improve this doc View source Key Gets the unique key of the queue, topic or partition the message was produced to or consumed from. Declaration string Key { get; } Property Value Type Description System.String | Improve this doc View source Value Gets the identifier value. Declaration string Value { get; } Property Value Type Description System.String Methods | Improve this doc View source ToLogString() Gets a string that can be used to log the offset value. Declaration string ToLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string should contain all identifiers except the endpoint name. | Improve this doc View source ToVerboseLogString() Gets a string that can be used to log the offset value. Declaration string ToVerboseLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string must include the endpoint name, if the identifier value isn't unique across different endpoints."
  },
  "api/Silverback.Messaging.Broker.IBrokerMessageOffset.html": {
    "href": "api/Silverback.Messaging.Broker.IBrokerMessageOffset.html",
    "title": "Interface IBrokerMessageOffset | Silverback",
    "keywords": "Interface IBrokerMessageOffset Represents the primary identifier used by the message broker to recognize the exact message. This is different than the base IBrokerMessageIdentifier because it has a ordinal meaning and is comparable. It can represent a Kafka offset or another similar construct. Being able to compare the identifiers (offsets) allows the exactly-one delivery using the OffsetStoreExactlyOnceStrategy and for it to work properly the offsets have to be universally comparable (across restarts and across multiple instances, for a given Key). Inherited Members IBrokerMessageIdentifier.Key IBrokerMessageIdentifier.Value IBrokerMessageIdentifier.ToLogString() IBrokerMessageIdentifier.ToVerboseLogString() System.IEquatable<Silverback.Messaging.Broker.IBrokerMessageIdentifier>.Equals(Silverback.Messaging.Broker.IBrokerMessageIdentifier) System.IComparable<Silverback.Messaging.Broker.IBrokerMessageOffset>.CompareTo(Silverback.Messaging.Broker.IBrokerMessageOffset) Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IBrokerMessageOffset : IBrokerMessageIdentifier, IEquatable<IBrokerMessageIdentifier>, IComparable<IBrokerMessageOffset>"
  },
  "api/Silverback.Messaging.Broker.IConsumer.html": {
    "href": "api/Silverback.Messaging.Broker.IConsumer.html",
    "title": "Interface IConsumer | Silverback",
    "keywords": "Interface IConsumer Consumes an endpoint and invokes a callback delegate when a message is received. Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IConsumer Properties | Improve this doc View source Broker Gets the IBroker that owns this consumer. Declaration IBroker Broker { get; } Property Value Type Description IBroker | Improve this doc View source Endpoint Gets the IConsumerEndpoint representing the endpoint that is being consumed. Declaration IConsumerEndpoint Endpoint { get; } Property Value Type Description IConsumerEndpoint | Improve this doc View source Id Gets the Silverback.InstanceIdentifier uniquely identifying the consumer instance. Declaration InstanceIdentifier Id { get; } Property Value Type Description Silverback.InstanceIdentifier | Improve this doc View source IsConnected Gets a value indicating whether this consumer has successfully initialized the connection to the message broker. Declaration bool IsConnected { get; } Property Value Type Description System.Boolean Remarks This doesn't necessary mean that it is connected and ready to consume. The underlying library might handle the connection process asynchronously in the background or the protocol might require extra steps (e.g. Kafka might require the partitions to be assigned). | Improve this doc View source IsConnecting Gets a value indicating whether this consumer is initializing the connection to the message broker. Declaration bool IsConnecting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsConsuming Gets a value indicating whether this consumer is connected and consuming (started). Declaration bool IsConsuming { get; } Property Value Type Description System.Boolean | Improve this doc View source StatusInfo Gets the IConsumerStatusInfo containing the status details and basic statistics of this consumer. Declaration IConsumerStatusInfo StatusInfo { get; } Property Value Type Description IConsumerStatusInfo Methods | Improve this doc View source CommitAsync(IBrokerMessageIdentifier) Confirms that the specified message has been successfully processed. The acknowledgement will be sent to the message broker and the message will never be consumed again (by the same logical consumer / consumer group). Declaration Task CommitAsync(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier The identifier of the message to be committed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Confirms that the specified messages have been successfully processed. The acknowledgement will be sent to the message broker and the message will never be consumed again (by the same logical consumer / consumer group). Declaration Task CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be committed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ConnectAsync() Connects and starts consuming. Declaration Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnects and stops consuming. Declaration Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source GetCurrentSequenceStores() Gets the ISequenceStore instances used by this consumer. Some brokers will require multiple stores (e.g. the KafkaConsumer will create a store per each assigned partition). Declaration IReadOnlyList<ISequenceStore> GetCurrentSequenceStores() Returns Type Description System.Collections.Generic.IReadOnlyList < ISequenceStore > The list of ISequenceStore . | Improve this doc View source IncrementFailedAttempts(IRawInboundEnvelope) Increments the stored failed attempts count for the specified envelope. Declaration int IncrementFailedAttempts(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope. Returns Type Description System.Int32 The current failed attempts count after the increment. | Improve this doc View source RollbackAsync(IBrokerMessageIdentifier) Notifies that an error occured while processing the specified message. If necessary the information will be sent to the message broker to ensure that the message will be consumed again. Declaration Task RollbackAsync(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier The identifier of the message to be rolled back. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Notifies that an error occured while processing the specified messages. If necessary the information will be sent to the message broker to ensure that the message will be re-processed. Declaration Task RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be rolled back. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source StartAsync() Starts consuming. Used after StopAsync() has been called to resume consuming. Declaration Task StartAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source StopAsync() Stops the consumer without disconnecting. Can be used to pause and resume consuming. Declaration Task StopAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. This System.Threading.Tasks.Task will complete as soon as the stopping signal has been sent. | Improve this doc View source TriggerReconnectAsync() Stops the consumer and starts an asynchronous System.Threading.Tasks.Task to disconnect and reconnect it. Declaration Task TriggerReconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. This System.Threading.Tasks.Task will complete as soon as the stopping signal has been sent, while the process will be completed in another asynchronous System.Threading.Tasks.Task ."
  },
  "api/Silverback.Messaging.Broker.IConsumerStatusChange.html": {
    "href": "api/Silverback.Messaging.Broker.IConsumerStatusChange.html",
    "title": "Interface IConsumerStatusChange | Silverback",
    "keywords": "Interface IConsumerStatusChange Encapsulates the information about the consumer status transition. Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IConsumerStatusChange Properties | Improve this doc View source Status Gets the status into which the consumer has transitioned. Declaration ConsumerStatus Status { get; } Property Value Type Description ConsumerStatus | Improve this doc View source Timestamp Gets the timestamp at which the consumer transitioned to this status. Declaration DateTime? Timestamp { get; } Property Value Type Description System.Nullable < System.DateTime >"
  },
  "api/Silverback.Messaging.Broker.IConsumerStatusInfo.html": {
    "href": "api/Silverback.Messaging.Broker.IConsumerStatusInfo.html",
    "title": "Interface IConsumerStatusInfo | Silverback",
    "keywords": "Interface IConsumerStatusInfo Encapsulates the status details and basic statistics of an IConsumer . Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IConsumerStatusInfo Properties | Improve this doc View source ConsumedMessagesCount Gets the total number of messages that have been consumed by the consumer instance. Declaration int ConsumedMessagesCount { get; } Property Value Type Description System.Int32 | Improve this doc View source History Gets the collection of IConsumerStatusChange recording all state transitions. Declaration IReadOnlyCollection<IConsumerStatusChange> History { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < IConsumerStatusChange > | Improve this doc View source LatestConsumedMessageIdentifier Gets the message identifier of the latest consumed message. Declaration IBrokerMessageIdentifier LatestConsumedMessageIdentifier { get; } Property Value Type Description IBrokerMessageIdentifier | Improve this doc View source LatestConsumedMessageTimestamp Gets the timestamp at which the latest message has been consumed. Declaration DateTime? LatestConsumedMessageTimestamp { get; } Property Value Type Description System.Nullable < System.DateTime > | Improve this doc View source Status Gets the current consumer status. Declaration ConsumerStatus Status { get; } Property Value Type Description ConsumerStatus"
  },
  "api/Silverback.Messaging.Broker.IProducer.html": {
    "href": "api/Silverback.Messaging.Broker.IProducer.html",
    "title": "Interface IProducer | Silverback",
    "keywords": "Interface IProducer Produces to an endpoint. Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IProducer Properties | Improve this doc View source Broker Gets the IBroker instance that owns this . Declaration IBroker Broker { get; } Property Value Type Description IBroker | Improve this doc View source Endpoint Gets the IProducerEndpoint this instance is connected to. Declaration IProducerEndpoint Endpoint { get; } Property Value Type Description IProducerEndpoint | Improve this doc View source Id Gets the Silverback.InstanceIdentifier uniquely identifying the producer instance. Declaration InstanceIdentifier Id { get; } Property Value Type Description Silverback.InstanceIdentifier | Improve this doc View source IsConnected Gets a value indicating whether this producer is connected to the message broker and ready to produce messages. Declaration bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source IsConnecting Gets a value indicating whether this producer is trying to connect to the message broker. Declaration bool IsConnecting { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source ConnectAsync() Initializes the connection to the message broker (if needed). Declaration Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnects from the message broker (if needed). Declaration Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Produce(IOutboundEnvelope) Publishes the specified message. Declaration IBrokerMessageIdentifier Produce(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration void Produce(IOutboundEnvelope envelope, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source Produce(Object, IReadOnlyCollection<MessageHeader>) Publishes the specified message. Declaration IBrokerMessageIdentifier Produce(object message, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration void Produce(object message, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceAsync(IOutboundEnvelope) Publishes the specified message. Declaration Task<IBrokerMessageIdentifier> ProduceAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration Task ProduceAsync(IOutboundEnvelope envelope, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Publishes the specified message. Declaration Task<IBrokerMessageIdentifier> ProduceAsync(object message, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration Task ProduceAsync(object message, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration IBrokerMessageIdentifier RawProduce(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration void RawProduce(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration IBrokerMessageIdentifier RawProduce(Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration void RawProduce(Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration IBrokerMessageIdentifier RawProduce(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration void RawProduce(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration IBrokerMessageIdentifier RawProduce(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration void RawProduce(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task<IBrokerMessageIdentifier> RawProduceAsync(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task RawProduceAsync(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task<IBrokerMessageIdentifier> RawProduceAsync(Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task RawProduceAsync(Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task<IBrokerMessageIdentifier> RawProduceAsync(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task RawProduceAsync(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task<IBrokerMessageIdentifier> RawProduceAsync(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task RawProduceAsync(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed)."
  },
  "api/Silverback.Messaging.Broker.Mqtt.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.html",
    "title": "Namespace Silverback.Messaging.Broker.Mqtt | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Mqtt Classes MockedMqttNetClientFactory The factory used to create the MockedMqttClient instances."
  },
  "api/Silverback.Messaging.Broker.Mqtt.MockedMqttNetClientFactory.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.MockedMqttNetClientFactory.html",
    "title": "Class MockedMqttNetClientFactory | Silverback",
    "keywords": "Class MockedMqttNetClientFactory The factory used to create the MockedMqttClient instances. Inheritance System.Object MockedMqttNetClientFactory Implements Silverback.Messaging.Broker.Mqtt.IMqttNetClientFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Mqtt Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public class MockedMqttNetClientFactory : IMqttNetClientFactory Constructors | Improve this doc View source MockedMqttNetClientFactory(IInMemoryMqttBroker, IMockedMqttOptions) Initializes a new instance of the MockedMqttNetClientFactory class. Declaration public MockedMqttNetClientFactory(IInMemoryMqttBroker broker, IMockedMqttOptions options) Parameters Type Name Description IInMemoryMqttBroker broker The IInMemoryMqttBroker . IMockedMqttOptions options The IMockedMqttOptions . Methods | Improve this doc View source CreateClient() Declaration public IMqttClient CreateClient() Returns Type Description MQTTnet.Client.IMqttClient Implements Silverback.Messaging.Broker.Mqtt.IMqttNetClientFactory"
  },
  "api/Silverback.Messaging.Broker.Mqtt.Mocks.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.Mocks.html",
    "title": "Namespace Silverback.Messaging.Broker.Mqtt.Mocks | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Mqtt.Mocks Classes MockedMqttClient A mocked implementation of MQTTnet.Client.IMqttClient from MQTTnet that connects with an in-memory broker. Interfaces IClientSession The session of a client connected to the IInMemoryMqttBroker . IInMemoryMqttBroker A mocked MQTT broker where the messages are just exchanged in-memory. Note that it isn't obviously possible to accurately replicate the message broker behavior and this implementation is just intended for testing purposes."
  },
  "api/Silverback.Messaging.Broker.Mqtt.Mocks.IClientSession.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.Mocks.IClientSession.html",
    "title": "Interface IClientSession | Silverback",
    "keywords": "Interface IClientSession The session of a client connected to the IInMemoryMqttBroker . Namespace : Silverback.Messaging.Broker.Mqtt.Mocks Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IClientSession Properties | Improve this doc View source PendingMessagesCount Gets the number of pending messages ready to be pushed to the client. Declaration int PendingMessagesCount { get; } Property Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Broker.Mqtt.Mocks.IInMemoryMqttBroker.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.Mocks.IInMemoryMqttBroker.html",
    "title": "Interface IInMemoryMqttBroker | Silverback",
    "keywords": "Interface IInMemoryMqttBroker A mocked MQTT broker where the messages are just exchanged in-memory. Note that it isn't obviously possible to accurately replicate the message broker behavior and this implementation is just intended for testing purposes. Namespace : Silverback.Messaging.Broker.Mqtt.Mocks Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IInMemoryMqttBroker Methods | Improve this doc View source Connect(IMqttClientOptions, IMqttApplicationMessageReceivedHandler) Connects the specified client. Declaration void Connect(IMqttClientOptions clientOptions, IMqttApplicationMessageReceivedHandler handler) Parameters Type Name Description MQTTnet.Client.Options.IMqttClientOptions clientOptions The client options. MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler handler The MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler to be pushed with the messages published to the subscribed topics. | Improve this doc View source Disconnect(String) Disconnects the specified client. Declaration void Disconnect(string clientId) Parameters Type Name Description System.String clientId The client identifier. | Improve this doc View source GetClientSession(String) Gets the IClientSession of the specified client. Declaration IClientSession GetClientSession(string clientId) Parameters Type Name Description System.String clientId The client id. Returns Type Description IClientSession The IClientSession . | Improve this doc View source GetMessages(String) Gets the messages that have been published to the specified topic. Declaration IReadOnlyList<MqttApplicationMessage> GetMessages(string topic) Parameters Type Name Description System.String topic The name of the topic. Returns Type Description System.Collections.Generic.IReadOnlyList < MQTTnet.MqttApplicationMessage > The messages published to the topic. | Improve this doc View source PublishAsync(String, MqttApplicationMessage, IMqttClientOptions) Publishes a message. Declaration Task PublishAsync(string clientId, MqttApplicationMessage message, IMqttClientOptions clientOptions) Parameters Type Name Description System.String clientId The client identifier. MQTTnet.MqttApplicationMessage message The MQTTnet.MqttApplicationMessage to be published. MQTTnet.Client.Options.IMqttClientOptions clientOptions The MQTTnet.Client.Options.IMqttClientOptions of the producing MQTTnet.Client.MqttClient . Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Subscribe(String, IReadOnlyCollection<String>) Subscribes the specified client to the specified topics. Declaration void Subscribe(string clientId, IReadOnlyCollection<string> topics) Parameters Type Name Description System.String clientId The client identifier. System.Collections.Generic.IReadOnlyCollection < System.String > topics The name of the topics or the topic filter strings. | Improve this doc View source Unsubscribe(String, IReadOnlyCollection<String>) Unsubscribes the specified client from the specified topics. Declaration void Unsubscribe(string clientId, IReadOnlyCollection<string> topics) Parameters Type Name Description System.String clientId The client identifier. System.Collections.Generic.IReadOnlyCollection < System.String > topics The name of the topics or the topic filter strings. | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(CancellationToken) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration Task WaitUntilAllMessagesAreConsumedAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed."
  },
  "api/Silverback.Messaging.Broker.Mqtt.Mocks.MockedMqttClient.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.Mocks.MockedMqttClient.html",
    "title": "Class MockedMqttClient | Silverback",
    "keywords": "Class MockedMqttClient A mocked implementation of MQTTnet.Client.IMqttClient from MQTTnet that connects with an in-memory broker. Inheritance System.Object MockedMqttClient Implements MQTTnet.Client.IMqttClient MQTTnet.IApplicationMessageReceiver MQTTnet.IApplicationMessagePublisher System.IDisposable MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Mqtt.Mocks Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public sealed class MockedMqttClient : IMqttClient, IApplicationMessageReceiver, IApplicationMessagePublisher, IDisposable, IMqttApplicationMessageReceivedHandler Constructors | Improve this doc View source MockedMqttClient(IInMemoryMqttBroker, IMockedMqttOptions) Initializes a new instance of the MockedMqttClient class. Declaration public MockedMqttClient(IInMemoryMqttBroker broker, IMockedMqttOptions mockOptions) Parameters Type Name Description IInMemoryMqttBroker broker The IInMemoryMqttBroker . IMockedMqttOptions mockOptions The IMockedMqttOptions . Properties | Improve this doc View source ApplicationMessageReceivedHandler Declaration public IMqttApplicationMessageReceivedHandler ApplicationMessageReceivedHandler { get; set; } Property Value Type Description MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler | Improve this doc View source ConnectedHandler Declaration public IMqttClientConnectedHandler ConnectedHandler { get; set; } Property Value Type Description MQTTnet.Client.Connecting.IMqttClientConnectedHandler | Improve this doc View source DisconnectedHandler Declaration public IMqttClientDisconnectedHandler DisconnectedHandler { get; set; } Property Value Type Description MQTTnet.Client.Disconnecting.IMqttClientDisconnectedHandler | Improve this doc View source IsConnected Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source Options Declaration public IMqttClientOptions Options { get; } Property Value Type Description MQTTnet.Client.Options.IMqttClientOptions Methods | Improve this doc View source ConnectAsync(IMqttClientOptions, CancellationToken) Declaration public Task<MqttClientAuthenticateResult> ConnectAsync(IMqttClientOptions options, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.Options.IMqttClientOptions options System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MQTTnet.Client.Connecting.MqttClientAuthenticateResult > | Improve this doc View source DisconnectAsync(MqttClientDisconnectOptions, CancellationToken) Declaration public Task DisconnectAsync(MqttClientDisconnectOptions options, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.Disconnecting.MqttClientDisconnectOptions options System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source HandleApplicationMessageReceivedAsync(MqttApplicationMessageReceivedEventArgs) Declaration public Task HandleApplicationMessageReceivedAsync(MqttApplicationMessageReceivedEventArgs eventArgs) Parameters Type Name Description MQTTnet.MqttApplicationMessageReceivedEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task | Improve this doc View source PingAsync(CancellationToken) Declaration public Task PingAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this doc View source PublishAsync(MqttApplicationMessage, CancellationToken) Declaration public Task<MqttClientPublishResult> PublishAsync(MqttApplicationMessage applicationMessage, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.MqttApplicationMessage applicationMessage System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MQTTnet.Client.Publishing.MqttClientPublishResult > | Improve this doc View source SendExtendedAuthenticationExchangeDataAsync(MqttExtendedAuthenticationExchangeData, CancellationToken) Declaration public Task SendExtendedAuthenticationExchangeDataAsync(MqttExtendedAuthenticationExchangeData data, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.ExtendedAuthenticationExchange.MqttExtendedAuthenticationExchangeData data System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this doc View source SubscribeAsync(MqttClientSubscribeOptions, CancellationToken) Declaration public Task<MqttClientSubscribeResult> SubscribeAsync(MqttClientSubscribeOptions options, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.Subscribing.MqttClientSubscribeOptions options System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MQTTnet.Client.Subscribing.MqttClientSubscribeResult > | Improve this doc View source UnsubscribeAsync(MqttClientUnsubscribeOptions, CancellationToken) Declaration public Task<MqttClientUnsubscribeResult> UnsubscribeAsync(MqttClientUnsubscribeOptions options, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.Unsubscribing.MqttClientUnsubscribeOptions options System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MQTTnet.Client.Unsubscribing.MqttClientUnsubscribeResult > Implements MQTTnet.Client.IMqttClient MQTTnet.IApplicationMessageReceiver MQTTnet.IApplicationMessagePublisher System.IDisposable MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler"
  },
  "api/Silverback.Messaging.Broker.ProduceException.html": {
    "href": "api/Silverback.Messaging.Broker.ProduceException.html",
    "title": "Class ProduceException | Silverback",
    "keywords": "Class ProduceException The exception that is thrown by the IProducer when the message cannot be produced or the message broker didn't acknowledge it. Inheritance System.Object System.Exception Silverback.SilverbackException ProduceException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax [Serializable] public class ProduceException : SilverbackException, ISerializable Constructors | Improve this doc View source ProduceException() Initializes a new instance of the ProduceException class. Declaration public ProduceException() | Improve this doc View source ProduceException(SerializationInfo, StreamingContext) Initializes a new instance of the ProduceException class with the serialized data. Declaration protected ProduceException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source ProduceException(String) Initializes a new instance of the ProduceException class with the specified message. Declaration public ProduceException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source ProduceException(String, Exception) Initializes a new instance of the ProduceException class with the specified message and inner exception. Declaration public ProduceException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Broker.Producer.html": {
    "href": "api/Silverback.Messaging.Broker.Producer.html",
    "title": "Class Producer | Silverback",
    "keywords": "Class Producer Inheritance System.Object Producer Producer<TBroker, TEndpoint> Implements IProducer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Producer : IProducer Constructors | Improve this doc View source Producer(IBroker, IProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider, IOutboundLogger<Producer>) Initializes a new instance of the Producer class. Declaration protected Producer(IBroker broker, IProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IOutboundLogger<Producer> logger) Parameters Type Name Description IBroker broker The IBroker that instantiated this producer. IProducerEndpoint endpoint The endpoint to produce to. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IOutboundLogger < Producer > logger The IOutboundLogger<TCategoryName> . Properties | Improve this doc View source Broker Declaration public IBroker Broker { get; } Property Value Type Description IBroker | Improve this doc View source Endpoint Declaration public IProducerEndpoint Endpoint { get; } Property Value Type Description IProducerEndpoint | Improve this doc View source Id Declaration public InstanceIdentifier Id { get; } Property Value Type Description Silverback.InstanceIdentifier | Improve this doc View source IsConnected Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source IsConnecting Declaration public bool IsConnecting { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source ConnectAsync() Declaration public Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ConnectCoreAsync() Connects to the message broker. Declaration protected virtual Task ConnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Declaration public Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source DisconnectCoreAsync() Disconnects from the message broker. Declaration protected virtual Task DisconnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Produce(IOutboundEnvelope) Declaration public IBrokerMessageIdentifier Produce(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope Returns Type Description IBrokerMessageIdentifier | Improve this doc View source Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public void Produce(IOutboundEnvelope envelope, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description IOutboundEnvelope envelope System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError | Improve this doc View source Produce(Object, IReadOnlyCollection<MessageHeader>) Declaration public IBrokerMessageIdentifier Produce(object message, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Object message System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description IBrokerMessageIdentifier | Improve this doc View source Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public void Produce(object message, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError | Improve this doc View source ProduceAsync(IOutboundEnvelope) Declaration public Task<IBrokerMessageIdentifier> ProduceAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > | Improve this doc View source ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public Task ProduceAsync(IOutboundEnvelope envelope, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description IOutboundEnvelope envelope System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Declaration public Task<IBrokerMessageIdentifier> ProduceAsync(object message, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Object message System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > | Improve this doc View source ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public Task ProduceAsync(object message, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected abstract IBrokerMessageIdentifier ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected abstract void ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected abstract IBrokerMessageIdentifier ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected abstract void ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected abstract Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected abstract Task ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected abstract Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected abstract Task ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Declaration public IBrokerMessageIdentifier RawProduce(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Byte [] messageContent System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description IBrokerMessageIdentifier | Improve this doc View source RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public void RawProduce(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] messageContent System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError | Improve this doc View source RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Declaration public IBrokerMessageIdentifier RawProduce(Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description IBrokerMessageIdentifier | Improve this doc View source RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public void RawProduce(Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError | Improve this doc View source RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Declaration public IBrokerMessageIdentifier RawProduce(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName System.Byte [] messageContent System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description IBrokerMessageIdentifier | Improve this doc View source RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public void RawProduce(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName System.Byte [] messageContent System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError | Improve this doc View source RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Declaration public IBrokerMessageIdentifier RawProduce(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description IBrokerMessageIdentifier | Improve this doc View source RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public void RawProduce(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError | Improve this doc View source RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Declaration public Task<IBrokerMessageIdentifier> RawProduceAsync(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Byte [] messageContent System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > | Improve this doc View source RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public Task RawProduceAsync(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] messageContent System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Returns Type Description System.Threading.Tasks.Task | Improve this doc View source RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Declaration public Task<IBrokerMessageIdentifier> RawProduceAsync(Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > | Improve this doc View source RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public Task RawProduceAsync(Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Returns Type Description System.Threading.Tasks.Task | Improve this doc View source RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Declaration public Task<IBrokerMessageIdentifier> RawProduceAsync(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName System.Byte [] messageContent System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > | Improve this doc View source RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public Task RawProduceAsync(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName System.Byte [] messageContent System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Returns Type Description System.Threading.Tasks.Task | Improve this doc View source RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Declaration public Task<IBrokerMessageIdentifier> RawProduceAsync(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > | Improve this doc View source RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration public Task RawProduceAsync(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Returns Type Description System.Threading.Tasks.Task Implements IProducer"
  },
  "api/Silverback.Messaging.Broker.Producer-2.html": {
    "href": "api/Silverback.Messaging.Broker.Producer-2.html",
    "title": "Class Producer<TBroker, TEndpoint> | Silverback",
    "keywords": "Class Producer<TBroker, TEndpoint> Inheritance System.Object Producer Producer<TBroker, TEndpoint> OutboundQueueProducer Implements IProducer Inherited Members Producer.Id Producer.IsConnecting Producer.IsConnected Producer.ConnectAsync() Producer.DisconnectAsync() Producer.Produce(Object, IReadOnlyCollection<MessageHeader>) Producer.Produce(IOutboundEnvelope) Producer.Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Producer.ProduceAsync(IOutboundEnvelope) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ConnectCoreAsync() Producer.DisconnectCoreAsync() Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Producer<TBroker, TEndpoint> : Producer, IProducer where TBroker : IBroker where TEndpoint : IProducerEndpoint Type Parameters Name Description TBroker TEndpoint Constructors | Improve this doc View source Producer(TBroker, TEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider, IOutboundLogger<Producer>) Initializes a new instance of the Producer<TBroker, TEndpoint> class. Declaration protected Producer(TBroker broker, TEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IOutboundLogger<Producer> logger) Parameters Type Name Description TBroker broker The IBroker that instantiated this producer. TEndpoint endpoint The endpoint to produce to. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IOutboundLogger < Producer > logger The IOutboundLogger<TCategoryName> . Properties | Improve this doc View source Broker Gets the TBroker that owns this producer. Declaration public TBroker Broker { get; } Property Value Type Description TBroker | Improve this doc View source Endpoint Gets the TEndpoint representing the endpoint that is being produced to. Declaration public TEndpoint Endpoint { get; } Property Value Type Description TEndpoint Implements IProducer"
  },
  "api/Silverback.Messaging.Configuration.BinaryFileMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.BinaryFileMessageSerializerBuilder.html",
    "title": "Class BinaryFileMessageSerializerBuilder | Silverback",
    "keywords": "Class BinaryFileMessageSerializerBuilder Builds the BinaryFileMessageSerializer or BinaryFileMessageSerializer<TModel> . Inheritance System.Object BinaryFileMessageSerializerBuilder Implements IBinaryFileMessageSerializerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class BinaryFileMessageSerializerBuilder : IBinaryFileMessageSerializerBuilder Methods | Improve this doc View source Build() Builds the IMessageSerializer instance. Declaration public IMessageSerializer Build() Returns Type Description IMessageSerializer The IMessageSerializer . | Improve this doc View source UseModel<TModel>() Declaration public IBinaryFileMessageSerializerBuilder UseModel<TModel>() where TModel : IBinaryFileMessage, new() Returns Type Description IBinaryFileMessageSerializerBuilder Type Parameters Name Description TModel Implements IBinaryFileMessageSerializerBuilder"
  },
  "api/Silverback.Messaging.Configuration.BrokerConnectionMode.html": {
    "href": "api/Silverback.Messaging.Configuration.BrokerConnectionMode.html",
    "title": "Enum BrokerConnectionMode | Silverback",
    "keywords": "Enum BrokerConnectionMode Specifies if and when the message broker has to be automatically connected. Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public enum BrokerConnectionMode Fields Name Description AfterStartup The message broker is being connected after the application is successfully started. Manual The message broker is not being connected automatically. Startup The message broker is being connected during the application startup."
  },
  "api/Silverback.Messaging.Configuration.BrokerConnectionOptions.html": {
    "href": "api/Silverback.Messaging.Configuration.BrokerConnectionOptions.html",
    "title": "Class BrokerConnectionOptions | Silverback",
    "keywords": "Class BrokerConnectionOptions The options specifying if and when the message broker has to be automatically connected. Inheritance System.Object BrokerConnectionOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class BrokerConnectionOptions Properties | Improve this doc View source Default Gets the default options. Declaration public static BrokerConnectionOptions Default { get; } Property Value Type Description BrokerConnectionOptions | Improve this doc View source Mode Gets or sets the BrokerConnectionMode . The default is Startup . Declaration public BrokerConnectionMode Mode { get; set; } Property Value Type Description BrokerConnectionMode | Improve this doc View source RetryInterval Gets or sets interval between the connection retries. The default is 5 minutes. This setting is ignored when Mode is set to manual. Declaration public TimeSpan RetryInterval { get; set; } Property Value Type Description System.TimeSpan | Improve this doc View source RetryOnFailure Gets or sets a value indicating whether a retry must be performed if an exception is thrown when trying to connect. The default is true . This setting is ignored when Mode is set to manual. Declaration public bool RetryOnFailure { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilder-2.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilder-2.html",
    "title": "Class ConsumerEndpointBuilder<TEndpoint, TBuilder> | Silverback",
    "keywords": "Class ConsumerEndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from ConsumerEndpoint . Inheritance System.Object EndpointBuilder <TEndpoint, TBuilder> ConsumerEndpointBuilder<TEndpoint, TBuilder> Implements IConsumerEndpointBuilder <TBuilder> IEndpointBuilder <TBuilder> Inherited Members EndpointBuilder<TEndpoint, TBuilder>.EndpointsConfigurationBuilder EndpointBuilder<TEndpoint, TBuilder>.This EndpointBuilder<TEndpoint, TBuilder>.WithName(String) EndpointBuilder<TEndpoint, TBuilder>.UseSerializer(IMessageSerializer) EndpointBuilder<TEndpoint, TBuilder>.WithEncryption(EncryptionSettings) EndpointBuilder<TEndpoint, TBuilder>.ValidateMessage(Boolean) EndpointBuilder<TEndpoint, TBuilder>.DisableMessageValidation() EndpointBuilder<TEndpoint, TBuilder>.Build() EndpointBuilder<TEndpoint, TBuilder>.CreateEndpoint() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public abstract class ConsumerEndpointBuilder<TEndpoint, TBuilder> : EndpointBuilder<TEndpoint, TBuilder>, IConsumerEndpointBuilder<TBuilder>, IEndpointBuilder<TBuilder> where TEndpoint : ConsumerEndpoint where TBuilder : IConsumerEndpointBuilder<TBuilder> Type Parameters Name Description TEndpoint The type of the endpoint being built. TBuilder The actual builder type. Constructors | Improve this doc View source ConsumerEndpointBuilder(Type, IEndpointsConfigurationBuilder) Initializes a new instance of the ConsumerEndpointBuilder<TEndpoint, TBuilder> class. Declaration protected ConsumerEndpointBuilder(Type messageType = null, IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description System.Type messageType Gets the type of the message being consumed. IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source MessageType Declaration public Type MessageType { get; } Property Value Type Description System.Type Methods | Improve this doc View source Build() Declaration public override TEndpoint Build() Returns Type Description TEndpoint Overrides Silverback.Messaging.Configuration.EndpointBuilder<TEndpoint, TBuilder>.Build() | Improve this doc View source Decrypt(EncryptionSettings) Declaration public TBuilder Decrypt(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings Returns Type Description TBuilder | Improve this doc View source DeserializeUsing(IMessageSerializer) Declaration public TBuilder DeserializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer Returns Type Description TBuilder | Improve this doc View source EnableBatchProcessing(Int32, Nullable<TimeSpan>) Declaration public TBuilder EnableBatchProcessing(int batchSize, TimeSpan? maxWaitTime = default(TimeSpan? )) Parameters Type Name Description System.Int32 batchSize System.Nullable < System.TimeSpan > maxWaitTime Returns Type Description TBuilder | Improve this doc View source EnsureExactlyOnce(IExactlyOnceStrategy) Declaration public TBuilder EnsureExactlyOnce(IExactlyOnceStrategy strategy) Parameters Type Name Description IExactlyOnceStrategy strategy Returns Type Description TBuilder | Improve this doc View source EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder>) Declaration public TBuilder EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder> strategyBuilderAction) Parameters Type Name Description System.Action < IExactlyOnceStrategyBuilder > strategyBuilderAction Returns Type Description TBuilder | Improve this doc View source HandleTombstoneMessages() Declaration public TBuilder HandleTombstoneMessages() Returns Type Description TBuilder | Improve this doc View source IgnoreUnhandledMessages() Declaration public TBuilder IgnoreUnhandledMessages() Returns Type Description TBuilder | Improve this doc View source OnError(IErrorPolicy) Declaration public TBuilder OnError(IErrorPolicy errorPolicy) Parameters Type Name Description IErrorPolicy errorPolicy Returns Type Description TBuilder | Improve this doc View source OnError(Action<IErrorPolicyBuilder>) Declaration public TBuilder OnError(Action<IErrorPolicyBuilder> errorPolicyBuilderAction) Parameters Type Name Description System.Action < IErrorPolicyBuilder > errorPolicyBuilderAction Returns Type Description TBuilder | Improve this doc View source SkipNullMessages() Declaration public TBuilder SkipNullMessages() Returns Type Description TBuilder | Improve this doc View source ThrowIfUnhandled() Declaration public TBuilder ThrowIfUnhandled() Returns Type Description TBuilder | Improve this doc View source UseLegacyNullMessageHandling() Declaration public TBuilder UseLegacyNullMessageHandling() Returns Type Description TBuilder | Improve this doc View source WithSequenceTimeout(TimeSpan) Declaration public TBuilder WithSequenceTimeout(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout Returns Type Description TBuilder Implements IConsumerEndpointBuilder<TBuilder> IEndpointBuilder<TBuilder> Extension Methods ConsumerEndpointBuilderConsumeBinaryFilesExtensions.ConsumeBinaryFiles<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) ConsumerEndpointBuilderDecryptUsingExtensions.DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Byte[], Byte[]) ConsumerEndpointBuilderDecryptUsingExtensions.DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Func<String, Byte[]>, Byte[]) ConsumerEndpointBuilderDeserializeJsonExtensions.DeserializeJson<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>) ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderConsumeBinaryFilesExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderConsumeBinaryFilesExtensions.html",
    "title": "Class ConsumerEndpointBuilderConsumeBinaryFilesExtensions | Silverback",
    "keywords": "Class ConsumerEndpointBuilderConsumeBinaryFilesExtensions Adds the ConsumeBinaryFiles method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ConsumerEndpointBuilderConsumeBinaryFilesExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ConsumerEndpointBuilderConsumeBinaryFilesExtensions Methods | Improve this doc View source ConsumeBinaryFiles<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) Sets the serializer to an instance of BinaryFileMessageSerializer (or BinaryFileMessageSerializer<TModel> ) to wrap the consumed binary files into a BinaryFileMessage . This settings will force the BinaryFileMessageSerializer to be used regardless of the message type header. Declaration public static TBuilder ConsumeBinaryFiles<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, Action<IBinaryFileMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IBinaryFileMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IBinaryFileMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type. Remarks This replaces the IMessageSerializer and the endpoint will only be able to deal with binary files."
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDecryptUsingExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDecryptUsingExtensions.html",
    "title": "Class ConsumerEndpointBuilderDecryptUsingExtensions | Silverback",
    "keywords": "Class ConsumerEndpointBuilderDecryptUsingExtensions Adds the DecryptUsingAes method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ConsumerEndpointBuilderDecryptUsingExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ConsumerEndpointBuilderDecryptUsingExtensions Methods | Improve this doc View source DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Byte[], Byte[]) Specifies that the AES algorithm has to be used to decrypt the messages. Declaration public static TBuilder DecryptUsingAes<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, byte[] key, byte[] initializationVector = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Byte [] key The secret key for the symmetric algorithm. System.Byte [] initializationVector The optional initialization vector (IV) for the symmetric algorithm. If null it is expected that the IV is prepended to the actual encrypted message. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type. | Improve this doc View source DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Func<String, Byte[]>, Byte[]) Specifies that the AES algorithm has to be used to decrypt the messages. Declaration public static TBuilder DecryptUsingAes<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, Func<string, byte[]> decryptionKeyCallback, byte[] initializationVector = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Func < System.String , System.Byte []> decryptionKeyCallback The function to be used to retrieve the encryption key according to the encryption key identifier passed in the header (see EncryptionKeyId ). System.Byte [] initializationVector The optional initialization vector (IV) for the symmetric algorithm. If null it is expected that the IV is prepended to the actual encrypted message. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeJsonExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeJsonExtensions.html",
    "title": "Class ConsumerEndpointBuilderDeserializeJsonExtensions | Silverback",
    "keywords": "Class ConsumerEndpointBuilderDeserializeJsonExtensions Adds the DeserializeJson method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ConsumerEndpointBuilderDeserializeJsonExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ConsumerEndpointBuilderDeserializeJsonExtensions Methods | Improve this doc View source DeserializeJson<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>) Sets the serializer to an instance of JsonMessageSerializer (or JsonMessageSerializer<TMessage> ) to deserialize the consumed JSON. By default this serializer relies on the message type header to determine the type of the message to be deserialized. This behavior can be changed using the builder action and specifying a fixed message type. Declaration public static TBuilder DeserializeJson<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, Action<IJsonMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IJsonMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.html",
    "title": "Class ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions | Silverback",
    "keywords": "Class ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions Adds the DeserializeJsonUsingNewtonsoft method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Newtonsoft.dll Syntax public static class ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions Methods | Improve this doc View source DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) Sets the serializer to an instance of NewtonsoftJsonMessageSerializer (or NewtonsoftJsonMessageSerializer<TMessage> ) to deserialize the consumed JSON. By default this serializer relies on the message type header to determine the type of the message to be deserialized. This behavior can be changed using the builder action and specifying a fixed message type. Declaration public static TBuilder DeserializeJsonUsingNewtonsoft<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, Action<INewtonsoftJsonMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < INewtonsoftJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the INewtonsoftJsonMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.EndpointBuilder-2.html": {
    "href": "api/Silverback.Messaging.Configuration.EndpointBuilder-2.html",
    "title": "Class EndpointBuilder<TEndpoint, TBuilder> | Silverback",
    "keywords": "Class EndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from Endpoint . Inheritance System.Object EndpointBuilder<TEndpoint, TBuilder> ConsumerEndpointBuilder<TEndpoint, TBuilder> ProducerEndpointBuilder<TEndpoint, TBuilder> Implements IEndpointBuilder <TBuilder> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public abstract class EndpointBuilder<TEndpoint, TBuilder> : IEndpointBuilder<TBuilder> where TEndpoint : Endpoint where TBuilder : IEndpointBuilder<TBuilder> Type Parameters Name Description TEndpoint The type of the endpoint being built. TBuilder The actual builder type. Constructors | Improve this doc View source EndpointBuilder(IEndpointsConfigurationBuilder) Initializes a new instance of the EndpointBuilder<TEndpoint, TBuilder> class. Declaration protected EndpointBuilder(IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source EndpointsConfigurationBuilder Gets the IEndpointsConfigurationBuilder that instantiated the builder. Declaration public IEndpointsConfigurationBuilder EndpointsConfigurationBuilder { get; } Property Value Type Description IEndpointsConfigurationBuilder | Improve this doc View source This Gets this instance. Declaration protected abstract TBuilder This { get; } Property Value Type Description TBuilder Remarks This is necessary to work around casting in the base classes. Methods | Improve this doc View source Build() Builds the endpoint instance. Declaration public virtual TEndpoint Build() Returns Type Description TEndpoint The endpoint. | Improve this doc View source CreateEndpoint() Creates the endpoint to be configured according to the options stored in the builder. Declaration protected abstract TEndpoint CreateEndpoint() Returns Type Description TEndpoint The endpoint. | Improve this doc View source DisableMessageValidation() Declaration public TBuilder DisableMessageValidation() Returns Type Description TBuilder | Improve this doc View source UseSerializer(IMessageSerializer) Declaration public TBuilder UseSerializer(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer Returns Type Description TBuilder | Improve this doc View source ValidateMessage(Boolean) Declaration public TBuilder ValidateMessage(bool throwException) Parameters Type Name Description System.Boolean throwException Returns Type Description TBuilder | Improve this doc View source WithEncryption(EncryptionSettings) Declaration public TBuilder WithEncryption(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings Returns Type Description TBuilder | Improve this doc View source WithName(String) Declaration public TBuilder WithName(string friendlyName) Parameters Type Name Description System.String friendlyName Returns Type Description TBuilder Implements IEndpointBuilder<TBuilder>"
  },
  "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddInboundExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddInboundExtensions.html",
    "title": "Class EndpointsConfigurationBuilderAddInboundExtensions | Silverback",
    "keywords": "Class EndpointsConfigurationBuilderAddInboundExtensions Adds the AddInbound method to the IEndpointsConfigurationBuilder . Inheritance System.Object EndpointsConfigurationBuilderAddInboundExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class EndpointsConfigurationBuilderAddInboundExtensions Remarks Multiple calls to this methods will cause multiple consumers to be instantiated, which could mean multiple connections being issues and more resources being used (depending on the actual message broker implementation). The consumer endpoint might allow to define multiple endpoints at once, to efficiently instantiate a single consumer for all of them. Methods | Improve this doc View source AddInbound(IEndpointsConfigurationBuilder, IConsumerEndpoint, Int32) Adds an inbound endpoint and instantiates a consumer. Declaration public static IEndpointsConfigurationBuilder AddInbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, IConsumerEndpoint endpoint, int consumersCount = 1) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . IConsumerEndpoint endpoint The endpoint (topic). System.Int32 consumersCount The number of consumers to be instantiated. The default is 1. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddOutboundExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddOutboundExtensions.html",
    "title": "Class EndpointsConfigurationBuilderAddOutboundExtensions | Silverback",
    "keywords": "Class EndpointsConfigurationBuilderAddOutboundExtensions Adds the AddOutbound method to the IEndpointsConfigurationBuilder . Inheritance System.Object EndpointsConfigurationBuilderAddOutboundExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class EndpointsConfigurationBuilderAddOutboundExtensions Methods | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, IProducerEndpoint, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, IProducerEndpoint endpoint, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. IProducerEndpoint endpoint The IProducerEndpoint representing the destination topic or queue. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, IProducerEndpoint[]) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, params IProducerEndpoint[] endpoints) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. IProducerEndpoint [] endpoints The collection of IProducerEndpoint representing the destination topics or queues. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, IOutboundRouter, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, IOutboundRouter router, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. IOutboundRouter router The IOutboundRouter<TMessage> to be used to determine the destination endpoint. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, IEnumerable<IProducerEndpoint>, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, IEnumerable<IProducerEndpoint> endpoints, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. System.Collections.Generic.IEnumerable < IProducerEndpoint > endpoints The collection of IProducerEndpoint representing the destination topics or queues. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, Type, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, Type routerType, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. System.Type routerType The type of the IOutboundRouter<TMessage> to be used to determine the destination endpoint. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IProducerEndpoint, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, IProducerEndpoint endpoint, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . IProducerEndpoint endpoint The IProducerEndpoint representing the destination topic or queue. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IProducerEndpoint[]) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, params IProducerEndpoint[] endpoints) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . IProducerEndpoint [] endpoints The collection of IProducerEndpoint representing the destination topics or queues. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IOutboundRouter<TMessage>, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, IOutboundRouter<TMessage> router, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . IOutboundRouter <TMessage> router The IOutboundRouter<TMessage> to be used to determine the destination endpoint. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IEnumerable<IProducerEndpoint>, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, IEnumerable<IProducerEndpoint> endpoints, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Collections.Generic.IEnumerable < IProducerEndpoint > endpoints The collection of IProducerEndpoint representing the destination topics or queues. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage, TRouter>(IEndpointsConfigurationBuilder, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage, TRouter>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, bool preloadProducers = true) where TRouter : IOutboundRouter<TMessage> Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. TRouter The type of the IOutboundRouter<TMessage> to be used to determine the destination endpoint."
  },
  "api/Silverback.Messaging.Configuration.ErrorPolicyBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.ErrorPolicyBuilder.html",
    "title": "Class ErrorPolicyBuilder | Silverback",
    "keywords": "Class ErrorPolicyBuilder Builds the IErrorPolicy . Inheritance System.Object ErrorPolicyBuilder Implements IErrorPolicyBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class ErrorPolicyBuilder : IErrorPolicyBuilder Constructors | Improve this doc View source ErrorPolicyBuilder(IEndpointsConfigurationBuilder) Initializes a new instance of the ErrorPolicyBuilder class. Declaration public ErrorPolicyBuilder(IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source EndpointsConfigurationBuilder Gets the IEndpointsConfigurationBuilder that instantiated the builder. Declaration public IEndpointsConfigurationBuilder EndpointsConfigurationBuilder { get; } Property Value Type Description IEndpointsConfigurationBuilder Methods | Improve this doc View source Build() Builds the IErrorPolicy instance. Declaration public IErrorPolicy Build() Returns Type Description IErrorPolicy The IMessageSerializer . | Improve this doc View source Move(IProducerEndpoint, Action<MoveMessageErrorPolicy>) Declaration public IErrorPolicyChainBuilder Move(IProducerEndpoint endpoint, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IProducerEndpoint endpoint System.Action < MoveMessageErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source Retry(Action<RetryErrorPolicy>) Declaration public IErrorPolicyChainBuilder Retry(Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Action < RetryErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source Retry(Int32, Action<RetryErrorPolicy>) Declaration public IErrorPolicyChainBuilder Retry(int retriesCount, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount System.Action < RetryErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source Retry(Int32, TimeSpan, Action<RetryErrorPolicy>) Declaration public IErrorPolicyChainBuilder Retry(int retriesCount, TimeSpan initialDelay, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount System.TimeSpan initialDelay System.Action < RetryErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source Retry(Nullable<Int32>, Nullable<TimeSpan>, Nullable<TimeSpan>, Action<RetryErrorPolicy>) Declaration public IErrorPolicyChainBuilder Retry(int? retriesCount = default(int? ), TimeSpan? initialDelay = default(TimeSpan? ), TimeSpan? delayIncrement = default(TimeSpan? ), Action<RetryErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Nullable < System.Int32 > retriesCount System.Nullable < System.TimeSpan > initialDelay System.Nullable < System.TimeSpan > delayIncrement System.Action < RetryErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source Skip(Action<SkipMessageErrorPolicy>) Declaration public IErrorPolicyChainBuilder Skip(Action<SkipMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < SkipMessageErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source Stop(Action<StopConsumerErrorPolicy>) Declaration public IErrorPolicyChainBuilder Stop(Action<StopConsumerErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < StopConsumerErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder Implements IErrorPolicyBuilder Extension Methods Silverback.Messaging.Configuration.ErrorPolicyBuilderMoveToMqttTopicExtensions.MoveToMqttTopic(Silverback.Messaging.Configuration.IErrorPolicyBuilder, System.Action<Silverback.Messaging.Configuration.Mqtt.IMqttProducerEndpointBuilder>, System.Action<Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy>) Silverback.Messaging.Configuration.ErrorPolicyBuilderMoveToKafkaTopicExtensions.MoveToKafkaTopic(Silverback.Messaging.Configuration.IErrorPolicyBuilder, System.Action<Silverback.Messaging.Configuration.Kafka.IKafkaProducerEndpointBuilder>, System.Action<Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy>)"
  },
  "api/Silverback.Messaging.Configuration.ErrorPolicyChainBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.ErrorPolicyChainBuilder.html",
    "title": "Class ErrorPolicyChainBuilder | Silverback",
    "keywords": "Class ErrorPolicyChainBuilder Builds the IErrorPolicy . Inheritance System.Object ErrorPolicyChainBuilder Implements IErrorPolicyChainBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class ErrorPolicyChainBuilder : IErrorPolicyChainBuilder Constructors | Improve this doc View source ErrorPolicyChainBuilder(IEndpointsConfigurationBuilder) Initializes a new instance of the ErrorPolicyChainBuilder class. Declaration public ErrorPolicyChainBuilder(IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source EndpointsConfigurationBuilder Gets the IEndpointsConfigurationBuilder that instantiated the builder. Declaration public IEndpointsConfigurationBuilder EndpointsConfigurationBuilder { get; } Property Value Type Description IEndpointsConfigurationBuilder Methods | Improve this doc View source Build() Builds the IErrorPolicy instance. Declaration public IErrorPolicy Build() Returns Type Description IErrorPolicy The IMessageSerializer . | Improve this doc View source ThenMove(IProducerEndpoint, Action<MoveMessageErrorPolicy>) Declaration public IErrorPolicyChainBuilder ThenMove(IProducerEndpoint endpoint, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IProducerEndpoint endpoint System.Action < MoveMessageErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source ThenRetry(Action<RetryErrorPolicy>) Declaration public IErrorPolicyChainBuilder ThenRetry(Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Action < RetryErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source ThenRetry(Int32, Action<RetryErrorPolicy>) Declaration public IErrorPolicyChainBuilder ThenRetry(int retriesCount, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount System.Action < RetryErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source ThenRetry(Int32, TimeSpan, Action<RetryErrorPolicy>) Declaration public IErrorPolicyChainBuilder ThenRetry(int retriesCount, TimeSpan initialDelay, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount System.TimeSpan initialDelay System.Action < RetryErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source ThenRetry(Nullable<Int32>, Nullable<TimeSpan>, Nullable<TimeSpan>, Action<RetryErrorPolicy>) Declaration public IErrorPolicyChainBuilder ThenRetry(int? retriesCount = default(int? ), TimeSpan? initialDelay = default(TimeSpan? ), TimeSpan? delayIncrement = default(TimeSpan? ), Action<RetryErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Nullable < System.Int32 > retriesCount System.Nullable < System.TimeSpan > initialDelay System.Nullable < System.TimeSpan > delayIncrement System.Action < RetryErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source ThenSkip(Action<SkipMessageErrorPolicy>) Declaration public IErrorPolicyChainBuilder ThenSkip(Action<SkipMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < SkipMessageErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder | Improve this doc View source ThenStop(Action<StopConsumerErrorPolicy>) Declaration public IErrorPolicyChainBuilder ThenStop(Action<StopConsumerErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < StopConsumerErrorPolicy > policyConfigurationAction Returns Type Description IErrorPolicyChainBuilder Implements IErrorPolicyChainBuilder Extension Methods Silverback.Messaging.Configuration.ErrorPolicyChainBuilderMoveToMqttTopicExtensions.ThenMoveToMqttTopic(Silverback.Messaging.Configuration.IErrorPolicyChainBuilder, System.Action<Silverback.Messaging.Configuration.Mqtt.IMqttProducerEndpointBuilder>, System.Action<Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy>) Silverback.Messaging.Configuration.ErrorPolicyChainBuilderMoveToKafkaTopicExtensions.ThenMoveToKafkaTopic(Silverback.Messaging.Configuration.IErrorPolicyChainBuilder, System.Action<Silverback.Messaging.Configuration.Kafka.IKafkaProducerEndpointBuilder>, System.Action<Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy>)"
  },
  "api/Silverback.Messaging.Configuration.ExactlyOnceStrategy.html": {
    "href": "api/Silverback.Messaging.Configuration.ExactlyOnceStrategy.html",
    "title": "Class ExactlyOnceStrategy | Silverback",
    "keywords": "Class ExactlyOnceStrategy Contains some helper methods used to build the exactly-once strategies. Inheritance System.Object ExactlyOnceStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ExactlyOnceStrategy Methods | Improve this doc View source Log() Builds an instance of the LogExactlyOnceStrategy that uses an IInboundLog to keep track of each processed message and guarantee that each one is processed only once. Declaration public static IExactlyOnceStrategy Log() Returns Type Description IExactlyOnceStrategy The exactly-once strategy instance. | Improve this doc View source OffsetStore() Builds an instance of the OffsetStoreExactlyOnceStrategy that uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration public static IExactlyOnceStrategy OffsetStore() Returns Type Description IExactlyOnceStrategy The exactly-once strategy instance."
  },
  "api/Silverback.Messaging.Configuration.ExactlyOnceStrategyBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.ExactlyOnceStrategyBuilder.html",
    "title": "Class ExactlyOnceStrategyBuilder | Silverback",
    "keywords": "Class ExactlyOnceStrategyBuilder Builds the IExactlyOnceStrategy . Inheritance System.Object ExactlyOnceStrategyBuilder Implements IExactlyOnceStrategyBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class ExactlyOnceStrategyBuilder : IExactlyOnceStrategyBuilder Methods | Improve this doc View source Build() Builds the IExactlyOnceStrategy instance. Declaration public IExactlyOnceStrategy Build() Returns Type Description IExactlyOnceStrategy The IExactlyOnceStrategy . | Improve this doc View source LogMessages() Declaration public IExactlyOnceStrategyBuilder LogMessages() Returns Type Description IExactlyOnceStrategyBuilder | Improve this doc View source StoreOffsets() Declaration public IExactlyOnceStrategyBuilder StoreOffsets() Returns Type Description IExactlyOnceStrategyBuilder Implements IExactlyOnceStrategyBuilder"
  },
  "api/Silverback.Messaging.Configuration.html": {
    "href": "api/Silverback.Messaging.Configuration.html",
    "title": "Namespace Silverback.Messaging.Configuration | Silverback",
    "keywords": "Namespace Silverback.Messaging.Configuration Classes BinaryFileMessageSerializerBuilder Builds the BinaryFileMessageSerializer or BinaryFileMessageSerializer<TModel> . BrokerConnectionOptions The options specifying if and when the message broker has to be automatically connected. ConsumerEndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from ConsumerEndpoint . ConsumerEndpointBuilderConsumeBinaryFilesExtensions Adds the ConsumeBinaryFiles method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . ConsumerEndpointBuilderDecryptUsingExtensions Adds the DecryptUsingAes method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . ConsumerEndpointBuilderDeserializeJsonExtensions Adds the DeserializeJson method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions Adds the DeserializeJsonUsingNewtonsoft method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . EndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from Endpoint . EndpointsConfigurationBuilderAddInboundExtensions Adds the AddInbound method to the IEndpointsConfigurationBuilder . EndpointsConfigurationBuilderAddOutboundExtensions Adds the AddOutbound method to the IEndpointsConfigurationBuilder . ErrorPolicyBuilder Builds the IErrorPolicy . ErrorPolicyChainBuilder Builds the IErrorPolicy . ExactlyOnceStrategy Contains some helper methods used to build the exactly-once strategies. ExactlyOnceStrategyBuilder Builds the IExactlyOnceStrategy . JsonMessageSerializerBuilder NewtonsoftJsonMessageSerializerBuilder ProducerEndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from ConsumerEndpoint . ProducerEndpointBuilderEncryptUsingExtensions Adds the EncryptUsingAes method to the ProducerEndpointBuilder<TEndpoint, TBuilder> . ProducerEndpointBuilderProduceBinaryFilesExtensions Adds the ProduceBinaryFiles method to the ProducerEndpointBuilder<TEndpoint, TBuilder> . ProducerEndpointBuilderSerializeAsJsonExtensions Adds the SerializeAsJson method to the ProducerEndpoint . ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions Adds the SerializeAsJsonUsingNewtonsoft method to the ProducerEndpoint . SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions Adds the PublishOutboundMessagesToInternalBus method to the Silverback.Messaging.Configuration.ISilverbackBuilder . SilverbackBuilderWithCustomHeaderNameExtensions Adds the WithCustomHeaderName method to the Silverback.Messaging.Configuration.ISilverbackBuilder . Interfaces IBinaryFileMessageSerializerBuilder Builds the BinaryFileMessageSerializer<TModel> or BinaryFileMessageSerializer<TModel> . IConsumerEndpointBuilder<TBuilder> Builds the ConsumerEndpoint . IEndpointBuilder<TBuilder> Builds the Endpoint . IEndpointsConfigurationBuilder Exposes the methods to configure the inbound and outbound endpoints. IEndpointsConfigurator This interface can be implemented to split the message broker endpoints configuration across different types. The types implementing IEndpointsConfigurator must be registered using RegisterConfigurator or AddEndpointConfigurator . IErrorPolicyBuilder Builds the IErrorPolicy . IErrorPolicyChainBuilder Builds the IErrorPolicy . IExactlyOnceStrategyBuilder Builds the IExactlyOnceStrategy . IJsonMessageSerializerBuilder Builds the JsonMessageSerializer or JsonMessageSerializer<TMessage> . INewtonsoftJsonMessageSerializerBuilder Builds the NewtonsoftJsonMessageSerializer or NewtonsoftJsonMessageSerializer<TMessage> . IProducerEndpointBuilder<TBuilder> Builds the ProducerEndpoint . IValidatableEndpointSettings Declares the Validate method that is used to check the provided settings. Enums BrokerConnectionMode Specifies if and when the message broker has to be automatically connected."
  },
  "api/Silverback.Messaging.Configuration.IBinaryFileMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IBinaryFileMessageSerializerBuilder.html",
    "title": "Interface IBinaryFileMessageSerializerBuilder | Silverback",
    "keywords": "Interface IBinaryFileMessageSerializerBuilder Builds the BinaryFileMessageSerializer<TModel> or BinaryFileMessageSerializer<TModel> . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IBinaryFileMessageSerializerBuilder Methods | Improve this doc View source UseModel<TModel>() Specifies a custom model to wrap the binary file. Declaration IBinaryFileMessageSerializerBuilder UseModel<TModel>() where TModel : IBinaryFileMessage, new() Returns Type Description IBinaryFileMessageSerializerBuilder The IBinaryFileMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TModel The type of the IBinaryFileMessage implementation."
  },
  "api/Silverback.Messaging.Configuration.IConsumerEndpointBuilder-1.html": {
    "href": "api/Silverback.Messaging.Configuration.IConsumerEndpointBuilder-1.html",
    "title": "Interface IConsumerEndpointBuilder<TBuilder> | Silverback",
    "keywords": "Interface IConsumerEndpointBuilder<TBuilder> Builds the ConsumerEndpoint . Inherited Members IEndpointBuilder<TBuilder>.WithName(String) IEndpointBuilder<TBuilder>.UseSerializer(IMessageSerializer) IEndpointBuilder<TBuilder>.WithEncryption(EncryptionSettings) IEndpointBuilder<TBuilder>.ValidateMessage(Boolean) IEndpointBuilder<TBuilder>.DisableMessageValidation() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IConsumerEndpointBuilder<out TBuilder> : IEndpointBuilder<TBuilder> where TBuilder : IConsumerEndpointBuilder<TBuilder> Type Parameters Name Description TBuilder The actual builder type. Properties | Improve this doc View source MessageType Gets the type of the message being consumed. Declaration Type MessageType { get; } Property Value Type Description System.Type Remarks This value might be used during the configuration to automatically determine some configurations (e.g. the correct deserializer to be used) without having to specify the message type once again. Methods | Improve this doc View source Decrypt(EncryptionSettings) Specifies the EncryptionSettings to be used to decrypt the messages. Declaration TBuilder Decrypt(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings The EncryptionSettings . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source DeserializeUsing(IMessageSerializer) Specifies the IMessageSerializer to be used to deserialize the messages. Declaration TBuilder DeserializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source EnableBatchProcessing(Int32, Nullable<TimeSpan>) Enables batch processing. Declaration TBuilder EnableBatchProcessing(int batchSize, TimeSpan? maxWaitTime = default(TimeSpan? )) Parameters Type Name Description System.Int32 batchSize The number of messages to be processed in batch. System.Nullable < System.TimeSpan > maxWaitTime The maximum amount of time to wait for the batch to be filled. After this time the batch will be completed even if the specified batchSize is not reached. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source EnsureExactlyOnce(IExactlyOnceStrategy) Specifies the strategy to be used to ensure that each message is processed exactly once. Declaration TBuilder EnsureExactlyOnce(IExactlyOnceStrategy strategy) Parameters Type Name Description IExactlyOnceStrategy strategy The IExactlyOnceStrategy . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder>) Specifies the strategy to be used to ensure that each message is processed exactly once. Declaration TBuilder EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder> strategyBuilderAction) Parameters Type Name Description System.Action < IExactlyOnceStrategyBuilder > strategyBuilderAction An System.Action<T> that takes the IExactlyOnceStrategyBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source HandleTombstoneMessages() Specifies that the null messages have to be mapped to a Tombstone<TMessage> ( Tombstone ). This is the default behavior, use the UseLegacyNullMessageHandling() or SkipNullMessages() methods to change it. Declaration TBuilder HandleTombstoneMessages() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source IgnoreUnhandledMessages() Specifies that the message has to be silently ignored if no subscriber is handling it. Declaration TBuilder IgnoreUnhandledMessages() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source OnError(IErrorPolicy) Specifies the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration TBuilder OnError(IErrorPolicy errorPolicy) Parameters Type Name Description IErrorPolicy errorPolicy The IErrorPolicy . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source OnError(Action<IErrorPolicyBuilder>) Specifies the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration TBuilder OnError(Action<IErrorPolicyBuilder> errorPolicyBuilderAction) Parameters Type Name Description System.Action < IErrorPolicyBuilder > errorPolicyBuilderAction An System.Action<T> that takes the IErrorPolicyBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source SkipNullMessages() Specifies that the null messages have to be silently skipped ( Skip ). Declaration TBuilder SkipNullMessages() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ThrowIfUnhandled() Specifies that an exception must be thrown if no subscriber is handling the received message. This option is enabled by default. Use the IgnoreUnhandledMessages() to disable it. Declaration TBuilder ThrowIfUnhandled() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source UseLegacyNullMessageHandling() Specifies that the null messages have to be forwarded as null ( Legacy ). Declaration TBuilder UseLegacyNullMessageHandling() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithSequenceTimeout(TimeSpan) Sets the timeout after which an incomplete sequence that isn't pushed with new messages will be aborted and discarded. The default is a conservative 30 minutes. Declaration TBuilder WithSequenceTimeout(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The timeout. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Remarks This setting is ignored for batches ( BatchSequence ), use the maxWaitTime parameter of EnableBatchProcessing(Int32, Nullable<TimeSpan>) instead. Extension Methods ConsumerEndpointBuilderConsumeBinaryFilesExtensions.ConsumeBinaryFiles<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) ConsumerEndpointBuilderDecryptUsingExtensions.DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Byte[], Byte[]) ConsumerEndpointBuilderDecryptUsingExtensions.DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Func<String, Byte[]>, Byte[]) ConsumerEndpointBuilderDeserializeJsonExtensions.DeserializeJson<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>) ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.IEndpointBuilder-1.html": {
    "href": "api/Silverback.Messaging.Configuration.IEndpointBuilder-1.html",
    "title": "Interface IEndpointBuilder<TBuilder> | Silverback",
    "keywords": "Interface IEndpointBuilder<TBuilder> Builds the Endpoint . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IEndpointBuilder<out TBuilder> where TBuilder : IEndpointBuilder<TBuilder> Type Parameters Name Description TBuilder The actual builder type. Methods | Improve this doc View source DisableMessageValidation() Disables the message validation. Declaration TBuilder DisableMessageValidation() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source UseSerializer(IMessageSerializer) Specifies the IMessageSerializer to be used serialize or deserialize the messages. Declaration TBuilder UseSerializer(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ValidateMessage(Boolean) Enables the message validation. Declaration TBuilder ValidateMessage(bool throwException) Parameters Type Name Description System.Boolean throwException A value that specifies whether an exception should be thrown if the message is invalid. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithEncryption(EncryptionSettings) Enables the end-to-end message encryption. Declaration TBuilder WithEncryption(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings The EncryptionSettings . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithName(String) Specifies an optional friendly name to be used to identify the endpoint. This name can be used to filter or retrieve the endpoints and will also be included in the DisplayName , to be shown in the human-targeted output (e.g. logs, health checks result, etc.). Declaration TBuilder WithName(string friendlyName) Parameters Type Name Description System.String friendlyName The friendly name. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.IEndpointsConfigurationBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IEndpointsConfigurationBuilder.html",
    "title": "Interface IEndpointsConfigurationBuilder | Silverback",
    "keywords": "Interface IEndpointsConfigurationBuilder Exposes the methods to configure the inbound and outbound endpoints. Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IEndpointsConfigurationBuilder Properties | Improve this doc View source ServiceProvider Gets the System.IServiceProvider to be used to resolve the needed services. Declaration IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider Extension Methods Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddMqttEndpointsExtensions.AddMqttEndpoints(Silverback.Messaging.Configuration.IEndpointsConfigurationBuilder, System.Action<Silverback.Messaging.Configuration.Mqtt.IMqttEndpointsConfigurationBuilder>) Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddKafkaEndpointsExtensions.AddKafkaEndpoints(Silverback.Messaging.Configuration.IEndpointsConfigurationBuilder, System.Action<Silverback.Messaging.Configuration.Kafka.IKafkaEndpointsConfigurationBuilder>) EndpointsConfigurationBuilderAddInboundExtensions.AddInbound(IEndpointsConfigurationBuilder, IConsumerEndpoint, Int32) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IProducerEndpoint[]) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IProducerEndpoint, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IEnumerable<IProducerEndpoint>, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, IProducerEndpoint, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, IProducerEndpoint[]) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, IEnumerable<IProducerEndpoint>, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage, TRouter>(IEndpointsConfigurationBuilder, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IOutboundRouter<TMessage>, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, Type, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, IOutboundRouter, Boolean)"
  },
  "api/Silverback.Messaging.Configuration.IEndpointsConfigurator.html": {
    "href": "api/Silverback.Messaging.Configuration.IEndpointsConfigurator.html",
    "title": "Interface IEndpointsConfigurator | Silverback",
    "keywords": "Interface IEndpointsConfigurator This interface can be implemented to split the message broker endpoints configuration across different types. The types implementing IEndpointsConfigurator must be registered using RegisterConfigurator or AddEndpointConfigurator . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IEndpointsConfigurator Methods | Improve this doc View source Configure(IEndpointsConfigurationBuilder) Configures the message broker endpoints. Declaration void Configure(IEndpointsConfigurationBuilder builder) Parameters Type Name Description IEndpointsConfigurationBuilder builder The IEndpointsConfigurationBuilder instance to be used to configure the endpoints."
  },
  "api/Silverback.Messaging.Configuration.IErrorPolicyBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IErrorPolicyBuilder.html",
    "title": "Interface IErrorPolicyBuilder | Silverback",
    "keywords": "Interface IErrorPolicyBuilder Builds the IErrorPolicy . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IErrorPolicyBuilder Methods | Improve this doc View source Move(IProducerEndpoint, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration IErrorPolicyChainBuilder Move(IProducerEndpoint endpoint, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IProducerEndpoint endpoint The endpoint to move the message to. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder Retry(Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Int32, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder Retry(int retriesCount, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Int32, TimeSpan, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder Retry(int retriesCount, TimeSpan initialDelay, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.TimeSpan initialDelay The optional delay to be applied to the first retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Nullable<Int32>, Nullable<TimeSpan>, Nullable<TimeSpan>, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder Retry(int? retriesCount = default(int? ), TimeSpan? initialDelay = default(TimeSpan? ), TimeSpan? delayIncrement = default(TimeSpan? ), Action<RetryErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Nullable < System.Int32 > retriesCount The maximum number of retries to be performed. System.Nullable < System.TimeSpan > initialDelay The optional delay to be applied to the first retry. System.Nullable < System.TimeSpan > delayIncrement The optional increment to the delay to be applied at each retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Skip(Action<SkipMessageErrorPolicy>) Adds a SkipMessageErrorPolicy that skips the messages that fail to be processed. Declaration IErrorPolicyChainBuilder Skip(Action<SkipMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < SkipMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Stop(Action<StopConsumerErrorPolicy>) Adds a StopConsumerErrorPolicy that stops the consumer when an exception is thrown during the message processing. Declaration IErrorPolicyChainBuilder Stop(Action<StopConsumerErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < StopConsumerErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. Extension Methods Silverback.Messaging.Configuration.ErrorPolicyBuilderMoveToMqttTopicExtensions.MoveToMqttTopic(Silverback.Messaging.Configuration.IErrorPolicyBuilder, System.Action<Silverback.Messaging.Configuration.Mqtt.IMqttProducerEndpointBuilder>, System.Action<Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy>) Silverback.Messaging.Configuration.ErrorPolicyBuilderMoveToKafkaTopicExtensions.MoveToKafkaTopic(Silverback.Messaging.Configuration.IErrorPolicyBuilder, System.Action<Silverback.Messaging.Configuration.Kafka.IKafkaProducerEndpointBuilder>, System.Action<Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy>)"
  },
  "api/Silverback.Messaging.Configuration.IErrorPolicyChainBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IErrorPolicyChainBuilder.html",
    "title": "Interface IErrorPolicyChainBuilder | Silverback",
    "keywords": "Interface IErrorPolicyChainBuilder Builds the IErrorPolicy . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IErrorPolicyChainBuilder Methods | Improve this doc View source ThenMove(IProducerEndpoint, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration IErrorPolicyChainBuilder ThenMove(IProducerEndpoint endpoint, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IProducerEndpoint endpoint The endpoint to move the message to. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder ThenRetry(Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Int32, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder ThenRetry(int retriesCount, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Int32, TimeSpan, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder ThenRetry(int retriesCount, TimeSpan initialDelay, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.TimeSpan initialDelay The optional delay to be applied to the first retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Nullable<Int32>, Nullable<TimeSpan>, Nullable<TimeSpan>, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder ThenRetry(int? retriesCount = default(int? ), TimeSpan? initialDelay = default(TimeSpan? ), TimeSpan? delayIncrement = default(TimeSpan? ), Action<RetryErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Nullable < System.Int32 > retriesCount The maximum number of retries to be performed. System.Nullable < System.TimeSpan > initialDelay The optional delay to be applied to the first retry. System.Nullable < System.TimeSpan > delayIncrement The optional increment to the delay to be applied at each retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenSkip(Action<SkipMessageErrorPolicy>) Adds a SkipMessageErrorPolicy that skips the messages that fail to be processed. Declaration IErrorPolicyChainBuilder ThenSkip(Action<SkipMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < SkipMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenStop(Action<StopConsumerErrorPolicy>) Adds a StopConsumerErrorPolicy that stops the consumer when an exception is thrown during the message processing. Declaration IErrorPolicyChainBuilder ThenStop(Action<StopConsumerErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < StopConsumerErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. Extension Methods Silverback.Messaging.Configuration.ErrorPolicyChainBuilderMoveToMqttTopicExtensions.ThenMoveToMqttTopic(Silverback.Messaging.Configuration.IErrorPolicyChainBuilder, System.Action<Silverback.Messaging.Configuration.Mqtt.IMqttProducerEndpointBuilder>, System.Action<Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy>) Silverback.Messaging.Configuration.ErrorPolicyChainBuilderMoveToKafkaTopicExtensions.ThenMoveToKafkaTopic(Silverback.Messaging.Configuration.IErrorPolicyChainBuilder, System.Action<Silverback.Messaging.Configuration.Kafka.IKafkaProducerEndpointBuilder>, System.Action<Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy>)"
  },
  "api/Silverback.Messaging.Configuration.IExactlyOnceStrategyBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IExactlyOnceStrategyBuilder.html",
    "title": "Interface IExactlyOnceStrategyBuilder | Silverback",
    "keywords": "Interface IExactlyOnceStrategyBuilder Builds the IExactlyOnceStrategy . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IExactlyOnceStrategyBuilder Methods | Improve this doc View source LogMessages() Creates a LogExactlyOnceStrategy that uses an IInboundLog to keep track of each processed message and guarantee that each one is processed only once. Declaration IExactlyOnceStrategyBuilder LogMessages() Returns Type Description IExactlyOnceStrategyBuilder The IExactlyOnceStrategyBuilder so that additional calls can be chained. | Improve this doc View source StoreOffsets() Creates an OffsetStoreExactlyOnceStrategy that uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration IExactlyOnceStrategyBuilder StoreOffsets() Returns Type Description IExactlyOnceStrategyBuilder The IExactlyOnceStrategyBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.IJsonMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IJsonMessageSerializerBuilder.html",
    "title": "Interface IJsonMessageSerializerBuilder | Silverback",
    "keywords": "Interface IJsonMessageSerializerBuilder Builds the JsonMessageSerializer or JsonMessageSerializer<TMessage> . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IJsonMessageSerializerBuilder Methods | Improve this doc View source UseFixedType(Type) Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration IJsonMessageSerializerBuilder UseFixedType(Type messageType) Parameters Type Name Description System.Type messageType The type of the message to serialize or deserialize. Returns Type Description IJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseFixedType<TMessage>() Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration IJsonMessageSerializerBuilder UseFixedType<TMessage>() Returns Type Description IJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the message to serialize or deserialize. | Improve this doc View source WithOptions(JsonSerializerOptions) Specifies the System.Text.Json.JsonSerializerOptions . Declaration IJsonMessageSerializerBuilder WithOptions(JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.JsonSerializerOptions options The System.Text.Json.JsonSerializerOptions . Returns Type Description IJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.INewtonsoftJsonMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.INewtonsoftJsonMessageSerializerBuilder.html",
    "title": "Interface INewtonsoftJsonMessageSerializerBuilder | Silverback",
    "keywords": "Interface INewtonsoftJsonMessageSerializerBuilder Builds the NewtonsoftJsonMessageSerializer or NewtonsoftJsonMessageSerializer<TMessage> . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Newtonsoft.dll Syntax public interface INewtonsoftJsonMessageSerializerBuilder Methods | Improve this doc View source Configure(Action<JsonSerializerSettings>) Configures the Newtonsoft.Json.JsonSerializerSettings . Declaration INewtonsoftJsonMessageSerializerBuilder Configure(Action<JsonSerializerSettings> configureAction) Parameters Type Name Description System.Action < Newtonsoft.Json.JsonSerializerSettings > configureAction An System.Action<T> that takes the Newtonsoft.Json.JsonSerializerSettings and configures it. Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseFixedType(Type) Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration INewtonsoftJsonMessageSerializerBuilder UseFixedType(Type messageType) Parameters Type Name Description System.Type messageType The type of the message to serialize or deserialize. Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseFixedType<TMessage>() Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration INewtonsoftJsonMessageSerializerBuilder UseFixedType<TMessage>() Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the message to serialize or deserialize. | Improve this doc View source WithEncoding(MessageEncoding) Specifies the encoding to be used. Declaration INewtonsoftJsonMessageSerializerBuilder WithEncoding(MessageEncoding encoding) Parameters Type Name Description MessageEncoding encoding The MessageEncoding . Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.IProducerEndpointBuilder-1.html": {
    "href": "api/Silverback.Messaging.Configuration.IProducerEndpointBuilder-1.html",
    "title": "Interface IProducerEndpointBuilder<TBuilder> | Silverback",
    "keywords": "Interface IProducerEndpointBuilder<TBuilder> Builds the ProducerEndpoint . Inherited Members IEndpointBuilder<TBuilder>.WithName(String) IEndpointBuilder<TBuilder>.UseSerializer(IMessageSerializer) IEndpointBuilder<TBuilder>.WithEncryption(EncryptionSettings) IEndpointBuilder<TBuilder>.ValidateMessage(Boolean) IEndpointBuilder<TBuilder>.DisableMessageValidation() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IProducerEndpointBuilder<out TBuilder> : IEndpointBuilder<TBuilder> where TBuilder : IProducerEndpointBuilder<TBuilder> Type Parameters Name Description TBuilder The actual builder type. Methods | Improve this doc View source AddHeader(String, Object) Adds the specified header to all produced messages. Declaration TBuilder AddHeader(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source AddHeader<TMessage>(String, Func<IOutboundEnvelope<TMessage>, Object>) Adds the specified header to all produced messages of the specified type, using a value provider function to determine the header value for each message. Declaration TBuilder AddHeader<TMessage>(string name, Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.String name The header name. System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The value provider function. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched with this header. | Improve this doc View source AddHeader<TMessage>(String, Object) Adds the specified header to all produced messages of the specified type. Declaration TBuilder AddHeader<TMessage>(string name, object value) where TMessage : class Parameters Type Name Description System.String name The header name. System.Object value The header value. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched with this header. | Improve this doc View source EnableChunking(Int32, Boolean) Enables chunking, splitting the larger messages into smaller chunks. Declaration TBuilder EnableChunking(int chunkSize, bool alwaysAddHeaders = true) Parameters Type Name Description System.Int32 chunkSize The maximum chunk size in bytes. System.Boolean alwaysAddHeaders A value indicating whether the x-chunk-index and related headers have to be added to the produced message in any case, even if its size doesn't exceed the single chunk size. The default is true . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source Encrypt(EncryptionSettings) Specifies the EncryptionSettings to be used to encrypt the messages. Declaration TBuilder Encrypt(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings The EncryptionSettings . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ProduceDirectly() Specifies that the Silverback.Messaging.Outbound.DefaultProduceStrategy has to be used, producing directly to the message broker. Declaration TBuilder ProduceDirectly() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ProduceToOutbox() Specifies that the OutboxProduceStrategy has to be used, storing the messages into the transactional outbox table. The operation is therefore included in the database transaction applying the message side effects to the local database. The IOutboxWorker takes care of asynchronously sending the messages to the message broker. Declaration TBuilder ProduceToOutbox() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source SerializeUsing(IMessageSerializer) Specifies the IMessageSerializer to be used to serialize the messages. Declaration TBuilder SerializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source UseStrategy(IProduceStrategy) Specifies the strategy to be used to produce the messages. Declaration TBuilder UseStrategy(IProduceStrategy strategy) Parameters Type Name Description IProduceStrategy strategy The IProduceStrategy . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) Uses the specified value provider function to set the message id header for each produced message. Declaration TBuilder WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The value provider function. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched with this header. Extension Methods ProducerEndpointBuilderEncryptUsingExtensions.EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], Byte[]) ProducerEndpointBuilderEncryptUsingExtensions.EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], String, Byte[]) ProducerEndpointBuilderProduceBinaryFilesExtensions.ProduceBinaryFiles<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsJsonExtensions.SerializeAsJson<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.IValidatableEndpointSettings.html": {
    "href": "api/Silverback.Messaging.Configuration.IValidatableEndpointSettings.html",
    "title": "Interface IValidatableEndpointSettings | Silverback",
    "keywords": "Interface IValidatableEndpointSettings Declares the Validate method that is used to check the provided settings. Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IValidatableEndpointSettings Methods | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration void Validate()"
  },
  "api/Silverback.Messaging.Configuration.JsonMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.JsonMessageSerializerBuilder.html",
    "title": "Class JsonMessageSerializerBuilder | Silverback",
    "keywords": "Class JsonMessageSerializerBuilder Inheritance System.Object JsonMessageSerializerBuilder Implements IJsonMessageSerializerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class JsonMessageSerializerBuilder : IJsonMessageSerializerBuilder Methods | Improve this doc View source Build() Builds the IMessageSerializer instance. Declaration public IMessageSerializer Build() Returns Type Description IMessageSerializer The IMessageSerializer . | Improve this doc View source UseFixedType(Type) Declaration public IJsonMessageSerializerBuilder UseFixedType(Type messageType) Parameters Type Name Description System.Type messageType Returns Type Description IJsonMessageSerializerBuilder | Improve this doc View source UseFixedType<TMessage>() Declaration public IJsonMessageSerializerBuilder UseFixedType<TMessage>() Returns Type Description IJsonMessageSerializerBuilder Type Parameters Name Description TMessage | Improve this doc View source WithOptions(JsonSerializerOptions) Declaration public IJsonMessageSerializerBuilder WithOptions(JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.JsonSerializerOptions options Returns Type Description IJsonMessageSerializerBuilder Implements IJsonMessageSerializerBuilder"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.html",
    "title": "Namespace Silverback.Messaging.Configuration.Mqtt | Silverback",
    "keywords": "Namespace Silverback.Messaging.Configuration.Mqtt Interfaces IMockedMqttOptions Stores the mocked MQTT configuration. IMockedMqttOptionsBuilder Exposes the methods to configure the mocked MQTT."
  },
  "api/Silverback.Messaging.Configuration.Mqtt.IMockedMqttOptions.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.IMockedMqttOptions.html",
    "title": "Interface IMockedMqttOptions | Silverback",
    "keywords": "Interface IMockedMqttOptions Stores the mocked MQTT configuration. Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IMockedMqttOptions Properties | Improve this doc View source ConnectionDelay Gets or sets the delay to be applied before establishing a connection. Declaration TimeSpan ConnectionDelay { get; set; } Property Value Type Description System.TimeSpan"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.IMockedMqttOptionsBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.IMockedMqttOptionsBuilder.html",
    "title": "Interface IMockedMqttOptionsBuilder | Silverback",
    "keywords": "Interface IMockedMqttOptionsBuilder Exposes the methods to configure the mocked MQTT. Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IMockedMqttOptionsBuilder Methods | Improve this doc View source DelayConnection(TimeSpan) Specifies the delay to be applied before establishing a connection. Declaration IMockedMqttOptionsBuilder DelayConnection(TimeSpan delay) Parameters Type Name Description System.TimeSpan delay The delay to be applied before establishing a connection. Returns Type Description IMockedMqttOptionsBuilder The IMockedMqttOptionsBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.NewtonsoftJsonMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.NewtonsoftJsonMessageSerializerBuilder.html",
    "title": "Class NewtonsoftJsonMessageSerializerBuilder | Silverback",
    "keywords": "Class NewtonsoftJsonMessageSerializerBuilder Inheritance System.Object NewtonsoftJsonMessageSerializerBuilder Implements INewtonsoftJsonMessageSerializerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Newtonsoft.dll Syntax public class NewtonsoftJsonMessageSerializerBuilder : INewtonsoftJsonMessageSerializerBuilder Methods | Improve this doc View source Build() Builds the IMessageSerializer instance. Declaration public IMessageSerializer Build() Returns Type Description IMessageSerializer The IMessageSerializer . | Improve this doc View source Configure(Action<JsonSerializerSettings>) Declaration public INewtonsoftJsonMessageSerializerBuilder Configure(Action<JsonSerializerSettings> configureAction) Parameters Type Name Description System.Action < Newtonsoft.Json.JsonSerializerSettings > configureAction Returns Type Description INewtonsoftJsonMessageSerializerBuilder | Improve this doc View source UseFixedType(Type) Declaration public INewtonsoftJsonMessageSerializerBuilder UseFixedType(Type messageType) Parameters Type Name Description System.Type messageType Returns Type Description INewtonsoftJsonMessageSerializerBuilder | Improve this doc View source UseFixedType<TMessage>() Declaration public INewtonsoftJsonMessageSerializerBuilder UseFixedType<TMessage>() Returns Type Description INewtonsoftJsonMessageSerializerBuilder Type Parameters Name Description TMessage | Improve this doc View source WithEncoding(MessageEncoding) Declaration public INewtonsoftJsonMessageSerializerBuilder WithEncoding(MessageEncoding encoding) Parameters Type Name Description MessageEncoding encoding Returns Type Description INewtonsoftJsonMessageSerializerBuilder Implements INewtonsoftJsonMessageSerializerBuilder"
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilder-2.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilder-2.html",
    "title": "Class ProducerEndpointBuilder<TEndpoint, TBuilder> | Silverback",
    "keywords": "Class ProducerEndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from ConsumerEndpoint . Inheritance System.Object EndpointBuilder <TEndpoint, TBuilder> ProducerEndpointBuilder<TEndpoint, TBuilder> Implements IProducerEndpointBuilder <TBuilder> IEndpointBuilder <TBuilder> Inherited Members EndpointBuilder<TEndpoint, TBuilder>.EndpointsConfigurationBuilder EndpointBuilder<TEndpoint, TBuilder>.This EndpointBuilder<TEndpoint, TBuilder>.WithName(String) EndpointBuilder<TEndpoint, TBuilder>.UseSerializer(IMessageSerializer) EndpointBuilder<TEndpoint, TBuilder>.WithEncryption(EncryptionSettings) EndpointBuilder<TEndpoint, TBuilder>.ValidateMessage(Boolean) EndpointBuilder<TEndpoint, TBuilder>.DisableMessageValidation() EndpointBuilder<TEndpoint, TBuilder>.Build() EndpointBuilder<TEndpoint, TBuilder>.CreateEndpoint() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public abstract class ProducerEndpointBuilder<TEndpoint, TBuilder> : EndpointBuilder<TEndpoint, TBuilder>, IProducerEndpointBuilder<TBuilder>, IEndpointBuilder<TBuilder> where TEndpoint : ProducerEndpoint where TBuilder : IProducerEndpointBuilder<TBuilder> Type Parameters Name Description TEndpoint The type of the endpoint being built. TBuilder The actual builder type. Constructors | Improve this doc View source ProducerEndpointBuilder(IEndpointsConfigurationBuilder) Initializes a new instance of the ProducerEndpointBuilder<TEndpoint, TBuilder> class. Declaration protected ProducerEndpointBuilder(IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Methods | Improve this doc View source AddHeader(String, Object) Declaration public TBuilder AddHeader(string name, object value) Parameters Type Name Description System.String name System.Object value Returns Type Description TBuilder | Improve this doc View source AddHeader<TMessage>(String, Func<IOutboundEnvelope<TMessage>, Object>) Declaration public TBuilder AddHeader<TMessage>(string name, Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.String name System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider Returns Type Description TBuilder Type Parameters Name Description TMessage | Improve this doc View source AddHeader<TMessage>(String, Object) Declaration public TBuilder AddHeader<TMessage>(string name, object value) where TMessage : class Parameters Type Name Description System.String name System.Object value Returns Type Description TBuilder Type Parameters Name Description TMessage | Improve this doc View source Build() Declaration public override TEndpoint Build() Returns Type Description TEndpoint Overrides Silverback.Messaging.Configuration.EndpointBuilder<TEndpoint, TBuilder>.Build() | Improve this doc View source EnableChunking(Int32, Boolean) Declaration public TBuilder EnableChunking(int chunkSize, bool alwaysAddHeaders = true) Parameters Type Name Description System.Int32 chunkSize System.Boolean alwaysAddHeaders Returns Type Description TBuilder | Improve this doc View source Encrypt(EncryptionSettings) Declaration public TBuilder Encrypt(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings Returns Type Description TBuilder | Improve this doc View source ProduceDirectly() Declaration public TBuilder ProduceDirectly() Returns Type Description TBuilder | Improve this doc View source ProduceToOutbox() Declaration public TBuilder ProduceToOutbox() Returns Type Description TBuilder | Improve this doc View source SerializeUsing(IMessageSerializer) Declaration public TBuilder SerializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer Returns Type Description TBuilder | Improve this doc View source UseStrategy(IProduceStrategy) Declaration public TBuilder UseStrategy(IProduceStrategy strategy) Parameters Type Name Description IProduceStrategy strategy Returns Type Description TBuilder | Improve this doc View source WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) Declaration public TBuilder WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider Returns Type Description TBuilder Type Parameters Name Description TMessage Implements IProducerEndpointBuilder<TBuilder> IEndpointBuilder<TBuilder> Extension Methods ProducerEndpointBuilderEncryptUsingExtensions.EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], Byte[]) ProducerEndpointBuilderEncryptUsingExtensions.EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], String, Byte[]) ProducerEndpointBuilderProduceBinaryFilesExtensions.ProduceBinaryFiles<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsJsonExtensions.SerializeAsJson<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderEncryptUsingExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderEncryptUsingExtensions.html",
    "title": "Class ProducerEndpointBuilderEncryptUsingExtensions | Silverback",
    "keywords": "Class ProducerEndpointBuilderEncryptUsingExtensions Adds the EncryptUsingAes method to the ProducerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ProducerEndpointBuilderEncryptUsingExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ProducerEndpointBuilderEncryptUsingExtensions Methods | Improve this doc View source EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], Byte[]) Specifies that the AES algorithm has to be used to encrypt the messages. Declaration public static TBuilder EncryptUsingAes<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, byte[] key, byte[] initializationVector = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Byte [] key The secret key for the symmetric algorithm. System.Byte [] initializationVector The optional initialization vector (IV) for the symmetric algorithm. If null a different IV will be generated for each message and prepended to the actual message payload. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type. | Improve this doc View source EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], String, Byte[]) Specifies that the AES algorithm has to be used to encrypt the messages. Declaration public static TBuilder EncryptUsingAes<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, byte[] key, string keyIdentifier, byte[] initializationVector = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Byte [] key The secret key for the symmetric algorithm. System.String keyIdentifier The key identifier to be sent in the header (see EncryptionKeyId ). When rotating keys, it will be used on the consumer side to determine the correct key to be used to decrypt the message. System.Byte [] initializationVector The optional initialization vector (IV) for the symmetric algorithm. If null a different IV will be generated for each message and prepended to the actual message payload. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderProduceBinaryFilesExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderProduceBinaryFilesExtensions.html",
    "title": "Class ProducerEndpointBuilderProduceBinaryFilesExtensions | Silverback",
    "keywords": "Class ProducerEndpointBuilderProduceBinaryFilesExtensions Adds the ProduceBinaryFiles method to the ProducerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ProducerEndpointBuilderProduceBinaryFilesExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ProducerEndpointBuilderProduceBinaryFilesExtensions Methods | Improve this doc View source ProduceBinaryFiles<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) Sets the serializer to an instance of BinaryFileMessageSerializer (or BinaryFileMessageSerializer<TModel> ) to produce the BinaryFileMessage . By default this serializer forwards the message type in an header to let the consumer know which type has to be deserialized. This approach allows to mix messages of different types in the same endpoint and it's ideal when both the producer and the consumer are using Silverback but might not be optimal for interoperability. This behavior can be changed using the builder action and specifying the model to be used. Declaration public static TBuilder ProduceBinaryFiles<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, Action<IBinaryFileMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IBinaryFileMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IBinaryFileMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type. Remarks This replaces the IMessageSerializer and the endpoint will only be able to deal with binary files."
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsJsonExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsJsonExtensions.html",
    "title": "Class ProducerEndpointBuilderSerializeAsJsonExtensions | Silverback",
    "keywords": "Class ProducerEndpointBuilderSerializeAsJsonExtensions Adds the SerializeAsJson method to the ProducerEndpoint . Inheritance System.Object ProducerEndpointBuilderSerializeAsJsonExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ProducerEndpointBuilderSerializeAsJsonExtensions Methods | Improve this doc View source SerializeAsJson<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>) Sets the serializer to an instance of JsonMessageSerializer (or JsonMessageSerializer<TMessage> ) to serialize the produced messages as JSON. By default this serializer forwards the message type in an header to let the consumer know which type has to be deserialized. This approach allows to mix messages of different types in the same endpoint and it's ideal when both the producer and the consumer are using Silverback but might not be optimal for interoperability. This behavior can be changed using the builder action and specifying a fixed message type. Declaration public static TBuilder SerializeAsJson<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, Action<IJsonMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IJsonMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.html",
    "title": "Class ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions | Silverback",
    "keywords": "Class ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions Adds the SerializeAsJsonUsingNewtonsoft method to the ProducerEndpoint . Inheritance System.Object ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Newtonsoft.dll Syntax public static class ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions Methods | Improve this doc View source SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) Sets the serializer to an instance of NewtonsoftJsonMessageSerializer (or NewtonsoftJsonMessageSerializer<TMessage> ) to serialize the produced messages as JSON. By default this serializer forwards the message type in an header to let the consumer know which type has to be deserialized. This approach allows to mix messages of different types in the same endpoint and it's ideal when both the producer and the consumer are using Silverback but might not be optimal for interoperability. This behavior can be changed using the builder action and specifying a fixed message type. Declaration public static TBuilder SerializeAsJsonUsingNewtonsoft<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, Action<INewtonsoftJsonMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < INewtonsoftJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the INewtonsoftJsonMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions.html",
    "title": "Class SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions | Silverback",
    "keywords": "Class SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions Adds the PublishOutboundMessagesToInternalBus method to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions Methods | Improve this doc View source PublishOutboundMessagesToInternalBus(ISilverbackBuilder) Enables the legacy behavior where the messages to be routed through an outbound connector are also being published to the internal bus, to be locally subscribed. This is now disabled by default. Declaration public static ISilverbackBuilder PublishOutboundMessagesToInternalBus(this ISilverbackBuilder silverbackBuilder) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder . Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.SilverbackBuilderWithCustomHeaderNameExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.SilverbackBuilderWithCustomHeaderNameExtensions.html",
    "title": "Class SilverbackBuilderWithCustomHeaderNameExtensions | Silverback",
    "keywords": "Class SilverbackBuilderWithCustomHeaderNameExtensions Adds the WithCustomHeaderName method to the Silverback.Messaging.Configuration.ISilverbackBuilder . Inheritance System.Object SilverbackBuilderWithCustomHeaderNameExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderWithCustomHeaderNameExtensions Methods | Improve this doc View source WithCustomHeaderName(ISilverbackBuilder, String, String) Adds a new header mapping. Declaration public static ISilverbackBuilder WithCustomHeaderName(this ISilverbackBuilder silverbackBuilder, string defaultHeaderName, string customHeaderName) Parameters Type Name Description Silverback.Messaging.Configuration.ISilverbackBuilder silverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder . System.String defaultHeaderName The default header name. System.String customHeaderName The custom header name to be used instead of the default. Returns Type Description Silverback.Messaging.Configuration.ISilverbackBuilder The Silverback.Messaging.Configuration.ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.ConsumerEndpoint.html": {
    "href": "api/Silverback.Messaging.ConsumerEndpoint.html",
    "title": "Class ConsumerEndpoint | Silverback",
    "keywords": "Class ConsumerEndpoint Inheritance System.Object Endpoint ConsumerEndpoint Implements IConsumerEndpoint IEndpoint Inherited Members Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode Endpoint.BaseEquals(Endpoint) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public abstract class ConsumerEndpoint : Endpoint, IConsumerEndpoint, IEndpoint Constructors | Improve this doc View source ConsumerEndpoint(String) Initializes a new instance of the ConsumerEndpoint class. Declaration protected ConsumerEndpoint(string name) Parameters Type Name Description System.String name The endpoint name. Properties | Improve this doc View source Batch Gets or sets the batch settings. Can be used to enable and setup batch processing. Declaration public BatchSettings Batch { get; set; } Property Value Type Description BatchSettings | Improve this doc View source ErrorPolicy Gets or sets the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration public IErrorPolicy ErrorPolicy { get; set; } Property Value Type Description IErrorPolicy | Improve this doc View source ExactlyOnceStrategy Gets or sets the strategy to be used to guarantee that each message is consumed only once. Declaration public IExactlyOnceStrategy ExactlyOnceStrategy { get; set; } Property Value Type Description IExactlyOnceStrategy | Improve this doc View source NullMessageHandlingStrategy Gets or sets a value indicating how to handle the null messages. The default value is Tombstone . Declaration public NullMessageHandlingStrategy NullMessageHandlingStrategy { get; set; } Property Value Type Description NullMessageHandlingStrategy | Improve this doc View source Sequence Gets or sets the sequence settings. A sequence is a set of related messages, like the chunks belonging to the same message or the messages in a dataset. Declaration public SequenceSettings Sequence { get; set; } Property Value Type Description SequenceSettings | Improve this doc View source ThrowIfUnhandled Gets or sets a value indicating whether an exception must be thrown if no subscriber is handling the received message. The default is true . Declaration public bool ThrowIfUnhandled { get; set; } Property Value Type Description System.Boolean Methods | Improve this doc View source GetUniqueConsumerGroupName() Declaration public abstract string GetUniqueConsumerGroupName() Returns Type Description System.String | Improve this doc View source Validate() Declaration public override void Validate() Overrides Endpoint.Validate() Implements IConsumerEndpoint IEndpoint"
  },
  "api/Silverback.Messaging.Diagnostics.ActivityConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Diagnostics.ActivityConsumerBehavior.html",
    "title": "Class ActivityConsumerBehavior | Silverback",
    "keywords": "Class ActivityConsumerBehavior Starts an System.Diagnostics.Activity with the tracing information from the message headers. Inheritance System.Object ActivityConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public class ActivityConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ActivityConsumerBehavior(IActivityEnricherFactory) Initializes a new instance of the ActivityConsumerBehavior class. Declaration public ActivityConsumerBehavior(IActivityEnricherFactory activityEnricherFactory) Parameters Type Name Description IActivityEnricherFactory activityEnricherFactory The IActivityEnricherFactory to resolve the ActivityEnricher. Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Diagnostics.ActivityProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Diagnostics.ActivityProducerBehavior.html",
    "title": "Class ActivityProducerBehavior | Silverback",
    "keywords": "Class ActivityProducerBehavior Starts an System.Diagnostics.Activity and adds the tracing information to the message headers. Inheritance System.Object ActivityProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public class ActivityProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ActivityProducerBehavior(IActivityEnricherFactory) Initializes a new instance of the ActivityProducerBehavior class. Declaration public ActivityProducerBehavior(IActivityEnricherFactory activityEnricherFactory) Parameters Type Name Description IActivityEnricherFactory activityEnricherFactory The Factory to create the activity enrichers. Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Diagnostics.ActivityTagNames.html": {
    "href": "api/Silverback.Messaging.Diagnostics.ActivityTagNames.html",
    "title": "Class ActivityTagNames | Silverback",
    "keywords": "Class ActivityTagNames Contains the name of tags added to the System.Diagnostics.Activity . Inheritance System.Object ActivityTagNames Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public static class ActivityTagNames Fields | Improve this doc View source MessageDestination The name of the tag that contains the destination of the message (i.e. the name of the endpoint). Declaration public const string MessageDestination = \"messaging.destination\" Field Value Type Description System.String | Improve this doc View source MessageId The name of the tag whose value identifies the message. Declaration public const string MessageId = \"messaging.message_id\" Field Value Type Description System.String Remarks For Kafka the tag value will be in the form topic[partition]@offset. | Improve this doc View source SequenceActivity The name of the tag that references the activity created for the sequence where this message has been added. Declaration public const string SequenceActivity = \"messaging.sequence.activity\" Field Value Type Description System.String"
  },
  "api/Silverback.Messaging.Diagnostics.ConsumerPipelineFatalException.html": {
    "href": "api/Silverback.Messaging.Diagnostics.ConsumerPipelineFatalException.html",
    "title": "Class ConsumerPipelineFatalException | Silverback",
    "keywords": "Class ConsumerPipelineFatalException The exception that is rethrown by the FatalExceptionLoggerConsumerBehavior when a fatal exception occurs down the consumer pipeline. Inheritance System.Object System.Exception Silverback.SilverbackException ConsumerPipelineFatalException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax [Serializable] public class ConsumerPipelineFatalException : SilverbackException, ISerializable Constructors | Improve this doc View source ConsumerPipelineFatalException() Initializes a new instance of the ConsumerPipelineFatalException class. Declaration public ConsumerPipelineFatalException() | Improve this doc View source ConsumerPipelineFatalException(SerializationInfo, StreamingContext) Initializes a new instance of the ConsumerPipelineFatalException class with the serialized data. Declaration protected ConsumerPipelineFatalException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source ConsumerPipelineFatalException(String) Initializes a new instance of the ConsumerPipelineFatalException class with the specified message. Declaration public ConsumerPipelineFatalException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source ConsumerPipelineFatalException(String, Exception) Initializes a new instance of the ConsumerPipelineFatalException class with the specified message and inner exception. Declaration public ConsumerPipelineFatalException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Diagnostics.FatalExceptionLoggerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Diagnostics.FatalExceptionLoggerConsumerBehavior.html",
    "title": "Class FatalExceptionLoggerConsumerBehavior | Silverback",
    "keywords": "Class FatalExceptionLoggerConsumerBehavior Logs the unhandled exceptions thrown while processing the message. These exceptions are fatal since they will usually cause the consumer to stop. Inheritance System.Object FatalExceptionLoggerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public class FatalExceptionLoggerConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source FatalExceptionLoggerConsumerBehavior(IInboundLogger<FatalExceptionLoggerConsumerBehavior>) Initializes a new instance of the FatalExceptionLoggerConsumerBehavior class. Declaration public FatalExceptionLoggerConsumerBehavior(IInboundLogger<FatalExceptionLoggerConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < FatalExceptionLoggerConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Diagnostics.html": {
    "href": "api/Silverback.Messaging.Diagnostics.html",
    "title": "Namespace Silverback.Messaging.Diagnostics | Silverback",
    "keywords": "Namespace Silverback.Messaging.Diagnostics Classes ActivityConsumerBehavior Starts an System.Diagnostics.Activity with the tracing information from the message headers. ActivityProducerBehavior Starts an System.Diagnostics.Activity and adds the tracing information to the message headers. ActivityTagNames Contains the name of tags added to the System.Diagnostics.Activity . ConsumerPipelineFatalException The exception that is rethrown by the FatalExceptionLoggerConsumerBehavior when a fatal exception occurs down the consumer pipeline. FatalExceptionLoggerConsumerBehavior Logs the unhandled exceptions thrown while processing the message. These exceptions are fatal since they will usually cause the consumer to stop. Interfaces IActivityEnricherFactory Provides the IBrokerActivityEnricher according to the specified endpoint. IBrokerActivityEnricher Provides enrichment for activities produced by the ActivityProducerBehavior and ActivityConsumerBehavior . IBrokerActivityEnricher<TEndpoint> Provides enrichment for activities produced by the ActivityProducerBehavior and ActivityConsumerBehavior for the specified endpoint type."
  },
  "api/Silverback.Messaging.Diagnostics.IActivityEnricherFactory.html": {
    "href": "api/Silverback.Messaging.Diagnostics.IActivityEnricherFactory.html",
    "title": "Interface IActivityEnricherFactory | Silverback",
    "keywords": "Interface IActivityEnricherFactory Provides the IBrokerActivityEnricher according to the specified endpoint. Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IActivityEnricherFactory Methods | Improve this doc View source GetActivityEnricher(IEndpoint) Returns the IBrokerActivityEnricher for the specified endpoint. Declaration IBrokerActivityEnricher GetActivityEnricher(IEndpoint endpoint) Parameters Type Name Description IEndpoint endpoint The endpoint. Returns Type Description IBrokerActivityEnricher The IBrokerActivityEnricher that matches the specified endpoint type."
  },
  "api/Silverback.Messaging.Diagnostics.IBrokerActivityEnricher.html": {
    "href": "api/Silverback.Messaging.Diagnostics.IBrokerActivityEnricher.html",
    "title": "Interface IBrokerActivityEnricher | Silverback",
    "keywords": "Interface IBrokerActivityEnricher Provides enrichment for activities produced by the ActivityProducerBehavior and ActivityConsumerBehavior . Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IBrokerActivityEnricher Methods | Improve this doc View source EnrichInboundActivity(Activity, ConsumerPipelineContext) Enriches Activities created by the ActivityConsumerBehavior . Declaration void EnrichInboundActivity(Activity activity, ConsumerPipelineContext consumerContext) Parameters Type Name Description System.Diagnostics.Activity activity The System.Diagnostics.Activity to be enriched. ConsumerPipelineContext consumerContext The ConsumerPipelineContext . | Improve this doc View source EnrichOutboundActivity(Activity, ProducerPipelineContext) Enriches Activities created by the ActivityProducerBehavior . Declaration void EnrichOutboundActivity(Activity activity, ProducerPipelineContext producerContext) Parameters Type Name Description System.Diagnostics.Activity activity The System.Diagnostics.Activity to be enriched. ProducerPipelineContext producerContext The ProducerPipelineContext ."
  },
  "api/Silverback.Messaging.Diagnostics.IBrokerActivityEnricher-1.html": {
    "href": "api/Silverback.Messaging.Diagnostics.IBrokerActivityEnricher-1.html",
    "title": "Interface IBrokerActivityEnricher<TEndpoint> | Silverback",
    "keywords": "Interface IBrokerActivityEnricher<TEndpoint> Provides enrichment for activities produced by the ActivityProducerBehavior and ActivityConsumerBehavior for the specified endpoint type. Inherited Members IBrokerActivityEnricher.EnrichOutboundActivity(Activity, ProducerPipelineContext) IBrokerActivityEnricher.EnrichInboundActivity(Activity, ConsumerPipelineContext) Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IBrokerActivityEnricher<TEndpoint> : IBrokerActivityEnricher where TEndpoint : Endpoint Type Parameters Name Description TEndpoint The type of the endpoint that this enricher can be used for."
  },
  "api/Silverback.Messaging.Encryption.DecryptorConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Encryption.DecryptorConsumerBehavior.html",
    "title": "Class DecryptorConsumerBehavior | Silverback",
    "keywords": "Class DecryptorConsumerBehavior Decrypts the message according to the EncryptionSettings . Inheritance System.Object DecryptorConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class DecryptorConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source DecryptorConsumerBehavior(ISilverbackCryptoStreamFactory) Initializes a new instance of the DecryptorConsumerBehavior class. Declaration public DecryptorConsumerBehavior(ISilverbackCryptoStreamFactory streamFactory) Parameters Type Name Description ISilverbackCryptoStreamFactory streamFactory The ISilverbackCryptoStreamFactory . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Encryption.EncryptionSettings.html": {
    "href": "api/Silverback.Messaging.Encryption.EncryptionSettings.html",
    "title": "Class EncryptionSettings | Silverback",
    "keywords": "Class EncryptionSettings The base class for SymmetricEncryptionSettingsBase and other future encryption types. Inheritance System.Object EncryptionSettings SymmetricEncryptionSettingsBase Implements IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public abstract class EncryptionSettings : IValidatableEndpointSettings Methods | Improve this doc View source Validate() Declaration public abstract void Validate() Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Encryption.EncryptorProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Encryption.EncryptorProducerBehavior.html",
    "title": "Class EncryptorProducerBehavior | Silverback",
    "keywords": "Class EncryptorProducerBehavior Encrypts the message according to the EncryptionSettings . Inheritance System.Object EncryptorProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class EncryptorProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source EncryptorProducerBehavior(ISilverbackCryptoStreamFactory) Initializes a new instance of the EncryptorProducerBehavior class. Declaration public EncryptorProducerBehavior(ISilverbackCryptoStreamFactory streamFactory) Parameters Type Name Description ISilverbackCryptoStreamFactory streamFactory The ISilverbackCryptoStreamFactory . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Encryption.html": {
    "href": "api/Silverback.Messaging.Encryption.html",
    "title": "Namespace Silverback.Messaging.Encryption | Silverback",
    "keywords": "Namespace Silverback.Messaging.Encryption Classes DecryptorConsumerBehavior Decrypts the message according to the EncryptionSettings . EncryptionSettings The base class for SymmetricEncryptionSettingsBase and other future encryption types. EncryptorProducerBehavior Encrypts the message according to the EncryptionSettings . SilverbackCryptoStream The base class for the System.IO.Stream implementations used to encrypt and decrypt the integration messages. SilverbackCryptoStreamFactory SymmetricDecryptionSettings The decryption settings used to decrypt the messages. SymmetricDecryptStream The implementation of SilverbackCryptoStream based on a System.Security.Cryptography.SymmetricAlgorithm used to decrypt the messages. SymmetricEncryptionSettings The encryption settings used to encrypt the messages. SymmetricEncryptionSettingsBase The base class for symmetric encryption settings used to encrypt or decrypt the messages being sent through the message broker. SymmetricEncryptStream The implementation of SilverbackCryptoStream based on a System.Security.Cryptography.SymmetricAlgorithm used to encrypt the messages. Interfaces ISilverbackCryptoStreamFactory The factory used to create the SilverbackCryptoStream implementation according to the EncryptionSettings ."
  },
  "api/Silverback.Messaging.Encryption.ISilverbackCryptoStreamFactory.html": {
    "href": "api/Silverback.Messaging.Encryption.ISilverbackCryptoStreamFactory.html",
    "title": "Interface ISilverbackCryptoStreamFactory | Silverback",
    "keywords": "Interface ISilverbackCryptoStreamFactory The factory used to create the SilverbackCryptoStream implementation according to the EncryptionSettings . Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public interface ISilverbackCryptoStreamFactory Methods | Improve this doc View source GetDecryptStream(Stream, EncryptionSettings, String) Gets a SilverbackCryptoStream compatible with the specified settings. Declaration SilverbackCryptoStream GetDecryptStream(Stream stream, EncryptionSettings settings, string keyIdentifier = null) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the encrypted message from. EncryptionSettings settings The EncryptionSettings specifying the cryptographic algorithm settings. System.String keyIdentifier The encryption key identifier that was submitted as header. Returns Type Description SilverbackCryptoStream A SilverbackCryptoStream compatible with the specified settings. | Improve this doc View source GetEncryptStream(Stream, EncryptionSettings) Gets a SilverbackCryptoStream compatible with the specified settings. Declaration SilverbackCryptoStream GetEncryptStream(Stream stream, EncryptionSettings settings) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the clear-text message from. EncryptionSettings settings The EncryptionSettings specifying the cryptographic algorithm settings. Returns Type Description SilverbackCryptoStream A SilverbackCryptoStream compatible with the specified settings."
  },
  "api/Silverback.Messaging.Encryption.SilverbackCryptoStream.html": {
    "href": "api/Silverback.Messaging.Encryption.SilverbackCryptoStream.html",
    "title": "Class SilverbackCryptoStream | Silverback",
    "keywords": "Class SilverbackCryptoStream The base class for the System.IO.Stream implementations used to encrypt and decrypt the integration messages. Inheritance System.Object System.MarshalByRefObject System.IO.Stream SilverbackCryptoStream SymmetricDecryptStream SymmetricEncryptStream Implements System.IAsyncDisposable System.IDisposable Inherited Members System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.Dispose(System.Boolean) System.IO.Stream.DisposeAsync() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public abstract class SilverbackCryptoStream : Stream, IAsyncDisposable, IDisposable Properties | Improve this doc View source CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead | Improve this doc View source CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek | Improve this doc View source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite | Improve this doc View source CryptoStream Gets the underlying CryptoStream . Declaration protected abstract CryptoStream CryptoStream { get; } Property Value Type Description System.Security.Cryptography.CryptoStream | Improve this doc View source Length Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length | Improve this doc View source Position Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods | Improve this doc View source Close() Declaration public override void Close() Overrides System.IO.Stream.Close() | Improve this doc View source Flush() Declaration public override void Flush() Overrides System.IO.Stream.Flush() | Improve this doc View source FlushAsync(CancellationToken) Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides System.IO.Stream.FlushAsync(System.Threading.CancellationToken) | Improve this doc View source Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Returns Type Description System.Int32 Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) | Improve this doc View source ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 > Overrides System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) | Improve this doc View source Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset System.IO.SeekOrigin origin Returns Type Description System.Int64 Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) | Improve this doc View source SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value Overrides System.IO.Stream.SetLength(System.Int64) | Improve this doc View source Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) | Improve this doc View source WriteAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) Implements System.IAsyncDisposable System.IDisposable"
  },
  "api/Silverback.Messaging.Encryption.SilverbackCryptoStreamFactory.html": {
    "href": "api/Silverback.Messaging.Encryption.SilverbackCryptoStreamFactory.html",
    "title": "Class SilverbackCryptoStreamFactory | Silverback",
    "keywords": "Class SilverbackCryptoStreamFactory Inheritance System.Object SilverbackCryptoStreamFactory Implements ISilverbackCryptoStreamFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SilverbackCryptoStreamFactory : ISilverbackCryptoStreamFactory Methods | Improve this doc View source GetDecryptStream(Stream, EncryptionSettings, String) Declaration public SilverbackCryptoStream GetDecryptStream(Stream stream, EncryptionSettings settings, string keyIdentifier = null) Parameters Type Name Description System.IO.Stream stream EncryptionSettings settings System.String keyIdentifier Returns Type Description SilverbackCryptoStream | Improve this doc View source GetEncryptStream(Stream, EncryptionSettings) Declaration public SilverbackCryptoStream GetEncryptStream(Stream stream, EncryptionSettings settings) Parameters Type Name Description System.IO.Stream stream EncryptionSettings settings Returns Type Description SilverbackCryptoStream Implements ISilverbackCryptoStreamFactory"
  },
  "api/Silverback.Messaging.Encryption.SymmetricDecryptionSettings.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricDecryptionSettings.html",
    "title": "Class SymmetricDecryptionSettings | Silverback",
    "keywords": "Class SymmetricDecryptionSettings The decryption settings used to decrypt the messages. Inheritance System.Object EncryptionSettings SymmetricEncryptionSettingsBase SymmetricDecryptionSettings Implements IValidatableEndpointSettings Inherited Members SymmetricEncryptionSettingsBase.AlgorithmName SymmetricEncryptionSettingsBase.BlockSize SymmetricEncryptionSettingsBase.FeedbackSize SymmetricEncryptionSettingsBase.InitializationVector SymmetricEncryptionSettingsBase.Key SymmetricEncryptionSettingsBase.CipherMode SymmetricEncryptionSettingsBase.PaddingMode System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SymmetricDecryptionSettings : SymmetricEncryptionSettingsBase, IValidatableEndpointSettings Properties | Improve this doc View source KeyProvider Gets or sets the function to be used to retrieve the decryption key. Declaration public Func<string, byte[]> KeyProvider { get; set; } Property Value Type Description System.Func < System.String , System.Byte []> Methods | Improve this doc View source Validate() Declaration public override void Validate() Overrides SymmetricEncryptionSettingsBase.Validate() Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Encryption.SymmetricDecryptStream.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricDecryptStream.html",
    "title": "Class SymmetricDecryptStream | Silverback",
    "keywords": "Class SymmetricDecryptStream The implementation of SilverbackCryptoStream based on a System.Security.Cryptography.SymmetricAlgorithm used to decrypt the messages. Inheritance System.Object System.MarshalByRefObject System.IO.Stream SilverbackCryptoStream SymmetricDecryptStream Implements System.IAsyncDisposable System.IDisposable Inherited Members SilverbackCryptoStream.CanRead SilverbackCryptoStream.CanSeek SilverbackCryptoStream.CanWrite SilverbackCryptoStream.Length SilverbackCryptoStream.Position SilverbackCryptoStream.Flush() SilverbackCryptoStream.FlushAsync(CancellationToken) SilverbackCryptoStream.Read(Byte[], Int32, Int32) SilverbackCryptoStream.ReadAsync(Byte[], Int32, Int32, CancellationToken) SilverbackCryptoStream.Seek(Int64, SeekOrigin) SilverbackCryptoStream.SetLength(Int64) SilverbackCryptoStream.Write(Byte[], Int32, Int32) SilverbackCryptoStream.WriteAsync(Byte[], Int32, Int32, CancellationToken) SilverbackCryptoStream.Close() System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.DisposeAsync() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SymmetricDecryptStream : SilverbackCryptoStream, IAsyncDisposable, IDisposable Constructors | Improve this doc View source SymmetricDecryptStream(Stream, SymmetricDecryptionSettings, String) Initializes a new instance of the SymmetricDecryptStream class. Declaration public SymmetricDecryptStream(Stream stream, SymmetricDecryptionSettings settings, string keyIdentifier = null) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the encrypted message from. SymmetricDecryptionSettings settings The SymmetricDecryptionSettings specifying the cryptographic algorithm settings. System.String keyIdentifier The key identifier to retrieve the encryption key. Properties | Improve this doc View source CryptoStream Declaration protected override CryptoStream CryptoStream { get; } Property Value Type Description System.Security.Cryptography.CryptoStream Overrides SilverbackCryptoStream.CryptoStream Methods | Improve this doc View source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.Stream.Dispose(System.Boolean) Implements System.IAsyncDisposable System.IDisposable"
  },
  "api/Silverback.Messaging.Encryption.SymmetricEncryptionSettings.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricEncryptionSettings.html",
    "title": "Class SymmetricEncryptionSettings | Silverback",
    "keywords": "Class SymmetricEncryptionSettings The encryption settings used to encrypt the messages. Inheritance System.Object EncryptionSettings SymmetricEncryptionSettingsBase SymmetricEncryptionSettings Implements IValidatableEndpointSettings Inherited Members SymmetricEncryptionSettingsBase.AlgorithmName SymmetricEncryptionSettingsBase.BlockSize SymmetricEncryptionSettingsBase.FeedbackSize SymmetricEncryptionSettingsBase.InitializationVector SymmetricEncryptionSettingsBase.Key SymmetricEncryptionSettingsBase.CipherMode SymmetricEncryptionSettingsBase.PaddingMode SymmetricEncryptionSettingsBase.Validate() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SymmetricEncryptionSettings : SymmetricEncryptionSettingsBase, IValidatableEndpointSettings Properties | Improve this doc View source KeyIdentifier Gets or sets the key identifier to be sent in the header (see EncryptionKeyId ). It will be used on the consumer side to determine the correct key to be used to decrypt the message. Declaration public string KeyIdentifier { get; set; } Property Value Type Description System.String Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Encryption.SymmetricEncryptionSettingsBase.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricEncryptionSettingsBase.html",
    "title": "Class SymmetricEncryptionSettingsBase | Silverback",
    "keywords": "Class SymmetricEncryptionSettingsBase The base class for symmetric encryption settings used to encrypt or decrypt the messages being sent through the message broker. Inheritance System.Object EncryptionSettings SymmetricEncryptionSettingsBase SymmetricDecryptionSettings SymmetricEncryptionSettings Implements IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public abstract class SymmetricEncryptionSettingsBase : EncryptionSettings, IValidatableEndpointSettings Properties | Improve this doc View source AlgorithmName Gets or sets the name of the specific implementation of the System.Security.Cryptography.SymmetricAlgorithm class to use to encrypt or decrypt the messages. Declaration public string AlgorithmName { get; set; } Property Value Type Description System.String | Improve this doc View source BlockSize Gets or sets the block size, in bits, of the cryptographic operation. If null , the default value for the specified algorithm will be used. Declaration public int? BlockSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source CipherMode Gets or sets the mode for operation of the symmetric algorithm. If null , the default value for the specified algorithm will be used. Declaration public CipherMode? CipherMode { get; set; } Property Value Type Description System.Nullable < System.Security.Cryptography.CipherMode > | Improve this doc View source FeedbackSize Gets or sets the feedback size, in bits, of the cryptographic operation for the Cipher Feedback (CFB) and Output Feedback (OFB) cipher modes. If null , the default value for the specified algorithm will be used. Declaration public int? FeedbackSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source InitializationVector Gets or sets the optional initialization vector (IV) for the symmetric algorithm. Important: If null no fixed IV is provided and the producer will automatically generate a random one for each message that will also be prepended to the actual encrypted message to be available to the consumer. Declaration public byte[] InitializationVector { get; set; } Property Value Type Description System.Byte [] | Improve this doc View source Key Gets or sets the secret key for the symmetric algorithm. Declaration public byte[] Key { get; set; } Property Value Type Description System.Byte [] | Improve this doc View source PaddingMode Gets or sets the padding mode used in the symmetric algorithm. If null , the default value for the specified algorithm will be used. Declaration public PaddingMode? PaddingMode { get; set; } Property Value Type Description System.Nullable < System.Security.Cryptography.PaddingMode > Methods | Improve this doc View source Validate() Declaration public override void Validate() Overrides EncryptionSettings.Validate() Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Encryption.SymmetricEncryptStream.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricEncryptStream.html",
    "title": "Class SymmetricEncryptStream | Silverback",
    "keywords": "Class SymmetricEncryptStream The implementation of SilverbackCryptoStream based on a System.Security.Cryptography.SymmetricAlgorithm used to encrypt the messages. Inheritance System.Object System.MarshalByRefObject System.IO.Stream SilverbackCryptoStream SymmetricEncryptStream Implements System.IAsyncDisposable System.IDisposable Inherited Members SilverbackCryptoStream.CanRead SilverbackCryptoStream.CanSeek SilverbackCryptoStream.CanWrite SilverbackCryptoStream.Length SilverbackCryptoStream.Position SilverbackCryptoStream.Flush() SilverbackCryptoStream.FlushAsync(CancellationToken) SilverbackCryptoStream.Seek(Int64, SeekOrigin) SilverbackCryptoStream.SetLength(Int64) SilverbackCryptoStream.Write(Byte[], Int32, Int32) SilverbackCryptoStream.WriteAsync(Byte[], Int32, Int32, CancellationToken) SilverbackCryptoStream.Close() System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.DisposeAsync() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SymmetricEncryptStream : SilverbackCryptoStream, IAsyncDisposable, IDisposable Constructors | Improve this doc View source SymmetricEncryptStream(Stream, SymmetricEncryptionSettings) Initializes a new instance of the SymmetricEncryptStream class. Declaration public SymmetricEncryptStream(Stream stream, SymmetricEncryptionSettings settings) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the clear-text message from. SymmetricEncryptionSettings settings The SymmetricEncryptionSettings specifying the cryptographic algorithm settings. Properties | Improve this doc View source CryptoStream Declaration protected override CryptoStream CryptoStream { get; } Property Value Type Description System.Security.Cryptography.CryptoStream Overrides SilverbackCryptoStream.CryptoStream Methods | Improve this doc View source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.Stream.Dispose(System.Boolean) | Improve this doc View source Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Returns Type Description System.Int32 Overrides SilverbackCryptoStream.Read(Byte[], Int32, Int32) | Improve this doc View source ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 > Overrides SilverbackCryptoStream.ReadAsync(Byte[], Int32, Int32, CancellationToken) Implements System.IAsyncDisposable System.IDisposable"
  },
  "api/Silverback.Messaging.Endpoint.html": {
    "href": "api/Silverback.Messaging.Endpoint.html",
    "title": "Class Endpoint | Silverback",
    "keywords": "Class Endpoint Inheritance System.Object Endpoint ConsumerEndpoint ProducerEndpoint Implements IEndpoint Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public abstract class Endpoint : IEndpoint Constructors | Improve this doc View source Endpoint(String) Initializes a new instance of the Endpoint class. Declaration protected Endpoint(string name) Parameters Type Name Description System.String name The endpoint name. Properties | Improve this doc View source DefaultSerializer Gets the default serializer (a JsonMessageSerializer with default settings). Declaration public static IMessageSerializer DefaultSerializer { get; } Property Value Type Description IMessageSerializer | Improve this doc View source DisplayName Declaration public string DisplayName { get; } Property Value Type Description System.String | Improve this doc View source Encryption Gets or sets the encryption settings. This optional settings enables the end-to-end message encryption. When enabled the messages are transparently encrypted by the producer and decrypted by the consumer. Set it to null (default) to disable this feature. Declaration public EncryptionSettings Encryption { get; set; } Property Value Type Description EncryptionSettings | Improve this doc View source FriendlyName Gets or sets an optional friendly name to be used to identify the endpoint. This name can be used to filter or retrieve the endpoints and will also be included in the DisplayName , to be shown in the human-targeted output (e.g. logs, health checks result, etc.). Declaration public string FriendlyName { get; set; } Property Value Type Description System.String | Improve this doc View source MessageValidationMode Gets or sets the message validation mode. This option can be used to determines if validation has to be performed and if should throw an exception. Declaration public MessageValidationMode MessageValidationMode { get; set; } Property Value Type Description MessageValidationMode | Improve this doc View source Name Declaration public string Name { get; protected set; } Property Value Type Description System.String | Improve this doc View source Serializer Gets or sets the IMessageSerializer to be used to serialize or deserialize the messages being produced or consumed. Declaration public IMessageSerializer Serializer { get; set; } Property Value Type Description IMessageSerializer Methods | Improve this doc View source BaseEquals(Endpoint) Determines whether the specified Endpoint is equal to the current Endpoint . Declaration protected virtual bool BaseEquals(Endpoint other) Parameters Type Name Description Endpoint other The object to compare with the current object. Returns Type Description System.Boolean Returns a value indicating whether the other object is equal to the current object. | Improve this doc View source Validate() Declaration public virtual void Validate() Implements IEndpoint"
  },
  "api/Silverback.Messaging.EndpointConfigurationException.html": {
    "href": "api/Silverback.Messaging.EndpointConfigurationException.html",
    "title": "Class EndpointConfigurationException | Silverback",
    "keywords": "Class EndpointConfigurationException The exception that is thrown when the endpoint configuration is not valid. Inheritance System.Object System.Exception Silverback.SilverbackException EndpointConfigurationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax [Serializable] public class EndpointConfigurationException : SilverbackException, ISerializable Constructors | Improve this doc View source EndpointConfigurationException() Initializes a new instance of the EndpointConfigurationException class. Declaration public EndpointConfigurationException() | Improve this doc View source EndpointConfigurationException(SerializationInfo, StreamingContext) Initializes a new instance of the EndpointConfigurationException class with the serialized data. Declaration protected EndpointConfigurationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EndpointConfigurationException(String) Initializes a new instance of the EndpointConfigurationException class with the specified message. Declaration public EndpointConfigurationException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EndpointConfigurationException(String, Exception) Initializes a new instance of the EndpointConfigurationException class with the specified message and inner exception. Declaration public EndpointConfigurationException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Headers.CustomHeadersMapperConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Headers.CustomHeadersMapperConsumerBehavior.html",
    "title": "Class CustomHeadersMapperConsumerBehavior | Silverback",
    "keywords": "Class CustomHeadersMapperConsumerBehavior Applies the custom header name mappings. Inheritance System.Object CustomHeadersMapperConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public class CustomHeadersMapperConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source CustomHeadersMapperConsumerBehavior(ICustomHeadersMappings) Initializes a new instance of the CustomHeadersMapperConsumerBehavior class. Declaration public CustomHeadersMapperConsumerBehavior(ICustomHeadersMappings mappings) Parameters Type Name Description ICustomHeadersMappings mappings The ICustomHeadersMappings containing the mappings to be applied. Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Headers.CustomHeadersMapperProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Headers.CustomHeadersMapperProducerBehavior.html",
    "title": "Class CustomHeadersMapperProducerBehavior | Silverback",
    "keywords": "Class CustomHeadersMapperProducerBehavior Applies the custom header name mappings. Inheritance System.Object CustomHeadersMapperProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public class CustomHeadersMapperProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source CustomHeadersMapperProducerBehavior(ICustomHeadersMappings) Initializes a new instance of the CustomHeadersMapperProducerBehavior class. Declaration public CustomHeadersMapperProducerBehavior(ICustomHeadersMappings mappings) Parameters Type Name Description ICustomHeadersMappings mappings The ICustomHeadersMappings containing the mappings to be applied. Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Headers.HeadersReaderConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Headers.HeadersReaderConsumerBehavior.html",
    "title": "Class HeadersReaderConsumerBehavior | Silverback",
    "keywords": "Class HeadersReaderConsumerBehavior Maps the headers with the properties decorated with the HeaderAttribute . Inheritance System.Object HeadersReaderConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public class HeadersReaderConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Headers.HeadersWriterProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Headers.HeadersWriterProducerBehavior.html",
    "title": "Class HeadersWriterProducerBehavior | Silverback",
    "keywords": "Class HeadersWriterProducerBehavior Maps the properties decorated with the HeaderAttribute to the message headers. Inheritance System.Object HeadersWriterProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public class HeadersWriterProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Headers.html": {
    "href": "api/Silverback.Messaging.Headers.html",
    "title": "Namespace Silverback.Messaging.Headers | Silverback",
    "keywords": "Namespace Silverback.Messaging.Headers Classes CustomHeadersMapperConsumerBehavior Applies the custom header name mappings. CustomHeadersMapperProducerBehavior Applies the custom header name mappings. HeadersReaderConsumerBehavior Maps the headers with the properties decorated with the HeaderAttribute . HeadersWriterProducerBehavior Maps the properties decorated with the HeaderAttribute to the message headers. Interfaces ICustomHeadersMappings Can be used to override the default header names."
  },
  "api/Silverback.Messaging.Headers.ICustomHeadersMappings.html": {
    "href": "api/Silverback.Messaging.Headers.ICustomHeadersMappings.html",
    "title": "Interface ICustomHeadersMappings | Silverback",
    "keywords": "Interface ICustomHeadersMappings Can be used to override the default header names. Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public interface ICustomHeadersMappings Properties | Improve this doc View source Count Gets the number of mappings that have been configured. Declaration int Count { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source Add(String, String) Adds a new mapping. Declaration void Add(string defaultHeaderName, string customHeaderName) Parameters Type Name Description System.String defaultHeaderName The default header name. System.String customHeaderName The custom header name to be used instead of the default. | Improve this doc View source Apply(IEnumerable<MessageHeader>) Applies the configured mappings to the specified collection of MessageHeader . Declaration void Apply(IEnumerable<MessageHeader> headers) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The collection of MessageHeader to be mapped. | Improve this doc View source Revert(IEnumerable<MessageHeader>) Reverts the headers in the specified collection of MessageHeader to the default header names. Declaration void Revert(IEnumerable<MessageHeader> headers) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The collection of MessageHeader to be mapped."
  },
  "api/Silverback.Messaging.HealthChecks.ConsumersHealthCheck.html": {
    "href": "api/Silverback.Messaging.HealthChecks.ConsumersHealthCheck.html",
    "title": "Class ConsumersHealthCheck | Silverback",
    "keywords": "Class ConsumersHealthCheck Verifies whether all consumers are connected. Inheritance System.Object ConsumersHealthCheck Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.HealthChecks.dll Syntax public class ConsumersHealthCheck : IHealthCheck Constructors | Improve this doc View source ConsumersHealthCheck(IConsumersHealthCheckService, ConsumerStatus, TimeSpan, Func<IConsumerEndpoint, Boolean>) Initializes a new instance of the ConsumersHealthCheck class. Declaration public ConsumersHealthCheck(IConsumersHealthCheckService service, ConsumerStatus minHealthyStatus, TimeSpan gracePeriod, Func<IConsumerEndpoint, bool> endpointsFilter) Parameters Type Name Description IConsumersHealthCheckService service The IConsumersHealthCheckService implementation to be used to check the consumers. ConsumerStatus minHealthyStatus The minimum ConsumerStatus a consumer must have to be considered healthy. System.TimeSpan gracePeriod The grace period to observe after each status change before a consumer is considered unhealthy. System.Func < IConsumerEndpoint , System.Boolean > endpointsFilter An optional filter to be applied to the endpoints to be tested. Methods | Improve this doc View source CheckHealthAsync(HealthCheckContext, CancellationToken) Declaration public Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult > Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck"
  },
  "api/Silverback.Messaging.HealthChecks.ConsumersHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.ConsumersHealthCheckService.html",
    "title": "Class ConsumersHealthCheckService | Silverback",
    "keywords": "Class ConsumersHealthCheckService Inheritance System.Object ConsumersHealthCheckService Implements IConsumersHealthCheckService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class ConsumersHealthCheckService : IConsumersHealthCheckService Constructors | Improve this doc View source ConsumersHealthCheckService(IBrokerCollection, IHostApplicationLifetime) Initializes a new instance of the ConsumersHealthCheckService class. Declaration public ConsumersHealthCheckService(IBrokerCollection brokerCollection, IHostApplicationLifetime applicationLifetime) Parameters Type Name Description IBrokerCollection brokerCollection The collection containing the available brokers. Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime The Microsoft.Extensions.Hosting.IHostApplicationLifetime used to track the application shutdown. Methods | Improve this doc View source GetDisconnectedConsumersAsync(ConsumerStatus, TimeSpan, Func<IConsumerEndpoint, Boolean>) Declaration public Task<IReadOnlyCollection<IConsumer>> GetDisconnectedConsumersAsync(ConsumerStatus minStatus, TimeSpan gracePeriod, Func<IConsumerEndpoint, bool> endpointsFilter) Parameters Type Name Description ConsumerStatus minStatus System.TimeSpan gracePeriod System.Func < IConsumerEndpoint , System.Boolean > endpointsFilter Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < IConsumer >> Implements IConsumersHealthCheckService"
  },
  "api/Silverback.Messaging.HealthChecks.EndpointCheckResult.html": {
    "href": "api/Silverback.Messaging.HealthChecks.EndpointCheckResult.html",
    "title": "Class EndpointCheckResult | Silverback",
    "keywords": "Class EndpointCheckResult Encapsulates the result of a check performed against an IEndpoint . Inheritance System.Object EndpointCheckResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class EndpointCheckResult Constructors | Improve this doc View source EndpointCheckResult(String, Boolean, String) Initializes a new instance of the EndpointCheckResult class. Declaration public EndpointCheckResult(string endpointName, bool isSuccessful, string errorMessage = null) Parameters Type Name Description System.String endpointName The name of the checked endpoint. System.Boolean isSuccessful A value indicating whether the check was successful. System.String errorMessage The error message, if not successful. Properties | Improve this doc View source EndpointName Gets the name of the checked endpoint. Declaration public string EndpointName { get; } Property Value Type Description System.String | Improve this doc View source ErrorMessage Gets the error message, if not successful. Declaration public string ErrorMessage { get; } Property Value Type Description System.String | Improve this doc View source IsSuccessful Gets a value indicating whether the check was successful. Declaration public bool IsSuccessful { get; } Property Value Type Description System.Boolean"
  },
  "api/Silverback.Messaging.HealthChecks.html": {
    "href": "api/Silverback.Messaging.HealthChecks.html",
    "title": "Namespace Silverback.Messaging.HealthChecks | Silverback",
    "keywords": "Namespace Silverback.Messaging.HealthChecks Classes ConsumersHealthCheck Verifies whether all consumers are connected. ConsumersHealthCheckService EndpointCheckResult Encapsulates the result of a check performed against an IEndpoint . OutboundEndpointsHealthCheck Sends a ping message to all the outbound endpoints to verify that they can all be produced to. OutboundEndpointsHealthCheckService OutboundQueueHealthCheckService OutboxQueueHealthCheck Monitors the outbox, verifying that the messages are being processed. PingMessage The message that is periodically produced by the OutboundEndpointsHealthCheckService to verify that the endpoints are reachable. Interfaces IConsumersHealthCheckService Checks that all the consumers are connected. IOutboundEndpointsHealthCheckService Checks that all outbound endpoints are reachable. IOutboundQueueHealthCheckService Checks that the outbound queue is being processed at a sustainable pace."
  },
  "api/Silverback.Messaging.HealthChecks.IConsumersHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.IConsumersHealthCheckService.html",
    "title": "Interface IConsumersHealthCheckService | Silverback",
    "keywords": "Interface IConsumersHealthCheckService Checks that all the consumers are connected. Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public interface IConsumersHealthCheckService Methods | Improve this doc View source GetDisconnectedConsumersAsync(ConsumerStatus, TimeSpan, Func<IConsumerEndpoint, Boolean>) Checks the status of all the consumers and returns a collection containing the consumer instances that don't appear to be fully connected (Status >= Ready ). Declaration Task<IReadOnlyCollection<IConsumer>> GetDisconnectedConsumersAsync(ConsumerStatus minStatus, TimeSpan gracePeriod, Func<IConsumerEndpoint, bool> endpointsFilter) Parameters Type Name Description ConsumerStatus minStatus The minimum ConsumerStatus a consumer must have to be considered fully connected. System.TimeSpan gracePeriod The grace period to observe after each status change before a consumer is considered unhealthy. System.Func < IConsumerEndpoint , System.Boolean > endpointsFilter An optional filter to be applied to the endpoints to be tested. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < IConsumer >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the consumers that aren't fully connected."
  },
  "api/Silverback.Messaging.HealthChecks.IOutboundEndpointsHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.IOutboundEndpointsHealthCheckService.html",
    "title": "Interface IOutboundEndpointsHealthCheckService | Silverback",
    "keywords": "Interface IOutboundEndpointsHealthCheckService Checks that all outbound endpoints are reachable. Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public interface IOutboundEndpointsHealthCheckService Methods | Improve this doc View source PingAllEndpointsAsync() Produces a PingMessage to all configured outbound endpoints. Declaration Task<IReadOnlyCollection<EndpointCheckResult>> PingAllEndpointsAsync() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < EndpointCheckResult >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains an EndpointCheckResult for each endpoint."
  },
  "api/Silverback.Messaging.HealthChecks.IOutboundQueueHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.IOutboundQueueHealthCheckService.html",
    "title": "Interface IOutboundQueueHealthCheckService | Silverback",
    "keywords": "Interface IOutboundQueueHealthCheckService Checks that the outbound queue is being processed at a sustainable pace. Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public interface IOutboundQueueHealthCheckService Methods | Improve this doc View source CheckIsHealthyAsync(Nullable<TimeSpan>, Nullable<Int32>) Checks the age of the messages stored in the transactional outbox and optionally the queue length. Declaration Task<bool> CheckIsHealthyAsync(TimeSpan? maxAge = default(TimeSpan? ), int? maxQueueLength = default(int? )) Parameters Type Name Description System.Nullable < System.TimeSpan > maxAge The maximum message age, the check will fail when a message exceeds this age. The default is 30 seconds. System.Nullable < System.Int32 > maxQueueLength The maximum amount of messages in the queue. The default is null, meaning unrestricted. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean value indicating whether the check is successful."
  },
  "api/Silverback.Messaging.HealthChecks.OutboundEndpointsHealthCheck.html": {
    "href": "api/Silverback.Messaging.HealthChecks.OutboundEndpointsHealthCheck.html",
    "title": "Class OutboundEndpointsHealthCheck | Silverback",
    "keywords": "Class OutboundEndpointsHealthCheck Sends a ping message to all the outbound endpoints to verify that they can all be produced to. Inheritance System.Object OutboundEndpointsHealthCheck Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.HealthChecks.dll Syntax public class OutboundEndpointsHealthCheck : IHealthCheck Constructors | Improve this doc View source OutboundEndpointsHealthCheck(IOutboundEndpointsHealthCheckService) Initializes a new instance of the OutboundEndpointsHealthCheck class. Declaration public OutboundEndpointsHealthCheck(IOutboundEndpointsHealthCheckService service) Parameters Type Name Description IOutboundEndpointsHealthCheckService service The IOutboundEndpointsHealthCheckService implementation to be used to ping the services. Methods | Improve this doc View source CheckHealthAsync(HealthCheckContext, CancellationToken) Declaration public Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult > Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck"
  },
  "api/Silverback.Messaging.HealthChecks.OutboundEndpointsHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.OutboundEndpointsHealthCheckService.html",
    "title": "Class OutboundEndpointsHealthCheckService | Silverback",
    "keywords": "Class OutboundEndpointsHealthCheckService Inheritance System.Object OutboundEndpointsHealthCheckService Implements IOutboundEndpointsHealthCheckService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class OutboundEndpointsHealthCheckService : IOutboundEndpointsHealthCheckService Constructors | Improve this doc View source OutboundEndpointsHealthCheckService(IOutboundRoutingConfiguration, IBrokerCollection, IServiceProvider) Initializes a new instance of the OutboundEndpointsHealthCheckService class. Declaration public OutboundEndpointsHealthCheckService(IOutboundRoutingConfiguration outboundRoutingConfiguration, IBrokerCollection brokerCollection, IServiceProvider serviceProvider) Parameters Type Name Description IOutboundRoutingConfiguration outboundRoutingConfiguration The IOutboundRoutingConfiguration to be used to retrieve the list of outbound endpoints. IBrokerCollection brokerCollection The collection containing the available brokers. System.IServiceProvider serviceProvider The System.IServiceProvider . Methods | Improve this doc View source PingAllEndpointsAsync() Declaration public Task<IReadOnlyCollection<EndpointCheckResult>> PingAllEndpointsAsync() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < EndpointCheckResult >> Implements IOutboundEndpointsHealthCheckService"
  },
  "api/Silverback.Messaging.HealthChecks.OutboundQueueHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.OutboundQueueHealthCheckService.html",
    "title": "Class OutboundQueueHealthCheckService | Silverback",
    "keywords": "Class OutboundQueueHealthCheckService Inheritance System.Object OutboundQueueHealthCheckService Implements IOutboundQueueHealthCheckService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class OutboundQueueHealthCheckService : IOutboundQueueHealthCheckService Constructors | Improve this doc View source OutboundQueueHealthCheckService(IOutboxReader) Initializes a new instance of the OutboundQueueHealthCheckService class. Declaration public OutboundQueueHealthCheckService(IOutboxReader queueReader) Parameters Type Name Description IOutboxReader queueReader The IOutboxReader . Methods | Improve this doc View source CheckIsHealthyAsync(Nullable<TimeSpan>, Nullable<Int32>) Declaration public Task<bool> CheckIsHealthyAsync(TimeSpan? maxAge = default(TimeSpan? ), int? maxQueueLength = default(int? )) Parameters Type Name Description System.Nullable < System.TimeSpan > maxAge System.Nullable < System.Int32 > maxQueueLength Returns Type Description System.Threading.Tasks.Task < System.Boolean > Implements IOutboundQueueHealthCheckService"
  },
  "api/Silverback.Messaging.HealthChecks.OutboxQueueHealthCheck.html": {
    "href": "api/Silverback.Messaging.HealthChecks.OutboxQueueHealthCheck.html",
    "title": "Class OutboxQueueHealthCheck | Silverback",
    "keywords": "Class OutboxQueueHealthCheck Monitors the outbox, verifying that the messages are being processed. Inheritance System.Object OutboxQueueHealthCheck Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.HealthChecks.dll Syntax public class OutboxQueueHealthCheck : IHealthCheck Constructors | Improve this doc View source OutboxQueueHealthCheck(IOutboundQueueHealthCheckService) Initializes a new instance of the OutboxQueueHealthCheck class. Declaration public OutboxQueueHealthCheck(IOutboundQueueHealthCheckService service) Parameters Type Name Description IOutboundQueueHealthCheckService service The IOutboundQueueHealthCheckService implementation to be used to monitor the outbound queue. Properties | Improve this doc View source MaxMessageAge Gets or sets the maximum message age, the check will fail when a message exceeds this age (default is 30 seconds). Declaration public static TimeSpan MaxMessageAge { get; set; } Property Value Type Description System.TimeSpan | Improve this doc View source MaxQueueLength Gets or sets the maximum amount of messages in the queue. The default is null , meaning unrestricted. Declaration public static int? MaxQueueLength { get; set; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this doc View source CheckHealthAsync(HealthCheckContext, CancellationToken) Declaration public Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult > Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck"
  },
  "api/Silverback.Messaging.HealthChecks.PingMessage.html": {
    "href": "api/Silverback.Messaging.HealthChecks.PingMessage.html",
    "title": "Class PingMessage | Silverback",
    "keywords": "Class PingMessage The message that is periodically produced by the OutboundEndpointsHealthCheckService to verify that the endpoints are reachable. Inheritance System.Object PingMessage Implements Silverback.Messaging.Messages.IMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class PingMessage : IMessage Properties | Improve this doc View source TimeStamp Gets or sets the datetime at which the message has been produced. Declaration public DateTime TimeStamp { get; set; } Property Value Type Description System.DateTime Methods | Improve this doc View source New() Creates a new instance of the PingMessage . Declaration public static PingMessage New() Returns Type Description PingMessage The new PingMessage . Implements Silverback.Messaging.Messages.IMessage"
  },
  "api/Silverback.Messaging.html": {
    "href": "api/Silverback.Messaging.html",
    "title": "Namespace Silverback.Messaging | Silverback",
    "keywords": "Namespace Silverback.Messaging Classes ConsumerEndpoint Endpoint EndpointConfigurationException The exception that is thrown when the endpoint configuration is not valid. ProducerEndpoint Interfaces IConsumerEndpoint Represents a message broker endpoint to consume from (such as a Kafka topic or RabbitMQ queue or exchange). IEndpoint Represents a message broker endpoint to connect to (such as a Kafka topic or RabbitMQ queue or exchange). IProducerEndpoint Represents a message broker endpoint to produce to (such as a Kafka topic or RabbitMQ queue or exchange). IRawMessageTransformer The base class for all services that transform the inbound or outbound raw binary."
  },
  "api/Silverback.Messaging.IConsumerEndpoint.html": {
    "href": "api/Silverback.Messaging.IConsumerEndpoint.html",
    "title": "Interface IConsumerEndpoint | Silverback",
    "keywords": "Interface IConsumerEndpoint Represents a message broker endpoint to consume from (such as a Kafka topic or RabbitMQ queue or exchange). Inherited Members IEndpoint.Name IEndpoint.DisplayName IEndpoint.Serializer IEndpoint.Encryption IEndpoint.FriendlyName IEndpoint.MessageValidationMode IEndpoint.Validate() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public interface IConsumerEndpoint : IEndpoint Properties | Improve this doc View source Batch Gets the batch settings. Can be used to enable and setup batch processing. Declaration BatchSettings Batch { get; } Property Value Type Description BatchSettings | Improve this doc View source ErrorPolicy Gets the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration IErrorPolicy ErrorPolicy { get; } Property Value Type Description IErrorPolicy | Improve this doc View source ExactlyOnceStrategy Gets the strategy to be used to guarantee that each message is consumed only once. Declaration IExactlyOnceStrategy ExactlyOnceStrategy { get; } Property Value Type Description IExactlyOnceStrategy | Improve this doc View source NullMessageHandlingStrategy Gets a value indicating how to handle the null messages. The default value is Tombstone . Declaration NullMessageHandlingStrategy NullMessageHandlingStrategy { get; } Property Value Type Description NullMessageHandlingStrategy | Improve this doc View source Sequence Gets the sequence settings. A sequence is a set of related messages, like the chunks belonging to the same message or the messages in a dataset. Declaration SequenceSettings Sequence { get; } Property Value Type Description SequenceSettings | Improve this doc View source ThrowIfUnhandled Gets a value indicating whether an exception must be thrown if no subscriber is handling the received message. The default is true . Declaration bool ThrowIfUnhandled { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source GetUniqueConsumerGroupName() Gets a unique name for the consumer group (e.g. Kafka's consumer group id). This value (joint with the endpoint name) will be used for example to ensure the exactly-once delivery. Declaration string GetUniqueConsumerGroupName() Returns Type Description System.String Returns the unique name for the consumer group. Remarks It's not enough to use the endpoint name, since the same topic could be consumed by multiple consumer groups within the same process and/or using the same database to store the information needed to ensure the exactly-once delivery."
  },
  "api/Silverback.Messaging.IEndpoint.html": {
    "href": "api/Silverback.Messaging.IEndpoint.html",
    "title": "Interface IEndpoint | Silverback",
    "keywords": "Interface IEndpoint Represents a message broker endpoint to connect to (such as a Kafka topic or RabbitMQ queue or exchange). Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public interface IEndpoint Properties | Improve this doc View source DisplayName Gets the name to be displayed in the human-targeted output (e.g. logs, health checks result, etc.). Declaration string DisplayName { get; } Property Value Type Description System.String | Improve this doc View source Encryption Gets the encryption settings. This optional settings enables the end-to-end message encryption. When enabled the messages are transparently encrypted by the producer and decrypted by the consumer. Set it to null (default) to disable this feature. Declaration EncryptionSettings Encryption { get; } Property Value Type Description EncryptionSettings | Improve this doc View source FriendlyName Gets an optional friendly name to be used to identify the endpoint. This name can be used to filter or retrieve the endpoints and will also be included in the DisplayName , to be shown in the human-targeted output (e.g. logs, health checks result, etc.). Declaration string FriendlyName { get; } Property Value Type Description System.String | Improve this doc View source MessageValidationMode Gets the message validation mode. This option can be used to specify if the messages have to be validated and whether an exception must be thrown if the message is not valid. Declaration MessageValidationMode MessageValidationMode { get; } Property Value Type Description MessageValidationMode | Improve this doc View source Name Gets a string identifying the endpoint (the topic, queue or exchange name). Declaration string Name { get; } Property Value Type Description System.String | Improve this doc View source Serializer Gets the IMessageSerializer to be used to serialize or deserialize the messages being produced or consumed. Declaration IMessageSerializer Serializer { get; } Property Value Type Description IMessageSerializer Methods | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration void Validate()"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyBase.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyBase.html",
    "title": "Class ErrorPolicyBase | Silverback",
    "keywords": "Class ErrorPolicyBase Builds the error policy. Inheritance System.Object ErrorPolicyBase RetryableErrorPolicyBase SkipMessageErrorPolicy StopConsumerErrorPolicy Implements IErrorPolicy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public abstract class ErrorPolicyBase : IErrorPolicy Properties | Improve this doc View source ApplyRule Gets the custom apply rule function. Declaration public Func<IRawInboundEnvelope, Exception, bool> ApplyRule { get; } Property Value Type Description System.Func < IRawInboundEnvelope , System.Exception , System.Boolean > | Improve this doc View source ExcludedExceptions Gets the collection of exception types this policy doesn't have to be applied to. Declaration public ICollection<Type> ExcludedExceptions { get; } Property Value Type Description System.Collections.Generic.ICollection < System.Type > | Improve this doc View source IncludedExceptions Gets the collection of exception types this policy have to be applied to. Declaration public ICollection<Type> IncludedExceptions { get; } Property Value Type Description System.Collections.Generic.ICollection < System.Type > | Improve this doc View source MaxFailedAttemptsCount Gets the number of times this policy should be applied to the same message in case of multiple failed attempts. Declaration public int? MaxFailedAttemptsCount { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source MessageToPublishFactory Gets the factory that builds the message to be published after the policy is applied. Declaration public Func<IRawInboundEnvelope, object> MessageToPublishFactory { get; } Property Value Type Description System.Func < IRawInboundEnvelope , System.Object > Methods | Improve this doc View source ApplyTo(Type) Restricts the application of this policy to the specified exception type only. It is possible to combine multiple calls to ApplyTo and Exclude . Declaration public ErrorPolicyBase ApplyTo(Type exceptionType) Parameters Type Name Description System.Type exceptionType The type of the exception to be handled. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. | Improve this doc View source ApplyTo<T>() Restricts the application of this policy to the specified exception type only. It is possible to combine multiple calls to ApplyTo and Exclude . Declaration public ErrorPolicyBase ApplyTo<T>() where T : Exception Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. Type Parameters Name Description T The type of the exception to be handled. | Improve this doc View source ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) Specifies a predicate to be used to determine whether the policy has to be applied according to the current message and exception. Declaration public ErrorPolicyBase ApplyWhen(Func<IRawInboundEnvelope, Exception, bool> applyRule) Parameters Type Name Description System.Func < IRawInboundEnvelope , System.Exception , System.Boolean > applyRule The predicate. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. | Improve this doc View source Build(IServiceProvider) Declaration public IErrorPolicyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description IErrorPolicyImplementation | Improve this doc View source BuildCore(IServiceProvider) Declaration protected abstract ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description ErrorPolicyImplementation | Improve this doc View source Exclude(Type) Restricts the application of this policy to all exceptions but the specified type. It is possible to combine multiple calls to ApplyTo and Exclude . Declaration public ErrorPolicyBase Exclude(Type exceptionType) Parameters Type Name Description System.Type exceptionType The type of the exception to be ignored. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. | Improve this doc View source Exclude<T>() Restricts the application of this policy to all exceptions but the specified type. It is possible to combine multiple calls to ApplyTo and Exclude . Declaration public ErrorPolicyBase Exclude<T>() where T : Exception Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. Type Parameters Name Description T The type of the exception to be ignored. | Improve this doc View source Publish(Func<IRawInboundEnvelope, Object>) Specify a factory to create a message to be published to the internal bus when this policy is applied. Useful to execute some custom code. Declaration public ErrorPolicyBase Publish(Func<IRawInboundEnvelope, object> factory) Parameters Type Name Description System.Func < IRawInboundEnvelope , System.Object > factory The factory returning the message to be published. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyChain.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyChain.html",
    "title": "Class ErrorPolicyChain | Silverback",
    "keywords": "Class ErrorPolicyChain A chain of error policies to be sequentially applied. Inheritance System.Object ErrorPolicyChain Implements IErrorPolicy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class ErrorPolicyChain : IErrorPolicy Constructors | Improve this doc View source ErrorPolicyChain(ErrorPolicyBase[]) Initializes a new instance of the ErrorPolicyChain class. Declaration public ErrorPolicyChain(params ErrorPolicyBase[] policies) Parameters Type Name Description ErrorPolicyBase [] policies The policies to be chained. | Improve this doc View source ErrorPolicyChain(IEnumerable<ErrorPolicyBase>) Initializes a new instance of the ErrorPolicyChain class. Declaration public ErrorPolicyChain(IEnumerable<ErrorPolicyBase> policies) Parameters Type Name Description System.Collections.Generic.IEnumerable < ErrorPolicyBase > policies The policies to be chained. Methods | Improve this doc View source Build(IServiceProvider) Declaration public IErrorPolicyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description IErrorPolicyImplementation Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyImplementation.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyImplementation.html",
    "title": "Class ErrorPolicyImplementation | Silverback",
    "keywords": "Class ErrorPolicyImplementation Inheritance System.Object ErrorPolicyImplementation Implements IErrorPolicyImplementation Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public abstract class ErrorPolicyImplementation : IErrorPolicyImplementation Constructors | Improve this doc View source ErrorPolicyImplementation(Nullable<Int32>, ICollection<Type>, ICollection<Type>, Func<IRawInboundEnvelope, Exception, Boolean>, Func<IRawInboundEnvelope, Object>, IServiceProvider, IInboundLogger<ErrorPolicyBase>) Initializes a new instance of the ErrorPolicyImplementation class. Declaration protected ErrorPolicyImplementation(int? maxFailedAttempts, ICollection<Type> excludedExceptions, ICollection<Type> includedExceptions, Func<IRawInboundEnvelope, Exception, bool> applyRule, Func<IRawInboundEnvelope, object> messageToPublishFactory, IServiceProvider serviceProvider, IInboundLogger<ErrorPolicyBase> logger) Parameters Type Name Description System.Nullable < System.Int32 > maxFailedAttempts The number of times this policy should be applied to the same message in case of multiple failed attempts. System.Collections.Generic.ICollection < System.Type > excludedExceptions The collection of exception types this policy doesn't have to be applied to. System.Collections.Generic.ICollection < System.Type > includedExceptions The collection of exception types this policy have to be applied to. System.Func < IRawInboundEnvelope , System.Exception , System.Boolean > applyRule The custom apply rule function. System.Func < IRawInboundEnvelope , System.Object > messageToPublishFactory The factory that builds the message to be published after the policy is applied. System.IServiceProvider serviceProvider The System.IServiceProvider . IInboundLogger < ErrorPolicyBase > logger The IInboundLogger<TCategoryName> . Methods | Improve this doc View source ApplyPolicyAsync(ConsumerPipelineContext, Exception) Executes the current policy. Declaration protected abstract Task<bool> ApplyPolicyAsync(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context The ConsumerPipelineContext related to the message that failed to be processed. System.Exception exception The exception that was thrown during the processing. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the action that the consumer should perform (e.g. skip the message or stop consuming). | Improve this doc View source CanHandle(ConsumerPipelineContext, Exception) Declaration public virtual bool CanHandle(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context System.Exception exception Returns Type Description System.Boolean | Improve this doc View source HandleErrorAsync(ConsumerPipelineContext, Exception) Declaration public Task<bool> HandleErrorAsync(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context System.Exception exception Returns Type Description System.Threading.Tasks.Task < System.Boolean > Implements IErrorPolicyImplementation"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.html",
    "title": "Namespace Silverback.Messaging.Inbound.ErrorHandling | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound.ErrorHandling Classes ErrorPolicyBase Builds the error policy. ErrorPolicyChain A chain of error policies to be sequentially applied. ErrorPolicyImplementation MoveMessageErrorPolicy This policy moves the message that failed to be processed to the configured endpoint. RetryableErrorPolicyBase Builds an error policy that can be applied multiple times to the same message (e.g. RetryErrorPolicy or MoveMessageErrorPolicy ). RetryErrorPolicy This policy retries to process the message that previously failed to be to processed. An optional delay can be specified. SkipMessageErrorPolicy This policy skips the message that failed to be processed. StopConsumerErrorPolicy This is the default policy and it stops the consumer when an exception is thrown during the message processing. Interfaces IErrorPolicy An error policy is used to handle errors that may occur while processing the inbound messages. IErrorPolicyImplementation An error policy is used to handle errors that may occur while processing the inbound messages."
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.IErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.IErrorPolicy.html",
    "title": "Interface IErrorPolicy | Silverback",
    "keywords": "Interface IErrorPolicy An error policy is used to handle errors that may occur while processing the inbound messages. Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public interface IErrorPolicy Methods | Improve this doc View source Build(IServiceProvider) Returns the actual error policy implementation, built using the provided System.IServiceProvider . Declaration IErrorPolicyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the error policy. Returns Type Description IErrorPolicyImplementation An instance of IErrorPolicyImplementation that can be used to handle the processing error."
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.IErrorPolicyImplementation.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.IErrorPolicyImplementation.html",
    "title": "Interface IErrorPolicyImplementation | Silverback",
    "keywords": "Interface IErrorPolicyImplementation An error policy is used to handle errors that may occur while processing the inbound messages. Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public interface IErrorPolicyImplementation Methods | Improve this doc View source CanHandle(ConsumerPipelineContext, Exception) Returns a boolean value indicating whether the policy can handle the specified envelopes and the specified exception. Declaration bool CanHandle(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context The ConsumerPipelineContext related to the message that failed to be processed. System.Exception exception The exception that was thrown during the processing. Returns Type Description System.Boolean A value indicating whether the specified envelopes and exception can be handled. | Improve this doc View source HandleErrorAsync(ConsumerPipelineContext, Exception) Performs the necessary actions to handle the error (including invoking the IConsumerTransactionManager ). Declaration Task<bool> HandleErrorAsync(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context The ConsumerPipelineContext related to the message that failed to be processed. System.Exception exception The exception that was thrown during the processing. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean flag indicating whether the error was handled. If false is returned the exception will be rethrown and the consumer will stop."
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy.html",
    "title": "Class MoveMessageErrorPolicy | Silverback",
    "keywords": "Class MoveMessageErrorPolicy This policy moves the message that failed to be processed to the configured endpoint. Inheritance System.Object ErrorPolicyBase RetryableErrorPolicyBase MoveMessageErrorPolicy Implements IErrorPolicy Inherited Members RetryableErrorPolicyBase.MaxFailedAttempts(Nullable<Int32>) ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Build(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class MoveMessageErrorPolicy : RetryableErrorPolicyBase, IErrorPolicy Remarks This policy can be used also to move the message at the end of the current topic to retry it later on. The number of retries can be limited using MaxFailedAttempts(Nullable<Int32>) . Constructors | Improve this doc View source MoveMessageErrorPolicy(IProducerEndpoint) Initializes a new instance of the MoveMessageErrorPolicy class. Declaration public MoveMessageErrorPolicy(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint The endpoint to move the message to. Methods | Improve this doc View source BuildCore(IServiceProvider) Declaration protected override ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description ErrorPolicyImplementation Overrides ErrorPolicyBase.BuildCore(IServiceProvider) | Improve this doc View source Transform(Action<IOutboundEnvelope, Exception>) Defines an System.Action<T> to be called to modify (or completely rewrite) the message being moved. Declaration public MoveMessageErrorPolicy Transform(Action<IOutboundEnvelope, Exception> transformationAction) Parameters Type Name Description System.Action < IOutboundEnvelope , System.Exception > transformationAction The System.Action<T> to be called to modify the message. This function can be used to modify or replace the message body and its headers. Returns Type Description MoveMessageErrorPolicy The MoveMessageErrorPolicy so that additional calls can be chained. Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.RetryableErrorPolicyBase.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.RetryableErrorPolicyBase.html",
    "title": "Class RetryableErrorPolicyBase | Silverback",
    "keywords": "Class RetryableErrorPolicyBase Builds an error policy that can be applied multiple times to the same message (e.g. RetryErrorPolicy or MoveMessageErrorPolicy ). Inheritance System.Object ErrorPolicyBase RetryableErrorPolicyBase MoveMessageErrorPolicy RetryErrorPolicy Implements IErrorPolicy Inherited Members ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Build(IServiceProvider) ErrorPolicyBase.BuildCore(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public abstract class RetryableErrorPolicyBase : ErrorPolicyBase, IErrorPolicy Methods | Improve this doc View source MaxFailedAttempts(Nullable<Int32>) Specifies how many times this rule can be applied to the same message. If multiple policies are chained in an ErrorPolicyChain then the next policy will be triggered after the allotted amount of retries. Declaration public ErrorPolicyBase MaxFailedAttempts(int? maxFailedAttempts) Parameters Type Name Description System.Nullable < System.Int32 > maxFailedAttempts The number of retries. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. Remarks The number of attempts at processing the message are stored locally, in memory and not persisted anywhere. A restart or a Kafka rebalance would cause them to reset. The messages are uniquely identified according to their IBrokerMessageIdentifier , if the message broker is providing a unique value like the Kafka offset. Otherwise the message id header value is used ( MessageId ). The mechanism will not work if no unique identifier is provided (e.g. MQTT) and no id header is sent with the message. Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.RetryErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.RetryErrorPolicy.html",
    "title": "Class RetryErrorPolicy | Silverback",
    "keywords": "Class RetryErrorPolicy This policy retries to process the message that previously failed to be to processed. An optional delay can be specified. Inheritance System.Object ErrorPolicyBase RetryableErrorPolicyBase RetryErrorPolicy Implements IErrorPolicy Inherited Members RetryableErrorPolicyBase.MaxFailedAttempts(Nullable<Int32>) ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Build(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class RetryErrorPolicy : RetryableErrorPolicyBase, IErrorPolicy Constructors | Improve this doc View source RetryErrorPolicy(Nullable<TimeSpan>, Nullable<TimeSpan>) Initializes a new instance of the RetryErrorPolicy class. Declaration public RetryErrorPolicy(TimeSpan? initialDelay = default(TimeSpan? ), TimeSpan? delayIncrement = default(TimeSpan? )) Parameters Type Name Description System.Nullable < System.TimeSpan > initialDelay The optional delay to be applied to the first retry. System.Nullable < System.TimeSpan > delayIncrement The optional increment to the delay to be applied at each retry. Methods | Improve this doc View source BuildCore(IServiceProvider) Declaration protected override ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description ErrorPolicyImplementation Overrides ErrorPolicyBase.BuildCore(IServiceProvider) Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.SkipMessageErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.SkipMessageErrorPolicy.html",
    "title": "Class SkipMessageErrorPolicy | Silverback",
    "keywords": "Class SkipMessageErrorPolicy This policy skips the message that failed to be processed. Inheritance System.Object ErrorPolicyBase SkipMessageErrorPolicy Implements IErrorPolicy Inherited Members ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Build(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class SkipMessageErrorPolicy : ErrorPolicyBase, IErrorPolicy Methods | Improve this doc View source BuildCore(IServiceProvider) Declaration protected override ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description ErrorPolicyImplementation Overrides ErrorPolicyBase.BuildCore(IServiceProvider) Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.StopConsumerErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.StopConsumerErrorPolicy.html",
    "title": "Class StopConsumerErrorPolicy | Silverback",
    "keywords": "Class StopConsumerErrorPolicy This is the default policy and it stops the consumer when an exception is thrown during the message processing. Inheritance System.Object ErrorPolicyBase StopConsumerErrorPolicy Implements IErrorPolicy Inherited Members ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Build(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class StopConsumerErrorPolicy : ErrorPolicyBase, IErrorPolicy Methods | Improve this doc View source BuildCore(IServiceProvider) Declaration protected override ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description ErrorPolicyImplementation Overrides ErrorPolicyBase.BuildCore(IServiceProvider) Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.ExactlyOnceGuardConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.ExactlyOnceGuardConsumerBehavior.html",
    "title": "Class ExactlyOnceGuardConsumerBehavior | Silverback",
    "keywords": "Class ExactlyOnceGuardConsumerBehavior Uses the configured implementation of IExactlyOnceStrategy to ensure that the message is processed only once. Inheritance System.Object ExactlyOnceGuardConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public class ExactlyOnceGuardConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ExactlyOnceGuardConsumerBehavior(IInboundLogger<ExactlyOnceGuardConsumerBehavior>) Initializes a new instance of the ExactlyOnceGuardConsumerBehavior class. Declaration public ExactlyOnceGuardConsumerBehavior(IInboundLogger<ExactlyOnceGuardConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < ExactlyOnceGuardConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.html",
    "title": "Namespace Silverback.Messaging.Inbound.ExactlyOnce | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound.ExactlyOnce Classes ExactlyOnceGuardConsumerBehavior Uses the configured implementation of IExactlyOnceStrategy to ensure that the message is processed only once. LogExactlyOnceStrategy Uses an IInboundLog to keep track of the processed message identifiers and guarantee that each message is processed only once. OffsetStoreExactlyOnceStrategy Uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Interfaces IExactlyOnceStrategy The strategy used to guarantee that each message is consumed only once. IExactlyOnceStrategyImplementation The strategy used to guarantee that each message is consumed only once."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.IExactlyOnceStrategy.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.IExactlyOnceStrategy.html",
    "title": "Interface IExactlyOnceStrategy | Silverback",
    "keywords": "Interface IExactlyOnceStrategy The strategy used to guarantee that each message is consumed only once. Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public interface IExactlyOnceStrategy Methods | Improve this doc View source Build(IServiceProvider) Returns the actual strategy implementation, built using the provided System.IServiceProvider . Declaration IExactlyOnceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the strategy. Returns Type Description IExactlyOnceStrategyImplementation An instance of IExactlyOnceStrategyImplementation that can be used to produce the messages."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.IExactlyOnceStrategyImplementation.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.IExactlyOnceStrategyImplementation.html",
    "title": "Interface IExactlyOnceStrategyImplementation | Silverback",
    "keywords": "Interface IExactlyOnceStrategyImplementation The strategy used to guarantee that each message is consumed only once. Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public interface IExactlyOnceStrategyImplementation Methods | Improve this doc View source CheckIsAlreadyProcessedAsync(ConsumerPipelineContext) Checks whether the message contained in the specified envelope was already processed and must therefore be skipped. If the message is new, this method implicitly writes its reference to the store and enlists it into the consumer transaction. Declaration Task<bool> CheckIsAlreadyProcessedAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the consumer behaviors pipeline. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the message was already processed."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.LogExactlyOnceStrategy.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.LogExactlyOnceStrategy.html",
    "title": "Class LogExactlyOnceStrategy | Silverback",
    "keywords": "Class LogExactlyOnceStrategy Uses an IInboundLog to keep track of the processed message identifiers and guarantee that each message is processed only once. Inheritance System.Object LogExactlyOnceStrategy Implements IExactlyOnceStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public class LogExactlyOnceStrategy : IExactlyOnceStrategy Methods | Improve this doc View source Build(IServiceProvider) Declaration public IExactlyOnceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description IExactlyOnceStrategyImplementation Implements IExactlyOnceStrategy"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.OffsetStoreExactlyOnceStrategy.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.OffsetStoreExactlyOnceStrategy.html",
    "title": "Class OffsetStoreExactlyOnceStrategy | Silverback",
    "keywords": "Class OffsetStoreExactlyOnceStrategy Uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Inheritance System.Object OffsetStoreExactlyOnceStrategy Implements IExactlyOnceStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public class OffsetStoreExactlyOnceStrategy : IExactlyOnceStrategy Methods | Improve this doc View source Build(IServiceProvider) Declaration public IExactlyOnceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description IExactlyOnceStrategyImplementation Implements IExactlyOnceStrategy"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.DbInboundLog.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.DbInboundLog.html",
    "title": "Class DbInboundLog | Silverback",
    "keywords": "Class DbInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. An Silverback.Database.IDbContext is used to store the log into the database. Inheritance System.Object RepositoryBase < InboundLogEntry > DbInboundLog Implements IInboundLog ITransactional Inherited Members RepositoryBase<InboundLogEntry>.DbContext RepositoryBase<InboundLogEntry>.DbSet System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public class DbInboundLog : RepositoryBase<InboundLogEntry>, IInboundLog, ITransactional Constructors | Improve this doc View source DbInboundLog(IDbContext) Initializes a new instance of the DbInboundLog class. Declaration public DbInboundLog(IDbContext dbContext) Parameters Type Name Description Silverback.Database.IDbContext dbContext The Silverback.Database.IDbContext to use as storage. Methods | Improve this doc View source AddAsync(IRawInboundEnvelope) Declaration public Task AddAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope Returns Type Description System.Threading.Tasks.Task | Improve this doc View source CommitAsync() Declaration public Task CommitAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ExistsAsync(IRawInboundEnvelope) Declaration public Task<bool> ExistsAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope Returns Type Description System.Threading.Tasks.Task < System.Boolean > | Improve this doc View source GetLengthAsync() Declaration public Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > | Improve this doc View source RollbackAsync() Declaration public Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task Implements IInboundLog ITransactional"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.DbOffsetStore.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.DbOffsetStore.html",
    "title": "Class DbOffsetStore | Silverback",
    "keywords": "Class DbOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. An Silverback.Database.IDbContext is used to store the offsets into the database. Inheritance System.Object RepositoryBase < StoredOffset > DbOffsetStore Implements IOffsetStore ITransactional Inherited Members RepositoryBase<StoredOffset>.DbContext RepositoryBase<StoredOffset>.DbSet System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public sealed class DbOffsetStore : RepositoryBase<StoredOffset>, IOffsetStore, ITransactional Constructors | Improve this doc View source DbOffsetStore(IDbContext) Initializes a new instance of the DbOffsetStore class. Declaration public DbOffsetStore(IDbContext dbContext) Parameters Type Name Description Silverback.Database.IDbContext dbContext The Silverback.Database.IDbContext to use as storage. Methods | Improve this doc View source CommitAsync() Declaration public Task CommitAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source GetLatestValueAsync(String, IConsumerEndpoint) Declaration public Task<IBrokerMessageOffset> GetLatestValueAsync(string offsetKey, IConsumerEndpoint endpoint) Parameters Type Name Description System.String offsetKey IConsumerEndpoint endpoint Returns Type Description System.Threading.Tasks.Task < IBrokerMessageOffset > | Improve this doc View source RollbackAsync() Declaration public Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source StoreAsync(IBrokerMessageOffset, IConsumerEndpoint) Declaration public Task StoreAsync(IBrokerMessageOffset offset, IConsumerEndpoint endpoint) Parameters Type Name Description IBrokerMessageOffset offset IConsumerEndpoint endpoint Returns Type Description System.Threading.Tasks.Task Implements IOffsetStore ITransactional"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.html",
    "title": "Namespace Silverback.Messaging.Inbound.ExactlyOnce.Repositories | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound.ExactlyOnce.Repositories Classes DbInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. An Silverback.Database.IDbContext is used to store the log into the database. DbOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. An Silverback.Database.IDbContext is used to store the offsets into the database. InMemoryInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. The log is simply persisted in memory. InMemoryOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. The log is simply persisted in memory. Interfaces IInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. IOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.IInboundLog.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.IInboundLog.html",
    "title": "Interface IInboundLog | Silverback",
    "keywords": "Interface IInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. Inherited Members ITransactional.CommitAsync() ITransactional.RollbackAsync() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public interface IInboundLog : ITransactional Methods | Improve this doc View source AddAsync(IRawInboundEnvelope) Add the message contained in the specified envelope to the log. Declaration Task AddAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message to be added. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExistsAsync(IRawInboundEnvelope) Returns a boolean value indicating whether this very same message has already been logged for the same consumer group. Declaration Task<bool> ExistsAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message to be checked. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the message was found in the log. | Improve this doc View source GetLengthAsync() Returns the total number of messages in the log. Declaration Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the result of the asynchronous operation. The task result contains the log length."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.InMemoryInboundLog.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.InMemoryInboundLog.html",
    "title": "Class InMemoryInboundLog | Silverback",
    "keywords": "Class InMemoryInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. The log is simply persisted in memory. Inheritance System.Object TransactionalList < InboundLogEntry > InMemoryInboundLog Implements IInboundLog ITransactional Inherited Members TransactionalList<InboundLogEntry>.CommittedItemsCount TransactionalList<InboundLogEntry>.Items TransactionalList<InboundLogEntry>.UncommittedItems TransactionalList<InboundLogEntry>.CommitAsync() TransactionalList<InboundLogEntry>.RollbackAsync() TransactionalList<InboundLogEntry>.AddAsync(InboundLogEntry) TransactionalList<InboundLogEntry>.RemoveAsync(InboundLogEntry) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public class InMemoryInboundLog : TransactionalList<InboundLogEntry>, IInboundLog, ITransactional Constructors | Improve this doc View source InMemoryInboundLog(TransactionalListSharedItems<InboundLogEntry>) Initializes a new instance of the InMemoryInboundLog class. Declaration public InMemoryInboundLog(TransactionalListSharedItems<InboundLogEntry> sharedItems) Parameters Type Name Description TransactionalListSharedItems < InboundLogEntry > sharedItems The log entries shared between the instances of this repository. Methods | Improve this doc View source AddAsync(IRawInboundEnvelope) Declaration public Task AddAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ExistsAsync(IRawInboundEnvelope) Declaration public Task<bool> ExistsAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope Returns Type Description System.Threading.Tasks.Task < System.Boolean > | Improve this doc View source GetLengthAsync() Declaration public Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > Implements IInboundLog ITransactional"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.InMemoryOffsetStore.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.InMemoryOffsetStore.html",
    "title": "Class InMemoryOffsetStore | Silverback",
    "keywords": "Class InMemoryOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. The log is simply persisted in memory. Inheritance System.Object TransactionalDictionary < System.String , IBrokerMessageOffset > InMemoryOffsetStore Implements IOffsetStore ITransactional Inherited Members TransactionalDictionary<String, IBrokerMessageOffset>.CommittedItemsCount TransactionalDictionary<String, IBrokerMessageOffset>.Items TransactionalDictionary<String, IBrokerMessageOffset>.UncommittedItems TransactionalDictionary<String, IBrokerMessageOffset>.CommitAsync() TransactionalDictionary<String, IBrokerMessageOffset>.RollbackAsync() TransactionalDictionary<String, IBrokerMessageOffset>.AddOrReplaceAsync(String, IBrokerMessageOffset) TransactionalDictionary<String, IBrokerMessageOffset>.RemoveAsync(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public class InMemoryOffsetStore : TransactionalDictionary<string, IBrokerMessageOffset>, IOffsetStore, ITransactional Constructors | Improve this doc View source InMemoryOffsetStore(TransactionalDictionarySharedItems<String, IBrokerMessageOffset>) Initializes a new instance of the InMemoryOffsetStore class. Declaration public InMemoryOffsetStore(TransactionalDictionarySharedItems<string, IBrokerMessageOffset> sharedItems) Parameters Type Name Description TransactionalDictionarySharedItems < System.String , IBrokerMessageOffset > sharedItems The offsets shared between the instances of this repository. Methods | Improve this doc View source GetLatestValueAsync(String, IConsumerEndpoint) Declaration public Task<IBrokerMessageOffset> GetLatestValueAsync(string offsetKey, IConsumerEndpoint endpoint) Parameters Type Name Description System.String offsetKey IConsumerEndpoint endpoint Returns Type Description System.Threading.Tasks.Task < IBrokerMessageOffset > | Improve this doc View source StoreAsync(IBrokerMessageOffset, IConsumerEndpoint) Declaration public Task StoreAsync(IBrokerMessageOffset offset, IConsumerEndpoint endpoint) Parameters Type Name Description IBrokerMessageOffset offset IConsumerEndpoint endpoint Returns Type Description System.Threading.Tasks.Task Implements IOffsetStore ITransactional"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.IOffsetStore.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.IOffsetStore.html",
    "title": "Interface IOffsetStore | Silverback",
    "keywords": "Interface IOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. Inherited Members ITransactional.CommitAsync() ITransactional.RollbackAsync() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public interface IOffsetStore : ITransactional Methods | Improve this doc View source GetLatestValueAsync(String, IConsumerEndpoint) Returns the latest recorded offset value for the specified offset key and endpoint. Declaration Task<IBrokerMessageOffset> GetLatestValueAsync(string offsetKey, IConsumerEndpoint endpoint) Parameters Type Name Description System.String offsetKey The key of the offset to be retrieved. The offset key uniquely identifies the queue, topic or partition. IConsumerEndpoint endpoint The endpoint for which the recorded offset has to be be returned. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageOffset > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the latest offset. | Improve this doc View source StoreAsync(IBrokerMessageOffset, IConsumerEndpoint) Stores the offset of the processed message. Declaration Task StoreAsync(IBrokerMessageOffset offset, IConsumerEndpoint endpoint) Parameters Type Name Description IBrokerMessageOffset offset The offset to be stored. IConsumerEndpoint endpoint The endpoint the offset belongs to. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Inbound.html": {
    "href": "api/Silverback.Messaging.Inbound.html",
    "title": "Namespace Silverback.Messaging.Inbound | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound Classes PublisherConsumerBehavior Publishes the consumed messages to the internal bus."
  },
  "api/Silverback.Messaging.Inbound.PublisherConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Inbound.PublisherConsumerBehavior.html",
    "title": "Class PublisherConsumerBehavior | Silverback",
    "keywords": "Class PublisherConsumerBehavior Publishes the consumed messages to the internal bus. Inheritance System.Object PublisherConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound Assembly : Silverback.Integration.dll Syntax public sealed class PublisherConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source PublisherConsumerBehavior(IInboundLogger<PublisherConsumerBehavior>) Initializes a new instance of the PublisherConsumerBehavior class. Declaration public PublisherConsumerBehavior(IInboundLogger<PublisherConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < PublisherConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Inbound.Transaction.ConsumerTransactionManager.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.ConsumerTransactionManager.html",
    "title": "Class ConsumerTransactionManager | Silverback",
    "keywords": "Class ConsumerTransactionManager Inheritance System.Object ConsumerTransactionManager Implements IConsumerTransactionManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.Transaction Assembly : Silverback.Integration.dll Syntax public sealed class ConsumerTransactionManager : IConsumerTransactionManager Constructors | Improve this doc View source ConsumerTransactionManager(ConsumerPipelineContext, IInboundLogger<ConsumerTransactionManager>) Initializes a new instance of the ConsumerTransactionManager class. Declaration public ConsumerTransactionManager(ConsumerPipelineContext context, IInboundLogger<ConsumerTransactionManager> logger) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . IInboundLogger < ConsumerTransactionManager > logger The Silverback.Diagnostics.ISilverbackLogger . Properties | Improve this doc View source IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source CommitAsync() Declaration public Task CommitAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source Enlist(ITransactional) Declaration public void Enlist(ITransactional transactionalService) Parameters Type Name Description ITransactional transactionalService | Improve this doc View source RollbackAsync(Exception, Boolean, Boolean, Boolean) Declaration public Task<bool> RollbackAsync(Exception exception, bool commitConsumer = false, bool throwIfAlreadyCommitted = true, bool stopConsuming = true) Parameters Type Name Description System.Exception exception System.Boolean commitConsumer System.Boolean throwIfAlreadyCommitted System.Boolean stopConsuming Returns Type Description System.Threading.Tasks.Task < System.Boolean > Implements IConsumerTransactionManager"
  },
  "api/Silverback.Messaging.Inbound.Transaction.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.html",
    "title": "Namespace Silverback.Messaging.Inbound.Transaction | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound.Transaction Classes ConsumerTransactionManager TransactionHandlerConsumerBehavior Handles the consumer transaction and applies the error policies. Interfaces IConsumerTransactionManager Handles the consumer transaction. It commits or rolls back both the consumer and the enlisted transactional services (see ITransactional ). ITransactional Declares the CommitAsync and RollbackAsync methods, allowing the service to be enlisted into the consumer transaction (see ConsumerTransactionManager )."
  },
  "api/Silverback.Messaging.Inbound.Transaction.IConsumerTransactionManager.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.IConsumerTransactionManager.html",
    "title": "Interface IConsumerTransactionManager | Silverback",
    "keywords": "Interface IConsumerTransactionManager Handles the consumer transaction. It commits or rolls back both the consumer and the enlisted transactional services (see ITransactional ). Namespace : Silverback.Messaging.Inbound.Transaction Assembly : Silverback.Integration.dll Syntax public interface IConsumerTransactionManager Properties | Improve this doc View source IsCompleted Gets a value indicating whether the transaction has completed. Declaration bool IsCompleted { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source CommitAsync() Commits the transaction. Declaration Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Enlist(ITransactional) Adds the specified service to the transaction participants to be called upon commit or rollback. Declaration void Enlist(ITransactional transactionalService) Parameters Type Name Description ITransactional transactionalService The service to be enlisted. | Improve this doc View source RollbackAsync(Exception, Boolean, Boolean, Boolean) Aborts the transaction and causes the uncommitted changes to be rolled back. Declaration Task<bool> RollbackAsync(Exception exception, bool commitConsumer = false, bool throwIfAlreadyCommitted = true, bool stopConsuming = true) Parameters Type Name Description System.Exception exception The exception that caused the rollback. System.Boolean commitConsumer A value indicating whether the consumer have to be committed anyway. This depends on the error policy being applied. System.Boolean throwIfAlreadyCommitted A value indicating whether an exception must be thrown if the transaction was already committed. System.Boolean stopConsuming A value indicating whether the consumer must be stopped. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the rollback was performed."
  },
  "api/Silverback.Messaging.Inbound.Transaction.ITransactional.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.ITransactional.html",
    "title": "Interface ITransactional | Silverback",
    "keywords": "Interface ITransactional Declares the CommitAsync and RollbackAsync methods, allowing the service to be enlisted into the consumer transaction (see ConsumerTransactionManager ). Namespace : Silverback.Messaging.Inbound.Transaction Assembly : Silverback.Integration.dll Syntax public interface ITransactional Methods | Improve this doc View source CommitAsync() Called when the message has been successfully processed to commit the transaction. Declaration Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync() Called when an exception occurs during the message processing to rollback the transaction. Declaration Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Inbound.Transaction.TransactionHandlerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.TransactionHandlerConsumerBehavior.html",
    "title": "Class TransactionHandlerConsumerBehavior | Silverback",
    "keywords": "Class TransactionHandlerConsumerBehavior Handles the consumer transaction and applies the error policies. Inheritance System.Object TransactionHandlerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.Transaction Assembly : Silverback.Integration.dll Syntax public class TransactionHandlerConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source TransactionHandlerConsumerBehavior(IInboundLogger<TransactionHandlerConsumerBehavior>) Initializes a new instance of the TransactionHandlerConsumerBehavior class. Declaration public TransactionHandlerConsumerBehavior(IInboundLogger<TransactionHandlerConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < TransactionHandlerConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.IProducerEndpoint.html": {
    "href": "api/Silverback.Messaging.IProducerEndpoint.html",
    "title": "Interface IProducerEndpoint | Silverback",
    "keywords": "Interface IProducerEndpoint Represents a message broker endpoint to produce to (such as a Kafka topic or RabbitMQ queue or exchange). Inherited Members IEndpoint.Name IEndpoint.DisplayName IEndpoint.Serializer IEndpoint.Encryption IEndpoint.FriendlyName IEndpoint.MessageValidationMode IEndpoint.Validate() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public interface IProducerEndpoint : IEndpoint Properties | Improve this doc View source Chunk Gets the message chunking settings. This option can be used to split large messages into smaller chunks. Declaration ChunkSettings Chunk { get; } Property Value Type Description ChunkSettings | Improve this doc View source MessageEnrichers Gets the collection of IOutboundMessageEnricher to be used to enrich the outbound message. Declaration IReadOnlyCollection<IOutboundMessageEnricher> MessageEnrichers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundMessageEnricher > | Improve this doc View source Strategy Gets the strategy to be used to produce the messages. If no strategy is specified, the messages will be sent to the message broker directly. Declaration IProduceStrategy Strategy { get; } Property Value Type Description IProduceStrategy Methods | Improve this doc View source GetActualName(IOutboundEnvelope, IServiceProvider) Gets the actual target endpoint name for the message being produced. Declaration string GetActualName(IOutboundEnvelope envelope, IServiceProvider serviceProvider) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message being produced. System.IServiceProvider serviceProvider The System.IServiceProvider in the current scope. Returns Type Description System.String The actual name of the endpoint to be produced to."
  },
  "api/Silverback.Messaging.IRawMessageTransformer.html": {
    "href": "api/Silverback.Messaging.IRawMessageTransformer.html",
    "title": "Interface IRawMessageTransformer | Silverback",
    "keywords": "Interface IRawMessageTransformer The base class for all services that transform the inbound or outbound raw binary. Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public interface IRawMessageTransformer Methods | Improve this doc View source TransformAsync(Stream, MessageHeaderCollection) Transforms the specified message. Declaration Task<Stream> TransformAsync(Stream message, MessageHeaderCollection headers) Parameters Type Name Description System.IO.Stream message The System.IO.Stream containing the message to be transformed. MessageHeaderCollection headers The headers collections (can be modified by the transformer). Returns Type Description System.Threading.Tasks.Task < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with transformed message."
  },
  "api/Silverback.Messaging.Messages.BinaryFileMessage.html": {
    "href": "api/Silverback.Messaging.Messages.BinaryFileMessage.html",
    "title": "Class BinaryFileMessage | Silverback",
    "keywords": "Class BinaryFileMessage Inheritance System.Object BinaryFileMessage Implements IBinaryFileMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public class BinaryFileMessage : IBinaryFileMessage Constructors | Improve this doc View source BinaryFileMessage() Initializes a new instance of the BinaryFileMessage class. Declaration public BinaryFileMessage() | Improve this doc View source BinaryFileMessage(Byte[], String) Initializes a new instance of the BinaryFileMessage class with the specified content. Declaration public BinaryFileMessage(byte[] content, string contentType = \"application/octet-stream\") Parameters Type Name Description System.Byte [] content The binary content. System.String contentType The optional MIME type. | Improve this doc View source BinaryFileMessage(Stream, String) Initializes a new instance of the BinaryFileMessage class with the specified content. Declaration public BinaryFileMessage(Stream content, string contentType = \"application/octet-stream\") Parameters Type Name Description System.IO.Stream content The binary content. System.String contentType The optional MIME type. Properties | Improve this doc View source Content Declaration public Stream Content { get; set; } Property Value Type Description System.IO.Stream | Improve this doc View source ContentType Gets or sets the MIME type of the file. Declaration [Header(\"content-type\")] public string ContentType { get; set; } Property Value Type Description System.String Implements IBinaryFileMessage"
  },
  "api/Silverback.Messaging.Messages.DefaultMessageHeaders.html": {
    "href": "api/Silverback.Messaging.Messages.DefaultMessageHeaders.html",
    "title": "Class DefaultMessageHeaders | Silverback",
    "keywords": "Class DefaultMessageHeaders Contains the constants with the names of the standard message headers used by Silverback. Inheritance System.Object DefaultMessageHeaders Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public static class DefaultMessageHeaders Fields | Improve this doc View source ChunkIndex The message chunk index, used when chunking is enabled. Declaration public const string ChunkIndex = \"x-chunk-index\" Field Value Type Description System.String | Improve this doc View source ChunksCount The total number of chunks the message was split into, used when chunking is enabled. Declaration public const string ChunksCount = \"x-chunk-count\" Field Value Type Description System.String | Improve this doc View source ContentType The MIME type of a binary file. See IBinaryFileMessage . Declaration public const string ContentType = \"content-type\" Field Value Type Description System.String | Improve this doc View source EncryptionKeyId The encryption key identifier. Declaration public const string EncryptionKeyId = \"x-encryption-key-id\" Field Value Type Description System.String Remarks The header is required for the key rotation feature. When rotating keys, it will be used on the consumer side to determine the correct key to be used to decrypt the message. | Improve this doc View source FailedAttempts If an exception if thrown the failed attempts will be incremented and stored as header. This is necessary for the error policies to work. Declaration public const string FailedAttempts = \"x-failed-attempts\" Field Value Type Description System.String | Improve this doc View source FirstChunkOffset The IBrokerMessageOffset value of the first chunk of the same message, used when chunking is enabled. Declaration public const string FirstChunkOffset = \"x-chunk-first-offset\" Field Value Type Description System.String | Improve this doc View source IsLastChunk A boolean value indicating whether the message is the last one of a chunks sequence, used when chunking is enabled. Declaration public const string IsLastChunk = \"x-chunk-last\" Field Value Type Description System.String | Improve this doc View source MessageId The message identifier. Declaration public const string MessageId = \"x-message-id\" Field Value Type Description System.String | Improve this doc View source MessageType The assembly qualified name of the message type. Used by the default JsonMessageSerializer . Declaration public const string MessageType = \"x-message-type\" Field Value Type Description System.String | Improve this doc View source SourceEndpoint This will be set by the Move error policy and will contain the name of the endpoint the failed message is being moved from. Declaration public const string SourceEndpoint = \"x-source-endpoint\" Field Value Type Description System.String | Improve this doc View source TraceBaggage Used for distributed tracing. It corresponds to the string representation of the Activity.Baggage dictionary. Declaration public const string TraceBaggage = \"tracebaggage\" Field Value Type Description System.String Remarks This is not part of the w3c standard. | Improve this doc View source TraceId Used for distributed tracing. It is set by the IProducer using the current Activity.Id . The IConsumer uses it's value to set the Activity.ParentId . Note that an Activity is automatically started by the default IProducer implementation. Declaration public const string TraceId = \"traceparent\" Field Value Type Description System.String Remarks The header is implemented according to the W3C Trace Context proposal ( https://www.w3.org/TR/trace-context-1/#traceparent-header ). | Improve this doc View source TraceState Used for distributed tracing. It corresponds to the Activity.TraceStateString . Declaration public const string TraceState = \"tracestate\" Field Value Type Description System.String Remarks The header is implemented according to the W3C Trace Context proposal ( https://www.w3.org/TR/trace-context-1/#tracestate-header )."
  },
  "api/Silverback.Messaging.Messages.EnvelopeFactory.html": {
    "href": "api/Silverback.Messaging.Messages.EnvelopeFactory.html",
    "title": "Class EnvelopeFactory | Silverback",
    "keywords": "Class EnvelopeFactory Can be used to instantiate an IOutboundEnvelope or an IInboundEnvelope . Inheritance System.Object EnvelopeFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public static class EnvelopeFactory Methods | Improve this doc View source Create(Byte[], MessageHeaderCollection, IConsumerEndpoint, IBrokerMessageIdentifier) Creates an IRawInboundEnvelope . Declaration public static IRawInboundEnvelope Create(byte[] rawMessage, MessageHeaderCollection headers, IConsumerEndpoint endpoint, IBrokerMessageIdentifier identifier) Parameters Type Name Description System.Byte [] rawMessage The raw message body. MessageHeaderCollection headers The message headers. IConsumerEndpoint endpoint The source endpoint. IBrokerMessageIdentifier identifier The IBrokerMessageIdentifier . Returns Type Description IRawInboundEnvelope An IInboundEnvelope<TMessage> containing the specified message. | Improve this doc View source Create(Stream, MessageHeaderCollection, IConsumerEndpoint, IBrokerMessageIdentifier) Creates an IRawInboundEnvelope . Declaration public static IRawInboundEnvelope Create(Stream rawMessageStream, MessageHeaderCollection headers, IConsumerEndpoint endpoint, IBrokerMessageIdentifier identifier) Parameters Type Name Description System.IO.Stream rawMessageStream The raw message body. MessageHeaderCollection headers The message headers. IConsumerEndpoint endpoint The source endpoint. IBrokerMessageIdentifier identifier The IBrokerMessageIdentifier . Returns Type Description IRawInboundEnvelope An IInboundEnvelope<TMessage> containing the specified message. | Improve this doc View source Create<TMessage>(TMessage, IRawInboundEnvelope) Creates an IInboundEnvelope<TMessage> copying another envelope and replacing just the deserialized message. Declaration public static IInboundEnvelope<TMessage> Create<TMessage>(TMessage message, IRawInboundEnvelope rawInboundEnvelope) where TMessage : class Parameters Type Name Description TMessage message The message to be wrapped in the envelope. IRawInboundEnvelope rawInboundEnvelope The envelope to be copied. Returns Type Description IInboundEnvelope <TMessage> An IInboundEnvelope<TMessage> containing the specified message. Type Parameters Name Description TMessage The type of the message being wrapped. | Improve this doc View source Create<TMessage>(TMessage, MessageHeaderCollection, IProducerEndpoint) Creates an IOutboundEnvelope<TMessage> . Declaration public static IOutboundEnvelope<TMessage> Create<TMessage>(TMessage message, MessageHeaderCollection headers, IProducerEndpoint endpoint) where TMessage : class Parameters Type Name Description TMessage message The message to be wrapped in the envelope. MessageHeaderCollection headers The message headers. IProducerEndpoint endpoint The destination endpoint. Returns Type Description IOutboundEnvelope <TMessage> An IOutboundEnvelope<TMessage> containing the specified message. Type Parameters Name Description TMessage The type of the message being wrapped."
  },
  "api/Silverback.Messaging.Messages.HeaderAttribute.html": {
    "href": "api/Silverback.Messaging.Messages.HeaderAttribute.html",
    "title": "Class HeaderAttribute | Silverback",
    "keywords": "Class HeaderAttribute Used to decorate a property which value must be produced/consumed as message header. Inheritance System.Object System.Attribute HeaderAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class HeaderAttribute : Attribute Constructors | Improve this doc View source HeaderAttribute(String) Initializes a new instance of the HeaderAttribute class specifying the name of the header. When a property is decorated with this attribute its value will be produced/consumed as message header. Declaration public HeaderAttribute(string headerName) Parameters Type Name Description System.String headerName The name of the header. Properties | Improve this doc View source HeaderName Gets the name of the header. Declaration public string HeaderName { get; } Property Value Type Description System.String | Improve this doc View source PublishDefaultValue Gets or sets a value indicating whether the header must be produced even if the property is set to the default value for its declaring type. Declaration public bool PublishDefaultValue { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Silverback.Messaging.Messages.html": {
    "href": "api/Silverback.Messaging.Messages.html",
    "title": "Namespace Silverback.Messaging.Messages | Silverback",
    "keywords": "Namespace Silverback.Messaging.Messages Classes BinaryFileMessage DefaultMessageHeaders Contains the constants with the names of the standard message headers used by Silverback. EnvelopeFactory Can be used to instantiate an IOutboundEnvelope or an IInboundEnvelope . HeaderAttribute Used to decorate a property which value must be produced/consumed as message header. MessageHeader An header added to the message being sent over a message broker. MessageHeaderCollection A modifiable collection of message headers. MessageHeaderEnumerableExtensions Add some helper methods to the System.Collections.Generic.IEnumerable<T> of MessageHeader . Tombstone Represents a tombstone message (a message with null body). Tombstone<TMessage> Represents a tombstone message (a message with null body). Interfaces IBinaryFileMessage Represents a binary file that is being transferred over the message broker. IBrokerEnvelope Wraps the deserialized inbound or outbound message. ICommand Represents a message that triggers an action. ICommand<TResult> Represents a message that triggers an action with a result TResult . IEvent Represents a message that notifies an event. IInboundEnvelope IInboundEnvelope<TMessage> IIntegrationCommand Represents a message that is sent over the message broker to trigger an action. IIntegrationEvent Represents a message that is sent over the message broker to notify an event. IIntegrationMessage Represents a message that is sent over the message broker. It is further specialized as IIntegrationEvent and IIntegrationCommand . IOutboundEnvelope IOutboundEnvelope<TMessage> IQuery<TResult> Represents a message that queries a result of type TResult . IRawBrokerEnvelope Wraps the serialized inbound or outbound message. IRawInboundEnvelope Wraps the message that is being consumed from an inbound endpoint. IRawOutboundEnvelope Wraps the message that is being produced to an outbound endpoint."
  },
  "api/Silverback.Messaging.Messages.IBinaryFileMessage.html": {
    "href": "api/Silverback.Messaging.Messages.IBinaryFileMessage.html",
    "title": "Interface IBinaryFileMessage | Silverback",
    "keywords": "Interface IBinaryFileMessage Represents a binary file that is being transferred over the message broker. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IBinaryFileMessage Properties | Improve this doc View source Content Gets or sets the binary content. Declaration Stream Content { get; set; } Property Value Type Description System.IO.Stream"
  },
  "api/Silverback.Messaging.Messages.IBrokerEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IBrokerEnvelope.html",
    "title": "Interface IBrokerEnvelope | Silverback",
    "keywords": "Interface IBrokerEnvelope Wraps the deserialized inbound or outbound message. Inherited Members IRawBrokerEnvelope.Headers IRawBrokerEnvelope.Endpoint IRawBrokerEnvelope.RawMessage Silverback.Messaging.Messages.IEnvelope.AutoUnwrap Silverback.Messaging.Messages.IEnvelope.Message Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IBrokerEnvelope : IRawBrokerEnvelope, IEnvelope"
  },
  "api/Silverback.Messaging.Messages.ICommand.html": {
    "href": "api/Silverback.Messaging.Messages.ICommand.html",
    "title": "Interface ICommand | Silverback",
    "keywords": "Interface ICommand Represents a message that triggers an action. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface ICommand : IMessage"
  },
  "api/Silverback.Messaging.Messages.ICommand-1.html": {
    "href": "api/Silverback.Messaging.Messages.ICommand-1.html",
    "title": "Interface ICommand<TResult> | Silverback",
    "keywords": "Interface ICommand<TResult> Represents a message that triggers an action with a result TResult . Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface ICommand<out TResult> : ICommand, IMessage Type Parameters Name Description TResult The type of the result being returned."
  },
  "api/Silverback.Messaging.Messages.IEvent.html": {
    "href": "api/Silverback.Messaging.Messages.IEvent.html",
    "title": "Interface IEvent | Silverback",
    "keywords": "Interface IEvent Represents a message that notifies an event. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IEvent : IMessage"
  },
  "api/Silverback.Messaging.Messages.IInboundEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IInboundEnvelope.html",
    "title": "Interface IInboundEnvelope | Silverback",
    "keywords": "Interface IInboundEnvelope Inherited Members Silverback.Messaging.Messages.IEnvelope.AutoUnwrap Silverback.Messaging.Messages.IEnvelope.Message IRawInboundEnvelope.ActualEndpointName IRawInboundEnvelope.ActualEndpointDisplayName IRawInboundEnvelope.BrokerMessageIdentifier IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IInboundEnvelope : IBrokerEnvelope, IEnvelope, IRawInboundEnvelope, IRawBrokerEnvelope Properties | Improve this doc View source Endpoint Gets the source endpoint configuration. Declaration IConsumerEndpoint Endpoint { get; } Property Value Type Description IConsumerEndpoint"
  },
  "api/Silverback.Messaging.Messages.IInboundEnvelope-1.html": {
    "href": "api/Silverback.Messaging.Messages.IInboundEnvelope-1.html",
    "title": "Interface IInboundEnvelope<TMessage> | Silverback",
    "keywords": "Interface IInboundEnvelope<TMessage> Inherited Members IInboundEnvelope.Endpoint Silverback.Messaging.Messages.IEnvelope.AutoUnwrap IRawInboundEnvelope.ActualEndpointName IRawInboundEnvelope.ActualEndpointDisplayName IRawInboundEnvelope.BrokerMessageIdentifier IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IInboundEnvelope<out TMessage> : IInboundEnvelope, IBrokerEnvelope, IEnvelope, IRawInboundEnvelope, IRawBrokerEnvelope where TMessage : class Type Parameters Name Description TMessage Properties | Improve this doc View source Message Gets the deserialized message body. Declaration TMessage Message { get; } Property Value Type Description TMessage"
  },
  "api/Silverback.Messaging.Messages.IIntegrationCommand.html": {
    "href": "api/Silverback.Messaging.Messages.IIntegrationCommand.html",
    "title": "Interface IIntegrationCommand | Silverback",
    "keywords": "Interface IIntegrationCommand Represents a message that is sent over the message broker to trigger an action. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IIntegrationCommand : ICommand, IIntegrationMessage, IMessage"
  },
  "api/Silverback.Messaging.Messages.IIntegrationEvent.html": {
    "href": "api/Silverback.Messaging.Messages.IIntegrationEvent.html",
    "title": "Interface IIntegrationEvent | Silverback",
    "keywords": "Interface IIntegrationEvent Represents a message that is sent over the message broker to notify an event. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IIntegrationEvent : IEvent, IIntegrationMessage, IMessage"
  },
  "api/Silverback.Messaging.Messages.IIntegrationMessage.html": {
    "href": "api/Silverback.Messaging.Messages.IIntegrationMessage.html",
    "title": "Interface IIntegrationMessage | Silverback",
    "keywords": "Interface IIntegrationMessage Represents a message that is sent over the message broker. It is further specialized as IIntegrationEvent and IIntegrationCommand . Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IIntegrationMessage : IMessage"
  },
  "api/Silverback.Messaging.Messages.IOutboundEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IOutboundEnvelope.html",
    "title": "Interface IOutboundEnvelope | Silverback",
    "keywords": "Interface IOutboundEnvelope Inherited Members Silverback.Messaging.Messages.IEnvelope.AutoUnwrap Silverback.Messaging.Messages.IEnvelope.Message IRawOutboundEnvelope.Endpoint IRawOutboundEnvelope.BrokerMessageIdentifier IRawOutboundEnvelope.ActualEndpointName IRawOutboundEnvelope.ActualEndpointDisplayName IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IOutboundEnvelope : IBrokerEnvelope, IEnvelope, IRawOutboundEnvelope, IRawBrokerEnvelope"
  },
  "api/Silverback.Messaging.Messages.IOutboundEnvelope-1.html": {
    "href": "api/Silverback.Messaging.Messages.IOutboundEnvelope-1.html",
    "title": "Interface IOutboundEnvelope<TMessage> | Silverback",
    "keywords": "Interface IOutboundEnvelope<TMessage> Inherited Members Silverback.Messaging.Messages.IEnvelope.AutoUnwrap IRawOutboundEnvelope.Endpoint IRawOutboundEnvelope.BrokerMessageIdentifier IRawOutboundEnvelope.ActualEndpointName IRawOutboundEnvelope.ActualEndpointDisplayName IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IOutboundEnvelope<out TMessage> : IOutboundEnvelope, IBrokerEnvelope, IEnvelope, IRawOutboundEnvelope, IRawBrokerEnvelope where TMessage : class Type Parameters Name Description TMessage Properties | Improve this doc View source Message Gets the deserialized message body. Declaration TMessage Message { get; } Property Value Type Description TMessage"
  },
  "api/Silverback.Messaging.Messages.IQuery-1.html": {
    "href": "api/Silverback.Messaging.Messages.IQuery-1.html",
    "title": "Interface IQuery<TResult> | Silverback",
    "keywords": "Interface IQuery<TResult> Represents a message that queries a result of type TResult . Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IQuery<out TResult> : IMessage Type Parameters Name Description TResult The type of the result being returned."
  },
  "api/Silverback.Messaging.Messages.IRawBrokerEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IRawBrokerEnvelope.html",
    "title": "Interface IRawBrokerEnvelope | Silverback",
    "keywords": "Interface IRawBrokerEnvelope Wraps the serialized inbound or outbound message. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IRawBrokerEnvelope Properties | Improve this doc View source Endpoint Gets the source or destination endpoint. Declaration IEndpoint Endpoint { get; } Property Value Type Description IEndpoint | Improve this doc View source Headers Gets the optional message headers. Declaration MessageHeaderCollection Headers { get; } Property Value Type Description MessageHeaderCollection | Improve this doc View source RawMessage Gets or sets the serialized message body. Declaration Stream RawMessage { get; set; } Property Value Type Description System.IO.Stream"
  },
  "api/Silverback.Messaging.Messages.IRawInboundEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IRawInboundEnvelope.html",
    "title": "Interface IRawInboundEnvelope | Silverback",
    "keywords": "Interface IRawInboundEnvelope Wraps the message that is being consumed from an inbound endpoint. Inherited Members IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IRawInboundEnvelope : IRawBrokerEnvelope Properties | Improve this doc View source ActualEndpointDisplayName Gets the name to actual source endpoint ( ActualEndpointName ) to be displayed in the human-targeted output (e.g. logs, health checks result, etc.). Declaration string ActualEndpointDisplayName { get; } Property Value Type Description System.String | Improve this doc View source ActualEndpointName Gets the name of the actual source endpoint (in case the Endpoint configuration points to multiple endpoints, for example if consuming multiple topics with a single KafkaConsumer ). Declaration string ActualEndpointName { get; } Property Value Type Description System.String | Improve this doc View source BrokerMessageIdentifier Gets the message identifier on the message broker (the Kafka offset or similar). Declaration IBrokerMessageIdentifier BrokerMessageIdentifier { get; } Property Value Type Description IBrokerMessageIdentifier | Improve this doc View source Endpoint Gets the source endpoint. Declaration IConsumerEndpoint Endpoint { get; } Property Value Type Description IConsumerEndpoint"
  },
  "api/Silverback.Messaging.Messages.IRawOutboundEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IRawOutboundEnvelope.html",
    "title": "Interface IRawOutboundEnvelope | Silverback",
    "keywords": "Interface IRawOutboundEnvelope Wraps the message that is being produced to an outbound endpoint. Inherited Members IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IRawOutboundEnvelope : IRawBrokerEnvelope Properties | Improve this doc View source ActualEndpointDisplayName Gets the name to actual target endpoint ( ActualEndpointName ) to be displayed in the human-targeted output (e.g. logs, health checks result, etc.). Declaration string ActualEndpointDisplayName { get; } Property Value Type Description System.String | Improve this doc View source ActualEndpointName Gets the name of the actual target endpoint resolved by the GetActualName(IOutboundEnvelope, IServiceProvider) method. Declaration string ActualEndpointName { get; } Property Value Type Description System.String | Improve this doc View source BrokerMessageIdentifier Gets the message identifier on the message broker (the Kafka offset or similar). Declaration IBrokerMessageIdentifier BrokerMessageIdentifier { get; } Property Value Type Description IBrokerMessageIdentifier Remarks The identifier value will be set only after the message has been successfully published to the message broker. | Improve this doc View source Endpoint Gets the destination endpoint. Declaration IProducerEndpoint Endpoint { get; } Property Value Type Description IProducerEndpoint"
  },
  "api/Silverback.Messaging.Messages.MessageHeader.html": {
    "href": "api/Silverback.Messaging.Messages.MessageHeader.html",
    "title": "Class MessageHeader | Silverback",
    "keywords": "Class MessageHeader An header added to the message being sent over a message broker. Inheritance System.Object MessageHeader Implements System.IEquatable < MessageHeader > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public sealed class MessageHeader : IEquatable<MessageHeader> Constructors | Improve this doc View source MessageHeader(String, Object) Initializes a new instance of the MessageHeader class. Declaration public MessageHeader(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. | Improve this doc View source MessageHeader(String, String) Initializes a new instance of the MessageHeader class. Declaration [JsonConstructor] public MessageHeader(string name, string value) Parameters Type Name Description System.String name The header name. System.String value The header value. Properties | Improve this doc View source Name Gets or sets the header name. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this doc View source Value Gets or sets the header value. Declaration public string Value { get; set; } Property Value Type Description System.String Methods | Improve this doc View source Equals(MessageHeader) Declaration public bool Equals(MessageHeader other) Parameters Type Name Description MessageHeader other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Operators | Improve this doc View source Equality(MessageHeader, MessageHeader) Declaration public static bool operator ==(MessageHeader left, MessageHeader right) Parameters Type Name Description MessageHeader left MessageHeader right Returns Type Description System.Boolean | Improve this doc View source Inequality(MessageHeader, MessageHeader) Declaration public static bool operator !=(MessageHeader left, MessageHeader right) Parameters Type Name Description MessageHeader left MessageHeader right Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Messages.MessageHeaderCollection.html": {
    "href": "api/Silverback.Messaging.Messages.MessageHeaderCollection.html",
    "title": "Class MessageHeaderCollection | Silverback",
    "keywords": "Class MessageHeaderCollection A modifiable collection of message headers. Inheritance System.Object MessageHeaderCollection Implements System.Collections.Generic.IReadOnlyList < MessageHeader > System.Collections.Generic.IReadOnlyCollection < MessageHeader > System.Collections.Generic.IEnumerable < MessageHeader > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public class MessageHeaderCollection : IReadOnlyList<MessageHeader>, IReadOnlyCollection<MessageHeader>, IEnumerable<MessageHeader>, IEnumerable Constructors | Improve this doc View source MessageHeaderCollection(IReadOnlyCollection<MessageHeader>) Initializes a new instance of the MessageHeaderCollection class. Declaration public MessageHeaderCollection(IReadOnlyCollection<MessageHeader> headers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The headers to be added to the collection. | Improve this doc View source MessageHeaderCollection(Int32) Initializes a new instance of the MessageHeaderCollection class. Declaration public MessageHeaderCollection(int capacity = 0) Parameters Type Name Description System.Int32 capacity The initial capacity of the backing System.Collections.Generic.List`1 . Properties | Improve this doc View source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this doc View source Item[Int32] Gets the header at the specified index in the collection. Declaration public MessageHeader this[int index] { get; } Parameters Type Name Description System.Int32 index The index in the collection. Property Value Type Description MessageHeader | Improve this doc View source Item[String] Gets or sets the value of the header with the specified name. Declaration public string this[string name] { get; set; } Parameters Type Name Description System.String name The header name. Property Value Type Description System.String Methods | Improve this doc View source Add(MessageHeader) Adds a new header. Declaration public void Add(MessageHeader header) Parameters Type Name Description MessageHeader header The header to be added. | Improve this doc View source Add(String, Object) Adds a new header. Declaration public void Add(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. | Improve this doc View source Add(String, String) Adds a new header. Declaration public void Add(string name, string value) Parameters Type Name Description System.String name The header name. System.String value The header value. | Improve this doc View source AddIfNotExists(String, String) Adds a new header if no header with the same name is already set. Declaration public void AddIfNotExists(string name, string newValue) Parameters Type Name Description System.String name The header name. System.String newValue The new header value. | Improve this doc View source AddOrReplace(String, Object) Adds a new header or replaces the header with the same name. Declaration public void AddOrReplace(string name, object newValue) Parameters Type Name Description System.String name The header name. System.Object newValue The new header value. | Improve this doc View source AddOrReplace(String, String) Adds a new header or replaces the header with the same name. Declaration public void AddOrReplace(string name, string newValue) Parameters Type Name Description System.String name The header name. System.String newValue The new header value. | Improve this doc View source Contains(String) Returns a boolean value indicating whether an header with the specified name has already been added to the collection. Declaration public bool Contains(string name) Parameters Type Name Description System.String name The name to be checked. Returns Type Description System.Boolean A boolean value indicating whether the name was found in the existing headers. | Improve this doc View source GetEnumerator() Declaration public IEnumerator<MessageHeader> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < MessageHeader > | Improve this doc View source GetValue(String, Boolean) Returns the value of the header with the specified name. It will return null if no header with that name is found in the collection. Declaration public string GetValue(string name, bool throwIfNotFound = false) Parameters Type Name Description System.String name The name of the header to be retrieved. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.String The header value converted to the target type, or null if not found. | Improve this doc View source GetValue(String, Type, Boolean) Returns the value of the header with the specified name, casting it to the specified type. By default it will return null if no header with that name is found in the collection but this behavior can be changed setting the throwIfNotFound parameter to true . Declaration public object GetValue(string name, Type targetType, bool throwIfNotFound = false) Parameters Type Name Description System.String name The name of the header to be retrieved. System.Type targetType The type to convert the header value to. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.Object The header value converted to the target type, or null if not found. | Improve this doc View source GetValue<T>(String, Boolean) Returns the value of the header with the specified name, casting it to the specified type T . It will return null if no header with that name is found in the collection. Declaration public T? GetValue<T>(string name, bool throwIfNotFound = false) where T : struct Parameters Type Name Description System.String name The name of the header to be retrieved. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.Nullable <T> The header value converted to the target type, or null if not found. Type Parameters Name Description T The type to convert the header value to. | Improve this doc View source GetValueOrDefault(String, Type) Returns the value of the header with the specified name, casting it to the specified type. It will return the default value for the target type if no header with that name is found in the collection. Declaration public object GetValueOrDefault(string name, Type targetType) Parameters Type Name Description System.String name The name of the header to be retrieved. System.Type targetType The type to convert the header value to. Returns Type Description System.Object The header value converted to the target type, or null if not found. | Improve this doc View source GetValueOrDefault<T>(String) Returns the value of the header with the specified name, casting it to the specified type T . It will return the default value for the type T if no header with that name is found in the collection. Declaration public T GetValueOrDefault<T>(string name) where T : struct Parameters Type Name Description System.String name The name of the header to be retrieved. Returns Type Description T The header value converted to the target type, or null if not found. Type Parameters Name Description T The type to convert the header value to. | Improve this doc View source Remove(MessageHeader) Removes the specified header. Declaration public void Remove(MessageHeader header) Parameters Type Name Description MessageHeader header The header to remove. | Improve this doc View source Remove(String) Removes all headers with the specified name. Declaration public void Remove(string name) Parameters Type Name Description System.String name The header name. Explicit Interface Implementations | Improve this doc View source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods MessageHeaderEnumerableExtensions.Contains(IEnumerable<MessageHeader>, String) MessageHeaderEnumerableExtensions.GetValue(IEnumerable<MessageHeader>, String, Boolean) MessageHeaderEnumerableExtensions.GetValue<T>(IEnumerable<MessageHeader>, String, Boolean) MessageHeaderEnumerableExtensions.GetValue(IEnumerable<MessageHeader>, String, Type, Boolean) MessageHeaderEnumerableExtensions.GetValueOrDefault<T>(IEnumerable<MessageHeader>, String) MessageHeaderEnumerableExtensions.GetValueOrDefault(IEnumerable<MessageHeader>, String, Type)"
  },
  "api/Silverback.Messaging.Messages.MessageHeaderEnumerableExtensions.html": {
    "href": "api/Silverback.Messaging.Messages.MessageHeaderEnumerableExtensions.html",
    "title": "Class MessageHeaderEnumerableExtensions | Silverback",
    "keywords": "Class MessageHeaderEnumerableExtensions Add some helper methods to the System.Collections.Generic.IEnumerable<T> of MessageHeader . Inheritance System.Object MessageHeaderEnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public static class MessageHeaderEnumerableExtensions Methods | Improve this doc View source Contains(IEnumerable<MessageHeader>, String) Returns a boolean value indicating whether an header with the specified name has already been added to the collection. Declaration public static bool Contains(this IEnumerable<MessageHeader> headers, string name) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name to be checked. Returns Type Description System.Boolean A boolean value indicating whether the name was found in the existing headers. | Improve this doc View source GetValue(IEnumerable<MessageHeader>, String, Boolean) Returns the value of the header with the specified name. It will return null if no header with that name is found in the collection. Declaration public static string GetValue(this IEnumerable<MessageHeader> headers, string name, bool throwIfNotFound = false) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.String The header value converted to the target type, or null if not found. | Improve this doc View source GetValue(IEnumerable<MessageHeader>, String, Type, Boolean) Returns the value of the header with the specified name, casting it to the specified type. By default it will return null if no header with that name is found in the collection but this behavior can be changed setting the throwIfNotFound parameter to true . Declaration public static object GetValue(this IEnumerable<MessageHeader> headers, string name, Type targetType, bool throwIfNotFound = false) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. System.Type targetType The type to convert the header value to. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.Object The header value converted to the target type, or null if not found. | Improve this doc View source GetValue<T>(IEnumerable<MessageHeader>, String, Boolean) Returns the value of the header with the specified name, casting it to the specified type T . It will return null if no header with that name is found in the collection. Declaration public static T? GetValue<T>(this IEnumerable<MessageHeader> headers, string name, bool throwIfNotFound = false) where T : struct Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.Nullable <T> The header value converted to the target type, or null if not found. Type Parameters Name Description T The type to convert the header value to. | Improve this doc View source GetValueOrDefault(IEnumerable<MessageHeader>, String, Type) Returns the value of the header with the specified name, casting it to the specified type. It will return the default value for the target type if no header with that name is found in the collection. Declaration public static object GetValueOrDefault(this IEnumerable<MessageHeader> headers, string name, Type targetType) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. System.Type targetType The type to convert the header value to. Returns Type Description System.Object The header value converted to the target type, or null if not found. | Improve this doc View source GetValueOrDefault<T>(IEnumerable<MessageHeader>, String) Returns the value of the header with the specified name, casting it to the specified type T . It will return the default value for the type T if no header with that name is found in the collection. Declaration public static T GetValueOrDefault<T>(this IEnumerable<MessageHeader> headers, string name) where T : struct Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. Returns Type Description T The header value converted to the target type, or null if not found. Type Parameters Name Description T The type to convert the header value to."
  },
  "api/Silverback.Messaging.Messages.Tombstone.html": {
    "href": "api/Silverback.Messaging.Messages.Tombstone.html",
    "title": "Class Tombstone | Silverback",
    "keywords": "Class Tombstone Represents a tombstone message (a message with null body). Inheritance System.Object Tombstone Tombstone<TMessage> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public class Tombstone Constructors | Improve this doc View source Tombstone(String) Initializes a new instance of the Tombstone class. Declaration public Tombstone(string messageId) Parameters Type Name Description System.String messageId The message identifier. Properties | Improve this doc View source MessageId Gets the message identifier. Declaration [Header(\"x-message-id\")] public string MessageId { get; } Property Value Type Description System.String"
  },
  "api/Silverback.Messaging.Messages.Tombstone-1.html": {
    "href": "api/Silverback.Messaging.Messages.Tombstone-1.html",
    "title": "Class Tombstone<TMessage> | Silverback",
    "keywords": "Class Tombstone<TMessage> Represents a tombstone message (a message with null body). Inheritance System.Object Tombstone Tombstone<TMessage> Inherited Members Tombstone.MessageId System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public class Tombstone<TMessage> : Tombstone Type Parameters Name Description TMessage The type of the message that was expected. Constructors | Improve this doc View source Tombstone(String) Initializes a new instance of the Tombstone<TMessage> class. Declaration public Tombstone(string messageId) Parameters Type Name Description System.String messageId The message identifier."
  },
  "api/Silverback.Messaging.Outbound.Enrichers.GenericOutboundHeadersEnricher.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.GenericOutboundHeadersEnricher.html",
    "title": "Class GenericOutboundHeadersEnricher | Silverback",
    "keywords": "Class GenericOutboundHeadersEnricher A generic enricher that adds a message header according to a static name/value pair or a provider function. Inheritance System.Object GenericOutboundHeadersEnricher < System.Object > GenericOutboundHeadersEnricher Implements IOutboundMessageEnricher Inherited Members GenericOutboundHeadersEnricher<Object>.Enrich(IOutboundEnvelope) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public class GenericOutboundHeadersEnricher : GenericOutboundHeadersEnricher<object>, IOutboundMessageEnricher Constructors | Improve this doc View source GenericOutboundHeadersEnricher(String, Func<IOutboundEnvelope<Object>, Object>) Initializes a new instance of the GenericOutboundHeadersEnricher class. Declaration public GenericOutboundHeadersEnricher(string name, Func<IOutboundEnvelope<object>, object> valueProvider) Parameters Type Name Description System.String name The header name. System.Func < IOutboundEnvelope < System.Object >, System.Object > valueProvider The header value provider function. | Improve this doc View source GenericOutboundHeadersEnricher(String, Object) Initializes a new instance of the GenericOutboundHeadersEnricher class. Declaration public GenericOutboundHeadersEnricher(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. Implements IOutboundMessageEnricher"
  },
  "api/Silverback.Messaging.Outbound.Enrichers.GenericOutboundHeadersEnricher-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.GenericOutboundHeadersEnricher-1.html",
    "title": "Class GenericOutboundHeadersEnricher<TMessage> | Silverback",
    "keywords": "Class GenericOutboundHeadersEnricher<TMessage> A generic enricher that adds a message header according to a static name/value pair or a provider function. Inheritance System.Object GenericOutboundHeadersEnricher<TMessage> GenericOutboundHeadersEnricher OutboundMessageIdHeadersEnricher<TMessage> Implements IOutboundMessageEnricher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public class GenericOutboundHeadersEnricher<TMessage> : IOutboundMessageEnricher where TMessage : class Type Parameters Name Description TMessage The type of the messages to be enriched. Constructors | Improve this doc View source GenericOutboundHeadersEnricher(String, Func<IOutboundEnvelope<TMessage>, Object>) Initializes a new instance of the GenericOutboundHeadersEnricher<TMessage> class. Declaration public GenericOutboundHeadersEnricher(string name, Func<IOutboundEnvelope<TMessage>, object> valueProvider) Parameters Type Name Description System.String name The header name. System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The header value provider function. | Improve this doc View source GenericOutboundHeadersEnricher(String, Object) Initializes a new instance of the GenericOutboundHeadersEnricher<TMessage> class. Declaration public GenericOutboundHeadersEnricher(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. Methods | Improve this doc View source Enrich(IOutboundEnvelope) Declaration public void Enrich(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope Implements IOutboundMessageEnricher"
  },
  "api/Silverback.Messaging.Outbound.Enrichers.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.html",
    "title": "Namespace Silverback.Messaging.Outbound.Enrichers | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.Enrichers Classes GenericOutboundHeadersEnricher A generic enricher that adds a message header according to a static name/value pair or a provider function. GenericOutboundHeadersEnricher<TMessage> A generic enricher that adds a message header according to a static name/value pair or a provider function. MessageEnricherProducerBehavior Invokes all the IOutboundMessageEnricher configured for to the endpoint. OutboundMessageIdHeadersEnricher<TMessage> A generic enricher that sets the message id header according to a value provider function. Interfaces IOutboundMessageEnricher Enriches the outbound message (e.g. adding custom headers)."
  },
  "api/Silverback.Messaging.Outbound.Enrichers.IOutboundMessageEnricher.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.IOutboundMessageEnricher.html",
    "title": "Interface IOutboundMessageEnricher | Silverback",
    "keywords": "Interface IOutboundMessageEnricher Enriches the outbound message (e.g. adding custom headers). Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public interface IOutboundMessageEnricher Methods | Improve this doc View source Enrich(IOutboundEnvelope) Enriches the specified message. Declaration void Enrich(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be enriched."
  },
  "api/Silverback.Messaging.Outbound.Enrichers.MessageEnricherProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.MessageEnricherProducerBehavior.html",
    "title": "Class MessageEnricherProducerBehavior | Silverback",
    "keywords": "Class MessageEnricherProducerBehavior Invokes all the IOutboundMessageEnricher configured for to the endpoint. Inheritance System.Object MessageEnricherProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public class MessageEnricherProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Outbound.Enrichers.OutboundMessageIdHeadersEnricher-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.OutboundMessageIdHeadersEnricher-1.html",
    "title": "Class OutboundMessageIdHeadersEnricher<TMessage> | Silverback",
    "keywords": "Class OutboundMessageIdHeadersEnricher<TMessage> A generic enricher that sets the message id header according to a value provider function. Inheritance System.Object GenericOutboundHeadersEnricher <TMessage> OutboundMessageIdHeadersEnricher<TMessage> Implements IOutboundMessageEnricher Inherited Members GenericOutboundHeadersEnricher<TMessage>.Enrich(IOutboundEnvelope) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public class OutboundMessageIdHeadersEnricher<TMessage> : GenericOutboundHeadersEnricher<TMessage>, IOutboundMessageEnricher where TMessage : class Type Parameters Name Description TMessage The type of the messages to be enriched. Constructors | Improve this doc View source OutboundMessageIdHeadersEnricher(Func<IOutboundEnvelope<TMessage>, Object>) Initializes a new instance of the OutboundMessageIdHeadersEnricher<TMessage> class. Declaration public OutboundMessageIdHeadersEnricher(Func<IOutboundEnvelope<TMessage>, object> valueProvider) Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The header value provider function. Implements IOutboundMessageEnricher"
  },
  "api/Silverback.Messaging.Outbound.html": {
    "href": "api/Silverback.Messaging.Outbound.html",
    "title": "Namespace Silverback.Messaging.Outbound | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound Classes IntegrationBehaviorsSortIndexes Contains the sort index constants of the default Silverback.Messaging.Publishing.IBehavior added by Silverback.Integration. Interfaces IProduceStrategy The strategy used to produce the messages. IProduceStrategyImplementation The strategy used to produce the messages."
  },
  "api/Silverback.Messaging.Outbound.IntegrationBehaviorsSortIndexes.html": {
    "href": "api/Silverback.Messaging.Outbound.IntegrationBehaviorsSortIndexes.html",
    "title": "Class IntegrationBehaviorsSortIndexes | Silverback",
    "keywords": "Class IntegrationBehaviorsSortIndexes Contains the sort index constants of the default Silverback.Messaging.Publishing.IBehavior added by Silverback.Integration. Inheritance System.Object IntegrationBehaviorsSortIndexes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound Assembly : Silverback.Integration.dll Syntax public static class IntegrationBehaviorsSortIndexes Fields | Improve this doc View source OutboundProducer The ProduceBehavior sort index. Declaration public const int OutboundProducer = 200 Field Value Type Description System.Int32 | Improve this doc View source OutboundRouter The OutboundRouterBehavior sort index. Declaration public const int OutboundRouter = 300 Field Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Outbound.IProduceStrategy.html": {
    "href": "api/Silverback.Messaging.Outbound.IProduceStrategy.html",
    "title": "Interface IProduceStrategy | Silverback",
    "keywords": "Interface IProduceStrategy The strategy used to produce the messages. Namespace : Silverback.Messaging.Outbound Assembly : Silverback.Integration.dll Syntax public interface IProduceStrategy Methods | Improve this doc View source Build(IServiceProvider) Returns the actual strategy implementation, built using the provided System.IServiceProvider . Declaration IProduceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the strategy. Returns Type Description IProduceStrategyImplementation An instance of IProduceStrategyImplementation that can be used to produce the messages."
  },
  "api/Silverback.Messaging.Outbound.IProduceStrategyImplementation.html": {
    "href": "api/Silverback.Messaging.Outbound.IProduceStrategyImplementation.html",
    "title": "Interface IProduceStrategyImplementation | Silverback",
    "keywords": "Interface IProduceStrategyImplementation The strategy used to produce the messages. Namespace : Silverback.Messaging.Outbound Assembly : Silverback.Integration.dll Syntax public interface IProduceStrategyImplementation Methods | Improve this doc View source ProduceAsync(IOutboundEnvelope) Produces the message in the specified envelope. Declaration Task ProduceAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope containing the message to be produced. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.html",
    "title": "Class DictionaryOutboundRouter<TMessage, TEndpoint> | Silverback",
    "keywords": "Class DictionaryOutboundRouter<TMessage, TEndpoint> Routes the outbound messages to one or multiple endpoints. Inheritance System.Object OutboundRouter <TMessage> DictionaryOutboundRouter<TMessage, TEndpoint> Implements IOutboundRouter <TMessage> IOutboundRouter Inherited Members OutboundRouter<TMessage>.IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class DictionaryOutboundRouter<TMessage, TEndpoint> : OutboundRouter<TMessage>, IOutboundRouter<TMessage>, IOutboundRouter where TEndpoint : IProducerEndpoint Type Parameters Name Description TMessage The type of the messages to be routed. TEndpoint The type of the IProducerEndpoint . Constructors | Improve this doc View source DictionaryOutboundRouter(DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction, IReadOnlyDictionary<String, TEndpoint>) Initializes a new instance of the DictionaryOutboundRouter<TMessage, TEndpoint> class. Declaration public DictionaryOutboundRouter(DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction routerFunction, IReadOnlyDictionary<string, TEndpoint> endpoints) Parameters Type Name Description DictionaryOutboundRouter.RouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , TEndpoint> endpoints The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the endpoints and their key. | Improve this doc View source DictionaryOutboundRouter(DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction, IReadOnlyDictionary<String, TEndpoint>) Initializes a new instance of the DictionaryOutboundRouter<TMessage, TEndpoint> class. Declaration public DictionaryOutboundRouter(DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction routerFunction, IReadOnlyDictionary<string, TEndpoint> endpoints) Parameters Type Name Description DictionaryOutboundRouter.SingleEndpointRouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , TEndpoint> endpoints The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the endpoints and their key. Properties | Improve this doc View source Endpoints Declaration public override IEnumerable<IProducerEndpoint> Endpoints { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<TMessage>.Endpoints Methods | Improve this doc View source GetDestinationEndpoints(TMessage, MessageHeaderCollection) Declaration public override IEnumerable<IProducerEndpoint> GetDestinationEndpoints(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message MessageHeaderCollection headers Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<TMessage>.GetDestinationEndpoints(TMessage, Silverback.Messaging.Messages.MessageHeaderCollection) Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.RouterFunction.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.RouterFunction.html",
    "title": "Delegate DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction | Silverback",
    "keywords": "Delegate DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction The actual router method that receives the message (including its headers) together with the dictionary containing all endpoints and returns the destination endpoints. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public delegate IEnumerable<TEndpoint> RouterFunction(TMessage message, MessageHeaderCollection headers, IReadOnlyDictionary<string, TEndpoint> endpoints); Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers. System.Collections.Generic.IReadOnlyDictionary < System.String , TEndpoint> endpoints The dictionary containing all configured endpoints for this router. Returns Type Description System.Collections.Generic.IEnumerable <TEndpoint> The destination endpoints."
  },
  "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.SingleEndpointRouterFunction.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.SingleEndpointRouterFunction.html",
    "title": "Delegate DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction | Silverback",
    "keywords": "Delegate DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction The actual router method that receives the message (including its headers) together with the dictionary containing all endpoints and returns the destination endpoint. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public delegate TEndpoint SingleEndpointRouterFunction(TMessage message, MessageHeaderCollection headers, IReadOnlyDictionary<string, TEndpoint> endpoints); Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers. System.Collections.Generic.IReadOnlyDictionary < System.String , TEndpoint> endpoints The dictionary containing all configured endpoints for this router. Returns Type Description TEndpoint The destination endpoint."
  },
  "api/Silverback.Messaging.Outbound.Routing.EndpointNameResolverProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.EndpointNameResolverProducerBehavior.html",
    "title": "Class EndpointNameResolverProducerBehavior | Silverback",
    "keywords": "Class EndpointNameResolverProducerBehavior Resolves the actual target endpoint name for the message being published using the GetActualName(IOutboundEnvelope, IServiceProvider) method. Inheritance System.Object EndpointNameResolverProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class EndpointNameResolverProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Outbound.Routing.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.html",
    "title": "Namespace Silverback.Messaging.Outbound.Routing | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.Routing Classes DictionaryOutboundRouter<TMessage, TEndpoint> Routes the outbound messages to one or multiple endpoints. EndpointNameResolverProducerBehavior Resolves the actual target endpoint name for the message being published using the GetActualName(IOutboundEnvelope, IServiceProvider) method. OutboundQueueProducer OutboundRoute OutboundRouter<TMessage> OutboundRouterBehavior Routes the messages to the outbound endpoint by wrapping them in an IOutboundEnvelope<TMessage> that is republished to the bus. ProduceBehavior Produces the IOutboundEnvelope<TMessage> using the IProduceStrategy configured in the endpoint. ProducerEndpointNameResolver<TMessage> The base class for a type used to resolve the actual target endpoint name for the outbound message. SimpleOutboundRouter<TMessage> Routes the outbound messages to one outbound endpoint. StaticOutboundRouter Routes all messages to a static collection of pre-defined endpoints. Interfaces IOutboundRoute Defines the IOutboundRouter to be used to get the destination endpoints to produce the messages of the specified type to. IOutboundRouter Routes the outbound messages to one or multiple outbound endpoints. IOutboundRouter<TMessage> Routes the outbound messages to one or multiple outbound endpoints. IOutboundRoutingConfiguration Holds the outbound messages routing configuration (which message is redirected to which endpoint). IProducerEndpointNameResolver Represents a type used to resolve the actual target endpoint name for the outbound message. Delegates DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction The actual router method that receives the message (including its headers) together with the dictionary containing all endpoints and returns the destination endpoints. DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction The actual router method that receives the message (including its headers) together with the dictionary containing all endpoints and returns the destination endpoint."
  },
  "api/Silverback.Messaging.Outbound.Routing.IOutboundRoute.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IOutboundRoute.html",
    "title": "Interface IOutboundRoute | Silverback",
    "keywords": "Interface IOutboundRoute Defines the IOutboundRouter to be used to get the destination endpoints to produce the messages of the specified type to. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IOutboundRoute Properties | Improve this doc View source MessageType Gets the type of the messages to be routed to the outbound endpoint(s). Declaration Type MessageType { get; } Property Value Type Description System.Type Methods | Improve this doc View source GetOutboundRouter(IServiceProvider) Returns the instance of IOutboundRouter to be used to determine the destination endpoint. Declaration IOutboundRouter GetOutboundRouter(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the router. Returns Type Description IOutboundRouter The instance of IOutboundRouter<TMessage> ."
  },
  "api/Silverback.Messaging.Outbound.Routing.IOutboundRouter.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IOutboundRouter.html",
    "title": "Interface IOutboundRouter | Silverback",
    "keywords": "Interface IOutboundRouter Routes the outbound messages to one or multiple outbound endpoints. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IOutboundRouter Properties | Improve this doc View source Endpoints Gets the endpoints that are potentially targeted by this router. This collection could be built over time in case of a dynamic IOutboundRouter but that will prevent the IOutboxWorker to work properly and it's not optimal as it used for example by the health checks to ping all possible endpoints. Declaration IEnumerable<IProducerEndpoint> Endpoints { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Methods | Improve this doc View source GetDestinationEndpoints(Object, MessageHeaderCollection) Returns the collection of IProducerEndpoint representing the endpoints where the specified message must be produced. Declaration IEnumerable<IProducerEndpoint> GetDestinationEndpoints(object message, MessageHeaderCollection headers) Parameters Type Name Description System.Object message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > The endpoints to produce to."
  },
  "api/Silverback.Messaging.Outbound.Routing.IOutboundRouter-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IOutboundRouter-1.html",
    "title": "Interface IOutboundRouter<TMessage> | Silverback",
    "keywords": "Interface IOutboundRouter<TMessage> Routes the outbound messages to one or multiple outbound endpoints. Inherited Members IOutboundRouter.Endpoints IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IOutboundRouter<TMessage> : IOutboundRouter Type Parameters Name Description TMessage The type of the messages to be routed. Methods | Improve this doc View source GetDestinationEndpoints(TMessage, MessageHeaderCollection) Returns the collection of IProducerEndpoint representing the endpoints where the specified message must be produced. Declaration IEnumerable<IProducerEndpoint> GetDestinationEndpoints(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > The endpoints to route the message to."
  },
  "api/Silverback.Messaging.Outbound.Routing.IOutboundRoutingConfiguration.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IOutboundRoutingConfiguration.html",
    "title": "Interface IOutboundRoutingConfiguration | Silverback",
    "keywords": "Interface IOutboundRoutingConfiguration Holds the outbound messages routing configuration (which message is redirected to which endpoint). Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IOutboundRoutingConfiguration Properties | Improve this doc View source IdempotentEndpointRegistration Gets or sets a value indicating whether the registration of endpoints is idempotent. This means that an endpoint for the same message type and the same name cannot be registered multiple times. The default is true . Declaration bool IdempotentEndpointRegistration { get; set; } Property Value Type Description System.Boolean | Improve this doc View source PublishOutboundMessagesToInternalBus Gets or sets a value indicating whether the messages to be routed through an outbound connector have also to be published to the internal bus, to be locally subscribed. The default is false . Declaration bool PublishOutboundMessagesToInternalBus { get; set; } Property Value Type Description System.Boolean | Improve this doc View source Routes Gets the configured outbound routes. Declaration IReadOnlyCollection<IOutboundRoute> Routes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundRoute > Methods | Improve this doc View source Add(Type, Func<IServiceProvider, IOutboundRouter>) Add an outbound routing rule. Declaration IOutboundRoutingConfiguration Add(Type messageType, Func<IServiceProvider, IOutboundRouter> outboundRouterFactory) Parameters Type Name Description System.Type messageType The type of the messages to be routed. System.Func < System.IServiceProvider , IOutboundRouter > outboundRouterFactory The factory method to be used to get the instance of IOutboundRouter to be used to determine the destination endpoint. Returns Type Description IOutboundRoutingConfiguration The IOutboundRoutingConfiguration so that additional calls can be chained. | Improve this doc View source Add<TMessage>(Func<IServiceProvider, IOutboundRouter>) Add an outbound routing rule. Declaration IOutboundRoutingConfiguration Add<TMessage>(Func<IServiceProvider, IOutboundRouter> outboundRouterFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IOutboundRouter > outboundRouterFactory The factory method to be used to get the instance of IOutboundRouter to be used to determine the destination endpoint. Returns Type Description IOutboundRoutingConfiguration The IOutboundRoutingConfiguration so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be routed. | Improve this doc View source GetRoutesForMessage(Object) Returns the outbound routes that apply to the specified message. Declaration IReadOnlyCollection<IOutboundRoute> GetRoutesForMessage(object message) Parameters Type Name Description System.Object message The message to be routed. Returns Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundRoute > The outbound routes for the specified message. | Improve this doc View source GetRoutesForMessage(Type) Returns the outbound routes that apply to a message of the specified message. Declaration IReadOnlyCollection<IOutboundRoute> GetRoutesForMessage(Type messageType) Parameters Type Name Description System.Type messageType The type of the message to be routed. Returns Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundRoute > The outbound routes for the specified message."
  },
  "api/Silverback.Messaging.Outbound.Routing.IProducerEndpointNameResolver.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IProducerEndpointNameResolver.html",
    "title": "Interface IProducerEndpointNameResolver | Silverback",
    "keywords": "Interface IProducerEndpointNameResolver Represents a type used to resolve the actual target endpoint name for the outbound message. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IProducerEndpointNameResolver Methods | Improve this doc View source GetName(IOutboundEnvelope) Gets the actual target endpoint name for the message being produced. Declaration string GetName(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message being produced. Returns Type Description System.String The actual name of the endpoint to be produced to."
  },
  "api/Silverback.Messaging.Outbound.Routing.OutboundQueueProducer.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.OutboundQueueProducer.html",
    "title": "Class OutboundQueueProducer | Silverback",
    "keywords": "Class OutboundQueueProducer Inheritance System.Object Producer Producer < TransactionalOutboxBroker , IProducerEndpoint > OutboundQueueProducer Implements IProducer Inherited Members Producer<TransactionalOutboxBroker, IProducerEndpoint>.Broker Producer<TransactionalOutboxBroker, IProducerEndpoint>.Endpoint Producer.Id Producer.Broker Producer.Endpoint Producer.IsConnecting Producer.IsConnected Producer.ConnectAsync() Producer.DisconnectAsync() Producer.Produce(Object, IReadOnlyCollection<MessageHeader>) Producer.Produce(IOutboundEnvelope) Producer.Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Producer.ProduceAsync(IOutboundEnvelope) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ConnectCoreAsync() Producer.DisconnectCoreAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class OutboundQueueProducer : Producer<TransactionalOutboxBroker, IProducerEndpoint>, IProducer Constructors | Improve this doc View source OutboundQueueProducer(IOutboxWriter, TransactionalOutboxBroker, IProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider, IOutboundLogger<Producer>) Initializes a new instance of the OutboundQueueProducer class. Declaration public OutboundQueueProducer(IOutboxWriter queueWriter, TransactionalOutboxBroker broker, IProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IOutboundLogger<Producer> logger) Parameters Type Name Description IOutboxWriter queueWriter The IOutboxWriter to be used to write to the queue. TransactionalOutboxBroker broker The IBroker that instantiated this producer. IProducerEndpoint endpoint The endpoint to produce to. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IOutboundLogger < Producer > logger The IOutboundLogger<TCategoryName> . Methods | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message System.Byte [] messageBytes System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String actualEndpointName Returns Type Description IBrokerMessageIdentifier Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration protected override void ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message System.Byte [] messageBytes System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String actualEndpointName System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String actualEndpointName Returns Type Description IBrokerMessageIdentifier Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration protected override void ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String actualEndpointName System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Declaration protected override Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message System.Byte [] messageBytes System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String actualEndpointName Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration protected override Task ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message System.Byte [] messageBytes System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String actualEndpointName System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Returns Type Description System.Threading.Tasks.Task Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Declaration protected override Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String actualEndpointName Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Declaration protected override Task ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message System.IO.Stream messageStream System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String actualEndpointName System.Action < IBrokerMessageIdentifier > onSuccess System.Action < System.Exception > onError Returns Type Description System.Threading.Tasks.Task Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Implements IProducer"
  },
  "api/Silverback.Messaging.Outbound.Routing.OutboundRoute.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.OutboundRoute.html",
    "title": "Class OutboundRoute | Silverback",
    "keywords": "Class OutboundRoute Inheritance System.Object OutboundRoute Implements IOutboundRoute Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class OutboundRoute : IOutboundRoute Constructors | Improve this doc View source OutboundRoute(Type, Func<IServiceProvider, IOutboundRouter>) Initializes a new instance of the OutboundRoute class. Declaration public OutboundRoute(Type messageType, Func<IServiceProvider, IOutboundRouter> outboundRouterFactory) Parameters Type Name Description System.Type messageType The type of the messages to be routed to the outbound endpoint(s). System.Func < System.IServiceProvider , IOutboundRouter > outboundRouterFactory The factory to be used to resolve the IOutboundRouter to be used to determine the destination endpoint. Properties | Improve this doc View source MessageType Declaration public Type MessageType { get; } Property Value Type Description System.Type Methods | Improve this doc View source GetOutboundRouter(IServiceProvider) Declaration public IOutboundRouter GetOutboundRouter(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description IOutboundRouter Implements IOutboundRoute"
  },
  "api/Silverback.Messaging.Outbound.Routing.OutboundRouter-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.OutboundRouter-1.html",
    "title": "Class OutboundRouter<TMessage> | Silverback",
    "keywords": "Class OutboundRouter<TMessage> Inheritance System.Object OutboundRouter<TMessage> DictionaryOutboundRouter<TMessage, TEndpoint> SimpleOutboundRouter<TMessage> StaticOutboundRouter Implements IOutboundRouter <TMessage> IOutboundRouter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public abstract class OutboundRouter<TMessage> : IOutboundRouter<TMessage>, IOutboundRouter Type Parameters Name Description TMessage Properties | Improve this doc View source Endpoints Declaration public abstract IEnumerable<IProducerEndpoint> Endpoints { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Methods | Improve this doc View source GetDestinationEndpoints(TMessage, MessageHeaderCollection) Declaration public abstract IEnumerable<IProducerEndpoint> GetDestinationEndpoints(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message MessageHeaderCollection headers Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Explicit Interface Implementations | Improve this doc View source IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) Declaration IEnumerable<IProducerEndpoint> IOutboundRouter.GetDestinationEndpoints(object message, MessageHeaderCollection headers) Parameters Type Name Description System.Object message MessageHeaderCollection headers Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.Routing.OutboundRouterBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.OutboundRouterBehavior.html",
    "title": "Class OutboundRouterBehavior | Silverback",
    "keywords": "Class OutboundRouterBehavior Routes the messages to the outbound endpoint by wrapping them in an IOutboundEnvelope<TMessage> that is republished to the bus. Inheritance System.Object OutboundRouterBehavior Implements Silverback.Messaging.Publishing.IBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class OutboundRouterBehavior : IBehavior, ISorted Constructors | Improve this doc View source OutboundRouterBehavior(IPublisher, IOutboundRoutingConfiguration, IServiceProvider) Initializes a new instance of the OutboundRouterBehavior class. Declaration public OutboundRouterBehavior(IPublisher publisher, IOutboundRoutingConfiguration routingConfiguration, IServiceProvider serviceProvider) Parameters Type Name Description Silverback.Messaging.Publishing.IPublisher publisher The Silverback.Messaging.Publishing.IPublisher . IOutboundRoutingConfiguration routingConfiguration The IOutboundRoutingConfiguration . System.IServiceProvider serviceProvider The System.IServiceProvider . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(Object, MessageHandler) Declaration public Task<IReadOnlyCollection<object>> HandleAsync(object message, MessageHandler next) Parameters Type Name Description System.Object message Silverback.Messaging.Publishing.MessageHandler next Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < System.Object >> Implements Silverback.Messaging.Publishing.IBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Outbound.Routing.ProduceBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.ProduceBehavior.html",
    "title": "Class ProduceBehavior | Silverback",
    "keywords": "Class ProduceBehavior Produces the IOutboundEnvelope<TMessage> using the IProduceStrategy configured in the endpoint. Inheritance System.Object ProduceBehavior Implements Silverback.Messaging.Publishing.IBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class ProduceBehavior : IBehavior, ISorted Constructors | Improve this doc View source ProduceBehavior(IServiceProvider) Initializes a new instance of the ProduceBehavior class. Declaration public ProduceBehavior(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the IProduceStrategyImplementation . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(Object, MessageHandler) Declaration public Task<IReadOnlyCollection<object>> HandleAsync(object message, MessageHandler next) Parameters Type Name Description System.Object message Silverback.Messaging.Publishing.MessageHandler next Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < System.Object >> Implements Silverback.Messaging.Publishing.IBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Outbound.Routing.ProducerEndpointNameResolver-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.ProducerEndpointNameResolver-1.html",
    "title": "Class ProducerEndpointNameResolver<TMessage> | Silverback",
    "keywords": "Class ProducerEndpointNameResolver<TMessage> The base class for a type used to resolve the actual target endpoint name for the outbound message. Inheritance System.Object ProducerEndpointNameResolver<TMessage> Implements IProducerEndpointNameResolver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public abstract class ProducerEndpointNameResolver<TMessage> : IProducerEndpointNameResolver where TMessage : class Type Parameters Name Description TMessage The type of the messages being produced. Methods | Improve this doc View source GetName(IOutboundEnvelope) Declaration public string GetName(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope Returns Type Description System.String | Improve this doc View source GetName(IOutboundEnvelope<TMessage>) Gets the actual target endpoint name for the message being produced. Declaration protected abstract string GetName(IOutboundEnvelope<TMessage> envelope) Parameters Type Name Description IOutboundEnvelope <TMessage> envelope The envelope containing the message being produced. Returns Type Description System.String The actual name of the endpoint to be produced to. Implements IProducerEndpointNameResolver"
  },
  "api/Silverback.Messaging.Outbound.Routing.SimpleOutboundRouter-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.SimpleOutboundRouter-1.html",
    "title": "Class SimpleOutboundRouter<TMessage> | Silverback",
    "keywords": "Class SimpleOutboundRouter<TMessage> Routes the outbound messages to one outbound endpoint. Inheritance System.Object OutboundRouter <TMessage> SimpleOutboundRouter<TMessage> Implements IOutboundRouter <TMessage> IOutboundRouter Inherited Members OutboundRouter<TMessage>.Endpoints OutboundRouter<TMessage>.IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public abstract class SimpleOutboundRouter<TMessage> : OutboundRouter<TMessage>, IOutboundRouter<TMessage>, IOutboundRouter Type Parameters Name Description TMessage The type of the messages to be routed. Methods | Improve this doc View source GetDestinationEndpoint(TMessage, MessageHeaderCollection) Returns the IProducerEndpoint representing the endpoint where the specified message must be produced. When null is returned, the message will not be be published. Declaration protected abstract IProducerEndpoint GetDestinationEndpoint(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description IProducerEndpoint The endpoint to route the message to, or null if the message doesn't have to be routed. | Improve this doc View source GetDestinationEndpoints(TMessage, MessageHeaderCollection) Declaration public override IEnumerable<IProducerEndpoint> GetDestinationEndpoints(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message MessageHeaderCollection headers Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<TMessage>.GetDestinationEndpoints(TMessage, Silverback.Messaging.Messages.MessageHeaderCollection) Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.Routing.StaticOutboundRouter.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.StaticOutboundRouter.html",
    "title": "Class StaticOutboundRouter | Silverback",
    "keywords": "Class StaticOutboundRouter Routes all messages to a static collection of pre-defined endpoints. Inheritance System.Object OutboundRouter < System.Object > StaticOutboundRouter Implements IOutboundRouter < System.Object > IOutboundRouter Inherited Members OutboundRouter<Object>.IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class StaticOutboundRouter : OutboundRouter<object>, IOutboundRouter<object>, IOutboundRouter Constructors | Improve this doc View source StaticOutboundRouter(IProducerEndpoint[]) Initializes a new instance of the StaticOutboundRouter class. Declaration public StaticOutboundRouter(params IProducerEndpoint[] endpoints) Parameters Type Name Description IProducerEndpoint [] endpoints The endpoints to route the messages to. | Improve this doc View source StaticOutboundRouter(IEnumerable<IProducerEndpoint>) Initializes a new instance of the StaticOutboundRouter class. Declaration public StaticOutboundRouter(IEnumerable<IProducerEndpoint> endpoints) Parameters Type Name Description System.Collections.Generic.IEnumerable < IProducerEndpoint > endpoints The endpoints to route the messages to. Properties | Improve this doc View source Endpoints Declaration public override IEnumerable<IProducerEndpoint> Endpoints { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<System.Object>.Endpoints Methods | Improve this doc View source GetDestinationEndpoints(Object, MessageHeaderCollection) Declaration public override IEnumerable<IProducerEndpoint> GetDestinationEndpoints(object message, MessageHeaderCollection headers) Parameters Type Name Description System.Object message MessageHeaderCollection headers Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<System.Object>.GetDestinationEndpoints(System.Object, Silverback.Messaging.Messages.MessageHeaderCollection) Remarks Always returns the endpoints provided in the constructor. Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.html",
    "title": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox Classes OutboxProduceStrategy The messages are stored in a the transactional outbox table. The operation is therefore included in the database transaction applying the message side effects to the local database. The IOutboxWorker takes care of asynchronously sending the messages to the message broker. OutboxTransactionManager Manages the consumer transaction calling Commit or Rollback on the IOutboxWriter when the database transaction is being completed. OutboxWorker OutboxWorkerService The Microsoft.Extensions.Hosting.IHostedService that triggers the outbound queue worker at regular intervals. TransactionalOutboxBroker An IBroker implementation that is used by the OutboxProduceStrategy to write into the outbox. Interfaces IOutboxWorker Processes the outbox and produces the messages to the target message broker endpoint."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.IOutboxWorker.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.IOutboxWorker.html",
    "title": "Interface IOutboxWorker | Silverback",
    "keywords": "Interface IOutboxWorker Processes the outbox and produces the messages to the target message broker endpoint. Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public interface IOutboxWorker Methods | Improve this doc View source ProcessQueueAsync(CancellationToken) Processes the outbox. Declaration Task ProcessQueueAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that represents the long running operations."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxProduceStrategy.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxProduceStrategy.html",
    "title": "Class OutboxProduceStrategy | Silverback",
    "keywords": "Class OutboxProduceStrategy The messages are stored in a the transactional outbox table. The operation is therefore included in the database transaction applying the message side effects to the local database. The IOutboxWorker takes care of asynchronously sending the messages to the message broker. Inheritance System.Object OutboxProduceStrategy Implements IProduceStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class OutboxProduceStrategy : IProduceStrategy Methods | Improve this doc View source Build(IServiceProvider) Declaration public IProduceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Returns Type Description IProduceStrategyImplementation Implements IProduceStrategy"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxTransactionManager.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxTransactionManager.html",
    "title": "Class OutboxTransactionManager | Silverback",
    "keywords": "Class OutboxTransactionManager Manages the consumer transaction calling Commit or Rollback on the IOutboxWriter when the database transaction is being completed. Inheritance System.Object OutboxTransactionManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class OutboxTransactionManager Remarks This isn't even necessary if using EF Core and the DbOutboxWriter , since it is already implicitly taking part in the save changes transaction. Constructors | Improve this doc View source OutboxTransactionManager(IOutboxWriter) Initializes a new instance of the OutboxTransactionManager class. Declaration public OutboxTransactionManager(IOutboxWriter queueWriter) Parameters Type Name Description IOutboxWriter queueWriter The OutboxTransactionManager to manage."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxWorker.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxWorker.html",
    "title": "Class OutboxWorker | Silverback",
    "keywords": "Class OutboxWorker Inheritance System.Object OutboxWorker Implements IOutboxWorker Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class OutboxWorker : IOutboxWorker Constructors | Improve this doc View source OutboxWorker(IServiceScopeFactory, IBrokerCollection, IOutboundRoutingConfiguration, IOutboundLogger<OutboxWorker>, Boolean, Int32) Initializes a new instance of the OutboxWorker class. Declaration public OutboxWorker(IServiceScopeFactory serviceScopeFactory, IBrokerCollection brokerCollection, IOutboundRoutingConfiguration routingConfiguration, IOutboundLogger<OutboxWorker> logger, bool enforceMessageOrder, int batchSize) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory The Microsoft.Extensions.DependencyInjection.IServiceScopeFactory used to resolve the scoped types. IBrokerCollection brokerCollection The collection containing the available brokers. IOutboundRoutingConfiguration routingConfiguration The configured outbound routes. IOutboundLogger < OutboxWorker > logger The IOutboundLogger<TCategoryName> . System.Boolean enforceMessageOrder Specifies whether the messages must be produced in the same order as they were added to the queue. If set to true the message order will be ensured, retrying the same message until it can be successfully produced. System.Int32 batchSize The number of messages to be loaded and processed at once. Methods | Improve this doc View source ProcessQueueAsync(CancellationToken) Declaration public Task ProcessQueueAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ProduceMessageAsync(Byte[], IReadOnlyCollection<MessageHeader>, IProducerEndpoint, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Gets the producer for the specified endpoint and produces the specified message. Declaration protected virtual Task ProduceMessageAsync(byte[] content, IReadOnlyCollection<MessageHeader> headers, IProducerEndpoint endpoint, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] content The serialized message content (body). System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The collection of message headers. IProducerEndpoint endpoint The endpoint to produce to. System.String actualEndpointName The actual endpoint name that was resolved for the message. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IOutboxWorker"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxWorkerService.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxWorkerService.html",
    "title": "Class OutboxWorkerService | Silverback",
    "keywords": "Class OutboxWorkerService The Microsoft.Extensions.Hosting.IHostedService that triggers the outbound queue worker at regular intervals. Inheritance System.Object Microsoft.Extensions.Hosting.BackgroundService Silverback.Background.DistributedBackgroundService Silverback.Background.RecurringDistributedBackgroundService OutboxWorkerService Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable Inherited Members Silverback.Background.RecurringDistributedBackgroundService.Pause() Silverback.Background.RecurringDistributedBackgroundService.Resume() Silverback.Background.RecurringDistributedBackgroundService.ExecuteLockedAsync(System.Threading.CancellationToken) Silverback.Background.DistributedBackgroundService.Lock Silverback.Background.DistributedBackgroundService.ExecuteAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class OutboxWorkerService : RecurringDistributedBackgroundService, IHostedService, IDisposable Constructors | Improve this doc View source OutboxWorkerService(TimeSpan, IOutboxWorker, DistributedLockSettings, IDistributedLockManager, ISilverbackLogger<OutboxWorkerService>) Initializes a new instance of the OutboxWorkerService class. Declaration public OutboxWorkerService(TimeSpan interval, IOutboxWorker outboxWorker, DistributedLockSettings distributedLockSettings, IDistributedLockManager distributedLockManager, ISilverbackLogger<OutboxWorkerService> logger) Parameters Type Name Description System.TimeSpan interval The interval between each execution. IOutboxWorker outboxWorker The IOutboxWorker implementation. Silverback.Background.DistributedLockSettings distributedLockSettings Customizes the lock mechanism settings. Silverback.Background.IDistributedLockManager distributedLockManager The Silverback.Background.IDistributedLockManager . Silverback.Diagnostics.ISilverbackLogger < OutboxWorkerService > logger The Silverback.Diagnostics.ISilverbackLogger . Methods | Improve this doc View source ExecuteRecurringAsync(CancellationToken) Calls the IOutboxWorker to process the queue at regular intervals. Declaration protected override Task ExecuteRecurringAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken Returns Type Description System.Threading.Tasks.Task Overrides Silverback.Background.RecurringDistributedBackgroundService.ExecuteRecurringAsync(System.Threading.CancellationToken) Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.DbOutboxReader.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.DbOutboxReader.html",
    "title": "Class DbOutboxReader | Silverback",
    "keywords": "Class DbOutboxReader Exposes the methods to read from the outbound queue. Used by the IOutboxWorker . An Silverback.Database.IDbContext is used to read from a queue stored in a database table. Inheritance System.Object RepositoryBase < OutboxMessage > DbOutboxReader Implements IOutboxReader Inherited Members RepositoryBase<OutboxMessage>.DbContext RepositoryBase<OutboxMessage>.DbSet System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public class DbOutboxReader : RepositoryBase<OutboxMessage>, IOutboxReader Constructors | Improve this doc View source DbOutboxReader(IDbContext) Initializes a new instance of the DbOutboxReader class. Declaration public DbOutboxReader(IDbContext dbContext) Parameters Type Name Description Silverback.Database.IDbContext dbContext The Silverback.Database.IDbContext to use as storage. Methods | Improve this doc View source AcknowledgeAsync(OutboxStoredMessage) Declaration public Task AcknowledgeAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage Returns Type Description System.Threading.Tasks.Task | Improve this doc View source AcknowledgeAsync(IEnumerable<OutboxStoredMessage>) Declaration public Task AcknowledgeAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages Returns Type Description System.Threading.Tasks.Task | Improve this doc View source GetLengthAsync() Declaration public Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > | Improve this doc View source GetMaxAgeAsync() Declaration public Task<TimeSpan> GetMaxAgeAsync() Returns Type Description System.Threading.Tasks.Task < System.TimeSpan > | Improve this doc View source ReadAsync(Int32) Declaration public Task<IReadOnlyCollection<OutboxStoredMessage>> ReadAsync(int count) Parameters Type Name Description System.Int32 count Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < OutboxStoredMessage >> | Improve this doc View source RetryAsync(OutboxStoredMessage) Declaration public Task RetryAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage Returns Type Description System.Threading.Tasks.Task | Improve this doc View source RetryAsync(IEnumerable<OutboxStoredMessage>) Declaration public Task RetryAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages Returns Type Description System.Threading.Tasks.Task Implements IOutboxReader"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.DbOutboxWriter.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.DbOutboxWriter.html",
    "title": "Class DbOutboxWriter | Silverback",
    "keywords": "Class DbOutboxWriter Stores the outbound messages into the database. Used by the OutboxProduceStrategy . Inheritance System.Object RepositoryBase < OutboxMessage > DbOutboxWriter Implements IOutboxWriter Inherited Members RepositoryBase<OutboxMessage>.DbContext RepositoryBase<OutboxMessage>.DbSet System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public class DbOutboxWriter : RepositoryBase<OutboxMessage>, IOutboxWriter Constructors | Improve this doc View source DbOutboxWriter(IDbContext) Initializes a new instance of the DbOutboxWriter class. Declaration public DbOutboxWriter(IDbContext dbContext) Parameters Type Name Description Silverback.Database.IDbContext dbContext The Silverback.Database.IDbContext to use as storage. Methods | Improve this doc View source CommitAsync() Declaration public Task CommitAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source RollbackAsync() Declaration public Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task | Improve this doc View source WriteAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, String) Declaration public Task WriteAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Object message System.Byte [] messageBytes System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String endpointName System.String actualEndpointName Returns Type Description System.Threading.Tasks.Task Implements IOutboxWriter"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.html",
    "title": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox.Repositories | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Classes DbOutboxReader Exposes the methods to read from the outbound queue. Used by the IOutboxWorker . An Silverback.Database.IDbContext is used to read from a queue stored in a database table. DbOutboxWriter Stores the outbound messages into the database. Used by the OutboxProduceStrategy . InMemoryOutbox An outbound queue persisted in memory. Note that writing in the queue is thread-safe but reading is not. Implements both IOutboxWriter and IOutboxReader . Interfaces IOutboxReader Exposes the methods to read from the outbox. Used by the IOutboxWorker . IOutboxWriter Exposes the methods to write to the outbox. Used by the OutboxProduceStrategy ."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.InMemoryOutbox.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.InMemoryOutbox.html",
    "title": "Class InMemoryOutbox | Silverback",
    "keywords": "Class InMemoryOutbox An outbound queue persisted in memory. Note that writing in the queue is thread-safe but reading is not. Implements both IOutboxWriter and IOutboxReader . Inheritance System.Object TransactionalList < OutboxStoredMessage > InMemoryOutbox Implements IOutboxWriter IOutboxReader Inherited Members TransactionalList<OutboxStoredMessage>.CommittedItemsCount TransactionalList<OutboxStoredMessage>.Items TransactionalList<OutboxStoredMessage>.UncommittedItems TransactionalList<OutboxStoredMessage>.CommitAsync() TransactionalList<OutboxStoredMessage>.RollbackAsync() TransactionalList<OutboxStoredMessage>.AddAsync(OutboxStoredMessage) TransactionalList<OutboxStoredMessage>.RemoveAsync(OutboxStoredMessage) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public class InMemoryOutbox : TransactionalList<OutboxStoredMessage>, IOutboxWriter, IOutboxReader Constructors | Improve this doc View source InMemoryOutbox(TransactionalListSharedItems<OutboxStoredMessage>) Initializes a new instance of the InMemoryOutbox class. Declaration public InMemoryOutbox(TransactionalListSharedItems<OutboxStoredMessage> sharedItems) Parameters Type Name Description TransactionalListSharedItems < OutboxStoredMessage > sharedItems The messages shared between the instances of this repository. Methods | Improve this doc View source AcknowledgeAsync(OutboxStoredMessage) Declaration public Task AcknowledgeAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage Returns Type Description System.Threading.Tasks.Task | Improve this doc View source AcknowledgeAsync(IEnumerable<OutboxStoredMessage>) Declaration public Task AcknowledgeAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages Returns Type Description System.Threading.Tasks.Task | Improve this doc View source GetLengthAsync() Declaration public Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > | Improve this doc View source GetMaxAgeAsync() Declaration public Task<TimeSpan> GetMaxAgeAsync() Returns Type Description System.Threading.Tasks.Task < System.TimeSpan > | Improve this doc View source ReadAsync(Int32) Declaration public Task<IReadOnlyCollection<OutboxStoredMessage>> ReadAsync(int count) Parameters Type Name Description System.Int32 count Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < OutboxStoredMessage >> | Improve this doc View source RetryAsync(OutboxStoredMessage) Declaration public Task RetryAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage Returns Type Description System.Threading.Tasks.Task | Improve this doc View source RetryAsync(IEnumerable<OutboxStoredMessage>) Declaration public Task RetryAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages Returns Type Description System.Threading.Tasks.Task | Improve this doc View source WriteAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, String) Declaration public Task WriteAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Object message System.Byte [] messageBytes System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers System.String endpointName System.String actualEndpointName Returns Type Description System.Threading.Tasks.Task Implements IOutboxWriter IOutboxReader"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.IOutboxReader.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.IOutboxReader.html",
    "title": "Interface IOutboxReader | Silverback",
    "keywords": "Interface IOutboxReader Exposes the methods to read from the outbox. Used by the IOutboxWorker . Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public interface IOutboxReader Methods | Improve this doc View source AcknowledgeAsync(OutboxStoredMessage) Called after the message has been successfully produced to remove it from the outbox. Declaration Task AcknowledgeAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage The message that was processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source AcknowledgeAsync(IEnumerable<OutboxStoredMessage>) Called after the message has been successfully produced to remove it from the outbox. Declaration Task AcknowledgeAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages The messages that have been processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source GetLengthAsync() Returns the total number of messages in the outbox. Declaration Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of messages in the outbox. | Improve this doc View source GetMaxAgeAsync() Gets a System.TimeSpan representing the time elapsed since the oldest message currently in the outbox was written. Declaration Task<TimeSpan> GetMaxAgeAsync() Returns Type Description System.Threading.Tasks.Task < System.TimeSpan > The age of the oldest message. | Improve this doc View source ReadAsync(Int32) Reads the specified number of messages from the outbox (according to the FIFO rule). The operation must be acknowledged for the messages to be removed. Declaration Task<IReadOnlyCollection<OutboxStoredMessage>> ReadAsync(int count) Parameters Type Name Description System.Int32 count The number of items to be dequeued. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < OutboxStoredMessage >> A System.Threading.Tasks.Task representing the result of the asynchronous operation. The task result contains the collection of OutboxStoredMessage . | Improve this doc View source RetryAsync(OutboxStoredMessage) Called when an error occurs producing the message to re-enqueue it and retry later on. Declaration Task RetryAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage The message that was processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source RetryAsync(IEnumerable<OutboxStoredMessage>) Called when an error occurs producing the message to re-enqueue it and retry later on. Declaration Task RetryAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages The messages that have been processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.IOutboxWriter.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.IOutboxWriter.html",
    "title": "Interface IOutboxWriter | Silverback",
    "keywords": "Interface IOutboxWriter Exposes the methods to write to the outbox. Used by the OutboxProduceStrategy . Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public interface IOutboxWriter Methods | Improve this doc View source CommitAsync() Called to commit the transaction, storing the pending messages to the outbox. Declaration Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync() Called to rollback the transaction, preventing the pending messages to be stored in the outbox. Declaration Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source WriteAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, String) Adds the message contained in the specified envelope to the outbox. Declaration Task WriteAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String endpointName The name of the configured endpoint to produce to. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.DbOutboxStoredMessage.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.DbOutboxStoredMessage.html",
    "title": "Class DbOutboxStoredMessage | Silverback",
    "keywords": "Class DbOutboxStoredMessage Extends the OutboxStoredMessage adding the specific information related to a message stored in the transactional outbox table. Inheritance System.Object OutboxStoredMessage DbOutboxStoredMessage Inherited Members OutboxStoredMessage.Content OutboxStoredMessage.Headers OutboxStoredMessage.EndpointName OutboxStoredMessage.ActualEndpointName OutboxStoredMessage.MessageType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model Assembly : Silverback.Integration.dll Syntax public class DbOutboxStoredMessage : OutboxStoredMessage Constructors | Improve this doc View source DbOutboxStoredMessage(Int32, Type, Byte[], IEnumerable<MessageHeader>, String, String) Initializes a new instance of the DbOutboxStoredMessage class. Declaration public DbOutboxStoredMessage(int id, Type messageType, byte[] content, IEnumerable<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Int32 id The primary key of the database record. System.Type messageType The type of the message. System.Byte [] content The message raw binary content (body). System.Collections.Generic.IEnumerable < MessageHeader > headers The message headers. System.String endpointName The name of the producer endpoint. System.String actualEndpointName The name of the actual target endpoint that was resolved for the message. Properties | Improve this doc View source Id Gets the value of the primary key of the related database record. Declaration public int Id { get; } Property Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.html",
    "title": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model Classes DbOutboxStoredMessage Extends the OutboxStoredMessage adding the specific information related to a message stored in the transactional outbox table. OutboxStoredMessage Encapsulates the information related to a message stored in the outbox."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.OutboxStoredMessage.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.OutboxStoredMessage.html",
    "title": "Class OutboxStoredMessage | Silverback",
    "keywords": "Class OutboxStoredMessage Encapsulates the information related to a message stored in the outbox. Inheritance System.Object OutboxStoredMessage DbOutboxStoredMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model Assembly : Silverback.Integration.dll Syntax public class OutboxStoredMessage Constructors | Improve this doc View source OutboxStoredMessage(Type, Byte[], IEnumerable<MessageHeader>, String, String) Initializes a new instance of the OutboxStoredMessage class. Declaration public OutboxStoredMessage(Type messageType, byte[] content, IEnumerable<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Type messageType The type of the message. System.Byte [] content The message raw binary content (body). System.Collections.Generic.IEnumerable < MessageHeader > headers The message headers. System.String endpointName The name of the producer endpoint. System.String actualEndpointName The name of the actual target endpoint that was resolved for the message. Properties | Improve this doc View source ActualEndpointName Gets the name of the actual target endpoint that was resolved for the message. Declaration public string ActualEndpointName { get; } Property Value Type Description System.String | Improve this doc View source Content Gets the message raw binary content (body). Declaration public byte[] Content { get; } Property Value Type Description System.Byte [] | Improve this doc View source EndpointName Gets the name of the producer endpoint. Declaration public string EndpointName { get; } Property Value Type Description System.String | Improve this doc View source Headers Gets the message headers. Declaration public IReadOnlyCollection<MessageHeader> Headers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < MessageHeader > | Improve this doc View source MessageType Gets the type of the message. Declaration public Type MessageType { get; } Property Value Type Description System.Type"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.TransactionalOutboxBroker.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.TransactionalOutboxBroker.html",
    "title": "Class TransactionalOutboxBroker | Silverback",
    "keywords": "Class TransactionalOutboxBroker An IBroker implementation that is used by the OutboxProduceStrategy to write into the outbox. Inheritance System.Object Broker < IProducerEndpoint , IConsumerEndpoint > TransactionalOutboxBroker Implements IBroker System.IDisposable Inherited Members Broker<IProducerEndpoint, IConsumerEndpoint>.ProducerEndpointType Broker<IProducerEndpoint, IConsumerEndpoint>.ConsumerEndpointType Broker<IProducerEndpoint, IConsumerEndpoint>.Producers Broker<IProducerEndpoint, IConsumerEndpoint>.Consumers Broker<IProducerEndpoint, IConsumerEndpoint>.IsConnected Broker<IProducerEndpoint, IConsumerEndpoint>.GetProducer(IProducerEndpoint) Broker<IProducerEndpoint, IConsumerEndpoint>.GetProducer(String) Broker<IProducerEndpoint, IConsumerEndpoint>.AddConsumer(IConsumerEndpoint) Broker<IProducerEndpoint, IConsumerEndpoint>.ConnectAsync() Broker<IProducerEndpoint, IConsumerEndpoint>.DisconnectAsync() Broker<IProducerEndpoint, IConsumerEndpoint>.Dispose() Broker<IProducerEndpoint, IConsumerEndpoint>.InstantiateProducer(IProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Broker<IProducerEndpoint, IConsumerEndpoint>.InstantiateConsumer(IConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Broker<IProducerEndpoint, IConsumerEndpoint>.ConnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<IProducerEndpoint, IConsumerEndpoint>.DisconnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<IProducerEndpoint, IConsumerEndpoint>.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class TransactionalOutboxBroker : Broker<IProducerEndpoint, IConsumerEndpoint>, IBroker, IDisposable Constructors | Improve this doc View source TransactionalOutboxBroker(IOutboxWriter, IServiceProvider) Initializes a new instance of the TransactionalOutboxBroker class. Declaration public TransactionalOutboxBroker(IOutboxWriter queueWriter, IServiceProvider serviceProvider) Parameters Type Name Description IOutboxWriter queueWriter The IOutboxWriter to be used to write to the queue. System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Methods | Improve this doc View source InstantiateConsumer(IConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Declaration protected override IConsumer InstantiateConsumer(IConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description IConsumerEndpoint endpoint IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider System.IServiceProvider serviceProvider Returns Type Description IConsumer Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.IProducerEndpoint, Silverback.Messaging.IConsumerEndpoint>.InstantiateConsumer(Silverback.Messaging.IConsumerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IConsumerBehavior>, System.IServiceProvider) | Improve this doc View source InstantiateProducer(IProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Declaration protected override IProducer InstantiateProducer(IProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description IProducerEndpoint endpoint IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider System.IServiceProvider serviceProvider Returns Type Description IProducer Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.IProducerEndpoint, Silverback.Messaging.IConsumerEndpoint>.InstantiateProducer(Silverback.Messaging.IProducerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IProducerBehavior>, System.IServiceProvider) Implements IBroker System.IDisposable"
  },
  "api/Silverback.Messaging.ProducerEndpoint.html": {
    "href": "api/Silverback.Messaging.ProducerEndpoint.html",
    "title": "Class ProducerEndpoint | Silverback",
    "keywords": "Class ProducerEndpoint Inheritance System.Object Endpoint ProducerEndpoint Implements IProducerEndpoint IEndpoint Inherited Members Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public abstract class ProducerEndpoint : Endpoint, IProducerEndpoint, IEndpoint Constructors | Improve this doc View source ProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, String>) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, string> nameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.IServiceProvider , System.String > nameFunction The function returning the endpoint name for the message being produced. | Improve this doc View source ProducerEndpoint(Func<IOutboundEnvelope, String>) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(Func<IOutboundEnvelope, string> nameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.String > nameFunction The function returning the endpoint name for the message being produced. | Improve this doc View source ProducerEndpoint(String) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(string name) Parameters Type Name Description System.String name The endpoint name. | Improve this doc View source ProducerEndpoint(String, Func<IOutboundEnvelope, String[]>) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(string nameFormat, Func<IOutboundEnvelope, string[]> argumentsFunction) Parameters Type Name Description System.String nameFormat The endpoint name format string that will be combined with the arguments returned by the argumentsFunction using a string.Format . System.Func < IOutboundEnvelope , System.String []> argumentsFunction The function returning the arguments to be used to format the string. | Improve this doc View source ProducerEndpoint(Type) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(Type nameResolverType) Parameters Type Name Description System.Type nameResolverType The type of the IProducerEndpointNameResolver to be used to resolve the actual endpoint name. Properties | Improve this doc View source Chunk Gets or sets the message chunking settings. This option can be used to split large messages into smaller chunks. Declaration public ChunkSettings Chunk { get; set; } Property Value Type Description ChunkSettings | Improve this doc View source MessageEnrichers Gets or sets the collection of IOutboundMessageEnricher to be used to enrich the outbound message. Declaration public ICollection<IOutboundMessageEnricher> MessageEnrichers { get; set; } Property Value Type Description System.Collections.Generic.ICollection < IOutboundMessageEnricher > | Improve this doc View source Strategy Gets or sets the strategy to be used to produce the messages. If no strategy is specified, the messages will be sent to the message broker directly. Declaration public IProduceStrategy Strategy { get; set; } Property Value Type Description IProduceStrategy Methods | Improve this doc View source BaseEquals(Endpoint) Declaration protected override bool BaseEquals(Endpoint other) Parameters Type Name Description Endpoint other Returns Type Description System.Boolean Overrides Endpoint.BaseEquals(Endpoint) | Improve this doc View source GetActualName(IOutboundEnvelope, IServiceProvider) Declaration public string GetActualName(IOutboundEnvelope envelope, IServiceProvider serviceProvider) Parameters Type Name Description IOutboundEnvelope envelope System.IServiceProvider serviceProvider Returns Type Description System.String | Improve this doc View source Validate() Declaration public override void Validate() Overrides Endpoint.Validate() Explicit Interface Implementations | Improve this doc View source IProducerEndpoint.MessageEnrichers Declaration IReadOnlyCollection<IOutboundMessageEnricher> IProducerEndpoint.MessageEnrichers { get; } Returns Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundMessageEnricher > Implements IProducerEndpoint IEndpoint"
  },
  "api/Silverback.Messaging.Publishing.CommandPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.CommandPublisher.html",
    "title": "Class CommandPublisher | Silverback",
    "keywords": "Class CommandPublisher Inheritance System.Object CommandPublisher Implements ICommandPublisher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public class CommandPublisher : ICommandPublisher Constructors | Improve this doc View source CommandPublisher(IPublisher) Initializes a new instance of the CommandPublisher class. Declaration public CommandPublisher(IPublisher publisher) Parameters Type Name Description Silverback.Messaging.Publishing.IPublisher publisher The Silverback.Messaging.Publishing.IPublisher to be wrapped. Methods | Improve this doc View source Execute(ICommand) Declaration public void Execute(ICommand commandMessage) Parameters Type Name Description ICommand commandMessage | Improve this doc View source Execute(ICommand, Boolean) Declaration public void Execute(ICommand commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand commandMessage System.Boolean throwIfUnhandled | Improve this doc View source Execute<TResult>(ICommand<TResult>) Declaration public TResult Execute<TResult>(ICommand<TResult> commandMessage) Parameters Type Name Description ICommand <TResult> commandMessage Returns Type Description TResult Type Parameters Name Description TResult | Improve this doc View source Execute<TResult>(ICommand<TResult>, Boolean) Declaration public TResult Execute<TResult>(ICommand<TResult> commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand <TResult> commandMessage System.Boolean throwIfUnhandled Returns Type Description TResult Type Parameters Name Description TResult | Improve this doc View source ExecuteAsync(ICommand) Declaration public Task ExecuteAsync(ICommand commandMessage) Parameters Type Name Description ICommand commandMessage Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ExecuteAsync(ICommand, Boolean) Declaration public Task ExecuteAsync(ICommand commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand commandMessage System.Boolean throwIfUnhandled Returns Type Description System.Threading.Tasks.Task | Improve this doc View source ExecuteAsync<TResult>(ICommand<TResult>) Declaration public Task<TResult> ExecuteAsync<TResult>(ICommand<TResult> commandMessage) Parameters Type Name Description ICommand <TResult> commandMessage Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult | Improve this doc View source ExecuteAsync<TResult>(ICommand<TResult>, Boolean) Declaration public Task<TResult> ExecuteAsync<TResult>(ICommand<TResult> commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand <TResult> commandMessage System.Boolean throwIfUnhandled Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult Implements ICommandPublisher"
  },
  "api/Silverback.Messaging.Publishing.EventPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.EventPublisher.html",
    "title": "Class EventPublisher | Silverback",
    "keywords": "Class EventPublisher Inheritance System.Object EventPublisher Implements IEventPublisher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public class EventPublisher : IEventPublisher Constructors | Improve this doc View source EventPublisher(IPublisher) Initializes a new instance of the EventPublisher class. Declaration public EventPublisher(IPublisher publisher) Parameters Type Name Description Silverback.Messaging.Publishing.IPublisher publisher The Silverback.Messaging.Publishing.IPublisher to be wrapped. Methods | Improve this doc View source Publish(IEvent) Declaration public void Publish(IEvent eventMessage) Parameters Type Name Description IEvent eventMessage | Improve this doc View source Publish(IEvent, Boolean) Declaration public void Publish(IEvent eventMessage, bool throwIfUnhandled) Parameters Type Name Description IEvent eventMessage System.Boolean throwIfUnhandled | Improve this doc View source PublishAsync(IEvent) Declaration public Task PublishAsync(IEvent eventMessage) Parameters Type Name Description IEvent eventMessage Returns Type Description System.Threading.Tasks.Task | Improve this doc View source PublishAsync(IEvent, Boolean) Declaration public Task PublishAsync(IEvent eventMessage, bool throwIfUnhandled) Parameters Type Name Description IEvent eventMessage System.Boolean throwIfUnhandled Returns Type Description System.Threading.Tasks.Task Implements IEventPublisher"
  },
  "api/Silverback.Messaging.Publishing.html": {
    "href": "api/Silverback.Messaging.Publishing.html",
    "title": "Namespace Silverback.Messaging.Publishing | Silverback",
    "keywords": "Namespace Silverback.Messaging.Publishing Classes CommandPublisher EventPublisher QueryPublisher Interfaces ICommandPublisher Publishes the messages implementing ICommand or ICommand<TResult> . IEventPublisher Publishes the messages implementing IEvent . IQueryPublisher Publishes the messages implementing IQuery<TResult> ."
  },
  "api/Silverback.Messaging.Publishing.ICommandPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.ICommandPublisher.html",
    "title": "Interface ICommandPublisher | Silverback",
    "keywords": "Interface ICommandPublisher Publishes the messages implementing ICommand or ICommand<TResult> . Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public interface ICommandPublisher Methods | Improve this doc View source Execute(ICommand) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Execute(ICommand commandMessage) Parameters Type Name Description ICommand commandMessage The command to be executed. | Improve this doc View source Execute(ICommand, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Execute(ICommand commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. | Improve this doc View source Execute<TResult>(ICommand<TResult>) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration TResult Execute<TResult>(ICommand<TResult> commandMessage) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. Returns Type Description TResult The command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source Execute<TResult>(ICommand<TResult>, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration TResult Execute<TResult>(ICommand<TResult> commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description TResult The command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source ExecuteAsync(ICommand) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task ExecuteAsync(ICommand commandMessage) Parameters Type Name Description ICommand commandMessage The command to be executed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExecuteAsync(ICommand, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task ExecuteAsync(ICommand commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExecuteAsync<TResult>(ICommand<TResult>) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<TResult> ExecuteAsync<TResult>(ICommand<TResult> commandMessage) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source ExecuteAsync<TResult>(ICommand<TResult>, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<TResult> ExecuteAsync<TResult>(ICommand<TResult> commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers."
  },
  "api/Silverback.Messaging.Publishing.IEventPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.IEventPublisher.html",
    "title": "Interface IEventPublisher | Silverback",
    "keywords": "Interface IEventPublisher Publishes the messages implementing IEvent . Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public interface IEventPublisher Methods | Improve this doc View source Publish(IEvent) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Publish(IEvent eventMessage) Parameters Type Name Description IEvent eventMessage The event to be published. | Improve this doc View source Publish(IEvent, Boolean) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Publish(IEvent eventMessage, bool throwIfUnhandled) Parameters Type Name Description IEvent eventMessage The event to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. | Improve this doc View source PublishAsync(IEvent) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task PublishAsync(IEvent eventMessage) Parameters Type Name Description IEvent eventMessage The event to be executed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source PublishAsync(IEvent, Boolean) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task PublishAsync(IEvent eventMessage, bool throwIfUnhandled) Parameters Type Name Description IEvent eventMessage The event to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Publishing.IQueryPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.IQueryPublisher.html",
    "title": "Interface IQueryPublisher | Silverback",
    "keywords": "Interface IQueryPublisher Publishes the messages implementing IQuery<TResult> . Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public interface IQueryPublisher Methods | Improve this doc View source Execute<TResult>(IQuery<TResult>) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration TResult Execute<TResult>(IQuery<TResult> queryMessage) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. Returns Type Description TResult The query result. Type Parameters Name Description TResult The type of the expected query result. | Improve this doc View source Execute<TResult>(IQuery<TResult>, Boolean) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration TResult Execute<TResult>(IQuery<TResult> queryMessage, bool throwIfUnhandled) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description TResult The query result. Type Parameters Name Description TResult The type of the expected query result. | Improve this doc View source ExecuteAsync<TResult>(IQuery<TResult>) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<TResult> ExecuteAsync<TResult>(IQuery<TResult> queryMessage) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the query result. Type Parameters Name Description TResult The type of the expected query result. | Improve this doc View source ExecuteAsync<TResult>(IQuery<TResult>, Boolean) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<TResult> ExecuteAsync<TResult>(IQuery<TResult> queryMessage, bool throwIfUnhandled) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the query result. Type Parameters Name Description TResult The type of the expected query result."
  },
  "api/Silverback.Messaging.Publishing.QueryPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.QueryPublisher.html",
    "title": "Class QueryPublisher | Silverback",
    "keywords": "Class QueryPublisher Inheritance System.Object QueryPublisher Implements IQueryPublisher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public class QueryPublisher : IQueryPublisher Constructors | Improve this doc View source QueryPublisher(IPublisher) Initializes a new instance of the QueryPublisher class. Declaration public QueryPublisher(IPublisher publisher) Parameters Type Name Description Silverback.Messaging.Publishing.IPublisher publisher The Silverback.Messaging.Publishing.IPublisher to be wrapped. Methods | Improve this doc View source Execute<TResult>(IQuery<TResult>) Declaration public TResult Execute<TResult>(IQuery<TResult> queryMessage) Parameters Type Name Description IQuery <TResult> queryMessage Returns Type Description TResult Type Parameters Name Description TResult | Improve this doc View source Execute<TResult>(IQuery<TResult>, Boolean) Declaration public TResult Execute<TResult>(IQuery<TResult> queryMessage, bool throwIfUnhandled) Parameters Type Name Description IQuery <TResult> queryMessage System.Boolean throwIfUnhandled Returns Type Description TResult Type Parameters Name Description TResult | Improve this doc View source ExecuteAsync<TResult>(IQuery<TResult>) Declaration public Task<TResult> ExecuteAsync<TResult>(IQuery<TResult> queryMessage) Parameters Type Name Description IQuery <TResult> queryMessage Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult | Improve this doc View source ExecuteAsync<TResult>(IQuery<TResult>, Boolean) Declaration public Task<TResult> ExecuteAsync<TResult>(IQuery<TResult> queryMessage, bool throwIfUnhandled) Parameters Type Name Description IQuery <TResult> queryMessage System.Boolean throwIfUnhandled Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult Implements IQueryPublisher"
  },
  "api/Silverback.Messaging.Sequences.Batch.BatchSequence.html": {
    "href": "api/Silverback.Messaging.Sequences.Batch.BatchSequence.html",
    "title": "Class BatchSequence | Silverback",
    "keywords": "Class BatchSequence Represent an arbitrary sequence of messages created to consume unrelated messages in batch (see BatchSettings ). Inheritance System.Object SequenceBase < IInboundEnvelope > Sequence BatchSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IInboundEnvelope>.SequenceId SequenceBase<IInboundEnvelope>.IsPending SequenceBase<IInboundEnvelope>.IsAborted SequenceBase<IInboundEnvelope>.IsBeingConsumed SequenceBase<IInboundEnvelope>.Sequences SequenceBase<IInboundEnvelope>.Context SequenceBase<IInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IInboundEnvelope>.ProcessingCompletedTask SequenceBase<IInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IInboundEnvelope>.StreamProvider SequenceBase<IInboundEnvelope>.Activity SequenceBase<IInboundEnvelope>.ParentSequence SequenceBase<IInboundEnvelope>.AbortException SequenceBase<IInboundEnvelope>.Length SequenceBase<IInboundEnvelope>.TotalLength SequenceBase<IInboundEnvelope>.IsNew SequenceBase<IInboundEnvelope>.IsCompleting SequenceBase<IInboundEnvelope>.IsComplete SequenceBase<IInboundEnvelope>.AbortReason SequenceBase<IInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IInboundEnvelope>.Dispose() SequenceBase<IInboundEnvelope>.AddCoreAsync(IInboundEnvelope, ISequence, Boolean) SequenceBase<IInboundEnvelope>.IsLastMessage(IInboundEnvelope) SequenceBase<IInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IInboundEnvelope>.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Batch Assembly : Silverback.Integration.dll Syntax public class BatchSequence : Sequence, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source BatchSequence(String, ConsumerPipelineContext) Initializes a new instance of the BatchSequence class. Declaration public BatchSequence(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. Methods | Improve this doc View source OnTimeoutElapsedAsync() Called when the timout is elapsed. In this special case the sequence is completed instead of aborted. Declaration protected override Task OnTimeoutElapsedAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Silverback.Messaging.Sequences.SequenceBase<Silverback.Messaging.Messages.IInboundEnvelope>.OnTimeoutElapsedAsync() Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.Batch.BatchSequenceReader.html": {
    "href": "api/Silverback.Messaging.Sequences.Batch.BatchSequenceReader.html",
    "title": "Class BatchSequenceReader | Silverback",
    "keywords": "Class BatchSequenceReader Enables the batch processing creating a BatchSequence containing the configured number of messages. Inheritance System.Object SequenceReaderBase BatchSequenceReader Implements ISequenceReader Silverback.ISorted Inherited Members SequenceReaderBase.HandlesRawMessages SequenceReaderBase.GetSequenceAsync(ConsumerPipelineContext) SequenceReaderBase.CreateNewSequenceAsync(String, ConsumerPipelineContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Batch Assembly : Silverback.Integration.dll Syntax public sealed class BatchSequenceReader : SequenceReaderBase, ISequenceReader, ISorted Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source CanHandleAsync(ConsumerPipelineContext) Declaration public override Task<bool> CanHandleAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context Returns Type Description System.Threading.Tasks.Task < System.Boolean > Overrides SequenceReaderBase.CanHandleAsync(ConsumerPipelineContext) | Improve this doc View source CreateNewSequenceCore(String, ConsumerPipelineContext) Declaration protected override ISequence CreateNewSequenceCore(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId ConsumerPipelineContext context Returns Type Description ISequence Overrides SequenceReaderBase.CreateNewSequenceCore(String, ConsumerPipelineContext) | Improve this doc View source GetExistingSequenceAsync(ConsumerPipelineContext, String) Declaration protected override Task<ISequence> GetExistingSequenceAsync(ConsumerPipelineContext context, string sequenceId) Parameters Type Name Description ConsumerPipelineContext context System.String sequenceId Returns Type Description System.Threading.Tasks.Task < ISequence > Overrides SequenceReaderBase.GetExistingSequenceAsync(ConsumerPipelineContext, String) | Improve this doc View source GetSequenceIdAsync(ConsumerPipelineContext) Declaration protected override Task<string> GetSequenceIdAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context Returns Type Description System.Threading.Tasks.Task < System.String > Overrides SequenceReaderBase.GetSequenceIdAsync(ConsumerPipelineContext) | Improve this doc View source IsNewSequenceAsync(String, ConsumerPipelineContext) Declaration protected override Task<bool> IsNewSequenceAsync(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId ConsumerPipelineContext context Returns Type Description System.Threading.Tasks.Task < System.Boolean > Overrides SequenceReaderBase.IsNewSequenceAsync(String, ConsumerPipelineContext) Implements ISequenceReader Silverback.ISorted"
  },
  "api/Silverback.Messaging.Sequences.Batch.BatchSettings.html": {
    "href": "api/Silverback.Messaging.Sequences.Batch.BatchSettings.html",
    "title": "Class BatchSettings | Silverback",
    "keywords": "Class BatchSettings The batch consuming settings. Inheritance System.Object BatchSettings Implements System.IEquatable < BatchSettings > IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Batch Assembly : Silverback.Integration.dll Syntax public sealed class BatchSettings : IEquatable<BatchSettings>, IValidatableEndpointSettings Properties | Improve this doc View source MaxWaitTime Gets or sets the maximum amount of time to wait for the batch to be filled. After this time the batch will be completed even if the specified Size is not reached. Declaration public TimeSpan? MaxWaitTime { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source Size Gets or sets the number of messages to be processed in batch. Setting this property to a value greater than 1 enables batch consuming. Declaration public int Size { get; set; } Property Value Type Description System.Int32 Methods | Improve this doc View source Equals(BatchSettings) Declaration public bool Equals(BatchSettings other) Parameters Type Name Description BatchSettings other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Declaration public void Validate() Implements System.IEquatable<T> IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Sequences.Batch.html": {
    "href": "api/Silverback.Messaging.Sequences.Batch.html",
    "title": "Namespace Silverback.Messaging.Sequences.Batch | Silverback",
    "keywords": "Namespace Silverback.Messaging.Sequences.Batch Classes BatchSequence Represent an arbitrary sequence of messages created to consume unrelated messages in batch (see BatchSettings ). BatchSequenceReader Enables the batch processing creating a BatchSequence containing the configured number of messages. BatchSettings The batch consuming settings."
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkSequence.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkSequence.html",
    "title": "Class ChunkSequence | Silverback",
    "keywords": "Class ChunkSequence Represents a sequence of chunks that belong to the same message. Inheritance System.Object SequenceBase < IRawInboundEnvelope > RawSequence ChunkSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IRawInboundEnvelope>.SequenceId SequenceBase<IRawInboundEnvelope>.IsPending SequenceBase<IRawInboundEnvelope>.IsAborted SequenceBase<IRawInboundEnvelope>.IsBeingConsumed SequenceBase<IRawInboundEnvelope>.Sequences SequenceBase<IRawInboundEnvelope>.Context SequenceBase<IRawInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IRawInboundEnvelope>.ProcessingCompletedTask SequenceBase<IRawInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IRawInboundEnvelope>.StreamProvider SequenceBase<IRawInboundEnvelope>.Activity SequenceBase<IRawInboundEnvelope>.ParentSequence SequenceBase<IRawInboundEnvelope>.AbortException SequenceBase<IRawInboundEnvelope>.Length SequenceBase<IRawInboundEnvelope>.TotalLength SequenceBase<IRawInboundEnvelope>.IsNew SequenceBase<IRawInboundEnvelope>.IsCompleting SequenceBase<IRawInboundEnvelope>.IsComplete SequenceBase<IRawInboundEnvelope>.AbortReason SequenceBase<IRawInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IRawInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IRawInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IRawInboundEnvelope>.Dispose() SequenceBase<IRawInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IRawInboundEnvelope>.Dispose(Boolean) SequenceBase<IRawInboundEnvelope>.OnTimeoutElapsedAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public class ChunkSequence : RawSequence, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source ChunkSequence(String, Nullable<Int32>, ConsumerPipelineContext) Initializes a new instance of the ChunkSequence class. Declaration public ChunkSequence(string sequenceId, int? totalLength, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. System.Nullable < System.Int32 > totalLength The expected total length of the sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. Methods | Improve this doc View source AddCoreAsync(IRawInboundEnvelope, ISequence, Boolean) Declaration protected override Task<int> AddCoreAsync(IRawInboundEnvelope envelope, ISequence sequence, bool throwIfUnhandled) Parameters Type Name Description IRawInboundEnvelope envelope ISequence sequence System.Boolean throwIfUnhandled Returns Type Description System.Threading.Tasks.Task < System.Int32 > Overrides Silverback.Messaging.Sequences.SequenceBase<Silverback.Messaging.Messages.IRawInboundEnvelope>.AddCoreAsync(Silverback.Messaging.Messages.IRawInboundEnvelope, Silverback.Messaging.Sequences.ISequence, System.Boolean) | Improve this doc View source IsLastMessage(IRawInboundEnvelope) Declaration protected override bool IsLastMessage(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope Returns Type Description System.Boolean Overrides Silverback.Messaging.Sequences.SequenceBase<Silverback.Messaging.Messages.IRawInboundEnvelope>.IsLastMessage(Silverback.Messaging.Messages.IRawInboundEnvelope) Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkSequenceReader.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkSequenceReader.html",
    "title": "Class ChunkSequenceReader | Silverback",
    "keywords": "Class ChunkSequenceReader Creates a ChunkSequence containing all the chunks of the original message. Inheritance System.Object SequenceReaderBase ChunkSequenceReader Implements ISequenceReader Inherited Members SequenceReaderBase.HandlesRawMessages SequenceReaderBase.GetSequenceAsync(ConsumerPipelineContext) SequenceReaderBase.GetSequenceIdAsync(ConsumerPipelineContext) SequenceReaderBase.CreateNewSequenceAsync(String, ConsumerPipelineContext) SequenceReaderBase.GetExistingSequenceAsync(ConsumerPipelineContext, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public class ChunkSequenceReader : SequenceReaderBase, ISequenceReader Constructors | Improve this doc View source ChunkSequenceReader() Initializes a new instance of the ChunkSequenceReader class. Declaration public ChunkSequenceReader() Methods | Improve this doc View source CanHandleAsync(ConsumerPipelineContext) Declaration public override Task<bool> CanHandleAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context Returns Type Description System.Threading.Tasks.Task < System.Boolean > Overrides SequenceReaderBase.CanHandleAsync(ConsumerPipelineContext) | Improve this doc View source CreateNewSequenceCore(String, ConsumerPipelineContext) Declaration protected override ISequence CreateNewSequenceCore(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId ConsumerPipelineContext context Returns Type Description ISequence Overrides SequenceReaderBase.CreateNewSequenceCore(String, ConsumerPipelineContext) | Improve this doc View source IsNewSequenceAsync(String, ConsumerPipelineContext) Declaration protected override Task<bool> IsNewSequenceAsync(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId ConsumerPipelineContext context Returns Type Description System.Threading.Tasks.Task < System.Boolean > Overrides SequenceReaderBase.IsNewSequenceAsync(String, ConsumerPipelineContext) Implements ISequenceReader"
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkSequenceWriter.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkSequenceWriter.html",
    "title": "Class ChunkSequenceWriter | Silverback",
    "keywords": "Class ChunkSequenceWriter Creates the chunks sequence according to the ChunkSettings . Inheritance System.Object ChunkSequenceWriter Implements ISequenceWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public class ChunkSequenceWriter : ISequenceWriter Methods | Improve this doc View source CanHandle(IOutboundEnvelope) Declaration public bool CanHandle(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope Returns Type Description System.Boolean | Improve this doc View source ProcessMessageAsync(IOutboundEnvelope) Declaration public IAsyncEnumerable<IOutboundEnvelope> ProcessMessageAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope Returns Type Description System.Collections.Generic.IAsyncEnumerable < IOutboundEnvelope > Implements ISequenceWriter"
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkSettings.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkSettings.html",
    "title": "Class ChunkSettings | Silverback",
    "keywords": "Class ChunkSettings The chunking settings. To enable chunking just set the Size property to the desired (maximum) chunk size. Inheritance System.Object ChunkSettings Implements System.IEquatable < ChunkSettings > IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public sealed class ChunkSettings : IEquatable<ChunkSettings>, IValidatableEndpointSettings Properties | Improve this doc View source AlwaysAddHeaders Gets or sets a value indicating whether the x-chunk-index and related headers have to be added to the produced message in any case, even if its size doesn't exceed the single chunk size. The default is true . This setting is ignored if chunking is disabled ( Size is not set). Declaration public bool AlwaysAddHeaders { get; set; } Property Value Type Description System.Boolean | Improve this doc View source Size Gets or sets the size in bytes of each chunk. The default is System.Int32.MaxValue , meaning that chunking is disabled. Declaration public int Size { get; set; } Property Value Type Description System.Int32 Methods | Improve this doc View source Equals(ChunkSettings) Declaration public bool Equals(ChunkSettings other) Parameters Type Name Description ChunkSettings other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Declaration public void Validate() Implements System.IEquatable<T> IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkStream.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkStream.html",
    "title": "Class ChunkStream | Silverback",
    "keywords": "Class ChunkStream The System.IO.Stream implementation used to read the chunked messages. This stream is used by the ChunkSequenceReader and it is asynchronously pushed with the chunks being consumed. Inheritance System.Object System.MarshalByRefObject System.IO.Stream ChunkStream Implements System.IAsyncDisposable System.IDisposable Inherited Members System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.FlushAsync(System.Threading.CancellationToken) System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public sealed class ChunkStream : Stream, IAsyncDisposable, IDisposable Constructors | Improve this doc View source ChunkStream(IMessageStreamEnumerable<IRawInboundEnvelope>) Initializes a new instance of the ChunkStream class. Declaration public ChunkStream(IMessageStreamEnumerable<IRawInboundEnvelope> source) Parameters Type Name Description Silverback.Messaging.Messages.IMessageStreamEnumerable < IRawInboundEnvelope > source The chunks composing this stream. Properties | Improve this doc View source CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead | Improve this doc View source CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek | Improve this doc View source CanTimeout Declaration public override bool CanTimeout { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanTimeout | Improve this doc View source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite | Improve this doc View source Length Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length | Improve this doc View source Position Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods | Improve this doc View source Close() Declaration public override void Close() Overrides System.IO.Stream.Close() | Improve this doc View source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.Stream.Dispose(System.Boolean) | Improve this doc View source DisposeAsync() Declaration public override ValueTask DisposeAsync() Returns Type Description System.Threading.Tasks.ValueTask Overrides System.IO.Stream.DisposeAsync() | Improve this doc View source Flush() Declaration public override void Flush() Overrides System.IO.Stream.Flush() | Improve this doc View source Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Returns Type Description System.Int32 Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) | Improve this doc View source ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 > Overrides System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) | Improve this doc View source Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset System.IO.SeekOrigin origin Returns Type Description System.Int64 Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) | Improve this doc View source SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value Overrides System.IO.Stream.SetLength(System.Int64) | Improve this doc View source Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) Implements System.IAsyncDisposable System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.Chunking.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.html",
    "title": "Namespace Silverback.Messaging.Sequences.Chunking | Silverback",
    "keywords": "Namespace Silverback.Messaging.Sequences.Chunking Classes ChunkSequence Represents a sequence of chunks that belong to the same message. ChunkSequenceReader Creates a ChunkSequence containing all the chunks of the original message. ChunkSequenceWriter Creates the chunks sequence according to the ChunkSettings . ChunkSettings The chunking settings. To enable chunking just set the Size property to the desired (maximum) chunk size. ChunkStream The System.IO.Stream implementation used to read the chunked messages. This stream is used by the ChunkSequenceReader and it is asynchronously pushed with the chunks being consumed."
  },
  "api/Silverback.Messaging.Sequences.html": {
    "href": "api/Silverback.Messaging.Sequences.html",
    "title": "Namespace Silverback.Messaging.Sequences | Silverback",
    "keywords": "Namespace Silverback.Messaging.Sequences Classes IncompleteSequence Represent an incomplete sequence (missing the first message) and is used to signal the pipeline to ignore the message. RawSequence RawSequencerConsumerBehavior Sequence SequenceBase<TEnvelope> SequenceException The exception that is thrown when a sequence cannot be properly recreated (e.g. because of bad ordering or similar). SequencerConsumerBehavior SequencerConsumerBehaviorBase Uses the available implementations of ISequenceReader to assign the incoming message to the right sequence. SequenceReaderBase The base class for the ISequenceReader implementations. It encapsulates the logic to deal with the ISequenceStore . SequencerProducerBehavior Uses the available implementations of ISequenceWriter to set the proper headers and split the published message or messages set to create the sequences. SequenceSettings The sequence handling settings. Interfaces ISequence Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. ISequenceReader Can recognize a message that belongs to a sequence and match it with the proper ISequence instance. ISequenceStore The temporary store for the sequences being consumed. ISequenceWriter Can set the headers used to match the message with the sequence it belongs to. If needed it can also split a single message into multiple messages. Enums SequenceAbortReason The possible reasons for a sequence to be aborted."
  },
  "api/Silverback.Messaging.Sequences.IncompleteSequence.html": {
    "href": "api/Silverback.Messaging.Sequences.IncompleteSequence.html",
    "title": "Class IncompleteSequence | Silverback",
    "keywords": "Class IncompleteSequence Represent an incomplete sequence (missing the first message) and is used to signal the pipeline to ignore the message. Inheritance System.Object SequenceBase < IRawInboundEnvelope > RawSequence IncompleteSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IRawInboundEnvelope>.SequenceId SequenceBase<IRawInboundEnvelope>.IsPending SequenceBase<IRawInboundEnvelope>.IsAborted SequenceBase<IRawInboundEnvelope>.IsBeingConsumed SequenceBase<IRawInboundEnvelope>.Sequences SequenceBase<IRawInboundEnvelope>.Context SequenceBase<IRawInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IRawInboundEnvelope>.ProcessingCompletedTask SequenceBase<IRawInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IRawInboundEnvelope>.StreamProvider SequenceBase<IRawInboundEnvelope>.Activity SequenceBase<IRawInboundEnvelope>.ParentSequence SequenceBase<IRawInboundEnvelope>.AbortException SequenceBase<IRawInboundEnvelope>.Length SequenceBase<IRawInboundEnvelope>.TotalLength SequenceBase<IRawInboundEnvelope>.IsNew SequenceBase<IRawInboundEnvelope>.IsCompleting SequenceBase<IRawInboundEnvelope>.IsComplete SequenceBase<IRawInboundEnvelope>.AbortReason SequenceBase<IRawInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IRawInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IRawInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IRawInboundEnvelope>.Dispose() SequenceBase<IRawInboundEnvelope>.AddCoreAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.IsLastMessage(IRawInboundEnvelope) SequenceBase<IRawInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IRawInboundEnvelope>.Dispose(Boolean) SequenceBase<IRawInboundEnvelope>.OnTimeoutElapsedAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public class IncompleteSequence : RawSequence, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source IncompleteSequence(String, ConsumerPipelineContext) Initializes a new instance of the IncompleteSequence class. Declaration public IncompleteSequence(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.ISequence.html": {
    "href": "api/Silverback.Messaging.Sequences.ISequence.html",
    "title": "Interface ISequence | Silverback",
    "keywords": "Interface ISequence Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. Inherited Members System.IDisposable.Dispose() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public interface ISequence : IDisposable Properties | Improve this doc View source AbortException Gets the exception that caused the abort, if any. Declaration Exception AbortException { get; } Property Value Type Description System.Exception Remarks This property is filled only when AbortReason is Error . | Improve this doc View source AbortReason Gets the reason of the abort. Declaration SequenceAbortReason AbortReason { get; } Property Value Type Description SequenceAbortReason | Improve this doc View source Context Gets the ConsumerPipelineContext related to the processing of this sequence (usually the context of the first message that initiated the sequence). Declaration ConsumerPipelineContext Context { get; } Property Value Type Description ConsumerPipelineContext | Improve this doc View source IsAborted Gets a value indicating whether the sequence processing has been aborted and no further message will be pushed. Declaration bool IsAborted { get; } Property Value Type Description System.Boolean | Improve this doc View source IsBeingConsumed Gets a value indicating whether the sequence is being consumed. This value is set to true as soon as CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) is called and the output Silverback.Messaging.Messages.IMessageStreamEnumerable<TMessage> is created. Declaration bool IsBeingConsumed { get; } Property Value Type Description System.Boolean | Improve this doc View source IsComplete Gets a value indicating whether all messages belonging to the sequence have been pushed and processed. Declaration bool IsComplete { get; } Property Value Type Description System.Boolean | Improve this doc View source IsCompleting Gets a value indicating whether all messages belonging to the sequence have been pushed and the last message is currently being processed. Declaration bool IsCompleting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsNew Gets a value indicating whether the first message in the sequence was consumed and this instance was just created. Declaration bool IsNew { get; } Property Value Type Description System.Boolean | Improve this doc View source IsPending Gets a value indicating whether the sequence is incomplete and awaiting for new messages to be pushed. Declaration bool IsPending { get; } Property Value Type Description System.Boolean | Improve this doc View source Length Gets the length of the sequence so far. Declaration int Length { get; } Property Value Type Description System.Int32 | Improve this doc View source ParentSequence Gets the ISequence that contain this sequence (e.g. the ChunkSequence whose aggregated message is added to a BatchSequence . Declaration ISequence ParentSequence { get; } Property Value Type Description ISequence | Improve this doc View source SequenceId Gets the identifier that is used to match the consumed messages with their belonging sequence. Declaration string SequenceId { get; } Property Value Type Description System.String | Improve this doc View source Sequences Gets the ISequence that were added to this sequence (e.g. the ChunkSequence whose aggregated message is added to a BatchSequence . Declaration IReadOnlyCollection<ISequence> Sequences { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < ISequence > | Improve this doc View source StreamProvider Gets the Silverback.Messaging.Messages.IMessageStreamProvider that will be pushed with the messages belonging to the sequence. Declaration IMessageStreamProvider StreamProvider { get; } Property Value Type Description Silverback.Messaging.Messages.IMessageStreamProvider | Improve this doc View source TotalLength Gets the declared total length of the sequence, if known. Declaration int? TotalLength { get; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this doc View source AbortAsync(SequenceAbortReason, Exception) Aborts the sequence processing. Used for example to signal that an exception occurred or the enumeration returned prematurely. Declaration Task AbortAsync(SequenceAbortReason reason, Exception exception = null) Parameters Type Name Description SequenceAbortReason reason The abort reason. System.Exception exception The exception that caused the abort, if an exception was thrown. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source AddAsync(IRawInboundEnvelope, ISequence, Boolean) Adds the message to the sequence. Declaration Task<int> AddAsync(IRawInboundEnvelope envelope, ISequence sequence, bool throwIfUnhandled = true) Parameters Type Name Description IRawInboundEnvelope envelope The envelope to be added to the sequence. ISequence sequence The sequence to be added to the sequence. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of streams that have been pushed. | Improve this doc View source CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) Creates a Silverback.Messaging.Messages.IMessageStreamEnumerable<TMessage> that will be pushed with the messages belonging to the sequence. Declaration IMessageStreamEnumerable<TMessage> CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < Silverback.Messaging.Subscribers.IMessageFilter > filters The filters to be applied. Returns Type Description Silverback.Messaging.Messages.IMessageStreamEnumerable <TMessage> The Silverback.Messaging.Messages.IMessageStreamEnumerable<TMessage> . Type Parameters Name Description TMessage The type of the messages to be streamed. | Improve this doc View source GetBrokerMessageIdentifiers() Gets the identifiers of the messages belonging to the sequence. Declaration IReadOnlyList<IBrokerMessageIdentifier> GetBrokerMessageIdentifiers() Returns Type Description System.Collections.Generic.IReadOnlyList < IBrokerMessageIdentifier > The list of identifiers."
  },
  "api/Silverback.Messaging.Sequences.ISequenceReader.html": {
    "href": "api/Silverback.Messaging.Sequences.ISequenceReader.html",
    "title": "Interface ISequenceReader | Silverback",
    "keywords": "Interface ISequenceReader Can recognize a message that belongs to a sequence and match it with the proper ISequence instance. Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public interface ISequenceReader Properties | Improve this doc View source HandlesRawMessages Gets a value indicating whether this reader handles the raw messages, before they are being deserialized, decrypted, etc. Declaration bool HandlesRawMessages { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source CanHandleAsync(ConsumerPipelineContext) Checks whether this reader can and must handle the message being processed in the specified context. Declaration Task<bool> CanHandleAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether this reader can and must handle the message. | Improve this doc View source GetSequenceAsync(ConsumerPipelineContext) Returns the ISequence related to the message being processed. Declaration Task<ISequence> GetSequenceAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < ISequence > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the ISequence ."
  },
  "api/Silverback.Messaging.Sequences.ISequenceStore.html": {
    "href": "api/Silverback.Messaging.Sequences.ISequenceStore.html",
    "title": "Interface ISequenceStore | Silverback",
    "keywords": "Interface ISequenceStore The temporary store for the sequences being consumed. Inherited Members System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Sequences.ISequence>.Count System.Collections.Generic.IEnumerable<Silverback.Messaging.Sequences.ISequence>.GetEnumerator() System.IDisposable.Dispose() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public interface ISequenceStore : IReadOnlyCollection<ISequence>, IEnumerable<ISequence>, IEnumerable, IDisposable Methods | Improve this doc View source AddAsync<TSequence>(TSequence) Adds the specified sequence to the store. Declaration Task<TSequence> AddAsync<TSequence>(TSequence sequence) where TSequence : class, ISequence Parameters Type Name Description TSequence sequence The sequence to be added. Returns Type Description System.Threading.Tasks.Task <TSequence> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the ISequence instance. Type Parameters Name Description TSequence The type of the sequence to be added. | Improve this doc View source GetAsync<TSequence>(String, Boolean) Gets the sequence with the specified id. Declaration Task<TSequence> GetAsync<TSequence>(string sequenceId, bool matchPrefix = false) where TSequence : class, ISequence Parameters Type Name Description System.String sequenceId The sequence identifier. System.Boolean matchPrefix Enables sequence id prefix matching (String.StartsWith). Returns Type Description System.Threading.Tasks.Task <TSequence> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the ISequence instance. Type Parameters Name Description TSequence The type of the sequence to be retrieved. | Improve this doc View source GetPendingSequences(Boolean) Returns the pending sequences currently in the store. Declaration IReadOnlyCollection<ISequence> GetPendingSequences(bool includeUnbounded = false) Parameters Type Name Description System.Boolean includeUnbounded A value indicating whether the Silverback.Messaging.Sequences.Unbounded.UnboundedSequence instances have to be returned as well. Returns Type Description System.Collections.Generic.IReadOnlyCollection < ISequence > The collection of sequences. | Improve this doc View source RemoveAsync(String) Removes the sequence with the specified id. Declaration Task RemoveAsync(string sequenceId) Parameters Type Name Description System.String sequenceId The sequence identifier. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Sequences.ISequenceWriter.html": {
    "href": "api/Silverback.Messaging.Sequences.ISequenceWriter.html",
    "title": "Interface ISequenceWriter | Silverback",
    "keywords": "Interface ISequenceWriter Can set the headers used to match the message with the sequence it belongs to. If needed it can also split a single message into multiple messages. Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public interface ISequenceWriter Methods | Improve this doc View source CanHandle(IOutboundEnvelope) Checks whether this writer can and must handle the specified message. Declaration bool CanHandle(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be handled. Returns Type Description System.Boolean A value indicating whether this writer can and must handle the message. | Improve this doc View source ProcessMessageAsync(IOutboundEnvelope) Sets the headers used to match the message with the sequence it belongs to. If needed it can also split a single message into multiple messages. Declaration IAsyncEnumerable<IOutboundEnvelope> ProcessMessageAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be handled. Returns Type Description System.Collections.Generic.IAsyncEnumerable < IOutboundEnvelope > An System.Collections.Generic.IAsyncEnumerable<T> with the envelopes containing the messages to be produced."
  },
  "api/Silverback.Messaging.Sequences.RawSequence.html": {
    "href": "api/Silverback.Messaging.Sequences.RawSequence.html",
    "title": "Class RawSequence | Silverback",
    "keywords": "Class RawSequence Inheritance System.Object SequenceBase < IRawInboundEnvelope > RawSequence ChunkSequence IncompleteSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IRawInboundEnvelope>.SequenceId SequenceBase<IRawInboundEnvelope>.IsPending SequenceBase<IRawInboundEnvelope>.IsAborted SequenceBase<IRawInboundEnvelope>.IsBeingConsumed SequenceBase<IRawInboundEnvelope>.Sequences SequenceBase<IRawInboundEnvelope>.Context SequenceBase<IRawInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IRawInboundEnvelope>.ProcessingCompletedTask SequenceBase<IRawInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IRawInboundEnvelope>.StreamProvider SequenceBase<IRawInboundEnvelope>.Activity SequenceBase<IRawInboundEnvelope>.ParentSequence SequenceBase<IRawInboundEnvelope>.AbortException SequenceBase<IRawInboundEnvelope>.Length SequenceBase<IRawInboundEnvelope>.TotalLength SequenceBase<IRawInboundEnvelope>.IsNew SequenceBase<IRawInboundEnvelope>.IsCompleting SequenceBase<IRawInboundEnvelope>.IsComplete SequenceBase<IRawInboundEnvelope>.AbortReason SequenceBase<IRawInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IRawInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IRawInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IRawInboundEnvelope>.Dispose() SequenceBase<IRawInboundEnvelope>.AddCoreAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.IsLastMessage(IRawInboundEnvelope) SequenceBase<IRawInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IRawInboundEnvelope>.Dispose(Boolean) SequenceBase<IRawInboundEnvelope>.OnTimeoutElapsedAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class RawSequence : SequenceBase<IRawInboundEnvelope>, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source RawSequence(String, ConsumerPipelineContext, Boolean, Nullable<TimeSpan>, IMessageStreamProvider) Initializes a new instance of the RawSequence class. Declaration protected RawSequence(string sequenceId, ConsumerPipelineContext context, bool enforceTimeout = true, TimeSpan? timeout = default(TimeSpan? ), IMessageStreamProvider streamProvider = null) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. System.Boolean enforceTimeout A value indicating whether the timeout has to be enforced. System.Nullable < System.TimeSpan > timeout The timeout to be applied. If not specified the value of Endpoint.Sequence.Timeout will be used. Silverback.Messaging.Messages.IMessageStreamProvider streamProvider The Silverback.Messaging.Messages.IMessageStreamProvider to be pushed. A new one will be created if not provided. Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.RawSequencerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Sequences.RawSequencerConsumerBehavior.html",
    "title": "Class RawSequencerConsumerBehavior | Silverback",
    "keywords": "Class RawSequencerConsumerBehavior Inheritance System.Object SequencerConsumerBehaviorBase RawSequencerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members SequencerConsumerBehaviorBase.HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public class RawSequencerConsumerBehavior : SequencerConsumerBehaviorBase, IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source RawSequencerConsumerBehavior(IEnumerable<ISequenceReader>, ISilverbackLogger<RawSequencerConsumerBehavior>) Initializes a new instance of the RawSequencerConsumerBehavior class. Declaration public RawSequencerConsumerBehavior(IEnumerable<ISequenceReader> sequenceReaders, ISilverbackLogger<RawSequencerConsumerBehavior> logger) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISequenceReader > sequenceReaders The ISequenceReader implementations to be used. Silverback.Diagnostics.ISilverbackLogger < RawSequencerConsumerBehavior > logger The Silverback.Diagnostics.ISilverbackLogger . Properties | Improve this doc View source SortIndex Declaration public override int SortIndex { get; } Property Value Type Description System.Int32 Overrides SequencerConsumerBehaviorBase.SortIndex Methods | Improve this doc View source AwaitOtherBehaviorIfNeededAsync(ISequence) Declaration protected override Task AwaitOtherBehaviorIfNeededAsync(ISequence sequence) Parameters Type Name Description ISequence sequence Returns Type Description System.Threading.Tasks.Task Overrides SequencerConsumerBehaviorBase.AwaitOtherBehaviorIfNeededAsync(ISequence) | Improve this doc View source PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration protected override Task PublishSequenceAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Overrides SequencerConsumerBehaviorBase.PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Sequences.Sequence.html": {
    "href": "api/Silverback.Messaging.Sequences.Sequence.html",
    "title": "Class Sequence | Silverback",
    "keywords": "Class Sequence Inheritance System.Object SequenceBase < IInboundEnvelope > Sequence BatchSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IInboundEnvelope>.SequenceId SequenceBase<IInboundEnvelope>.IsPending SequenceBase<IInboundEnvelope>.IsAborted SequenceBase<IInboundEnvelope>.IsBeingConsumed SequenceBase<IInboundEnvelope>.Sequences SequenceBase<IInboundEnvelope>.Context SequenceBase<IInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IInboundEnvelope>.ProcessingCompletedTask SequenceBase<IInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IInboundEnvelope>.StreamProvider SequenceBase<IInboundEnvelope>.Activity SequenceBase<IInboundEnvelope>.ParentSequence SequenceBase<IInboundEnvelope>.AbortException SequenceBase<IInboundEnvelope>.Length SequenceBase<IInboundEnvelope>.TotalLength SequenceBase<IInboundEnvelope>.IsNew SequenceBase<IInboundEnvelope>.IsCompleting SequenceBase<IInboundEnvelope>.IsComplete SequenceBase<IInboundEnvelope>.AbortReason SequenceBase<IInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IInboundEnvelope>.Dispose() SequenceBase<IInboundEnvelope>.AddCoreAsync(IInboundEnvelope, ISequence, Boolean) SequenceBase<IInboundEnvelope>.IsLastMessage(IInboundEnvelope) SequenceBase<IInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IInboundEnvelope>.Dispose(Boolean) SequenceBase<IInboundEnvelope>.OnTimeoutElapsedAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class Sequence : SequenceBase<IInboundEnvelope>, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source Sequence(String, ConsumerPipelineContext, Boolean, Nullable<TimeSpan>) Initializes a new instance of the Sequence class. Declaration protected Sequence(string sequenceId, ConsumerPipelineContext context, bool enforceTimeout = true, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. System.Boolean enforceTimeout A value indicating whether the timeout has to be enforced. System.Nullable < System.TimeSpan > timeout The timeout to be applied. If not specified the value of Endpoint.Sequence.Timeout will be used. Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.SequenceAbortReason.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceAbortReason.html",
    "title": "Enum SequenceAbortReason | Silverback",
    "keywords": "Enum SequenceAbortReason The possible reasons for a sequence to be aborted. Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public enum SequenceAbortReason Fields Name Description ConsumerAborted The consumer aborted the sequence because it is disconnecting (or rebalancing). Disposing The sequence is being disposed before it could complete. EnumerationAborted The subscriber prematurely exited the enumeration loop. Error The sequence was aborted because of an exception thrown either by the consumer pipeline or the subscriber. IncompleteSequence The sequence was incomplete. None The sequence isn't aborted."
  },
  "api/Silverback.Messaging.Sequences.SequenceBase-1.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceBase-1.html",
    "title": "Class SequenceBase<TEnvelope> | Silverback",
    "keywords": "Class SequenceBase<TEnvelope> Inheritance System.Object SequenceBase<TEnvelope> RawSequence Sequence Implements ISequence System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class SequenceBase<TEnvelope> : ISequenceImplementation, ISequence, IDisposable where TEnvelope : IRawInboundEnvelope Type Parameters Name Description TEnvelope Constructors | Improve this doc View source SequenceBase(String, ConsumerPipelineContext, Boolean, Nullable<TimeSpan>, IMessageStreamProvider) Initializes a new instance of the SequenceBase<TEnvelope> class. Declaration protected SequenceBase(string sequenceId, ConsumerPipelineContext context, bool enforceTimeout = true, TimeSpan? timeout = default(TimeSpan? ), IMessageStreamProvider streamProvider = null) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. System.Boolean enforceTimeout A value indicating whether the timeout has to be enforced. System.Nullable < System.TimeSpan > timeout The timeout to be applied. If not specified the value of Endpoint.Sequence.Timeout will be used. Silverback.Messaging.Messages.IMessageStreamProvider streamProvider The Silverback.Messaging.Messages.IMessageStreamProvider to be pushed. A new one will be created if not provided. Properties | Improve this doc View source AbortException Declaration public Exception AbortException { get; } Property Value Type Description System.Exception | Improve this doc View source AbortReason Declaration public SequenceAbortReason AbortReason { get; } Property Value Type Description SequenceAbortReason | Improve this doc View source Activity Declaration public Activity Activity { get; } Property Value Type Description System.Diagnostics.Activity | Improve this doc View source Context Declaration public ConsumerPipelineContext Context { get; } Property Value Type Description ConsumerPipelineContext | Improve this doc View source IsAborted Declaration public bool IsAborted { get; } Property Value Type Description System.Boolean | Improve this doc View source IsBeingConsumed Declaration public bool IsBeingConsumed { get; } Property Value Type Description System.Boolean | Improve this doc View source IsComplete Declaration public bool IsComplete { get; } Property Value Type Description System.Boolean | Improve this doc View source IsCompleting Declaration public bool IsCompleting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsNew Declaration public bool IsNew { get; } Property Value Type Description System.Boolean | Improve this doc View source IsPending Declaration public bool IsPending { get; } Property Value Type Description System.Boolean | Improve this doc View source Length Declaration public int Length { get; protected set; } Property Value Type Description System.Int32 | Improve this doc View source ParentSequence Declaration public ISequence ParentSequence { get; } Property Value Type Description ISequence | Improve this doc View source ProcessingCompletedTask Declaration public Task ProcessingCompletedTask { get; } Property Value Type Description System.Threading.Tasks.Task | Improve this doc View source SequenceId Declaration public string SequenceId { get; } Property Value Type Description System.String | Improve this doc View source SequencerBehaviorsTask Declaration public Task SequencerBehaviorsTask { get; } Property Value Type Description System.Threading.Tasks.Task | Improve this doc View source Sequences Declaration public IReadOnlyCollection<ISequence> Sequences { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < ISequence > | Improve this doc View source ShouldCreateNewActivity Declaration public bool ShouldCreateNewActivity { get; } Property Value Type Description System.Boolean | Improve this doc View source StreamProvider Declaration public IMessageStreamProvider StreamProvider { get; } Property Value Type Description Silverback.Messaging.Messages.IMessageStreamProvider | Improve this doc View source TotalLength Declaration public int? TotalLength { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this doc View source AbortAsync(SequenceAbortReason, Exception) Declaration public Task AbortAsync(SequenceAbortReason reason, Exception exception = null) Parameters Type Name Description SequenceAbortReason reason System.Exception exception Returns Type Description System.Threading.Tasks.Task | Improve this doc View source AddAsync(IRawInboundEnvelope, ISequence, Boolean) Declaration public Task<int> AddAsync(IRawInboundEnvelope envelope, ISequence sequence, bool throwIfUnhandled = true) Parameters Type Name Description IRawInboundEnvelope envelope ISequence sequence System.Boolean throwIfUnhandled Returns Type Description System.Threading.Tasks.Task < System.Int32 > | Improve this doc View source AddCoreAsync(TEnvelope, ISequence, Boolean) Adds the message to the sequence. Declaration protected virtual Task<int> AddCoreAsync(TEnvelope envelope, ISequence sequence, bool throwIfUnhandled) Parameters Type Name Description TEnvelope envelope The envelope to be added to the sequence. ISequence sequence The sequence to be added to the sequence. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of streams that have been pushed. | Improve this doc View source CompleteAsync(CancellationToken) Marks the sequence as complete, meaning no more messages will be pushed. Declaration protected virtual Task CompleteAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken used to cancel the operation. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) Declaration public IMessageStreamEnumerable<TMessage> CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < Silverback.Messaging.Subscribers.IMessageFilter > filters Returns Type Description Silverback.Messaging.Messages.IMessageStreamEnumerable <TMessage> Type Parameters Name Description TMessage | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether the method has been called by the Dispose method and not from the finalizer. | Improve this doc View source GetBrokerMessageIdentifiers() Declaration public IReadOnlyList<IBrokerMessageIdentifier> GetBrokerMessageIdentifiers() Returns Type Description System.Collections.Generic.IReadOnlyList < IBrokerMessageIdentifier > | Improve this doc View source IsLastMessage(TEnvelope) Implements the logic to recognize the last message in the sequence without relying on the TotalCount property. Declaration protected virtual bool IsLastMessage(TEnvelope envelope) Parameters Type Name Description TEnvelope envelope The envelope to be added to the sequence. Returns Type Description System.Boolean true if it is the last message, otherwise false . | Improve this doc View source OnTimeoutElapsedAsync() Called when the timout is elapsed. If not overridden in a derived class, the default implementation aborts the sequence. Declaration protected virtual Task OnTimeoutElapsedAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.SequenceException.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceException.html",
    "title": "Class SequenceException | Silverback",
    "keywords": "Class SequenceException The exception that is thrown when a sequence cannot be properly recreated (e.g. because of bad ordering or similar). Inheritance System.Object System.Exception Silverback.SilverbackException SequenceException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax [Serializable] public class SequenceException : SilverbackException, ISerializable Constructors | Improve this doc View source SequenceException() Initializes a new instance of the SequenceException class. Declaration public SequenceException() | Improve this doc View source SequenceException(SerializationInfo, StreamingContext) Initializes a new instance of the SequenceException class with the serialized data. Declaration protected SequenceException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source SequenceException(String) Initializes a new instance of the SequenceException class with the specified message. Declaration public SequenceException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source SequenceException(String, Exception) Initializes a new instance of the SequenceException class with the specified message and inner exception. Declaration public SequenceException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Sequences.SequencerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Sequences.SequencerConsumerBehavior.html",
    "title": "Class SequencerConsumerBehavior | Silverback",
    "keywords": "Class SequencerConsumerBehavior Inheritance System.Object SequencerConsumerBehaviorBase SequencerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members SequencerConsumerBehaviorBase.AwaitOtherBehaviorIfNeededAsync(ISequence) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public class SequencerConsumerBehavior : SequencerConsumerBehaviorBase, IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source SequencerConsumerBehavior(IEnumerable<ISequenceReader>, ISilverbackLogger<SequencerConsumerBehavior>) Initializes a new instance of the SequencerConsumerBehavior class. Declaration public SequencerConsumerBehavior(IEnumerable<ISequenceReader> sequenceReaders, ISilverbackLogger<SequencerConsumerBehavior> logger) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISequenceReader > sequenceReaders The ISequenceReader implementations to be used. Silverback.Diagnostics.ISilverbackLogger < SequencerConsumerBehavior > logger The Silverback.Diagnostics.ISilverbackLogger . Properties | Improve this doc View source SortIndex Declaration public override int SortIndex { get; } Property Value Type Description System.Int32 Overrides SequencerConsumerBehaviorBase.SortIndex Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public override Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Overrides SequencerConsumerBehaviorBase.HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) | Improve this doc View source PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration protected override Task PublishSequenceAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Overrides SequencerConsumerBehaviorBase.PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Sequences.SequencerConsumerBehaviorBase.html": {
    "href": "api/Silverback.Messaging.Sequences.SequencerConsumerBehaviorBase.html",
    "title": "Class SequencerConsumerBehaviorBase | Silverback",
    "keywords": "Class SequencerConsumerBehaviorBase Uses the available implementations of ISequenceReader to assign the incoming message to the right sequence. Inheritance System.Object SequencerConsumerBehaviorBase RawSequencerConsumerBehavior SequencerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class SequencerConsumerBehaviorBase : IConsumerBehavior, IBrokerBehavior, ISorted Remarks A sequence is a set of messages that are handled as a single unit of work. A sequence could be used to group all chunks belonging to the same source message, all messages belonging to the same data set or to implement batch processing. Constructors | Improve this doc View source SequencerConsumerBehaviorBase(IEnumerable<ISequenceReader>, ISilverbackLogger<SequencerConsumerBehaviorBase>) Initializes a new instance of the SequencerConsumerBehaviorBase class. Declaration protected SequencerConsumerBehaviorBase(IEnumerable<ISequenceReader> sequenceReaders, ISilverbackLogger<SequencerConsumerBehaviorBase> logger) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISequenceReader > sequenceReaders The ISequenceReader implementations to be used. Silverback.Diagnostics.ISilverbackLogger < SequencerConsumerBehaviorBase > logger The Silverback.Diagnostics.ISilverbackLogger . Properties | Improve this doc View source SortIndex Declaration public abstract int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source AwaitOtherBehaviorIfNeededAsync(ISequence) When overridden in a derived class awaits for the sequence to be processed by the other twin behavior. This is used to have the RawSequencerConsumerBehavior wait for the processing by the SequencerConsumerBehavior and it's needed to be able to properly determine the sequence end in the case where a ChunkSequence is added into another sequence (e.g. BatchSequence). Declaration protected virtual Task AwaitOtherBehaviorIfNeededAsync(ISequence sequence) Parameters Type Name Description ISequence sequence The current sequence. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public virtual Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task | Improve this doc View source PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Forwards the new sequence to the next behavior in the pipeline. Declaration protected abstract Task PublishSequenceAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Sequences.SequenceReaderBase.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceReaderBase.html",
    "title": "Class SequenceReaderBase | Silverback",
    "keywords": "Class SequenceReaderBase The base class for the ISequenceReader implementations. It encapsulates the logic to deal with the ISequenceStore . Inheritance System.Object SequenceReaderBase BatchSequenceReader ChunkSequenceReader Implements ISequenceReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class SequenceReaderBase : ISequenceReader Constructors | Improve this doc View source SequenceReaderBase(Boolean) Initializes a new instance of the SequenceReaderBase class. Declaration protected SequenceReaderBase(bool handlesRawMessages = false) Parameters Type Name Description System.Boolean handlesRawMessages A value indicating whether this reader handles the raw messages, before they are being deserialized, decrypted, etc. Properties | Improve this doc View source HandlesRawMessages Declaration public bool HandlesRawMessages { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source CanHandleAsync(ConsumerPipelineContext) Declaration public abstract Task<bool> CanHandleAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context Returns Type Description System.Threading.Tasks.Task < System.Boolean > | Improve this doc View source CreateNewSequenceAsync(String, ConsumerPipelineContext) Creates the new sequence and adds it to the store. Declaration protected virtual Task<ISequence> CreateNewSequenceAsync(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < ISequence > The new sequence. | Improve this doc View source CreateNewSequenceCore(String, ConsumerPipelineContext) Creates the new sequence object. Declaration protected abstract ISequence CreateNewSequenceCore(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description ISequence The new sequence. | Improve this doc View source GetExistingSequenceAsync(ConsumerPipelineContext, String) Retrieves the existing incomplete sequence from the store. Declaration protected virtual Task<ISequence> GetExistingSequenceAsync(ConsumerPipelineContext context, string sequenceId) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . System.String sequenceId The sequence identifier. Returns Type Description System.Threading.Tasks.Task < ISequence > The ISequence or null if not found. | Improve this doc View source GetSequenceAsync(ConsumerPipelineContext) Declaration public Task<ISequence> GetSequenceAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context Returns Type Description System.Threading.Tasks.Task < ISequence > | Improve this doc View source GetSequenceIdAsync(ConsumerPipelineContext) Gets the sequence identifier extracted from the current envelope. Declaration protected virtual Task<string> GetSequenceIdAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.String > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the recognized sequence identifier, or null . | Improve this doc View source IsNewSequenceAsync(String, ConsumerPipelineContext) Determines if the current message correspond with the beginning of a new sequence. Declaration protected abstract Task<bool> IsNewSequenceAsync(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains true if a new sequence is starting; otherwise false . Implements ISequenceReader"
  },
  "api/Silverback.Messaging.Sequences.SequencerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Sequences.SequencerProducerBehavior.html",
    "title": "Class SequencerProducerBehavior | Silverback",
    "keywords": "Class SequencerProducerBehavior Uses the available implementations of ISequenceWriter to set the proper headers and split the published message or messages set to create the sequences. Inheritance System.Object SequencerProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public class SequencerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Remarks A sequence is a set of messages that are handled as a single unit of work. A sequence could be used to group all chunks belonging to the same source message, all messages belonging to the same data set or to implement batch processing. Constructors | Improve this doc View source SequencerProducerBehavior(IEnumerable<ISequenceWriter>) Initializes a new instance of the SequencerProducerBehavior class. Declaration public SequencerProducerBehavior(IEnumerable<ISequenceWriter> sequenceWriters) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISequenceWriter > sequenceWriters The ISequenceWriter implementations to be used. Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Sequences.SequenceSettings.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceSettings.html",
    "title": "Class SequenceSettings | Silverback",
    "keywords": "Class SequenceSettings The sequence handling settings. Inheritance System.Object SequenceSettings Implements System.IEquatable < SequenceSettings > IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public sealed class SequenceSettings : IEquatable<SequenceSettings>, IValidatableEndpointSettings Properties | Improve this doc View source Timeout Gets or sets the timeout after which an incomplete sequence that isn't pushed with new messages will be aborted and discarded. The default is a conservative 30 minutes. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description System.TimeSpan Remarks This setting is ignored for batches ( BatchSequence ), use the MaxWaitTime instead. Methods | Improve this doc View source Equals(SequenceSettings) Declaration public bool Equals(SequenceSettings other) Parameters Type Name Description SequenceSettings other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Declaration public void Validate() Implements System.IEquatable<T> IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Serialization.DeserializerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Serialization.DeserializerConsumerBehavior.html",
    "title": "Class DeserializerConsumerBehavior | Silverback",
    "keywords": "Class DeserializerConsumerBehavior Deserializes the messages being consumed using the configured IMessageSerializer . Inheritance System.Object DeserializerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public class DeserializerConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source DeserializerConsumerBehavior(IInboundLogger<DeserializerConsumerBehavior>) Initializes a new instance of the DeserializerConsumerBehavior class. Declaration public DeserializerConsumerBehavior(IInboundLogger<DeserializerConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < DeserializerConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Serialization.html": {
    "href": "api/Silverback.Messaging.Serialization.html",
    "title": "Namespace Silverback.Messaging.Serialization | Silverback",
    "keywords": "Namespace Silverback.Messaging.Serialization Classes DeserializerConsumerBehavior Deserializes the messages being consumed using the configured IMessageSerializer . JsonMessageSerializer Serializes the messages in JSON format and relies on some added headers to determine the message type upon deserialization. This default serializer is ideal when the producer and the consumer are both using Silverback. JsonMessageSerializer<TMessage> Serializes and deserializes the messages of type TMessage in JSON format. JsonMessageSerializerBase The base class for JsonMessageSerializer and JsonMessageSerializer<TMessage> . MessageSerializationContext The context that is passed from the producer or consumer to the serializer. It can be used to customize the serialization behavior according to the endpoint. MessageSerializerException The exception that is thrown by the IMessageSerializer implementations when the message cannot be serialized or deserialized. This exception is thrown only when a Silverback specific error occurs, other exceptions related to reflection or the underlying serializer are not wrapped. NewtonsoftJsonMessageSerializer Serializes the messages in JSON format and relies on some added headers to determine the message type upon deserialization. This default serializer is ideal when the producer and the consumer are both using Silverback. NewtonsoftJsonMessageSerializer<TMessage> Serializes and deserializes the messages of type TMessage in JSON format. NewtonsoftJsonMessageSerializerBase The base class for NewtonsoftJsonMessageSerializer and NewtonsoftJsonMessageSerializer<TMessage> . SerializerProducerBehavior Serializes the message being produced using the configured IMessageSerializer . Interfaces IMessageSerializer Serializes and deserializes the messages sent through the broker. Enums MessageEncoding Specifies the message encoding used by some IMessageSerializer implementations. NullMessageHandlingStrategy The null message handling strategies."
  },
  "api/Silverback.Messaging.Serialization.IMessageSerializer.html": {
    "href": "api/Silverback.Messaging.Serialization.IMessageSerializer.html",
    "title": "Interface IMessageSerializer | Silverback",
    "keywords": "Interface IMessageSerializer Serializes and deserializes the messages sent through the broker. Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public interface IMessageSerializer Properties | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration bool RequireHeaders { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message."
  },
  "api/Silverback.Messaging.Serialization.JsonMessageSerializer.html": {
    "href": "api/Silverback.Messaging.Serialization.JsonMessageSerializer.html",
    "title": "Class JsonMessageSerializer | Silverback",
    "keywords": "Class JsonMessageSerializer Serializes the messages in JSON format and relies on some added headers to determine the message type upon deserialization. This default serializer is ideal when the producer and the consumer are both using Silverback. Inheritance System.Object JsonMessageSerializerBase JsonMessageSerializer Implements IMessageSerializer System.IEquatable < JsonMessageSerializer > Inherited Members JsonMessageSerializerBase.Options System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public sealed class JsonMessageSerializer : JsonMessageSerializerBase, IMessageSerializer, IEquatable<JsonMessageSerializer> Properties | Improve this doc View source Default Gets the default static instance of JsonMessageSerializer . Declaration public static JsonMessageSerializer Default { get; } Property Value Type Description JsonMessageSerializer | Improve this doc View source RequireHeaders Declaration public override bool RequireHeaders { get; } Property Value Type Description System.Boolean Overrides JsonMessageSerializerBase.RequireHeaders Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Declaration public override ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> Overrides JsonMessageSerializerBase.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source Equals(JsonMessageSerializer) Declaration public bool Equals(JsonMessageSerializer other) Parameters Type Name Description JsonMessageSerializer other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Declaration public override ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > Overrides JsonMessageSerializerBase.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Implements IMessageSerializer System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Serialization.JsonMessageSerializer-1.html": {
    "href": "api/Silverback.Messaging.Serialization.JsonMessageSerializer-1.html",
    "title": "Class JsonMessageSerializer<TMessage> | Silverback",
    "keywords": "Class JsonMessageSerializer<TMessage> Serializes and deserializes the messages of type TMessage in JSON format. Inheritance System.Object JsonMessageSerializerBase JsonMessageSerializer<TMessage> Implements IMessageSerializer System.IEquatable < JsonMessageSerializer <TMessage>> Inherited Members JsonMessageSerializerBase.Options System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public sealed class JsonMessageSerializer<TMessage> : JsonMessageSerializerBase, IMessageSerializer, IEquatable<JsonMessageSerializer<TMessage>> Type Parameters Name Description TMessage The type of the messages to be serialized and/or deserialized. Properties | Improve this doc View source RequireHeaders Declaration public override bool RequireHeaders { get; } Property Value Type Description System.Boolean Overrides JsonMessageSerializerBase.RequireHeaders Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Declaration public override ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> Overrides JsonMessageSerializerBase.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source Equals(JsonMessageSerializer<TMessage>) Declaration public bool Equals(JsonMessageSerializer<TMessage> other) Parameters Type Name Description JsonMessageSerializer <TMessage> other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Declaration public override ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > Overrides JsonMessageSerializerBase.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Implements IMessageSerializer System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Serialization.JsonMessageSerializerBase.html": {
    "href": "api/Silverback.Messaging.Serialization.JsonMessageSerializerBase.html",
    "title": "Class JsonMessageSerializerBase | Silverback",
    "keywords": "Class JsonMessageSerializerBase The base class for JsonMessageSerializer and JsonMessageSerializer<TMessage> . Inheritance System.Object JsonMessageSerializerBase JsonMessageSerializer JsonMessageSerializer <TMessage> Implements IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public abstract class JsonMessageSerializerBase : IMessageSerializer Properties | Improve this doc View source Options Gets or sets the options to be passed to the System.Text.Json.JsonSerializer . Declaration public JsonSerializerOptions Options { get; set; } Property Value Type Description System.Text.Json.JsonSerializerOptions | Improve this doc View source RequireHeaders Declaration public abstract bool RequireHeaders { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Declaration public abstract ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Declaration public abstract ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > Implements IMessageSerializer"
  },
  "api/Silverback.Messaging.Serialization.MessageEncoding.html": {
    "href": "api/Silverback.Messaging.Serialization.MessageEncoding.html",
    "title": "Enum MessageEncoding | Silverback",
    "keywords": "Enum MessageEncoding Specifies the message encoding used by some IMessageSerializer implementations. Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public enum MessageEncoding Fields Name Description ASCII Corresponds to System.Text.Encoding.ASCII . Default Corresponds to System.Text.Encoding.Default . Unicode Corresponds to System.Text.Encoding.Unicode . UTF32 Corresponds to System.Text.Encoding.UTF32 . UTF8 Corresponds to System.Text.Encoding.UTF8 ."
  },
  "api/Silverback.Messaging.Serialization.MessageSerializationContext.html": {
    "href": "api/Silverback.Messaging.Serialization.MessageSerializationContext.html",
    "title": "Class MessageSerializationContext | Silverback",
    "keywords": "Class MessageSerializationContext The context that is passed from the producer or consumer to the serializer. It can be used to customize the serialization behavior according to the endpoint. Inheritance System.Object MessageSerializationContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public class MessageSerializationContext Constructors | Improve this doc View source MessageSerializationContext(IEndpoint, String) Initializes a new instance of the MessageSerializationContext class from the provided IEndpoint . Declaration public MessageSerializationContext(IEndpoint endpoint, string actualEndpointName = null) Parameters Type Name Description IEndpoint endpoint The related endpoint configuration. System.String actualEndpointName The name of the actual related endpoint. Properties | Improve this doc View source ActualEndpointName Gets the name of the actual endpoint (in case the Endpoint configuration points to multiple endpoints, for example if consuming multiple topics with a single KafkaConsumer ). Declaration public string ActualEndpointName { get; } Property Value Type Description System.String | Improve this doc View source Empty Gets the default instance of an empty context. Declaration public static MessageSerializationContext Empty { get; } Property Value Type Description MessageSerializationContext | Improve this doc View source Endpoint Gets the related endpoint configuration. Declaration public IEndpoint Endpoint { get; } Property Value Type Description IEndpoint"
  },
  "api/Silverback.Messaging.Serialization.MessageSerializerException.html": {
    "href": "api/Silverback.Messaging.Serialization.MessageSerializerException.html",
    "title": "Class MessageSerializerException | Silverback",
    "keywords": "Class MessageSerializerException The exception that is thrown by the IMessageSerializer implementations when the message cannot be serialized or deserialized. This exception is thrown only when a Silverback specific error occurs, other exceptions related to reflection or the underlying serializer are not wrapped. Inheritance System.Object System.Exception Silverback.SilverbackException MessageSerializerException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax [Serializable] public class MessageSerializerException : SilverbackException, ISerializable Constructors | Improve this doc View source MessageSerializerException() Initializes a new instance of the MessageSerializerException class. Declaration public MessageSerializerException() | Improve this doc View source MessageSerializerException(SerializationInfo, StreamingContext) Initializes a new instance of the MessageSerializerException class with the serialized data. Declaration protected MessageSerializerException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source MessageSerializerException(String) Initializes a new instance of the MessageSerializerException class with the specified message. Declaration public MessageSerializerException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source MessageSerializerException(String, Exception) Initializes a new instance of the MessageSerializerException class with the specified message and inner exception. Declaration public MessageSerializerException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializer.html": {
    "href": "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializer.html",
    "title": "Class NewtonsoftJsonMessageSerializer | Silverback",
    "keywords": "Class NewtonsoftJsonMessageSerializer Serializes the messages in JSON format and relies on some added headers to determine the message type upon deserialization. This default serializer is ideal when the producer and the consumer are both using Silverback. Inheritance System.Object NewtonsoftJsonMessageSerializerBase NewtonsoftJsonMessageSerializer Implements IMessageSerializer System.IEquatable < NewtonsoftJsonMessageSerializer > Inherited Members NewtonsoftJsonMessageSerializerBase.Encoding NewtonsoftJsonMessageSerializerBase.Settings NewtonsoftJsonMessageSerializerBase.SystemEncoding System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Newtonsoft.dll Syntax public sealed class NewtonsoftJsonMessageSerializer : NewtonsoftJsonMessageSerializerBase, IMessageSerializer, IEquatable<NewtonsoftJsonMessageSerializer> Properties | Improve this doc View source Default Gets the default static instance of NewtonsoftJsonMessageSerializer . Declaration public static NewtonsoftJsonMessageSerializer Default { get; } Property Value Type Description NewtonsoftJsonMessageSerializer | Improve this doc View source RequireHeaders Declaration public override bool RequireHeaders { get; } Property Value Type Description System.Boolean Overrides NewtonsoftJsonMessageSerializerBase.RequireHeaders Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Declaration public override ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> Overrides NewtonsoftJsonMessageSerializerBase.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source Equals(NewtonsoftJsonMessageSerializer) Declaration public bool Equals(NewtonsoftJsonMessageSerializer other) Parameters Type Name Description NewtonsoftJsonMessageSerializer other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Declaration public override ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > Overrides NewtonsoftJsonMessageSerializerBase.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Implements IMessageSerializer System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializer-1.html": {
    "href": "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializer-1.html",
    "title": "Class NewtonsoftJsonMessageSerializer<TMessage> | Silverback",
    "keywords": "Class NewtonsoftJsonMessageSerializer<TMessage> Serializes and deserializes the messages of type TMessage in JSON format. Inheritance System.Object NewtonsoftJsonMessageSerializerBase NewtonsoftJsonMessageSerializer<TMessage> Implements IMessageSerializer System.IEquatable < NewtonsoftJsonMessageSerializer <TMessage>> Inherited Members NewtonsoftJsonMessageSerializerBase.Encoding NewtonsoftJsonMessageSerializerBase.Settings NewtonsoftJsonMessageSerializerBase.SystemEncoding System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Newtonsoft.dll Syntax public sealed class NewtonsoftJsonMessageSerializer<TMessage> : NewtonsoftJsonMessageSerializerBase, IMessageSerializer, IEquatable<NewtonsoftJsonMessageSerializer<TMessage>> Type Parameters Name Description TMessage The type of the messages to be serialized and/or deserialized. Properties | Improve this doc View source RequireHeaders Declaration public override bool RequireHeaders { get; } Property Value Type Description System.Boolean Overrides NewtonsoftJsonMessageSerializerBase.RequireHeaders Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Declaration public override ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> Overrides NewtonsoftJsonMessageSerializerBase.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source Equals(NewtonsoftJsonMessageSerializer<TMessage>) Declaration public bool Equals(NewtonsoftJsonMessageSerializer<TMessage> other) Parameters Type Name Description NewtonsoftJsonMessageSerializer <TMessage> other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Declaration public override ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > Overrides NewtonsoftJsonMessageSerializerBase.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Implements IMessageSerializer System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializerBase.html": {
    "href": "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializerBase.html",
    "title": "Class NewtonsoftJsonMessageSerializerBase | Silverback",
    "keywords": "Class NewtonsoftJsonMessageSerializerBase The base class for NewtonsoftJsonMessageSerializer and NewtonsoftJsonMessageSerializer<TMessage> . Inheritance System.Object NewtonsoftJsonMessageSerializerBase NewtonsoftJsonMessageSerializer NewtonsoftJsonMessageSerializer <TMessage> Implements IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Newtonsoft.dll Syntax public abstract class NewtonsoftJsonMessageSerializerBase : IMessageSerializer Properties | Improve this doc View source Encoding Gets or sets the message encoding. The default is UTF8. Declaration public MessageEncoding Encoding { get; set; } Property Value Type Description MessageEncoding | Improve this doc View source RequireHeaders Declaration public abstract bool RequireHeaders { get; } Property Value Type Description System.Boolean | Improve this doc View source Settings Gets or sets the settings to be applied to the Json.NET serializer. Declaration public JsonSerializerSettings Settings { get; set; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings | Improve this doc View source SystemEncoding Gets the System.Text.Encoding corresponding to the MessageEncoding . Declaration protected Encoding SystemEncoding { get; } Property Value Type Description System.Text.Encoding A System.Text.Encoding that matches the current MessageEncoding . Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Declaration public abstract ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Declaration public abstract ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message MessageHeaderCollection messageHeaders MessageSerializationContext context Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > Implements IMessageSerializer"
  },
  "api/Silverback.Messaging.Serialization.NullMessageHandlingStrategy.html": {
    "href": "api/Silverback.Messaging.Serialization.NullMessageHandlingStrategy.html",
    "title": "Enum NullMessageHandlingStrategy | Silverback",
    "keywords": "Enum NullMessageHandlingStrategy The null message handling strategies. Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public enum NullMessageHandlingStrategy Fields Name Description Legacy The legacy behavior prior to Silverback 3. The message is forwarded as null and can be subscribed as IInboundEnvelope<TMessage> only. Skip Silently skip the null message. Tombstone Map the null messages to a Tombstone<TMessage> ."
  },
  "api/Silverback.Messaging.Serialization.SerializerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Serialization.SerializerProducerBehavior.html",
    "title": "Class SerializerProducerBehavior | Silverback",
    "keywords": "Class SerializerProducerBehavior Serializes the message being produced using the configured IMessageSerializer . Inheritance System.Object SerializerProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public class SerializerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Validation.html": {
    "href": "api/Silverback.Messaging.Validation.html",
    "title": "Namespace Silverback.Messaging.Validation | Silverback",
    "keywords": "Namespace Silverback.Messaging.Validation Classes MessageValidationException The exception that is thrown when the message is not valid and the validation mode is ThrowException . ValidatorConsumerBehavior Deserializes the messages being consumed using the configured IMessageSerializer . ValidatorProducerBehavior Determines whether the message is valid. Enums MessageValidationMode Specifies the message validation mode."
  },
  "api/Silverback.Messaging.Validation.MessageValidationException.html": {
    "href": "api/Silverback.Messaging.Validation.MessageValidationException.html",
    "title": "Class MessageValidationException | Silverback",
    "keywords": "Class MessageValidationException The exception that is thrown when the message is not valid and the validation mode is ThrowException . Inheritance System.Object System.Exception Silverback.SilverbackException MessageValidationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Validation Assembly : Silverback.Integration.dll Syntax [Serializable] public class MessageValidationException : SilverbackException, ISerializable Constructors | Improve this doc View source MessageValidationException() Initializes a new instance of the MessageValidationException class. Declaration public MessageValidationException() | Improve this doc View source MessageValidationException(SerializationInfo, StreamingContext) Initializes a new instance of the MessageValidationException class with the serialized data. Declaration protected MessageValidationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source MessageValidationException(String) Initializes a new instance of the MessageValidationException class with the specified message. Declaration public MessageValidationException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source MessageValidationException(String, Exception) Initializes a new instance of the MessageValidationException class with the specified message and inner exception. Declaration public MessageValidationException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Validation.MessageValidationMode.html": {
    "href": "api/Silverback.Messaging.Validation.MessageValidationMode.html",
    "title": "Enum MessageValidationMode | Silverback",
    "keywords": "Enum MessageValidationMode Specifies the message validation mode. Namespace : Silverback.Messaging.Validation Assembly : Silverback.Integration.dll Syntax public enum MessageValidationMode Fields Name Description LogWarning A warning is logged if the message is not valid. None No validation is performed. ThrowException An exception is thrown if the message is not valid."
  },
  "api/Silverback.Messaging.Validation.ValidatorConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Validation.ValidatorConsumerBehavior.html",
    "title": "Class ValidatorConsumerBehavior | Silverback",
    "keywords": "Class ValidatorConsumerBehavior Deserializes the messages being consumed using the configured IMessageSerializer . Inheritance System.Object ValidatorConsumerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Validation Assembly : Silverback.Integration.dll Syntax public class ValidatorConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ValidatorConsumerBehavior(IInboundLogger<ValidatorConsumerBehavior>) Initializes a new instance of the ValidatorConsumerBehavior class. Declaration public ValidatorConsumerBehavior(IInboundLogger<ValidatorConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < ValidatorConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Messaging.Validation.ValidatorProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Validation.ValidatorProducerBehavior.html",
    "title": "Class ValidatorProducerBehavior | Silverback",
    "keywords": "Class ValidatorProducerBehavior Determines whether the message is valid. Inheritance System.Object ValidatorProducerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Validation Assembly : Silverback.Integration.dll Syntax public class ValidatorProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ValidatorProducerBehavior(IOutboundLogger<ValidatorProducerBehavior>) Initializes a new instance of the ValidatorProducerBehavior class. Declaration public ValidatorProducerBehavior(IOutboundLogger<ValidatorProducerBehavior> logger) Parameters Type Name Description IOutboundLogger < ValidatorProducerBehavior > logger The IOutboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Testing.html": {
    "href": "api/Silverback.Testing.html",
    "title": "Namespace Silverback.Testing | Silverback",
    "keywords": "Namespace Silverback.Testing Classes InboundSpyBrokerBehavior Added at the end of the consumer pipeline, forwards the processed IInboundEnvelope to the IIntegrationSpy . InboundSpySubscriber Subscribes to all the IOutboundEnvelope transiting through the internal bus and forwards them to the IIntegrationSpy to be collected. IntegrationSpy MqttTestingHelper OutboundSpyBrokerBehavior Added at the very beginning of the producer pipeline, forwards the published IOutboundEnvelope to the IIntegrationSpy . RawInboundSpyBrokerBehavior Added at the very beginning of the consumer pipeline, forwards the untouched IRawInboundEnvelope to the IIntegrationSpy . RawOutboundSpyBrokerBehavior Added at the very end of the producer pipeline, forwards the produced IRawOutboundEnvelope to the IIntegrationSpy . TestingHelper<TBroker> Interfaces IIntegrationSpy Monitors and collects all outbound and inbound messages. IMqttTestingHelper ITestingHelper<TBroker> Exposes some helper methods and shortcuts to simplify testing."
  },
  "api/Silverback.Testing.IIntegrationSpy.html": {
    "href": "api/Silverback.Testing.IIntegrationSpy.html",
    "title": "Interface IIntegrationSpy | Silverback",
    "keywords": "Interface IIntegrationSpy Monitors and collects all outbound and inbound messages. Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public interface IIntegrationSpy Properties | Improve this doc View source InboundEnvelopes Gets the list of IInboundEnvelope corresponding to all the inbound messages that have been processed by the consumer pipeline (except the ones that couldn't be deserialized, e.g. the ones with an empty body). Declaration IReadOnlyList<IInboundEnvelope> InboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IInboundEnvelope > | Improve this doc View source OutboundEnvelopes Gets the list of IOutboundEnvelope corresponding to all the outbound messages. Declaration IReadOnlyList<IOutboundEnvelope> OutboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IOutboundEnvelope > Remarks The messages produces via RawProduce or RawProduceAsync will not go through the Silverback pipeline and will therefore not show up in this collection. | Improve this doc View source RawInboundEnvelopes Gets the list of IRawInboundEnvelope corresponding to all the inbound messages, before they are even processed by the consumer pipeline. Declaration IReadOnlyList<IRawInboundEnvelope> RawInboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IRawInboundEnvelope > | Improve this doc View source RawOutboundEnvelopes Gets the list of IRawOutboundEnvelope corresponding to all the actual outbound messages being produced (these may differ from the OutboundEnvelopes , e.g. if chunking is applied). Declaration IReadOnlyList<IRawOutboundEnvelope> RawOutboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IRawOutboundEnvelope > Remarks The messages produces via RawProduce or RawProduceAsync will not go through the Silverback pipeline and will therefore not show up in this collection."
  },
  "api/Silverback.Testing.IMqttTestingHelper.html": {
    "href": "api/Silverback.Testing.IMqttTestingHelper.html",
    "title": "Interface IMqttTestingHelper | Silverback",
    "keywords": "Interface IMqttTestingHelper Inherited Members ITestingHelper<MqttBroker>.Broker ITestingHelper<MqttBroker>.Spy ITestingHelper<MqttBroker>.WaitUntilConnectedAsync(Nullable<TimeSpan>) ITestingHelper<MqttBroker>.WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) ITestingHelper<MqttBroker>.WaitUntilOutboxIsEmptyAsync(CancellationToken) ITestingHelper<MqttBroker>.IsOutboxEmptyAsync() Namespace : Silverback.Testing Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IMqttTestingHelper : ITestingHelper<MqttBroker> Methods | Improve this doc View source GetClientSession(String) Gets the IClientSession of the specified client. Declaration IClientSession GetClientSession(string clientId) Parameters Type Name Description System.String clientId The client id. Returns Type Description IClientSession The IClientSession . Remarks This method works with the mocked MQTT broker only. See UseMockedMqtt(ISilverbackBuilder, Action<IMockedMqttOptionsBuilder>) or AddMockedMqtt(IBrokerOptionsBuilder, Action<IMockedMqttOptionsBuilder>) . | Improve this doc View source GetMessages(String) Gets the messages that have been published to the specified topic. Declaration IReadOnlyList<MqttApplicationMessage> GetMessages(string topic) Parameters Type Name Description System.String topic The name of the topic. Returns Type Description System.Collections.Generic.IReadOnlyList < MQTTnet.MqttApplicationMessage > The messages published to the topic. Remarks This method works with the mocked MQTT broker only. See UseMockedMqtt(ISilverbackBuilder, Action<IMockedMqttOptionsBuilder>) or AddMockedMqtt(IBrokerOptionsBuilder, Action<IMockedMqttOptionsBuilder>) ."
  },
  "api/Silverback.Testing.InboundSpyBrokerBehavior.html": {
    "href": "api/Silverback.Testing.InboundSpyBrokerBehavior.html",
    "title": "Class InboundSpyBrokerBehavior | Silverback",
    "keywords": "Class InboundSpyBrokerBehavior Added at the end of the consumer pipeline, forwards the processed IInboundEnvelope to the IIntegrationSpy . Inheritance System.Object InboundSpyBrokerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class InboundSpyBrokerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source InboundSpyBrokerBehavior(IntegrationSpy) Initializes a new instance of the InboundSpyBrokerBehavior class. Declaration public InboundSpyBrokerBehavior(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Testing.InboundSpySubscriber.html": {
    "href": "api/Silverback.Testing.InboundSpySubscriber.html",
    "title": "Class InboundSpySubscriber | Silverback",
    "keywords": "Class InboundSpySubscriber Subscribes to all the IOutboundEnvelope transiting through the internal bus and forwards them to the IIntegrationSpy to be collected. Inheritance System.Object InboundSpySubscriber Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class InboundSpySubscriber Remarks This is used alternatively to the InboundSpyBrokerBehavior . Constructors | Improve this doc View source InboundSpySubscriber(IntegrationSpy) Initializes a new instance of the InboundSpySubscriber class. Declaration public InboundSpySubscriber(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy ."
  },
  "api/Silverback.Testing.IntegrationSpy.html": {
    "href": "api/Silverback.Testing.IntegrationSpy.html",
    "title": "Class IntegrationSpy | Silverback",
    "keywords": "Class IntegrationSpy Inheritance System.Object IntegrationSpy Implements IIntegrationSpy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class IntegrationSpy : IIntegrationSpy Properties | Improve this doc View source InboundEnvelopes Declaration public IReadOnlyList<IInboundEnvelope> InboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IInboundEnvelope > | Improve this doc View source OutboundEnvelopes Declaration public IReadOnlyList<IOutboundEnvelope> OutboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IOutboundEnvelope > | Improve this doc View source RawInboundEnvelopes Declaration public IReadOnlyList<IRawInboundEnvelope> RawInboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IRawInboundEnvelope > | Improve this doc View source RawOutboundEnvelopes Declaration public IReadOnlyList<IRawOutboundEnvelope> RawOutboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IRawOutboundEnvelope > Methods | Improve this doc View source AddInboundEnvelope(IInboundEnvelope) Adds an item to the InboundEnvelopes . Declaration public void AddInboundEnvelope(IInboundEnvelope envelope) Parameters Type Name Description IInboundEnvelope envelope The IInboundEnvelope to add. | Improve this doc View source AddOutboundEnvelope(IOutboundEnvelope) Adds an item to the OutboundEnvelopes . Declaration public void AddOutboundEnvelope(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope to add. | Improve this doc View source AddRawInboundEnvelope(IRawInboundEnvelope) Adds an item to the Silverback.Messaging.Messages.RawInboundEnvelope . Declaration public void AddRawInboundEnvelope(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope to add. | Improve this doc View source AddRawOutboundEnvelope(IRawOutboundEnvelope) Adds an item to the Silverback.Messaging.Messages.RawOutboundEnvelope . Declaration public void AddRawOutboundEnvelope(IRawOutboundEnvelope envelope) Parameters Type Name Description IRawOutboundEnvelope envelope The IRawOutboundEnvelope to add. Implements IIntegrationSpy"
  },
  "api/Silverback.Testing.ITestingHelper-1.html": {
    "href": "api/Silverback.Testing.ITestingHelper-1.html",
    "title": "Interface ITestingHelper<TBroker> | Silverback",
    "keywords": "Interface ITestingHelper<TBroker> Exposes some helper methods and shortcuts to simplify testing. Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public interface ITestingHelper<out TBroker> where TBroker : IBroker Type Parameters Name Description TBroker The IBroker implementation. Properties | Improve this doc View source Broker Gets the current IBroker instance. Declaration TBroker Broker { get; } Property Value Type Description TBroker | Improve this doc View source Spy Gets the IIntegrationSpy . Declaration IIntegrationSpy Spy { get; } Property Value Type Description IIntegrationSpy Remarks The IIntegrationSpy must be enabled calling AddIntegrationSpy or AddIntegrationSpyAndSubscriber . Methods | Improve this doc View source IsOutboxEmptyAsync() Checks whether the outbox (table) is empty. Declaration Task<bool> IsOutboxEmptyAsync() Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains true if the outbox is empty, otherwise false . | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration Task WaitUntilAllMessagesAreConsumedAsync(TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Remarks This method works with the mocked brokers only. | Improve this doc View source WaitUntilConnectedAsync(Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all consumers are connected and ready. Declaration Task WaitUntilConnectedAsync(TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout The time to wait for the consumers to connect. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all consumers are successfully connected and ready. | Improve this doc View source WaitUntilOutboxIsEmptyAsync(CancellationToken) Returns a System.Threading.Tasks.Task that completes when all messages stored in the outbox have been produced. Declaration Task WaitUntilOutboxIsEmptyAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when the outbox is empty."
  },
  "api/Silverback.Testing.MqttTestingHelper.html": {
    "href": "api/Silverback.Testing.MqttTestingHelper.html",
    "title": "Class MqttTestingHelper | Silverback",
    "keywords": "Class MqttTestingHelper Inheritance System.Object TestingHelper < Silverback.Messaging.Broker.MqttBroker > MqttTestingHelper Implements IMqttTestingHelper ITestingHelper < Silverback.Messaging.Broker.MqttBroker > Inherited Members TestingHelper<MqttBroker>.Broker TestingHelper<MqttBroker>.Spy TestingHelper<MqttBroker>.WaitUntilConnectedAsync(Nullable<TimeSpan>) TestingHelper<MqttBroker>.WaitUntilOutboxIsEmptyAsync(CancellationToken) TestingHelper<MqttBroker>.IsOutboxEmptyAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public class MqttTestingHelper : TestingHelper<MqttBroker>, IMqttTestingHelper, ITestingHelper<MqttBroker> Constructors | Improve this doc View source MqttTestingHelper(IServiceProvider, ILogger<MqttTestingHelper>) Initializes a new instance of the MqttTestingHelper class. Declaration public MqttTestingHelper(IServiceProvider serviceProvider, ILogger<MqttTestingHelper> logger) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider . Microsoft.Extensions.Logging.ILogger < MqttTestingHelper > logger The Silverback.Diagnostics.ISilverbackLogger . Methods | Improve this doc View source GetClientSession(String) Declaration public IClientSession GetClientSession(string clientId) Parameters Type Name Description System.String clientId Returns Type Description IClientSession | Improve this doc View source GetMessages(String) Declaration public IReadOnlyList<MqttApplicationMessage> GetMessages(string topic) Parameters Type Name Description System.String topic Returns Type Description System.Collections.Generic.IReadOnlyList < MQTTnet.MqttApplicationMessage > | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) Declaration public override Task WaitUntilAllMessagesAreConsumedAsync(TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout Returns Type Description System.Threading.Tasks.Task Overrides Silverback.Testing.TestingHelper<Silverback.Messaging.Broker.MqttBroker>.WaitUntilAllMessagesAreConsumedAsync(System.Nullable<System.TimeSpan>) Implements IMqttTestingHelper ITestingHelper<TBroker>"
  },
  "api/Silverback.Testing.OutboundSpyBrokerBehavior.html": {
    "href": "api/Silverback.Testing.OutboundSpyBrokerBehavior.html",
    "title": "Class OutboundSpyBrokerBehavior | Silverback",
    "keywords": "Class OutboundSpyBrokerBehavior Added at the very beginning of the producer pipeline, forwards the published IOutboundEnvelope to the IIntegrationSpy . Inheritance System.Object OutboundSpyBrokerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class OutboundSpyBrokerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source OutboundSpyBrokerBehavior(IntegrationSpy) Initializes a new instance of the OutboundSpyBrokerBehavior class. Declaration public OutboundSpyBrokerBehavior(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Testing.RawInboundSpyBrokerBehavior.html": {
    "href": "api/Silverback.Testing.RawInboundSpyBrokerBehavior.html",
    "title": "Class RawInboundSpyBrokerBehavior | Silverback",
    "keywords": "Class RawInboundSpyBrokerBehavior Added at the very beginning of the consumer pipeline, forwards the untouched IRawInboundEnvelope to the IIntegrationSpy . Inheritance System.Object RawInboundSpyBrokerBehavior Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class RawInboundSpyBrokerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source RawInboundSpyBrokerBehavior(IntegrationSpy) Initializes a new instance of the RawInboundSpyBrokerBehavior class. Declaration public RawInboundSpyBrokerBehavior(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context ConsumerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IConsumerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Testing.RawOutboundSpyBrokerBehavior.html": {
    "href": "api/Silverback.Testing.RawOutboundSpyBrokerBehavior.html",
    "title": "Class RawOutboundSpyBrokerBehavior | Silverback",
    "keywords": "Class RawOutboundSpyBrokerBehavior Added at the very end of the producer pipeline, forwards the produced IRawOutboundEnvelope to the IIntegrationSpy . Inheritance System.Object RawOutboundSpyBrokerBehavior Implements IProducerBehavior IBrokerBehavior Silverback.ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class RawOutboundSpyBrokerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source RawOutboundSpyBrokerBehavior(IntegrationSpy) Initializes a new instance of the RawOutboundSpyBrokerBehavior class. Declaration public RawOutboundSpyBrokerBehavior(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy . Properties | Improve this doc View source SortIndex Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context ProducerBehaviorHandler next Returns Type Description System.Threading.Tasks.Task Implements IProducerBehavior IBrokerBehavior Silverback.ISorted"
  },
  "api/Silverback.Testing.TestingHelper-1.html": {
    "href": "api/Silverback.Testing.TestingHelper-1.html",
    "title": "Class TestingHelper<TBroker> | Silverback",
    "keywords": "Class TestingHelper<TBroker> Inheritance System.Object TestingHelper<TBroker> MqttTestingHelper Implements ITestingHelper <TBroker> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public abstract class TestingHelper<TBroker> : ITestingHelper<TBroker> where TBroker : IBroker Type Parameters Name Description TBroker Constructors | Improve this doc View source TestingHelper(IServiceProvider, ILogger<TestingHelper<TBroker>>) Initializes a new instance of the TestingHelper<TBroker> class. Declaration protected TestingHelper(IServiceProvider serviceProvider, ILogger<TestingHelper<TBroker>> logger) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider . Microsoft.Extensions.Logging.ILogger < TestingHelper <TBroker>> logger The Microsoft.Extensions.Logging.ILogger<TCategoryName> . Properties | Improve this doc View source Broker Declaration public TBroker Broker { get; } Property Value Type Description TBroker | Improve this doc View source Spy Declaration public IIntegrationSpy Spy { get; } Property Value Type Description IIntegrationSpy Methods | Improve this doc View source IsOutboxEmptyAsync() Declaration public Task<bool> IsOutboxEmptyAsync() Returns Type Description System.Threading.Tasks.Task < System.Boolean > | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) Declaration public abstract Task WaitUntilAllMessagesAreConsumedAsync(TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout Returns Type Description System.Threading.Tasks.Task | Improve this doc View source WaitUntilConnectedAsync(Nullable<TimeSpan>) Declaration public Task WaitUntilConnectedAsync(TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout Returns Type Description System.Threading.Tasks.Task | Improve this doc View source WaitUntilOutboxIsEmptyAsync(CancellationToken) Declaration public Task WaitUntilOutboxIsEmptyAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Implements ITestingHelper<TBroker>"
  },
  "api/Silverback.Util.html": {
    "href": "api/Silverback.Util.html",
    "title": "Namespace Silverback.Util | Silverback",
    "keywords": "Namespace Silverback.Util Classes TransactionalDictionary<TKey, TValue> Wraps the changes being made to the underlying System.Collections.Generic.Dictionary<TKey, TValue> into a transaction. TransactionalDictionarySharedItems<TKey, TValue> Registered as Singleton holds the actual items list shared between the scoped instances of the TransactionalDictionary<TKey, TValue> . TransactionalList<T> Wraps the changes being made to the underlying System.Collections.Generic.List`1 into a transaction. TransactionalListItem<T> Wraps an item stored in the TransactionalList<T> . TransactionalListSharedItems<T> Registered as Singleton holds the actual items list shared between the scoped instances of the TransactionalList<T> ."
  },
  "api/Silverback.Util.TransactionalDictionary-2.html": {
    "href": "api/Silverback.Util.TransactionalDictionary-2.html",
    "title": "Class TransactionalDictionary<TKey, TValue> | Silverback",
    "keywords": "Class TransactionalDictionary<TKey, TValue> Wraps the changes being made to the underlying System.Collections.Generic.Dictionary<TKey, TValue> into a transaction. Inheritance System.Object TransactionalDictionary<TKey, TValue> InMemoryOffsetStore Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public abstract class TransactionalDictionary<TKey, TValue> Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. Constructors | Improve this doc View source TransactionalDictionary(TransactionalDictionarySharedItems<TKey, TValue>) Initializes a new instance of the TransactionalDictionary<TKey, TValue> class. Declaration protected TransactionalDictionary(TransactionalDictionarySharedItems<TKey, TValue> sharedItems) Parameters Type Name Description TransactionalDictionarySharedItems <TKey, TValue> sharedItems The dictionary items that are persisted and shared between the instances of this class. Properties | Improve this doc View source CommittedItemsCount Gets the number of items currently in the dictionary, ignoring the uncommitted changes. Declaration public int CommittedItemsCount { get; } Property Value Type Description System.Int32 | Improve this doc View source Items Gets the underlying System.Collections.Generic.Dictionary<TKey, TValue> containing the persisted items. Declaration protected Dictionary<TKey, TValue> Items { get; } Property Value Type Description System.Collections.Generic.Dictionary <TKey, TValue> | Improve this doc View source UncommittedItems Gets the System.Collections.Generic.Dictionary<TKey, TValue> containing the pending items that will be persisted when Commit is called. Declaration protected Dictionary<TKey, TValue> UncommittedItems { get; } Property Value Type Description System.Collections.Generic.Dictionary <TKey, TValue> Methods | Improve this doc View source AddOrReplaceAsync(TKey, TValue) Adds or replaces an item in the dictionary. Declaration protected Task AddOrReplaceAsync(TKey key, TValue value) Parameters Type Name Description TKey key The item key. TValue value The item value. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitAsync() Called to commit the pending changes. Declaration public virtual Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RemoveAsync(TKey) Removes the item with the specified key. Declaration protected Task RemoveAsync(TKey key) Parameters Type Name Description TKey key The item key. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync() Called to rollback the pending changes. Declaration public virtual Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Util.TransactionalDictionarySharedItems-2.html": {
    "href": "api/Silverback.Util.TransactionalDictionarySharedItems-2.html",
    "title": "Class TransactionalDictionarySharedItems<TKey, TValue> | Silverback",
    "keywords": "Class TransactionalDictionarySharedItems<TKey, TValue> Registered as Singleton holds the actual items list shared between the scoped instances of the TransactionalDictionary<TKey, TValue> . Inheritance System.Object TransactionalDictionarySharedItems<TKey, TValue> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public sealed class TransactionalDictionarySharedItems<TKey, TValue> Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. Properties | Improve this doc View source Items Gets the underlying System.Collections.Generic.Dictionary<TKey, TValue> containing the persisted items. Declaration public Dictionary<TKey, TValue> Items { get; } Property Value Type Description System.Collections.Generic.Dictionary <TKey, TValue>"
  },
  "api/Silverback.Util.TransactionalList-1.html": {
    "href": "api/Silverback.Util.TransactionalList-1.html",
    "title": "Class TransactionalList<T> | Silverback",
    "keywords": "Class TransactionalList<T> Wraps the changes being made to the underlying System.Collections.Generic.List`1 into a transaction. Inheritance System.Object TransactionalList<T> InMemoryInboundLog InMemoryOutbox Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public abstract class TransactionalList<T> where T : class Type Parameters Name Description T The type of the items in the list. Constructors | Improve this doc View source TransactionalList(TransactionalListSharedItems<T>) Initializes a new instance of the TransactionalList<T> class. Declaration protected TransactionalList(TransactionalListSharedItems<T> sharedItems) Parameters Type Name Description TransactionalListSharedItems <T> sharedItems The items shared between the instances of this repository. Properties | Improve this doc View source CommittedItemsCount Gets the number of items currently in the list, ignoring the uncommitted changes. Declaration public int CommittedItemsCount { get; } Property Value Type Description System.Int32 | Improve this doc View source Items Gets the underlying System.Collections.Generic.List`1 containing the persisted items, wrapped into a TransactionalListItem<T> . Declaration protected IList<TransactionalListItem<T>> Items { get; } Property Value Type Description System.Collections.Generic.IList < TransactionalListItem <T>> | Improve this doc View source UncommittedItems Gets the System.Collections.Generic.List`1 containing the pending items that will be persisted when Commit is called. Declaration protected IList<TransactionalListItem<T>> UncommittedItems { get; } Property Value Type Description System.Collections.Generic.IList < TransactionalListItem <T>> Methods | Improve this doc View source AddAsync(T) Adds the specified item to the list. Declaration protected Task AddAsync(T item) Parameters Type Name Description T item The item to be added. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitAsync() Called to commit the pending changes. Declaration public virtual Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RemoveAsync(T) Removes the specified item to the list. Declaration protected Task RemoveAsync(T item) Parameters Type Name Description T item The item to be added. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync() Called to rollback the pending changes. Declaration public virtual Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Util.TransactionalListItem-1.html": {
    "href": "api/Silverback.Util.TransactionalListItem-1.html",
    "title": "Class TransactionalListItem<T> | Silverback",
    "keywords": "Class TransactionalListItem<T> Wraps an item stored in the TransactionalList<T> . Inheritance System.Object TransactionalListItem<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public class TransactionalListItem<T> Type Parameters Name Description T The type of the wrapped item. Constructors | Improve this doc View source TransactionalListItem(T) Initializes a new instance of the TransactionalListItem<T> class. Declaration public TransactionalListItem(T item) Parameters Type Name Description T item The actual item to be wrapped. Properties | Improve this doc View source InsertDate Gets the datetime when the item was added to the list. Declaration public DateTime InsertDate { get; } Property Value Type Description System.DateTime | Improve this doc View source Item Gets the actual item. Declaration public T Item { get; } Property Value Type Description T"
  },
  "api/Silverback.Util.TransactionalListSharedItems-1.html": {
    "href": "api/Silverback.Util.TransactionalListSharedItems-1.html",
    "title": "Class TransactionalListSharedItems<T> | Silverback",
    "keywords": "Class TransactionalListSharedItems<T> Registered as Singleton holds the actual items list shared between the scoped instances of the TransactionalList<T> . Inheritance System.Object TransactionalListSharedItems<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public sealed class TransactionalListSharedItems<T> Type Parameters Name Description T The type of the item in the list. Properties | Improve this doc View source Items Gets the underlying System.Collections.Generic.List`1 containing the persisted items. Declaration public IList<TransactionalListItem<T>> Items { get; } Property Value Type Description System.Collections.Generic.IList < TransactionalListItem <T>>"
  },
  "concepts/background-services.html": {
    "href": "concepts/background-services.html",
    "title": "Distributed Background Services | Silverback",
    "keywords": "Distributed Background Services To implement the OutboxWorkerService we had to create a database based locking mechanism, to ensure that only a single instance of our worker was running. You can take advantage of this implementation to build your IHostedService . DistributedBackgroundService Two base classes are available in Silverback.Core : <xref:Silverback.Background.DistributedBackgroundService> implements the basic locking mechanism, while <xref:Silverback.Background.RecurringDistributedBackgroundService> adds on top of it the ability to run a task as specified intervals. using Silverback.Background; namespace Sample { public class MyBackroundService : RecurringDistributedBackgroundService { private readonly IMyService _myService; public MyBackroundService( IMyService _myService, IDistributedLockManager distributedLockManager, ILogger<OutboundQueueWorkerService> logger) : base( TimeSpan.FromMinutes(5), // interval distributedLockManager, logger) { } protected override Task ExecuteRecurringAsync( CancellationToken stoppingToken) => _myService.DoWork(stoppingToken); } } Note A <xref:Silverback.Background.DistributedLockSettings> object can be passed to the constructor of the base class to customize lock timeout, heartbeat interval, etc. Lock Manager To enable the distributed locks an <xref:Silverback.Background.IDistributedLockManager> implementation (probably a <xref:Silverback.Background.DbDistributedLockManager>) must be registered for dependency injection as shown in the next code snippet. Note The Silverback.Core.EntityFrameworkCore package is also required and the DbContext must configure a DbSet<Lock> . See also the Sample DbContext (EF Core) . public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .AddDbDistributedLockManager(); } }"
  },
  "concepts/broker/behaviors.html": {
    "href": "concepts/broker/behaviors.html",
    "title": "Broker behaviors pipeline | Silverback",
    "keywords": "Broker behaviors pipeline Silverback is built to be modular and most of its feature are plugged into the consumers and producers via some so-called behaviors. The inbound and outbound messages flow through this pipeline and each behavior take care of a specific task such as serialization, encryption, chunking, logging, etc. The IProducerBehavior and IConsumerBehavior are the interfaces used to build such behaviors. Note IProducerBehavior and IConsumerBehavior inherit the <xref:Silverback.ISorted> interface. It is therefore mandatory to specify the exact sort index of each behavior. Built-in producer behaviors This behaviors build the producer pipeline and contain the actual logic to properly serialize the messages according to the applied configuration. Name Index Description ActivityProducerBehavior 100 Starts an Activity and adds the tracing information to the message headers. HeadersWriterProducerBehavior 200 Maps the properties decorated with the HeaderAttribute to the message headers. MessageEnricherProducerBehavior 250 Invokes all the IOutboundMessageEnricher configured for to the endpoint. MessageIdInitializerProducerBehavior 300 It ensures that an x-message-id header is always produced. BrokerKeyHeaderInitializer 400 Provided by the message broker implementation (e.g. <xref:Silverback.Messaging.Outbound.KafkaMessageKeyInitializerProducerBehavior> or <xref:Silverback.Messaging.Outbound.RabbitRoutingKeyInitializerProducerBehavior>), sets the message key header that will be used by the IProducer implementation to set the actual message key. BinaryFileHandlerProducerBehavior 500 Switches to the BinaryFileMessageSerializer if the message being produced implements the IBinaryFileMessage interface. SerializerProducerBehavior 600 Serializes the message being produced using the configured IMessageSerializer . EncryptorProducerBehavior 700 Encrypts the message according to the EncryptionSettings . SequencerProducerBehavior 800 Uses the available implementations of ISequenceWriter (e.g. ChunkSequenceWriter ) to set the proper headers and split the published message or messages set to create the sequences. EndpointNameResolverProducerBehavior 900 Resolves the actual target endpoint name for the message being published. <xref:Silverback.Messaging.Outbound.Routing.KafkaPartitionResolverProducerBehavior> 901 Resolves the actual target endpoint name for the message being published. CustomHeadersMapperProducerBehavior 1000 Applies the custom header name mappings. Built-in consumer behaviors This behaviors are the foundation of the consumer pipeline and contain the actual logic to deserialize the incoming messages. Name Index Description ActivityConsumerBehavior 100 Starts an Activity with the tracing information from the message headers. FatalExceptionLoggerConsumerBehavior 200 Logs the unhandled exceptions thrown while processing the message. These exceptions are fatal since they will usually cause the consumer to stop. CustomHeadersMapperConsumerBehavior 300 Applies the custom header name mappings. TransactionHandlerConsumerBehavior 400 Handles the consumer transaction and applies the error policies. RawSequencerConsumerBehavior 500 Uses the available implementations of ISequenceReader (e.g. ChunkSequenceReader ) to assign the incoming message to the right sequence. ExactlyOnceGuardConsumerBehavior 600 Uses the configured implementation of IExactlyOnceStrategy to ensure that the message is processed only once. DecryptorConsumerBehavior 700 Decrypts the message according to the EncryptionSettings . BinaryFileHandlerProducerBehavior 800 Switches to the BinaryFileMessageSerializer if the message being consumed is a binary message (according to the x-message-type header. DeserializerConsumerBehavior 900 Deserializes the messages being consumed using the configured IMessageSerializer . HeadersReaderConsumerBehavior 1000 Maps the headers with the properties decorated with the HeaderAttribute . SequencerConsumerBehavior 1100 Uses the available implementations of ISequenceReader (e.g. BatchSequenceReader ) to assign the incoming message to the right sequence. PublisherConsumerBehavior 2000 Publishes the consumed messages to the internal bus. Custom behaviors The behaviors can be used to implement cross-cutting concerns or add new features to Silverback. Custom IProducerBehavior example The following example demonstrate how to set a custom message header on each outbound message. Note The ProducerPipelineContext and ConsumerPipelineContext hold a reference to the IServiceProvider and can be used to resolve the needed services. The IServiceProvider in the ConsumerPipelineContext can be either the root service provider or the scoped service provider for the processing of the consumed message (depending on the position of the behavior in the pipeline). Note The broker behaviors can be registered either as singleton or transient services. When registered as transient a new instance will be created per each producer or consumer. ProducerBehavior Startup public class CustomHeadersProducerBehavior : IProducerBehavior { public int SortIndex => 1000; public async Task HandleAsync( ProducerPipelineContext context, ProducerBehaviorHandler next) { context.Envelope.Headers.Add(\"generated-by\", \"silverback\"); await next(context); } } public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddSingletonBrokerBehavior<CustomHeadersBehavior>(); } } Custom IConsumerBehavior example The following example demonstrate how to log the headers received with each inbound message. ConsumerBehavior Startup public class LogHeadersConsumerBehavior : IConsumerBehavior { private readonly ILogger<LogHeadersBehavior> _logger; public LogHeadersBehavior(ILogger<LogHeadersBehavior> logger) { _logger = logger; } public int SortIndex => 1000; public async Task HandleAsync( ConsumerPipelineContext context, ConsumerBehaviorHandler next) { foreach (var header in context.Envelope.Headers) { _logger.LogTrace( \"{Name}={Value}\", header.Name, header.Value); } await next(context); } } public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddSingletonBrokerBehavior<LogHeadersBehavior>(); } } See also Behaviors"
  },
  "concepts/broker/binary-files.html": {
    "href": "concepts/broker/binary-files.html",
    "title": "Binary Files | Silverback",
    "keywords": "Binary Files Serializing a binary file (a stream or a byte array) using the regular JsonMessageSerializer would mean to encode it in base64 and convert it to a UTF-8 encoded byte array. Beside not being very elegant this approach may cause you some trouble when integrating with other systems expecting the raw file content. This procedure would also result in the transferred byte array to be approximately a 30% bigger than the file itself. In this page it's shown how to use an IBinaryFileMessage to more efficiently transfer raw binary files. Producer configuration The IBinaryFileMessage interface is meant to transfer files over the message broker and is natively supported by Silverback. This means that the raw file content will be transferred in its original form. For convenience the BinaryFileMessage class already implements the IBinaryFileMessage interface. This class exposes a ContentType property as well, resulting in the content-type header to be produced. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Publisher public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IBinaryFileMessage>(endpoint => endpoint .ProduceTo(\"raw-files\"))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IBinaryFileMessage>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }); } public class FileTransferService { private readonly IPublisher _publisher; public FileTransferService(IPublisher publisher) { _publisher = publisher; } public async Task TransferFile(byte[] content, string contentType) { await _publihser.PublishAsync( new BinaryFileMessage(content, contentType)); } } Otherwise you can implement the interface yourself or extend the BinaryFileMessage (e.g. to add some additional headers, as explained in the Message Headers section). EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Message Publisher public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IBinaryFileMessage>(endpoint => endpoint .ProduceTo(\"raw-files\"))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IBinaryFileMessage>( new KafkaProducerEndpoint(\"raw-files\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }); } public class MyBinaryFileMessage : BinaryFileMessage { [Header(\"x-user-id\")] public Guid UserId { get; set; } } public class FileTransferService { private readonly IPublisher _publisher; public FileTransferService(IPublisher publisher) { _publisher = publisher; } public async Task TransferFile( byte[] content, string contentType, Guid userId) { await _publihser.PublishAsync( new MyBinaryFileMessage { Content = content, ContentType = contentType, UserId = userId }); } } Consumer configuration You don't need to do anything special to consume a binary file, if all necessary headers are in place (ensured by Silverback, if it was used to produce the message). The message will be wrapped again in a BinaryFileMessage that can be subscribed like any other message. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"raw-files\") .Configure(config => { config.GroupId = \"my-consumer\" })); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"raw-files\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }); } public class FileSubscriberService { public async Task OnFileReceived(IBinaryFileMessage message) { // ...your file handling logic... } } If the message wasn't produced by Silverback chances are that the message type header is not there. In that case you need to explicitly configure the BinaryFileMessageSerializer in the inbound endpoint. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"raw-files\") .ConsumeBinaryFiles() .Configure(config => { config.GroupId = \"my-consumer\" })); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"raw-files\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } , Serializer = BinaryFileMessageSerializer.Default }); } public class FileSubscriberService { public async Task OnFileReceived(IBinaryFileMessage message) { // ...your file handling logic... } } If you need to read additional headers you can either extend the BinaryFileMessage (suggested approach) or subscribe to an IInboundEnvelope<TMessage> . The following snippet assumes that the files aren't being streamed by a Silverback producer, otherwise it wouldn't be necessary to explicitly set the serializer and the type would be inferred from the x-message-type header. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Message Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"raw-files\") .ConsumeBinaryFiles(serializer => serializer.UseModel<MyBinaryFileMessage>())); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IBinaryFileMessage>( new KafkaProducerEndpoint(\"raw-files\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new BinaryFileMessageSerializer<MyBinaryFileMessage>() }); } public class MyBinaryFileMessage : BinaryFileMessage { [Header(\"x-user-id\")] public Guid UserId { get; set; } } public class FileSubscriberService { public async Task OnFileReceived(MyBinaryFileMessage message) { // ...your file handling logic... } } Samples Kafka - Files Streaming"
  },
  "concepts/broker/callbacks.html": {
    "href": "concepts/broker/callbacks.html",
    "title": "Broker Callbacks | Silverback",
    "keywords": "Broker Callbacks The callbacks are used to notify some events happening during the lifecycle of a message broker client. An interface has to be implemented by the callback handler that is then registered via the Add*BrokerCallbacksHandler methods. The only generic callback, invoked for any of the actual broker implementation is: IEndpointsConfiguredCallback Some broker specific callbacks may be added by the specific broker implementation (see Kafka Events and MQTT Events ). Example In the following example an handler for the IEndpointsConfiguredCallback is being registered. Startup EndpointsConfiguredCallbackHandler public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddSingletonBrokerCallbacksHandler<EndpointsConfiguredCallbackHandler>(); } } public class EndpointsConfiguredCallbackHandler : IKafkaPartitionsAssignedCallback { public Task OnEndpointsConfiguredAsync() { // Perform some initialization logic, // e.g. create the missing topics } }"
  },
  "concepts/broker/chunking.html": {
    "href": "concepts/broker/chunking.html",
    "title": "Chunking | Silverback",
    "keywords": "Chunking Some message brokers like Apache Kafka are very efficient at handling huge amount of relatively small messages. In order to make the most out of it you may want to split your largest messages (e.g. containing binary data) into smaller chunks. Silverback can handle such scenario transparently, reassembling the message automatically in the consumer before pushing it to the internal bus. The messages are being split into small chunks. Producer configuration The producer endpoint can be configured to split the message into chunks by specifying their maximum size (in bytes). Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\") .EnableChunking(500000) .ProduceToOutbox()); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new KafkaProducerEndpoint(\"order-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Chunk = new ChunkSettings { Size = 500000 }, Strategy = new OutboxProduceStrategy() }); } Important The chunks belonging to the same message must be contiguous. It is therefore recommended to have a single producer per endpoint or partition. If using Kafka see also Kafka Partitioning and Message Key . Consumer configuration No particular configuration is needed in the consumer side. Silverback will automatically recognize the chunks sequence by its headers and transparently reassemble the message. With Silverback 3.0.0 the consumer pipeline has been rewritten completely to handle this scenario in a streaming way, processing each chunk directly and applying the behaviors (such as the deserializer) on the fly. The entire original message is never stored anywhere, therefore this approach is suitable also for very large payloads. Important The chunks belonging to the same message must be contiguous. It is therefore recommended to have a single producer per endpoint or partition. If using Kafka see also Kafka Partitioning and Message Key . Incomplete sequences Some chunks sequences may be incomplete because either the producer failed to publish all chunks or the consumer started consuming from the middle of a sequence. In both cases Silverback will silently ignore the incomplete sequences and log a warning. Limitations As mentioned already, the chunks have to be written to the same partition and have to be contiguous. This is by design. Another limitation is that the MoveMessageErrorPolicy is currently unable to move a sequence and is therefore unusable with chunked messages. This may be fixed in a future release. Please open an issue on GitHub if this is important for your use case. Headers Some headers are used to describe the chunks sequence. See Message Headers for details. Samples Kafka - Files Streaming"
  },
  "concepts/broker/connecting.html": {
    "href": "concepts/broker/connecting.html",
    "title": "Connecting to a Message Broker | Silverback",
    "keywords": "Connecting to a Message Broker To connect Silverback to a message broker we need a reference to Silverback.Integration , plus the concrete implementation ( Silverback.Integration.Kafka , Silverback.Integration.MQTT , Silverback.Integration.RabbitMQ , etc.). We can then add the broker to the DI and configure the connected endpoints. Sample configuration The following example is very basic and there are of course many more configurations and possibilities. Some more details are given in the dedicated Outbound Endpoint and Inbound Endpoint sections. The basic concepts: WithConnectionToMessageBroker registers the services necessary to connect to a message broker AddKafka , AddMqtt , AddRabbit , etc. register the message broker implementation(s) AddEndpointsConfigurator is used to outsource the endpoints configuration into a separate class implementing the IEndpointsConfigurator interface (of course multiple configurators can be registered) AddInbound is used to automatically relay the incoming messages to the internal bus and they can therefore be subscribed as seen in the previous chapters AddOutbound works the other way around and subscribes to the internal bus to forward the integration messages to the message broker More complex and complete samples can be found in the Samples section. Basic configuration The following sample demonstrates how to setup some inbound and outbound endpoints against the built-in message brokers (Apache Kafka, MQTT or RabbitMQ). Apache Kafka Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"basket-events\") .Configure(config => { config.GroupId = \"order-service\"; })) .AddInbound(endpoint => endpoint .ConsumeFrom(\"payment-events\") .Configure(config => { confing.GroupId = \"order-service\" })) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\"))); } MQTT Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddMqtt()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddMqttEndpoints(endpoints => endpoints .Configure( config => config .WithClientId(\"order-service\") .ConnectViaTcp(\"localhost\") .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"testaments\"))) .AddInbound(endpoint => endpoint .ConsumeFrom(\"basket-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce)) .AddInbound(endpoint => endpoint .ConsumeFrom(\"payment-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce)) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .Retain())); } Important Silverback uses by default the v5 of the MQTT protocol, since it supports the user properties (headers). You can of course configure the client to use an older version but some Silverback functionalities (relying on message headers) might not work. RabbitMQ Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddRabbit()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddInbound( new RabbitExchangeConsumerEndpoint(\"basket-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\", }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout }, QueueName = \"basket-events-order-service-queue\", Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = true, IsAutoDeleteEnabled = false } }) .AddInbound( new RabbitExchangeConsumerEndpoint(\"payment-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\", }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout }, QueueName = \"payment-events-order-service-queue\", Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = true, IsAutoDeleteEnabled = false } }) .AddOutbound<IIntegrationEvent>( new RabbitExchangeProducerEndpoint(\"order-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout } }); } } Tip All IEndpointsConfigurator implementations are registered as scoped services. Multiple implementations can be registered to split the configuration and of course dependencies (such as IOption or a DbContext ) can be injected to load the configuration variables. Important Starting from version 3.0.0 the broker(s) will be connected and all consumers started automatically at startup, unless explicitly disabled (see the Connection modes chapter for details). Inline endpoints configuration The preferred and suggested way to configure the message broker endpoints is using the IEndpointsConfigurator but you can use AddEndpoints (or AddKafkaEndpoints etc.) directly and configure everything inline. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(...) .AddOutbound<IIntegrationEvent>(...)); } } Multiple brokers It is possible to use multiple message broker implementation together in the same application. The following sample demonstrates how to consume from both Apache Kafka and RabbitMQ. Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka() .AddRabbit()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(...) .AddOutbound<IIntegrationEvent>(...)) .AddInbound( new RabbitExchangeConsumerEndpoint(\"rabbit-events\") { ... }); } } Connection modes You may not want to connect your broker immediately. In the following example is shown how to postpone the automatic connection after the application startup. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka() .WithConnectionOptions(new BrokerConnectionOptions { Mode = BrokerConnectionMode.AfterStartup, RetryInterval = TimeSpan.FromMinutes(5) })) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } But it's also possible to completely disable the automatic connection and manually perform it. Startup Service public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka() .WithConnectionOptions(new BrokerConnectionOptions { Mode = BrokerConnectionMode.Manual })) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class BrokerConnectionService { private readonly IBroker _broker; public BrokerConnectionService(IBroker broker) { _broker = broker; } public async ConnectAsync() { broker.ConnectAsync(); } } Tip See the BrokerConnectionOptions documentation for details about the different options. Note Use IBrokerCollection instead of IBroker when multiple broker implementations are used. Important If your application is not running using an IHost ( GenericHost or WebHost , like in a normal ASP.NET Core application) you always need to manually connect it as shown in the second example above. Graceful shutdown It is important to properly close the consumers using the DisconnectAsync method before exiting. The offsets have to be committed and the broker has to be notified (it will then proceed to reassign the partitions as needed). Starting from version 3.0.0 this is done automatically (if your application is running using an IHost ( GenericHost or WebHost , like in a normal ASP.NET Core application). Health Monitoring The Silverback.Integration.HealthChecks package contains some extensions for Microsoft.Extensions.Diagnostics.HealthChecks that can be used to monitor the connection to the message broker. Currently, two checks exists: AddOutboundEndpointsCheck : Adds an health check that sends a ping message to all the outbound endpoints. AddOutboxCheck : Adds an health check that monitors the outbound queue (outbox table), verifying that the messages are being processed. AddConsumersCheck : Adds a health check that verifies that all consumers are connected. The usage is very simple, you just need to configure the checks in the Startup.cs, as shown in the following example. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddHealthChecks() .AddOutboundEndpointsCheck() .AddOutboundQueueCheck() .AddConsumersCheck(); } public void Configure(IApplicationBuilder app) { app.UseHealthChecks(\"/health\"); } } Consumer management API The consumer exposes some information and statistics that can be used to programmatically check the consumer status (see IConsumer ). A consumer can also be connected, started, stopped and disconnected at will. The following example shows a sample service that is used to monitor the total number of consumed message and restart the faulted consumers (the consumers get disconnected when an unhandled exception is thrown while processing the consumed message). public class ConsumerManagementService { private readonly IBrokerCollection _brokers; public ConsumerManagementService(IBrokerCollection brokers) { _brokers = brokers; } public int GetTotalConsumedMessages() { int totalCount = 0; foreach (var broker in _brokers) { foreach (var consumer in broker.Consumers) { totalCount += consumer.StatusInfo.ConsumedMessagesCount; } } } public void RestartDisconnectedConsumers() { foreach (var broker in _brokers) { if (!broker.IsConnected) continue; foreach (var consumer in broker.Consumers) { if (consumer.StatusInfo.Status == ConsumerStatus.Disconnected) { consumer.Connect(); } } } } } Samples All"
  },
  "concepts/broker/encryption.html": {
    "href": "concepts/broker/encryption.html",
    "title": "Encryption | Silverback",
    "keywords": "Encryption The end-to-end message encryption in Silverback is handled transparently in the producer and consumer and works independently from the used serializer or other features like chunking . The messages are transparently encrypted and decrypted. Symmetric encryption Enabling the end-to-end encryption using a symmetric algorithm just require an extra configuration in the endpoint. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .EncryptUsingAes(encryptionKey)) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DecryptUsingAes(encryptionKey))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Encryption = new SymmetricEncryptionSettings { AlgorithmName = \"AES\", Key = encryptionKey } }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Encryption = new SymmetricEncryptionSettings { AlgorithmName = \"AES\", Key = encryptionKey } }); } The SymmetricEncryptionSettings class encapsulates all common settings of a symmetric algorithm (block size, initialization vector, ...). The AlgorithmName is used to load the algorithm implementation using the SymmetricAlgorithm.Create(string) method. Refer to the SymmetricAlgorithm class documentation to see which implementations are available in .net core are. Silverback uses Aes by default. Random initialization vector If no static initialization vector is provided, a random one is automatically generated per each message and prepended to the actual encrypted message. The consumer will automatically extract and use it. It is recommended to stick to this default behavior, for increased security. Ket rotation You can smoothly rotate the key being used to encrypt the messages. In the outbound endpoint you can specify the current key identifier to be submitted as header, while in the inbound endpoint a custom function can be used to provide the correct key, depending on the value in the header. This simple mechanism allows to consume messages that were encrypted using different keys, enabling key rotation and supporting a rolling update of the producers. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .EncryptUsingAes(encryptionKey, \"key1\")) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DecryptUsingAes(keyIdentifier => { switch (keyIdentifier) { case \"key1\": return encryptionKey1; default: return encryptionKey2; } }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Encryption = new SymmetricEncryptionSettings { AlgorithmName = \"AES\", KeyProvider = encryptionKey, KeyIdentifier = \"key1\" } }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Encryption = new SymmetricEncryptionSettings { AlgorithmName = \"AES\", KeyProvider = keyIdentifier => { switch (keyIdentifier) { case \"key1\": return encryptionKey1; default: return encryptionKey2; } } } }); }"
  },
  "concepts/broker/headers.html": {
    "href": "concepts/broker/headers.html",
    "title": "Message Headers | Silverback",
    "keywords": "Message Headers Custom headers There are multiple ways to add custom headers to an outbound message: adding an enricher to the IProducerEndpoint annotating some properties with the HeaderAttribute , as shown in the next chapter. using a custom <xref:Silverback.Messaging.Publishing.IBehavior> or IProducerBehavior can be implemented, as shown in the Behaviors and Broker behaviors pipeline sections. Warning Some message broker implementations might not support headers and Silverback doesn't currently provide any workaround, thus the headers will simply be ignored. Using enrichers Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .AddHeader( \"x-my-header\", \"static value\") .AddHeader<InventoryEvent>( \"x-product-id\", envelope => envelope.Message?.ProductId))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, MessageEnrichers = new List<IOutboundMessageEnricher> { new GenericOutboundHeadersEnricher( \"x-my-header\", \"static value\"), new GenericOutboundHeadersEnricher<InventoryEvent>( \"x-product-id\", envelope => envelope.Message?.ProductId) } }); } Using HeaderAttribute The HeaderAttribute usage is very simple: you just have to decorate the properties you want to publish as headers and specify a name for the header. The headers value will also automatically be mapped back to the property upon consuming if the property declares a setter. using Silverback.Messaging.Messages; namespace Sample { public class OrderCreatedEvent { public List<LineItems> Items { get; set; } [Header(\"x-order-type\", PublishDefaultValue = true)] [JsonIgnore] public OrderType OrderType { get; set; } [Header(\"x-books-order\")] public bool ContainsBooks => Items.Any(item => item.Type == \"book\") [Header(\"x-dvd-order\")] public bool ContainsDvd => Items.Any(item => item.Type == \"dvd\") } } Note The PublishDefaultValue boolean property defines whether the header has to be published even if the property is set to the default value for its data type. The default is false . Note that the JsonIgnoreAttribute can be used to prevent the same properties to be serialized in the JSON body, when using the JsonMessageSerializer . Important Only the message type will be scanned, therefore the properties decorated with the HeaderAttribute must be in the root of the message object. Default headers Silverback will add some headers to the produced messages. They may vary depending on the scenario. Here is the list of the default headers that may be sent. Header Key Description x-message-id The message identifier . x-message-type The assembly qualified name of the message type. Used by the default JsonMessageSerializer . x-failed-attempts If an exception if thrown the failed attempts will be incremented and stored as header. This is necessary for the error policies to work. x-source-endpoint This will be set by the Move error policy and will contain the name of the endpoint the failed message is being moved from. x-chunk-index The message chunk index, used when chunking is enabled. x-chunk-count The total number of chunks the message was split into, used when chunking is enabled. x-chunk-last A boolean value indicating whether the message is the last one of a chunks sequence, used when chunking is enabled. x-first-chunk-offset The IBrokerMessageOffset value of the first chunk of the same message, used when chunking is enabled. traceparent Used for distributed tracing. It is set by the IProducer using the current Activity.Id . The IConsumer uses it's value to set the Activity.ParentId . Note that an Activity is automatically started by the default IProducer implementation. The header is implemented according to the W3C Trace Context proposal . tracestate Used for distributed tracing. It corresponds to the Activity.TraceStateString . The header is implemented according to the W3C Trace Context proposal . tracebaggage Used for distributed tracing. It corresponds to the string representation of the Activity.Baggage dictionary. This is not part of the w3c standard. content-type The content type of the binary file , used when producing or consuming an IBinaryFileMessage . x-kafka-message-key The header that will be filled with the key of the message consumed from Kafka. x-kafka-message-timestamp The header that will be filled with the timestamp of the message consumed from Kafka. The static classes DefaultMessageHeaders and <xref:Silverback.Messaging.Messages.KafkaMessageHeaders> contain all default header names constants. Customizing header names The default header names can be overridden using the WithCustomHeaderName configuration method. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>() .WithCustomHeaderName(DefaultMessageHeaders.ChunkId, \"x-ch-id\") .WithCustomHeaderName(DefaultMessageHeaders.ChunksCount, \"x-ch-cnt\")); } }"
  },
  "concepts/broker/inbound.html": {
    "href": "concepts/broker/inbound.html",
    "title": "Inbound Endpoint | Silverback",
    "keywords": "Inbound Endpoint An inbound endpoint is used to configure Silverback to automatically consume a topic/queue and relay the messages to the internal bus. If no exception is thrown by the subscribers, the message is acknowledged and the next one is consumed. The endpoint object identifies the topic/queue that is being connected and the client configuration, such the connection options. The endpoint object is therefore very specific and every broker type will define it's own implementation of IConsumerEndpoint . The options in the endpoint object are also used to tweak the Silverback behavior (e.g. the deserialization ) and to enable additional features such as batch processing , decryption , etc. Note Silverback abstracts the message broker completely and the messages are automatically acknowledged if the subscribers complete without throwing an exception. Apache Kafka The <xref:Silverback.Messaging.KafkaConsumerEndpoint> is defined by Silverback.Integration.Kafka and is used to declare an inbound endpoint connected to Apache Kafka. Fluent (preferred) Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; config.AutoOffsetReset = AutoOffsetResetType.Earliest; } .OnError(policy => policy.Retry(5)))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint( \"order-events\", \"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\", AutoOffsetReset = AutoOffsetResetType.Earliest }, ErrorPolicy = new RetryErrorPolicy().MaxFailedAttempts(5) }); } Note You can decide whether to use one consumer per topic or subscribe multiple topics with the same consumer (passing multiple topic names in the endpoint constructor, as shown in the example above). There are advantages and disadvantages of both solutions and the best choice really depends on your specific requirements, the amount of messages being produced, etc. Anyway the main difference is that when subscribing multiple topics you will still consume one message after the other but they will simply be interleaved (this may or may not be an issue, it depends) and on the other hand each consumer will use some resources, so creating multiple consumers will result in a bigger overhead. Note For a more in-depth documentation about the Kafka client configuration refer also to the confluent-kafka-dotnet documentation . MQTT The <xref:Silverback.Messaging.MqttConsumerEndpoint> is defined by Silverback.Integration.MQTT and is used to declare an inbound endpoint connected to an MQTT broker. Fluent (preferred) Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddMqttEndpoints(endpoints => endpoints .Configure( config => config .WithClientId(\"order-service\") .ConnectViaTcp(\"localhost\") .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"testaments\"))) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .OnError(policy => policy.Retry(5)))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new MqttConsumerEndpoint( \"order-events\", \"inventory-events\") { Configuration = { ClientId = \"order-service\", ChannelOptions = new MqttClientTcpOptions { Server = \"localhost\" }, WillMessage = new MqttApplicationMessage() { ... } }, QualityOfServiceLevel = MqttQualityOfServiceLevel.AtLeastOnce ErrorPolicy = new RetryErrorPolicy().MaxFailedAttempts(5) }); } Note It doesn't matter how you configure the inbound and outbound endpoints, a single client will be created as long as all endpoints match the exact same configuration. (Using a slightly different configuration for the same client it will cause an exception to be thrown when validating the endpoints configuration.) Note For a more in-depth documentation about the MQTT client configuration refer also to the MQTTNet documentation . RabbitMQ Silverback.Integration.RabbitMQ is a bit more intricate and uses 2 different classes to specify an endpoint that connects to a queue (<xref:Silverback.Messaging.RabbitQueueConsumerEndpoint>) or directly to an exchange (<xref:Silverback.Messaging.RabbitExchangeConsumerEndpoint>). public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new RabbitQueueConsumerEndpoint(\"inventory-commands-queue\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = false, IsAutoDeleteEnabled = false } }) .AddInbound( new RabbitExchangeConsumerEndpoint(\"order-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout }, QueueName = \"my-consumer-group\", Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = false, IsAutoDeleteEnabled = false } }); } Note For a more in-depth documentation about the RabbitMQ configuration refer to the RabbitMQ tutorials and documentation . Error handling If an exceptions is thrown by the methods consuming the incoming messages (subscribers) the consumer will stop, unless some error policies are defined. The built-in policies are: StopConsumerErrorPolicy (default) SkipMessageErrorPolicy RetryErrorPolicy MoveMessageErrorPolicy ErrorPolicyChain Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; config.AutoOffsetReset = AutoOffsetResetType.Earliest; }) .OnError(policy => policy .Retry(3, TimeSpan.FromSeconds(1)) .ThenSkip()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint( \"order-events\", \"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\", AutoOffsetReset = AutoOffsetResetType.Earliest }, ErrorPolicy = new ErrorPolicyChain( new RetryErrorPolicy().MaxFailedAttempts(5), new SkipErrorPolicy()) }); } Important If the processing still fails after the last policy is applied the exception will be returned to the consumer, causing it to stop. Important The number of attempts are tracked according to the message id header . A message id must be provided in order for the MaxFailedAttempts mechanism to work. This is ensured by the Silverback producer but might not be the case when consuming messages coming from other sources. Some message broker implementations might transparently cope with the missing message id header and derive it from other identifiers (e.g. the kafka message key) but it's not automatically guaranteed that they will always be unique. You should carefully check that before relying on this feature. Important The RetryErrorPolicy will prevent the message broker to be polled for the duration of the configured delay, which could lead to a timeout. With Kafka you should for example set the max.poll.interval.ms settings to an higher value. Apply rules Use ApplyTo and Exclude methods to decide which exceptions must be handled by the error policy or take advantage of ApplyWhen to specify a custom apply rule. .OnError(policy => policy .MoveToKafkaTopic( moveEndpoint => moveEndpoint.ProduceTo(\"some-other-topic\"), movePolicy => movePolicy .ApplyTo<MyException>() .ApplyWhen((msg, ex) => msg.Xy == myValue)) .ThenSkip()); public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .OnError(policy => policy .MoveToKafkaTopic( moveEndpoint => moveEndpoint.ProduceTo(\"some-other-topic\"), movePolicy => movePolicy .ApplyTo<MyException>() .ApplyWhen((msg, ex) => msg.Xy == myValue)) .ThenSkip()))); } Publishing events Messages can be published when a policy is applied, in order to execute custom code. EndpointsConfigurator Event Handler public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .OnError(policy => policy .Retry(3, TimeSpan.FromSeconds(1)) .ThenSkip(skipPolicy => skipPolicy .Publish(msg => new ProcessingFailedEvent(msg)))))); } public void OnProcessingFailed(ProcessingFailedEvent @event) { _processingStatusService.SetFailed(@event.Message.Id); _mailService.SendNotification(\"Failed to process message!\"); } Batch processing In some scenario, when having to deal with huge amounts of messages, processing each one of them on its own isn't the most efficient approach. Batch processing allow to process an arbitrary number of unrelated messages as a single unit of work. The messages are processed in batches. Refer to the BatchSettings documentation for details about the configuration. The batch can be subscribed either as IEnumerable , IAsyncEnumerable or <xref:Silverback.Messaging.Messages.IMessageStreamEnumerable`1>. See also Streaming for details. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .EnableBatchProcessing(100, TimeSpan.FromSeconds(5)))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Batch = new Messaging.Batch.BatchSettings { Size = 100, MaxWaitTime = TimeSpan.FromSeconds(5) } }); } public class InventoryService { private DbContext _db; public InventoryService(MyDbContext db) { _db = db; } public async Task OnBatchReceived(IAsyncEnumerable<InventoryUpdateEvent> messages) { async foreach (var message in messages) { // Process each message } // Commit all changes in a single transaction await _db.SaveChangesAsync(); } } Parallelism The consumer processes the messages sequentially, this is by design. The <xref:Silverback.Messaging.Broker.KafkaConsumer> is a bit special and actually processes each assigned partition independently and concurrently. This feature can be toggled using the ProcessAllPartitionsTogether and ProcessPartitionsIndependently methods of the <xref:Silverback.Messaging.Configuration.Kafka.IKafkaConsumerEndpointBuilder> (or the KafkaConsumerEndpoint.ProcessPartitionsIndependently property), while the LimitParallelism method (or the KafkaConsumerEndpoint.MaxDegreeOfParallelism property) can be used to limit the number of messages being actually processed concurrently. Exactly-once processing Silverback is able to keep track of the messages that have been consumed in order to guarantee that each message is processed exactly once. Offset storage The OffsetStoreExactlyOnceStrategy will store the offset of the latest processed message (of each topic/partition) into a database table. The offsets are being stored to prevent the very same message to be consumed twice. Note The Silverback.Core.EntityFrameworkCore package is also required and the DbContext must include a DbSet of StoredOffset . See also the Sample DbContext (EF Core) . Startup EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .WithConnectionToMessageBroker(options => options .AddKafka() .AddOffsetStoreDatabaseTable()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .EnsureExactlyOnce(strategy => strategy.StoreOffsets()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, ExactlyOnceStrategy = new OffsetStoreExactlyOnceStrategy() }); } Inbound log The LogExactlyOnceStrategy will store the identifiers of all processed messages into a database table. The inbound messages are logged to prevent two messages with the same key to be consumed. Note The Silverback.Core.EntityFrameworkCore package is also required and the DbContext must include a DbSet of InboundLogEntry . See also the Sample DbContext (EF Core) . Startup EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .WithConnectionToMessageBroker(options => options .AddKafka() .AddInboundLogDatabaseTable()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .EnsureExactlyOnce(strategy => strategy.LogMessages()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, ExactlyOnceStrategy = new LogExactlyOnceStrategy() }); } Custom store At the moment only a database accessed using Entity Framework is supported as offset or log storage, but a custom storage can be used implementing IOffsetStore or IInboundLog . public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .WithConnectionToMessageBroker(options => options .AddKafka() .AddOffsetStore<MyCustomOffsetStore>()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } Samples All"
  },
  "concepts/broker/inboundenvelope.html": {
    "href": "concepts/broker/inboundenvelope.html",
    "title": "IInboundEnvelope | Silverback",
    "keywords": "IInboundEnvelope When a message is consumed Silverback wraps it into an IInboundEnvelope<TMessage> and pushes it to the message bus. Both the IInboundEnvelope<TMessage> or the contained message in its pure form can be subscribed. You can take advantage of this mechanism to gain access to the transport information of the message, since the IInboundEnvelope<TMessage> holds all the information like endpoint, offset and headers data. Subscribing to the IInboundEnvelope<TMessage> works exactly the same as subscribing to any other message. public class SubscribingService { public async Task OnWrappedMessageReceived(IInboundEnvelope<SampleMessage> envelope) { // ...your message handling logic... } public async Task OnPureMessageReceived(SampleMessage message) { // ...your message handling logic... } } Note Subscribing to the non-generic IInboundEnvelope or IRawInboundEnvelope it is possible to subscribe even the messages with an empty body."
  },
  "concepts/broker/kafka/kafka-events.html": {
    "href": "concepts/broker/kafka/kafka-events.html",
    "title": "Kafka Events | Silverback",
    "keywords": "Kafka Events The underlying library ( Confluent.Kafka ) uses some events to let you catch important information, interact with the partitions assignment process, etc. Silverback proxies those events to give you full access to those features. Consumer events These callbacks are available: <xref:Silverback.Messaging.Broker.Callbacks.IKafkaPartitionsAssignedCallback> <xref:Silverback.Messaging.Broker.Callbacks.IKafkaPartitionsRevokedCallback> <xref:Silverback.Messaging.Broker.Callbacks.IKafkaOffsetCommittedCallback> <xref:Silverback.Messaging.Broker.Callbacks.IKafkaConsumerErrorCallback> <xref:Silverback.Messaging.Broker.Callbacks.IKafkaConsumerStatisticsCallback> <xref:Silverback.Messaging.Broker.Callbacks.IKafkaConsumerLogCallback> <xref:Silverback.Messaging.Broker.Callbacks.IKafkaPartitionEofCallback> Offset reset example In the following example the partitions assigned event is subscribed in order to reset the start offsets and replay the past messages. Startup ResetOffsetPartitionsAssignedCallbackHandler public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddSingletonBrokerCallbacksHandler<ResetOffsetPartitionsAssignedCallbackHandler>(); } } public class ResetOffsetPartitionsAssignedCallbackHandler : IKafkaPartitionsAssignedCallback { public IEnumerable<TopicPartitionOffset> OnPartitionsAssigned( IReadOnlyCollection<TopicPartition> topicPartitions, KafkaConsumer consumer) => topicPartitions.Select( topicPartition => new TopicPartitionOffset(topicPartition, Offset.Beginning)); } Producer events These callbacks are available: <xref:Silverback.Messaging.Broker.Callbacks.IKafkaProducerStatisticsCallback> <xref:Silverback.Messaging.Broker.Callbacks.IKafkaProducerLogCallback> See also Broker Callbacks"
  },
  "concepts/broker/kafka/kafka-partitioning.html": {
    "href": "concepts/broker/kafka/kafka-partitioning.html",
    "title": "Kafka Partitioning and Message Key | Silverback",
    "keywords": "Kafka Partitioning and Message Key Producer Destination partition If the destination topic contains multiple partitions, the destination partition is picked according to the hash of the message key . If no explicit message key was set, a random one is generated, resulting in the messages being randomly spread across the partitions. You can override this default behavior explicitly setting the target partition in the endpoint. The endpoint can be statically defined like in the following snippet or resolved via dynamic routing . Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\", 2))); // <- partition 2 } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new KafkaProducerEndpoint(\"order-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Partition = 2 }); } Producing to a fixed partition may be required in the case you have multiple producers to the same topic and you have to prevent the messages from the different clients to be interleaved (e.g. because you are relying on sequences, like chunking ). Message key Apache Kafka require a message key for different purposes, such as: Partitioning : Kafka can guarantee ordering only inside the same partition and it is therefore important to be able to route correlated messages into the same partition. To do so you need to specify a key for each message and Kafka will put all messages with the same key in the same partition. Compacting topics : A topic can be configured with cleanup.policy=compact to instruct Kafka to keep only the latest message related to a certain object, identified by the message key. In other words Kafka will retain only 1 message per each key value. The messages with the same key are guaranteed to be written to the same partition. Silverback will always generate a message key (same value as the x-message-id header ) but you can also generate your own key, either adding an enricher to the IProducerEndpoint or decorating the properties that must be part of the key with <xref:Silverback.Messaging.Messages.KafkaKeyMemberAttribute>. Using enricher Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .WithKafkaKey<InventoryEvent>( envelope => envelope.Message?.ProductId))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, MessageEnrichers = new List<IOutboundMessageEnricher> { new OutboundMessageKafkaKeyEnricher<InventoryEvent>( envelope => envelope.Message?.ProductId) } }); } Using KafkaKeyMemberAttribute public class MultipleKeyMembersMessage : IIntegrationMessage { public Guid Id { get; set; } [KafkaKeyMember] public string One { get; set; } [KafkaKeyMember] public string Two { get; set; } public string Three { get; set; } } Note The message key will also be received as header (see Message Headers for details). Consumer Partitions processing While using a single poll loop, Silverback processes the messages consumed from each Kafka partition independently and concurrently. By default up to 10 messages/partitions are processed concurrently (per topic). This value can be tweaked in the endpoint configuration or disabled completely. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .LimitParallelism(2) .Configure(config => { config.GroupId = \"my-consumer\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"inventory-events\") .ProcessAllPartitionsTogether() .Configure(config => { config.GroupId = \"my-consumer\"; }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\", }, MaxDegreeOfParallelism = 2 }) .AddInbound( new KafkaConsumerEndpoint(\"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\", }, ProcessPartitionsIndependently = false }); } Manual partitions assignment In some cases you don't want to let the broker randomly distribute the partitions among the consumers. This might also be useful when dealing with large sequences (e.g. large messages/files being chunked or when batch processing ), to prevent that a rebalance occurs in the middle of a sequence, forcing the consumer to abort and restart from the beginning. The assignment can either be completely static or dynamic using a resolver function that will receive all available partitions as input (see <xref:Silverback.Messaging.Configuration.Kafka.IKafkaConsumerEndpointBuilder> and <xref:Silverback.Messaging.KafkaConsumerEndpoint> for details). Fluent (static) Fluent (dynamic) Legacy (static) Legacy (dynamic) public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom( new TopicPartition(\"order-events\", 0), new TopicPartition(\"order-events\", 1)) .Configure(config => { config.GroupId = \"my-consumer\"; }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom( \"order-events\", partitions => partitions .Where(partition => partition.Partition % 2 == 0)) .Configure(config => { config.GroupId = \"my-consumer\"; }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint( new TopicPartition(\"order-events\", 0), new TopicPartition(\"order-events\", 1)) { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" } }); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint( \"order-events\", partitions => partitions .Where(partition => partition.Partition % 2 == 0)) { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" } }); } Samples Kafka - Files Streaming"
  },
  "concepts/broker/kafka/multiple-consumer-groups.html": {
    "href": "concepts/broker/kafka/multiple-consumer-groups.html",
    "title": "Multiple Consumer Groups (in same process) | Silverback",
    "keywords": "Multiple Consumer Groups (in same process) In some cases you may want to subscribe multiple times the same consumed message, to perform independent tasks. Having multiple subscribers handling the very same message is not a good idea since a failure in one of them will cause the message to be consumed again and thus reprocessed by all subscribers. A much safer approach is to bind multiple consumers to the same topic, using a different consumer group id. This will cause the message to be consumed multiple times (once per consumer group) and being committed independently. The <xref:Silverback.Messaging.Subscribers.KafkaGroupIdFilterAttribute> can be used to execute a subscribed method according to the group id. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"document-events\") .Configure(config => { config.GroupId = \"group1\"; })) .AddInbound(endpoint => endpoint .ConsumeFrom(\"document-events\") .Configure(config => { config.GroupId = \"group2\"; }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"document-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"group1\" } }) .AddInbound( new KafkaConsumerEndpoint(\"document-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"group2\" } }); } public class MySubscriber { [KafkaGroupIdFilter(\"group1\")] public void PerformTask1(MyEvent @event) => ... [KafkaGroupIdFilter(\"group2\")] public void PerformTask2(MyEvent @event) => ... } Using the <xref:Silverback.Messaging.Subscribers.KafkaGroupIdFilterAttribute> is the cleanest and easiest approach but alternatively you can always subscribe to the IInboundEnvelope<TMessage> and perform different tasks according to the GroupId value. public class MySubscriber { public void OnMessageReceived(IInboundEnvelope<MyEvent> envelope) { switch (((KafkaConsumerEndpoint)envelope.Endpoint).Configuration.GroupId) { case \"group1\": PerformTask1(envelope.Message); break; case \"group2\": PerformTask2(envelope.Message); break; } } private void PerformTask1(MyEvent @event) => ... private void PerformTask2(MyEvent @event) => ... }"
  },
  "concepts/broker/message-id.html": {
    "href": "concepts/broker/message-id.html",
    "title": "Message Identifier | Silverback",
    "keywords": "Message Identifier Silverback will ensure that an x-message-id header is always set with each message. This header is used mostly for tracing purpose and it's value is always printed in the logs generated by Silverback. The producer will automatically generate a random Guid to be used as message identifier. (This value will be used also as Kafka key by default, see Kafka Partitioning and Message Key .) In the consumer side the message identifier may be used also to rebuild the chunks sequence , implement exactly once processing and similar. If the header is not present, the consumer may artificially set if with another identifier such as the Kafka key (see Kafka Partitioning and Message Key ). Custom value It is of course possible to use a customized message identifier instead of a random Guid , simply overriding the x-message-id header as shown in the following snippet. More information about the message headers can be found in the Message Headers section. using Silverback.Messaging.Messages; namespace Sample { public class OrderSubmittedEvent { [Header(DefaultMessageHeaders.MessageId)] public string UniqueOrderNumber { get; set; } } } Note This example assumes that only one message per each order is published to the same endpoint, because the message id should be unique in order for the various features relying on it to work properly."
  },
  "concepts/broker/mqtt/mqtt-events.html": {
    "href": "concepts/broker/mqtt/mqtt-events.html",
    "title": "MQTT Events | Silverback",
    "keywords": "MQTT Events Some lifetime events are fired by the <xref:Silverback.Messaging.Broker.MqttBroker> and can be handled using the following callbacks: <xref:Silverback.Messaging.Broker.Callbacks.IMqttClientConnectedCallback> <xref:Silverback.Messaging.Broker.Callbacks.IMqttClientDisconnectingCallback> Example In the following example a message is sent as soon as the client is connected. Startup ConnectionCallbackHandler public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddMqtt()) .AddSingletonBrokerCallbacksHandler<ConnectionCallbackHandler>(); } } public class ConnectionCallbackHandler : IMqttClientConnectedCallback { private readonly IPublisher _publisher; public ConnectionCallbackHandler(IPublisher publisher) { _publisher = publisher; } public Task OnClientConnectedAsync(MqttClientConfig config) => _publisher.PublishAsync(new ClientConnectedMessage()); } See also Broker Callbacks"
  },
  "concepts/broker/mqtt/multiple-clients.html": {
    "href": "concepts/broker/mqtt/multiple-clients.html",
    "title": "Multiple Clients (in same process) | Silverback",
    "keywords": "Multiple Clients (in same process) In some cases you may want to subscribe multiple times the same consumed message, to perform independent tasks. Having multiple subscribers handling the very same message is not a good idea since a failure in one of them will cause the message to be consumed again and thus reprocessed by all subscribers. A much safer approach is to bind multiple consumers to the same topic, using a different client id. This will cause the message to be consumed multiple times (once per client) and being committed independently. The <xref:Silverback.Messaging.Subscribers.MqttClientIdFilterAttribute> can be used to execute a subscribed method according to the client id. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddMqttEndpoints(endpoints => endpoints .Configure( config => config .ConnectViaTcp(\"localhost\")) .AddInbound(endpoint => endpoint .Configure(config => config.WithClientId(\"client1\")) .ConsumeFrom(\"document-events\")) .AddInbound(endpoint => endpoint .Configure(config => config.WithClientId(\"client2\")) .ConsumeFrom(\"document-events\"))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new MqttConsumerEndpoint(\"document-events\") { Configuration = { ClientId = \"client1\", ChannelOptions = new MqttClientTcpOptions { Server = \"localhost\" } } }) .AddInbound( new MqttConsumerEndpoint(\"document-events\") { Configuration = { ClientId = \"client2\", ChannelOptions = new MqttClientTcpOptions { Server = \"localhost\" } } }); } public class MySubscriber { [MqttClientIdFilter(\"client1\")] public void PerformTask1(MyEvent @event) => ... [MqttClientIdFilter(\"client2\")] public void PerformTask2(MyEvent @event) => ... } Using the <xref:Silverback.Messaging.Subscribers.MqttClientIdFilterAttribute> is the cleanest and easiest approach but alternatively you can always subscribe to the IInboundEnvelope<TMessage> and perform different tasks according to the ClientId value. public class MySubscriber { public void OnMessageReceived(IInboundEnvelope<MyEvent> envelope) { switch (((MqttConsumerEndpoint)envelope.Endpoint).Configuration.ClientId) { case \"client1\": PerformTask1(envelope.Message); break; case \"client2\": PerformTask2(envelope.Message); break; } } private void PerformTask1(MyEvent @event) => ... private void PerformTask2(MyEvent @event) => ... }"
  },
  "concepts/broker/outbound.html": {
    "href": "concepts/broker/outbound.html",
    "title": "Outbound Endpoint | Silverback",
    "keywords": "Outbound Endpoint An outbound endpoint is used to configure silverback to automatically relay the integration messages that ate published to the internal bus to the message broker. Multiple outbound endpoints can be configured and Silverback will route the messages according to their type or a custom routing logic. The endpoint object identifies the topic/queue that is being connected and the client configuration, such the connection options. The endpoint object is therefore very specific and every broker type will define it's own implementation of IProducerEndpoint . The options in the endpoint object are also used to tweak the Silverback behavior (e.g. the serialization ) and to enable additional features such as chunking , encryption , etc. Apache Kafka The <xref:Silverback.Messaging.KafkaProducerEndpoint> is defined by Silverback.Integration.Kafka and is used to declare an outbound endpoint connected to Apache Kafka. Fluent (preferred) Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\") .EnableChunking(500000) .ProduceToOutbox())); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new KafkaProducerEndpoint(\"order-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Chunk = new ChunkSettings { Size = 500000 }, Strategy = new OutboxProduceStrategy() }); } Note For a more in-depth documentation about the Kafka client configuration refer also to the confluent-kafka-dotnet documentation . MQTT The <xref:Silverback.Messaging.MqttProducerEndpoint> is defined by Silverback.Integration.MQTT and is used to declare an outbound endpoint connected to an MQTT broker. Fluent (preferred) Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddMqttEndpoints(endpoints => endpoints .Configure( config => config .WithClientId(\"order-service\") .ConnectViaTcp(\"localhost\") .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"testaments\"))) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .Retain())); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new MqttProducerEndpoint(\"order-events\") { Configuration = { ClientId = \"order-service\", ChannelOptions = new MqttClientTcpOptions { Server = \"localhost\" }, WillMessage = new MqttApplicationMessage() { ... } }, QualityOfServiceLevel = MqttQualityOfServiceLevel.AtLeastOnce, Retain = true }); } Note For a more in-depth documentation about the MQTT client configuration refer also to the MQTTNet documentation . RabbitMQ Silverback.Integration.RabbitMQ is a bit more intricate and uses 2 different classes to specify an endpoint that connects to a queue (<xref:Silverback.Messaging.RabbitQueueProducerEndpoint>) or directly to an exchange (<xref:Silverback.Messaging.RabbitExchangeProducerEndpoint>). public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new RabbitQueueProducerEndpoint(\"inventory-commands-queue\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = false, IsAutoDeleteEnabled = false } }) .AddOutbound<IIntegrationEvent>( new RabbitExchangeProducerEndpoint(\"order-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout } }); } Note For a more in-depth documentation about the RabbitMQ configuration refer to the RabbitMQ tutorials and documentation . Transactional outbox strategy The transactional outbox pattern purpose is to reliably update the database and publish the messages in the same atomic transaction. This is achieved storing the outbound messages into a temporary outbox table, whose changes are committed together with the other changes to the rest of the data. Messages 1, 2 and 3 are stored in the outbox table and produced by a separate thread or process. When using entity framework the outbound messages are stored into a DbSet and are therefore implicitly saved in the same transaction used to save all other changes. Note The Silverback.Core.EntityFrameworkCore package is also required and the DbContext must include a DbSet of OutboxMessage . See also the Sample DbContext (EF Core) . Important The current OutboxWorker cannot scale horizontally and starting multiple instances will cause the messages to be produced multiple times. In the following example a distributed lock (stored in the database) is used to ensure that only one instance is running and another one will immediately take over when it stops (the DbContext must include a DbSet of <xref:Silverback.Database.Model.Lock> as well, see also the Sample DbContext (EF Core) ). Startup EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Publisher public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() // Setup the lock manager using the database // to handle the distributed locks. // If this line is omitted the OutboundWorker will still // work without locking. .AddDbDistributedLockManager() .WithConnectionToMessageBroker(options => options .AddKafka() .AddOutboxDatabaseTable() .AddOutboxWorker()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IIntegrationEvent>( endpoint => endpoint .ProduceTo(\"order-events\") .ProduceToOutbox())); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new KafkaProducerEndpoint(\"order-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Strategy = new OutboxProduceStrategy() }); } private readonly IPublisher _publisher; private readonly SampleDbContext _dbContext; public async Task CancelOrder(int orderId) { // You can use _dbContext to update/insert entities here await _publisher.PublishAsync(new OrderCancelledEvent { OrderId = orderId }); // No messages will be published unless you call SaveChangesAsync! await _dbContext.SaveChangesAsync(); } Custom outbox You can easily use another kind of storage as outbox, simply creating your own IOutboxWriter and IOutboxReader implementations. At the moment only a database table accessed using Entity Framework is supported as outbox, but a custom storage can be used implementing IOutboxWriter and IOutboxReader . public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .AddDbDistributedLockManager() .WithConnectionToMessageBroker(options => options .AddKafka() .AddOutbox<MyCustomOutboxWriter, MyCustomOutboxReader() .AddOutboxWorker()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } Subscribing locally The published messages that are routed to an outbound endpoint cannot be subscribed locally (within the same process), unless explicitly desired. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddDbDistributedLockManager() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>() .PublishOutboundMessagesToInternalBus(); } } Note What said above is only partially true, as you can subscribe to the wrapped message ( IOutboundEnvelope<TMessage> ) even without calling PublishOutboundMessagesToInternalBus . Producing the same message to multiple endpoints An outbound route can point to multiple endpoints resulting in a broadcast to all endpoints. Messages 1, 2 and 3 are published to both topics simultaneously. public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddOutbound<IIntegrationCommand>( new KafkaProducerEndpoint(\"topic-1\") { ... }, new KafkaProducerEndpoint(\"topic-2\") { ... })); } } A message will also be routed to all outbound endpoint mapped to a type compatible with the message type. In the example below an OrderCreatedMessage (that inherits from OrderMessage ) would be sent to both endpoints. public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddOutbound<OrderMessage>( new KafkaProducerEndpoint(\"topic-1\") { ... }) .AddOutbound<OrderCreatedMessage>( new KafkaProducerEndpoint(\"topic-2\") { ... })); } } Dynamic custom routing By default Silverback routes the messages according to their type and the static configuration defined at startup. In some cases you may need more flexibility, being able to apply your own routing rules. More information in the dedicated Outbound Messages Routing chapter. Samples All"
  },
  "concepts/broker/outbound-routing.html": {
    "href": "concepts/broker/outbound-routing.html",
    "title": "Outbound Messages Routing | Silverback",
    "keywords": "Outbound Messages Routing By default Silverback routes the messages according to their type and the static configuration defined at startup. In some cases you may need more flexibility, being able to apply your own routing rules. In such cases it is possible to either take advantage of the simple endpoint name resolvers or even implement a fully customized router. The messages are dynamically routed to the appropriate endpoint. Endpoint name resolver Using an endpoint name resolver is fairly simple and just requires a slightly different configuration in the IProducerEndpoint . Here below a few examples of custom routing. Please refer to the <xref:Silverback.Messaging.KafkaProducerEndpoint>/<xref:Silverback.Messaging.Configuration.Kafka.IKafkaProducerEndpointBuilder> or <xref:Silverback.Messaging.MqttProducerEndpoint>/<xref:Silverback.Messaging.Configuration.Mqtt.IMqttProducerEndpointBuilder> API documentation for further information about all the possibilities. Fluent Legacy ProducerEndpointNameResolver public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) // Using a resolver function .AddOutbound<OrderCreatedEvent>(endpoint => endpoint .ProduceTo<OrderCreatedEvent>(envelope => { if (envelope.Message.IsPriority) return \"priority-orders\"; else return \"normal-orders\"; })) // Using format string and arguments function .AddOutbound<OrderCreatedEvent>(endpoint => endpoint .ProduceTo<OrderCreatedEvent>( \"orders-{0}\", envelope => { if (envelope.Message.IsPriority) return new[] { \"priority\" }; else return new[] { \"normal\" }; })) // Using a resolver class .AddOutbound<OrderCreatedEvent>(endpoint => endpoint .UseEndpointNameResolver<MyEndpointNameResolver>()) // Kafka only: using a partition resolver function .AddOutbound<InventoryUpdateMessage>(endpoint => endpoint .ProduceTo<InventoryUpdateMessage>( _ => \"topic1\", envelope => { switch (envelope.Message.Supplier) { case \"foo\": return 0; case \"bar\": return 1; case \"baz\": return 2; } })))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder // Using a resolver function .AddOutbound<OrderCreatedEvent>( new KafkaProducerEndpoint(envelope => { var message = (OrderCreatedEvent) envelope.Message; if (message.IsPriority) return \"priority-orders\"; else return \"normal-orders\"; }) { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }) // Using format string and arguments function .AddOutbound<OrderCreatedEvent>( new KafkaProducerEndpoint( \"orders-{0}\", envelope => { var message = (OrderCreatedEvent) envelope.Message; if (message.IsPriority) return new[] { \"priority\" }; else return new[] { \"normal\" }; }) { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }) // Using a resolver class .AddOutbound<OrderCreatedEvent>( new KafkaProducerEndpoint(typeof(MyEndpointNameResolver)) { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }) // Kafka only: using a partition resolver function .AddOutbound<InventoryUpdateMessage>( new KafkaProducerEndpoint( _ => \"topic1\", envelope => { var message = (InventoryUpdateMessage) envelope.Message; switch (message.Supplier) { case \"foo\": return 0; case \"bar\": return 1; case \"baz\": return 2; } }) { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }); } public class MyEndpointNameResolver : ProducerEndpointNameResolver<TestEventOne> { private readonly IMyService _service; public MyEndpointNameResolver(IMyService service) { _service = service; } protected override string GetName(IOutboundEnvelope<TestEventOne> envelope) { if (_service.IsPriorityOrder(envelope.Message.OrderNumber)) return \"priority-orders\"; else return \"normal-orders\"; } } Custom router In the following example a custom router is used to route the messages according to their priority (a copy is also sent to a catch-all topic). Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IPrioritizedCommand>( (message, _, endpointsDictionary) => new [] { endpointsDictionary[message.Priority.ToString()], endpointsDictionary[\"all\"] }, new Dictionary<string, Action<IKafkaProducerEndpointBuilder>> { { \"low\", endpoint => endpoint.ProduceTo(\"low-priority\") }, { \"normal\", endpoint => endpoint.ProduceTo(\"normal-priority\") }, { \"high\", endpoint => endpoint.ProduceTo(\"high-priority\") }, { \"all\", endpoint => endpoint.ProduceTo(\"all\") } }); } Alternatively, an actual router class can also be created to encapsulate the routing logic. Startup EndpointsConfigurator Router public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>() .AddSingletonOutboundRouter<PrioritizedRouter>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder.AddOutbound<IPrioritizedCommand, PrioritizedRouter>(); } public class PrioritizedRouter : OutboundRouter<IPrioritizedCommand> { private static readonly IProducerEndpoint HighPriorityEndpoint = new KafkaProducerEndpoint(\"high-priority\") { ... }; private static readonly IProducerEndpoint NormalPriorityEndpoint = new KafkaProducerEndpoint(\"normal-priority\") { ... }; private static readonly IProducerEndpoint LowPriorityEndpoint = new KafkaProducerEndpoint(\"low-priority\") { ... }; private static readonly IProducerEndpoint AllMessagesEndpoint = new KafkaProducerEndpoint(\"all\") { ... }; public override IEnumerable<IProducerEndpoint> Endpoints { get { yield return AllMessagesEndpoint; yield return LowPriorityEndpoint; yield return NormalPriorityEndpoint; yield return HighPriorityEndpoint; } } public override IEnumerable<IProducerEndpoint> GetDestinationEndpoints( IPrioritizedCommand message, MessageHeaderCollection headers) { yield return AllMessagesEndpoint; switch (message.Priority) { case MessagePriority.Low: yield return LowPriorityEndpoint; break; case MessagePriority.High: yield return HighPriorityEndpoint; break; default: yield return NormalPriorityEndpoint; break; } } }"
  },
  "concepts/broker/producer.html": {
    "href": "concepts/broker/producer.html",
    "title": "Producer | Silverback",
    "keywords": "Producer In some cases when high throughput is important you might want to skip the <xref:Silverback.Messaging.Publishing.IPublisher> and take advantage of the several options offered by the IProducer interface. Producing pre serialized messages A pre-serialized message can be produced via the normal Produce / ProduceAsync or the RawProduce / RawProduceAsync methods. The difference is that the latter skip the entire Silverback behaviors pipeline (note that it means that no chunking or other features will kick in). Non-blocking overloads These are especially important for Kafka, since the underlying library is able to batch the outgoing messages for efficiency and that improves the throughput a lot. They will complete as soon as the message has been enqueued and invoke a callback when it is successfully produced (or when it fails / times out). These overloads exist for Produce , ProduceAsync , RawProduce and RawProduceAsync . (Note that ) public class ProducerService { private readonly IProducer _producer; private readonly ILogger _logger; public ProducerService( IBroker broker, ILogger<ProducerService> logger) { _producer = broker.GetProducer(\"some-topic\"); _logger = logger; } public async Task Produce(byte[] rawMessage) { for (int i = 0; i < 100000; i++) { _producer.RawProduce( rawMessage, null, () => _logger.LogInformation($\"Produced {i}\"), ex => _logger.LogError(ex, $\"Failed to produce {i}\"); } } } Note The non-async overload with callback functions is generally the fastest option with Kafka."
  },
  "concepts/broker/rabbit/routing-key.html": {
    "href": "concepts/broker/rabbit/routing-key.html",
    "title": "Routing Key | Silverback",
    "keywords": "Routing Key With RabbitMQ a routing key can be used to route the messages to a specific queue or filter the messages in a topic. See also the routing and topics tutorials on the official RabbitMQ web site. The messages are routed according to the routing key. Silverback offers a convenient way to specify the routing key, using the <xref:Silverback.Messaging.Messages.RabbitRoutingKeyAttribute>. public class MyMessage : IIntegrationMessage { [RabbitRoutingKey] public string Key { get; set; } ... }"
  },
  "concepts/broker/serialization.html": {
    "href": "concepts/broker/serialization.html",
    "title": "Serialization | Silverback",
    "keywords": "Serialization Being flexible when serializing and deserializing the messages sent over the message broker is crucial for interoperability and these mechanisms are therefore completely customizable. Default JSON serialization The default JsonMessageSerializer internally uses System.Text.Json to serialize the messages as JSON and encode them in UTF-8. A few headers are added to the message, in particular x-message-type is used by the JsonMessageSerializer to know the message type when deserializing it in the consumer, thus allowing messages of different types being sent over the same topic or queue. Warning The JsonMessageSerializer will obviously try to map the message to a type with the exact assembly qualified name found in the x-message-type header. It is therefore a good practice to share the message models among the services, maybe through a shared project or a nuget package. This is the suggested serialization strategy when both producer and consumer are based on Silverback but may not be ideal for interoperability. Have a look at the Message Headers section for an overview on the headers that are appended to the messages. Fixed-type JSON for interoperability If you are consuming a message coming from another system (not based on Silverback), chances are that the message type name is not being delivered as header. In that case you can resort to the typed JsonMessageSerializer<TMessage> . This serializer works like the default one seen in the previous chapter, but the message type is hard-coded, instead of being resolved according to the message header. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .SerializeAsJson(serializer => serializer .UseFixedType<InventoryEvent>())) // Specifying the message type will automatically // switch to the JsonMessageSerializer<TMessage> // and deserialize the specified type without // needing the type header .AddInbound<OrderEvent>(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; })) // The following configurations is equivalent to the // previous one, but more verbose .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeJson(serializer => serializer .UseFixedType<OrderEvent>()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new JsonMessageSerializer<InventoryEvent>() }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Serializer = new JsonMessageSerializer<OrderEvent>() }); } JSON using Newtonsoft.Json Prior to release 3.0.0 the default JsonMessageSerializer was based on Newtonsoft.Json instead of System.Text.Json . For backward compatibility reasons and since System.Text.Json may not support all use cases covered by Newtonsoft.Json , the old serializers have been renamed to NewtonsoftJsonMessageSerializer and NewtonsoftJsonMessageSerializer<TMessage> and moved into the dedicated Silverback.Integration.Newtonsoft package. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .SerializeAsJsonUsingNewtonsoft()) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeJsonUsingNewtonsoft()) // Specifying the message type will automatically // switch to the NewtonsoftJsonMessageSerializer<TMessage> .AddInbound<DeliveryNotification>(endpoint => endpoint .ConsumeFrom(\"delivery-notification-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeJsonUsingNewtonsoft()) ); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new NewtonsoftJsonMessageSerializer() }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Serializer = new NewtonsoftJsonMessageSerializer() }); } Apache Avro The <xref:Silverback.Messaging.Serialization.AvroMessageSerializer`1> contained in the Silverback.Integration.Kafka.SchemaRegistry package can be used to connect with a schema registry and exchange messages in Apache Avro format. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .SerializeAsAvro(serializer => serializer .UseType<InventoryEvent>() .Configure( schemaRegistryConfig => { schemaRegistryConfig.Url = \"localhost:8081\"; }, serializerConfig => { serializerConfig.AutoRegisterSchemas = true; }))) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeAvro(serializer => serializer .UseType<OrderEvent>() .Configure( schemaRegistryConfig => { schemaRegistryConfig.Url = \"localhost:8081\"; }, serializerConfig => { serializerConfig.AutoRegisterSchemas = true; })))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new AvroMessageSerializer<InventoryEvent> { SchemaRegistryConfig = new SchemaRegistryConfig { Url = \"localhost:8081\" }, AvroSerializerConfig = new AvroSerializerConfig { AutoRegisterSchemas = true } } }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Serializer = new AvroMessageSerializer<OrderEvent> { SchemaRegistryConfig = new SchemaRegistryConfig { Url = \"localhost:8081\" }, AvroSerializerConfig = new AvroSerializerConfig { AutoRegisterSchemas = true } } }); } Note The C# message models can be generated from an Avro schema using AvroGen . Note This serializer is built for Kafka but it could work with other brokers, as long as a schema registry is available. Custom serializer In some cases you may want to build your very own custom serializer implementing IMessageSerializer directly. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .SerializeUsing(new MyCustomSerializer())) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeUsing(new MyCustomSerializer()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new MyCustomSerialzer() }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Serializer = new MyCustomSerialzer() }); } Note You may need to implement IKafkaMessageSerializer if you want to have full control over the serialization of the Kafka key as well. Binary Files Please refer to the Binary Files page if you need to produce or consume raw binary files."
  },
  "concepts/broker/streaming.html": {
    "href": "concepts/broker/streaming.html",
    "title": "Streaming | Silverback",
    "keywords": "Streaming The <xref:Silverback.Messaging.Messages.IMessageStreamEnumerable`1> can be used to consume an endpoint in a streaming fashion and it is the only way to consume sequences (see for example batch processing ). This stream will be forwarded to the subscribed method as soon as the first message is consumed and it is then asynchronously pushed with the next messages. <xref:Silverback.Messaging.Messages.IMessageStreamEnumerable`1> implements both IEnumerable and IAsyncEnumerable and the subscriber method can either declare an <xref:Silverback.Messaging.Messages.IMessageStreamEnumerable`1>, an IEnumerable or an IAsyncEnumerable as argument. Since the asynchronous and I/O bound nature of this stream it is recommended to take advantage of the IAsyncEnumerable capabilities to asynchronously loop through the messages. public class StreamSubscriber { public async Task OnOrderStreamReceived( IAsyncEnumerable<OrderEvent> eventsStream) { await foreach(var orderEvent in eventsStream) { // ...process the event... } } } A single instance of <xref:Silverback.Messaging.Messages.IMessageStreamEnumerable`1> is created and published per each queue/topic/partition and the messages are acknowledged (committed) after a single iteration completes, unless sequencing (e.g. batch processing ) is configured or a sequence is automatically recognized by Silverback (e.g. a dataset). In that case an instance is published per each sequence and the entire sequence is atomically committed. Rx (Observable) The Silverback.Core.Rx package adds the <xref:Silverback.Messaging.Messages.IMessageStreamObservable`1> that works like the <xref:Silverback.Messaging.Messages.IMessageStreamEnumerable`1> but implements IObservable enabling the usage of Rx.NET . Startup Subscriber public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddSilverback().AsObservable(); } } public class StreamSubscriber { public async Task OnOrderStreamReceived( IObservable<OrderEvent> eventsStream) { stream.Subscribe(...); } } Notes, suggestions and insights The stream will be pushed with messages as they are read from the message broker. Since the I/O bound nature of the operation you should obviously prefer to subscribe to an IAsyncEnumerable instead of an IEnumerable and in any case loop asynchronously ( await foreach or similar approach). If the sequence is interrupted because the application is disconnecting or an error occurred in another subscriber, the IEnumerator will throw an OperationCancelledException . Handle it if you need to gracefully abort or cleanup. Throwing an exception while enumerating a sequence (e.g. a BatchSequence ) will cause it to be aborted and handled according to the defined error policies . If you just break the iteration and the subscriber return, the operation will be considered successful instead and the sequence will be committed."
  },
  "concepts/broker/testing.html": {
    "href": "concepts/broker/testing.html",
    "title": "Testing | Silverback",
    "keywords": "Testing Silverback ships a mocked version of the message broker implementations on a different nuget package: Silverback.Integration.Kafka.Testing (coming soon) Silverback.Integration.RabbitMQ.Testing These packages allow to perform end-to-end tests without having to integrate with a real message broker. Unit Tests Here an example of an xUnit test built using Silverback.Integration.Kafka.Testing . public class KafkaTests { private readonly IServiceProvider _serviceProvider; // Configure DI during setup public InMemoryBrokerTests() { var services = new ServiceCollection(); // Loggers are a prerequisite services.AddSingleton<ILoggerFactory, NullLoggerFactory>(); services.AddSingleton(typeof(ILogger<>), typeof(NullLogger<>)); services // Register Silverback as usual .AddSilverback() // Register the mocked KafkaBroker .WithConnectionToMessageBroker(config => config.AddMockedKafka()) // Configure inbound and outbound endpoints .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://tests\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"test-topic\")) .AddInbound(endpoint => endpoint .ConsumeFrom(\"test-topic\") .Configure(config => { config.GroupId = \"my-test-consumer\" }))) // Register the subscriber under test .AddScopedSubscriber<MySubscriber>(); // ...register all other types you need... _serviceProvider = services.BuildServiceProvider(); } [Fact] public async Task SampleTest() { // Arrange // Connect the broker await _serviceProvider.GetRequiredService<IBroker>().ConnectAsync(); // Create a producer to push to test-topic var producer = _serviceProvider .GetRequiredService<IBroker>() .GetProducer(new KafkaProducerEndpoint(\"test-topic\")); // Act await producer.ProduceAsync(new TestMessage { Content = \"hello!\" }); await producer.ProduceAsync(new TestMessage { Content = \"hello 2!\" }); // Assert // ...your assertions... } } Integration Tests Mocking the message broker is especially interesting for the integration tests, where you probably leverage the ASP.NET Core integration tests to perform a full test based on the real configuration applied in the application's startup class. The following code shows the simplest integration test possible, in which an object is published to the broker and e.g. a subscriber is called. public class IntegrationTests : IClassFixture<WebApplicationFactory<Startup>> { private readonly WebApplicationFactory<Startup> _factory; public IntegrationTests(WebApplicationFactory<Startup> factory) { _factory = factory.WithWebHostBuilder(builder => { builder.ConfigureTestServices(services => { // Replace the usual broker (KafkaBroker) // with the mocked version services.UseMockedKafka(); }); }; } [Fact] public async Task SampleTest() { // Arrange // Resolve a producer to push to test-topic var producer = _factory.Server.Host.Services .GetRequiredService<IBroker>() .GetProducer(new KafkaProducerEndpoint(\"tst-topic\")); // Act await producer.ProduceAsync(new TestMessage { Content = \"abc\" }); // Assert // ...your assertions... } } Testing helper The testing helpers (such has <xref:Silverback.Testing.IKafkaTestingHelper>) contain some methods that simplify testing with the message broker, given it's asynchronous nature. public class IntegrationTests : IClassFixture<WebApplicationFactory<Startup>> { private readonly WebApplicationFactory<Startup> _factory; public IntegrationTests(WebApplicationFactory<Startup> factory) { _factory = factory.WithWebHostBuilder(builder => { builder.ConfigureTestServices(services => { services.UseMockedKafka(); }); }; } [Fact] public async Task SampleTest() { // Arrange // Resolve the IKafkaTestingHelper (used below) var testingHelper = _factory.Server.Host.Services .GetRequiredService<IKafkaTestingHelper>(); // Resolve a producer to push to test-topic var producer = testingHelper.Broker .GetProducer(new KafkaProducerEndpoint(\"tst-topic\")); // Act await producer.ProduceAsync(new TestMessage { Content = \"abc\" }); // Wait until all messages have been consumed and // committed before asserting await testingHelper.WaitUntilAllMessagesAreConsumedAsync(); // Assert // ...your assertions... } } IntegrationSpy The IIntegrationSpy ships with the Silverback.Integration.Testing package (referenced by the other Integration.Testing.* packages) and can be used to inspect all outbound and inbound messages. public class IntegrationTests : IClassFixture<WebApplicationFactory<Startup>> { private readonly WebApplicationFactory<Startup> _factory; public IntegrationTests(WebApplicationFactory<Startup> factory) { _factory = factory.WithWebHostBuilder(builder => { builder.ConfigureTestServices(services => { services .ConfigureSilverback() .UseMockedKafka() .AddIntegrationSpy(); }); }; } [Fact] public async Task SampleTest() { // Arrange var testingHelper = _factory.Server.Host.Services .GetRequiredService<IKafkaTestingHelper>(); var producer = testingHelper.Broker .GetProducer(new KafkaProducerEndpoint(\"tst-topic\")); // Act await producer.ProduceAsync(new TestMessage { Content = \"abc\" }); // Wait until all messages have been consumed and // committed before asserting await testingHelper.WaitUntilAllMessagesAreConsumedAsync(); // Assert testingHelper.Spy.OutboundEnvelopes.Should().HaveCount(1); testingHelper.Spy.InboundEnvelopes.Should().HaveCount(1); testingHelper.Spy.InboundEnvelopes[0].Message.As<TestMessage> .Content.Should().Be(\"abc\"); } } Mocked Kafka Many aspects of the Kafka broker have been mocked to replicated as much as possible the behavior you have when connected with the real broker. This new implementation supports commits, kafka events, offset reset, partitioning, rebalance, etc. The implementation revolves around the <xref:Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryTopicCollection>. This type is registered as singleton and can be resolved in the tests to gain access to the <xref:Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryTopic> instances directly and inspect their partitions, offsets, etc. Alternatively the <xref:Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryTopic> can be retrieved via the GetTopic method of the <xref:Silverback.Testing.IKafkaTestingHelper>. Partitioning By default 5 partitions will be created per each topic being mocked. This number can be configured as shown in the following snippet. The setting is per broker and there's currently no way to configure each topic independently. public class IntegrationTests : IClassFixture<WebApplicationFactory<Startup>> { private readonly WebApplicationFactory<Startup> _factory; public IntegrationTests(WebApplicationFactory<Startup> factory) { _factory = factory.WithWebHostBuilder(builder => { builder.ConfigureTestServices(services => { services .UseMockedKafka(options => options .WithDefaultPartitionsCount(10)); }); }; } }"
  },
  "concepts/broker/tombstone.html": {
    "href": "concepts/broker/tombstone.html",
    "title": "Tombstone Message | Silverback",
    "keywords": "Tombstone Message A tombstone message is a message with a null body, used to indicate that the record has been deleted. This technique is for example used with Kafka topics compaction, to get rid of obsolete records. Consumer Silverback maps by default the messages with a null body to a Tombstone or Tombstone<TMessage> . This behavior can be changed setting using the SkipNullMessages or UseLegacyNullMessageHandling of the IConsumerEndpointBuilder<TBuilder> , or setting the NullMessageHandlingStrategy property of the ConsumerEndpoint ). The Tombstone / Tombstone<TMessage> message exposes a single property containing the message identifier . EndpointConfigurator Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"catalog-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeJson(serializer => serializer .UseFixedType<Product>()))); } public class MySubscriber { public async Task OnProductDeleted(Tombstone<Product> tombstone) { // TODO: use tombstone.MessageId to remove the product // from the local database } } Important In order to create a typed Tombstone<TMessage> it is required that either the consumed message declares the x-message-type header or a fixed type deserializer is used (as shown in the example above). Otherwise the null message will be mapped to a simple Tombstone . Producer A Tombstone<TMessage> (or Tombstone ) can also be used to produce a null message. EndpointConfigurator Publisher public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<Product>(endpoint => endpoint .ProduceTo(\"catalog-events\"))); } public class MyService { private readonly IPublisher _publisher; public MyService(IPublisher publisher) { _publisher = publisher; } public async Task DeleteProduct(string productId) { ... await _publisher.PublishAsync(new Tombstone<Product>(productId)); } } Note The Tombstone<TMessage> messages are routed according to the type parameter TMessage . This means that they will be published to the outbound endpoints papped to the same TMessage ( Product in the above example), as well as to the outbound endpoints explicitly mapping Tombstone ."
  },
  "concepts/broker/translating-messages.html": {
    "href": "concepts/broker/translating-messages.html",
    "title": "Translating Messages | Silverback",
    "keywords": "Translating Messages It is not uncommon to be willing to slightly transform the internal message and maybe publish only a subset of the information to the message broker (e.g. you may not want to export the full entity related to the domain event). You can easily achieve this with a subscriber that just maps/translates the messages. public class MapperService { public IMessage MapCheckoutEvent(CheckoutDomainEvent message) => new CheckoutIntegrationEvent { UserId = message.Source.UserId, Total = mesage.Source.Total, ... }; } As explained in the Publishing section, when the subscriber returns one or more messages those are automatically republished to the bus. The message is then relayed to the message broker, if its type matches with an outbound endpoint declaration."
  },
  "concepts/broker/validation.html": {
    "href": "concepts/broker/validation.html",
    "title": "Message Validation | Silverback",
    "keywords": "Message Validation Both the consumed and produced messages are being validated using the same mechanism implemented in the asp.net controllers. You can either decorate the message model with the System.ComponentModel.DataAnnotations.ValidationAttribute standard implementations, create your own attributes (extending ValidationAttribute ) or otherwise you can implement the IValidatableObject interface in your message model. Configuration The MessageValidationMode can be configured per endpoint and has 3 values: LogWarning (default): a warning is logged if the message is not valid ThrowException : an exception is thrown if the message is not valid None : the validation is completely disabled Note If an invalid message is produced, the MessageValidationException will be rethrown by the Produce / Publish method. In the consumer it will instead be handled like any other exception, according to the configured policies, or leading to the consumer being stopped. Warning The validation might have a - relatively speaking - big impact on the performance, depending on the object size, the number of validations to be performed and their complexity. You might want to consider disabling the validation, if performance is a critical concern in your use case. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .DisableMessageValidation() .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .ValidateMessage(throwException: true))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, MessageValidationMode = MessageValidationMode.None }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, MessageValidationMode = MessageValidationMode.ThrowException }); } Validated models examples Using annotations public class CreateUserCommand { [Required] [MinLength(3)] [MaxLength(100)] public string Username { get; set; } } Implementing IValidatableObject public class CreateUserCommand : IValidatableObject { public string Username { get; set; } public IEnumerable<ValidationResult> Validate( ValidationContext validationContext) { if (Username == null || Username.Length < 3 || Username.Length > 100) { yield return new ValidationResult( \"Invalid username.\", new[] { nameof(Username) }); } } }"
  },
  "concepts/bus/behaviors.html": {
    "href": "concepts/bus/behaviors.html",
    "title": "Behaviors | Silverback",
    "keywords": "Behaviors The behaviors can be used to build a custom pipeline (similar to the asp.net pipeline), easily adding your cross-cutting concerns such as logging, validation, etc. The behaviors are implementations of the <xref:Silverback.Messaging.Publishing.IBehavior> interface and will be invoked by the <xref:Silverback.Messaging.Publishing.IPublisher> every time a message is published to the internal bus (this includes the inbound/outbound messages, but they will be wrapped into an IInboundEnvelope<TMessage> or IOutboundEnvelope<TMessage> ). The HandleAsync method of each registered behavior is called every time a message (or a batch of messages) is published to the internal bus, passing in the collection of messages and the delegate to the next step in the pipeline. This gives you the flexibility to execute any sort of code before and after the messages have been actually published (before or after calling the next step). You can for example modify the messages before publishing them, validate them (like in the above example), add some logging / tracing, etc. The <xref:Silverback.Messaging.Publishing.IBehavior> implementation have simply to be registered for DI. IBehavior example The following example demonstrates how to use a behavior to trace the messages. Behavior Startup public class TracingBehavior : IBehavior { private readonly ITracer _tracer; public TracingBehavior(ITracer tracer) { _tracer = tracer; } public async Task<IReadOnlyCollection<object?>> HandleAsync( object message, MessageHandler next) { tracer.TraceProcessing(message); var result = await next(message); tracer.TraceProcessed(message); return result; } } public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddScopedBehavior<TracingBehavior>(); } } Note IInboundEnvelope and IOutboundEnvelope are internally used by Silverback to wrap the messages being sent to or received from the message broker and will be received by the IBroker . Those interfaces contains the message plus the additional data like endpoint, headers, offset, etc. Sorting The order in which the behaviors are executed might matter and it is possible to precisely define it implementing the <xref:Silverback.ISorted> interface. public class SortedBehavior : IBehavior, ISorted { public int SortIndex => 120; public Task<IReadOnlyCollection<object?>> HandleAsync( object message, MessageHandler next) { // ...your logic... return next(message); } } See also Broker behaviors pipeline"
  },
  "concepts/bus/enabling.html": {
    "href": "concepts/bus/enabling.html",
    "title": "Enabling Silverback | Silverback",
    "keywords": "Enabling Silverback Enabling the bus Silverback's main component is the internal in-memory message bus and pretty much all other features are built on top of that. The first mandatory step to start using Silverback is to register the core services (internal bus) with the .net core dependency injection. public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddSilverback(); } } Configuring Silverback The AddSilverback method highlighted in the previous chapter returns an <xref:Silverback.Messaging.Configuration.ISilverbackBuilder> that exposes all the methods needed to configure Silverback and wire everything up. The several configuration options will are exhaustively presented in each dedicated section of this documentation but here is a basic sample startup. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<OrdersEndpointsConfigurator>() .AddEndpointsConfigurator<ProductsEndpointsConfigurator>() .AddScopedSubscriber<OrderEventsSubscriber>() .AddScopedSubscriber<ProductEventsSubscriber>(); } } Note that AddSilverback should be called only once but you can use the ConfigureSilverback extension method on the IServiceCollection to retrieve the <xref:Silverback.Messaging.Configuration.ISilverbackBuilder> instance once again. Startup Orders Feature Products Feature public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()); services .AddOrdersFeature() .AddProductsFeature(); } } public static class OrdersFeatureConfigurator { public static void AddOrdersFeature(this IServiceCollection services) { services .ConfigureSilverback() .AddEndpointsConfigurator<OrdersEndpointsConfigurator>() .AddScopedSubscriber<OrderEventsSubscriber>(); } } public static class ProductsFeatureConfigurator { public static void AddProductsFeature(this IServiceCollection services) { services .ConfigureSilverback() .AddEndpointsConfigurator<ProductsEndpointsConfigurator>() .AddScopedSubscriber<ProductEventsSubscriber>(); } }"
  },
  "concepts/bus/model.html": {
    "href": "concepts/bus/model.html",
    "title": "Creating the Message model | Silverback",
    "keywords": "Creating the Message model Basics First of all we need to create a message class. The message class can be any POCO class, it just need to be serializable. public class SampleMessage { public string Content { get; set; } } It is very much suggested to consider using the Silverback.Core.Model package (documented in the next chapter) to better organize your message and write better and more readable code. Silverback.Core.Model A hierarchy of interfaces is available in Silverback.Core.Model to help specify the meaning of each message and produce in better, cleaner and more readable code. The internal messages are being sent through the internal in-memory bus and don't leave the service scope, while the integration messages are those messages exchanged between different microservices, through a message broker like Apache Kafka or RabbitMQ. Event though strongly suggested, it's not mandatory to use the proposed hierarchy from Silverback.Core.Model and everything can be achieved using POCO classes as messages and using the generic <xref:Silverback.Messaging.Publishing.IPublisher> to publish them. In the following chapters you will find an overview of the different message types and their meaning but first of all we need to reference the Silverback.Core.Model package and register it with the dependency injection. public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddSilverback().UseModel(); } } Internal Messages This messages can be used internally to the microservice bus but cannot be relayed to the message broker. See Translating Messages for a convenient way to map the internal message to an IIntegrationMessage . Events IEvent is to be used to notify thing that happened inside a service and may be of some interest for one or more other service. The events are a fire-and-forget message type and no response is expected. The IDomainEvent and IDomainEvent<TEntity> extend IEvent and the types implementing this interface are usually published only from within the domain entities (actually adding them to the internal collection and letting them be published during the save changes transaction). See also DDD and Domain Events . Commands ICommand or ICommand<TResult> are used to trigger an action in another service or component and are therefore very specific and usually consumed by one single subscriber. This messages can return a value (of type TResult). Queries IQuery<TResult> works exactly like ICommand<TResult> . This messages are obviously always returning something since they represent a request for data (query). Integration messages The IIntegrationMessage interface identifies those messages that are either published to the message broker or received through it. Note that IIntegrationMessage implements <xref:Silverback.Messaging.Messages.IMessage>, obviously. Integration Event IIntegrationEvent can be used to export events to other microservices or, more generally, other applications. IEventPublisher can be used to publish these events and they will automatically be routed to the message broker if an outbound connector was properly configured. See Connecting to a Message Broker for details. Integration Command IIntegrationCommand is used to trigger an action on another microservices (or application). ICommandPublisher can be used to publish these messages and they will automatically be routed to the message broker if an outbound connector was properly configured. See Connecting to a Message Broker for details."
  },
  "concepts/bus/publish.html": {
    "href": "concepts/bus/publish.html",
    "title": "Publishing | Silverback",
    "keywords": "Publishing Basic Publishing To publish the message you just need an instance of <xref:Silverback.Messaging.Publishing.IPublisher> (or derived interfaces if using Silverback.Core.Model , as shown later on). using Silverback.Messaging.Publishing; public class PublishingService { private readonly IPublisher _publisher; public PublishingService(IPublisher publisher) { _publisher = publisher; } public async Task PublishSomething() { await _publisher.PublishAsync(new SampleMessage { Content = \"whatever\" }); } } The publisher always exposes a synchronous and an asynchronous version of each method. The second option is of course to be preferred to take advantage of non-blocking async/await. Return values In some cases you will of course return a response after having processed the message. public async Task<Report> PublishSomething() { var result = await _publisher.PublishAsync(new ReportQuery() { ... }); return result.Single(); } Important Please note the required call to Single() , because Silverback allows you to have multiple subscribers for the same message and therefore collect multiple return values. This is not needed if using IQueryPublisher or ICommandPublisher described in the Creating the Message model page. Silverback.Core.Model Silverback.Core.Model has been introduced in the previous page Creating the Message model . Each message type ( IEvent , ICommand / ICommand<TResult> and IQuery<TResult> ) also comes with its specialized <xref:Silverback.Messaging.Publishing.IPublisher> as quickly shown in the following sub-chapters. Events The messages implementing IEvent , IDomainEvent or IIntegrationEvent can be published using an IEventPublisher . using Silverback.Messaging.Publishing; public class PublishingService { private readonly IEventPublisher _publisher; public PublishingService(IEventPublisher publisher) { _publisher = publisher; } public async Task PublishEvent() { var myEvent = new MyEvent() { ... }; await _publisher.PublishAsync(myEvent); } } Commands The messages that implement ICommand , ICommand<TResult> or IIntegrationCommand can be published using an ICommandPublisher . Without result With result using Silverback.Messaging.Publishing; public class PublishingService { private readonly ICommandPublisher _publisher; public PublishingService(ICommandPublisher publisher) { _publisher = publisher; } public async Task ExecuteCommand() { var command = new MyCommand() { ... }; await _publisher.ExecuteAsync(command); } } using Silverback.Messaging.Publishing; public class PublishingService { private readonly ICommandPublisher _publisher; public PublishingService(ICommandPublisher publisher) { _publisher = publisher; } public async Task<MyResult> ExecuteCommand() { var command = new MyCommand() { ... }; var result = await _publisher.ExecuteAsync(command); return result; } } Queries The IQueryPublisher ca be used to publish the messages implementing the IQuery<TResult> interface. using Silverback.Messaging.Publishing; public class PublishingService { private readonly IQueryPublisher _publisher; public PublishingService(IQueryPublisher publisher) { _publisher = publisher; } public async Task<MyResult> GetResults() { var query = new MyQuery() { ... }; var result = await _publisher.ExecuteAsync(myQuery); return result; } }"
  },
  "concepts/bus/subscribe.html": {
    "href": "concepts/bus/subscribe.html",
    "title": "Subscribing | Silverback",
    "keywords": "Subscribing Now all is left to do is write a subscriber method to process the published messages. Introduction The subscription in the Silverback internal bus is based on the message type. This means that when a message is published Silverback will simply evaluate the signature of the subscribed methods and invoke the ones that accept a message of that specific type, a base type or an implemented interface. For example, given the following message structure: public abstract class OrderEvent : IEvent { ... } public class OrderCreatedEvent : OrderEvent { ... } All these subscriber methods will be invoked to handle an instance of OrderCreatedEvent : void Handle(OrderCreatedEvent message) void Handle(OrderMessage message) void Handle(IEvent message) Note It is perfectly fine to have multiple subscribers handling the same message but you have to be aware that all them will share the same DI scope (and thus the same DbContext instance). Subscriber class The default and usually preferred way to subscribe is to implement the message handling logic into a subscriber class. Such class can declare one or more public message handler methods that are automatically subscribed. All subscribers must be registered with the service provider as shown in the following example. Subscriber Startup public class SubscribingService { public async Task OnMessageReceived(SampleMessage message) { // TODO: Process message } public async Task OnOtherMessageReceived(OtherSampleMessage message) { // TODO: Process message } } public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddScopedSubscriber<SubscribingService>(); } } Subscription options All public methods are automatically subscribed by default but the <xref:Silverback.Messaging.Subscribers.SubscribeAttribute> can be used to decorate the non-public methods and subscribe them as well. The <xref:Silverback.Messaging.Subscribers.SubscribeAttribute> can also be used to customize the subscription options, see the attribute properties for details. It is also possible to disable the automatic subscription of the public methods. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddScopedSubscriber<SubscribingService>( autoSubscribeAllPublicMethods: false) } } Delegate based subscription In some cases you may prefer to subscribe a method delegate (or an inline lambda) directly using the AddDelegateSubscriber method. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddDelegateSubscriber((SampleMessage message) => { // TODO: Process messages }); } } Supported methods and parameters The subscribed method can either be synchronous or asynchronous (returning a Task ). The first parameter must be the message and the parameter type can be the specific message, a base class or an implemented interface. Furthermore, when consuming from a message broker, it is possible to subscribe to the message stream and asynchronously enumerate through the messages, as shown in the Streaming chapter. The method can have other parameters that will be resolved using the service provider. Most useful to integrate existing code subscribing via a delegate. Delegate Subscriber public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddDelegateSubscriber( (BasketCheckoutMessage message, CheckoutService service) => { service.Checkout(message.BaksetId, message.UserId) }); } } public class SubscribingService { public async Task OnMessageReceived(BasketCheckoutMessage message, CheckoutService service) { service.Checkout(message.BaksetId, message.UserId) } } Return values A subscriber can also have a return value that can be collected by the publisher. public class SubscribingService { public async Task<SampleResult> OnMessageReceived(SampleMessage message) { ... return new SampleResult(...); } } Return new messages (republishing) A subscribed method can also optionally return a message or a collection of messages (either IEnumerable , IReadOnlyCollection or IObservable , if using Silverback.Core.Rx ) that will be automatically republished to the internal bus. Single Multiple public class SubscribingService { public async Task<OtherSampleMessage> OnMessageReceived(SampleMessage message) { ... return new OtherSampleMessage { ... }; } } public class SubscribingService { public IEnumerable<IMessage> OnMessageReceived(IEnumerable<SampleMessage> messages) => messages.SelectMany(message => { yield return new OtherSampleMessage1 { ... }; yield return new OtherSampleMessage2 { ... }; }); } Silverback recognizes per default only the messages implementing <xref:Silverback.Messaging.Messages.IMessage> but you can register your own types (you can register base types and interfaces as well). Startup Subscriber Message Model public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .HandleMessagesOfType<ICustomMessage>(); } } public class SubscribingService { public async Task<CustomSampleMessage> OnMessageReceived(SampleMessage message) { ... return new CustomSampleMessage { ... }; } } public class CustomSampleMessage : ICustomMessage { public string SomeProperty { get; set; } }"
  },
  "concepts/dbcontext.html": {
    "href": "concepts/dbcontext.html",
    "title": "Sample DbContext (EF Core) | Silverback",
    "keywords": "Sample DbContext (EF Core) Default Tables Some features rely on data being stored in a persistent storage such as a database. This chapter highlights the DbSet 's that have to be added to your DbContext when using Silverback in combination with EF Core (via the Silverback.Core.EntityFrameworkCore ). Here a breakdown of the use cases that require a DbSet : Using an outbox table (see Outbound Endpoint ) will require a DbSet<OutboundMessage> and possibly a DbSet<Lock> , to enable horizontal scaling. Either a DbSet<StoredOffset> or a DbSet<InboundMessage> is necessary to ensure exactly-once processing (see Inbound Endpoint ). When consuming chunked messages (see Chunking ), you may want to temporary store the received chunks into a database table, until all chunks are received and the full message can be rebuilt and processed and you therefore need a DbSet<TemporaryMessageChunk> to be configured. This is what a DbContext built to support all the aforementioned features will look like. using Microsoft.EntityFrameworkCore; using Silverback.Database.Model; using Silverback.EntityFrameworkCore; namespace Sample { public class SampleDbContext : DbContext { public SampleDbContext(DbContextOptions options) : base(options) { } public DbSet<OutboxMessage> Outbox { get; set; } = null!; public DbSet<InboundLogEntry> InboundMessages { get; set; } = null!; public DbSet<StoredOffset> StoredOffsets { get; set; } = null!; public DbSet<Lock> Locks { get; set; } = null!; protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<InboundLogEntry>() .HasKey(t => new { t.MessageId, t.ConsumerGroupName }); } } } Warning InboundLogEntry declare a composite primary key via annotation, thing that isn't supported yet by EF Core. It is therefore mandatory to explicitly redeclare their primary key via the HasKey fluent API. DDD and Transactional Messages Some additional changes are required in order for the events generated by the domain entities to be fired as part of the SaveChanges transaction. More details on this topic can be found in the DDD and Domain Events section. using Microsoft.EntityFrameworkCore; using Silverback.EntityFrameworkCore; using Silverback.Messaging.Publishing; namespace Sample { public class SampleDbContext : DbContext { private readonly DbContextEventsPublisher _eventsPublisher; public SampleDbContext(IPublisher publisher) { _eventsPublisher = new DbContextEventsPublisher(publisher, this); } public SampleDbContext(DbContextOptions options, IPublisher publisher) : base(options) { _eventsPublisher = new DbContextEventsPublisher(publisher, this); } // ...DbSet properties and OnModelCreating... public override int SaveChanges() => SaveChanges(true); public override int SaveChanges(bool acceptAllChangesOnSuccess) => _eventsPublisher.ExecuteSaveTransaction(() => base.SaveChanges(acceptAllChangesOnSuccess)); public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) => SaveChangesAsync(true, cancellationToken); public override Task<int> SaveChangesAsync( bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default) => _eventsPublisher.ExecuteSaveTransactionAsync(() => base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken)); } }"
  },
  "concepts/domain-events.html": {
    "href": "concepts/domain-events.html",
    "title": "DDD and Domain Events | Silverback",
    "keywords": "DDD and Domain Events One of the core features of Silverback is the ability to publish the domain events as part of the DbContext save changes transaction in order to guarantee consistency. The Silverback.Core.Model package contains a sample implementation of a DomainEntity but you can also implement you own type. Important In case of a custom implementation the only constraint is that you must implement the <xref:Silverback.Messaging.Messages.IMessagesSource> interface in order for Silverback to be able to access the associated events. The DomainEntity.AddEvent method adds the domain event to the events collection, to be published when the entity is saved. To enable this mechanism we just need to override the various SaveChanges methods to plug-in the <xref:Silverback.EntityFrameworkCore.DbContextEventsPublisher> contained in the Silverback.Core.EntityFrameworkCore package. Sample Entity DbContext using Silverback.Domain; namespace Sample { public class Basket : DomainEntity, IAggregateRoot { private readonly List<BasketItem> _items = new List<BasketItem>(); private Basket() { } public Basket(Guid userId) { UserId = userId; Created = DateTime.UtcNow; } [Key] public int Id { get; private set; } public IEnumerable<BasketItem> Items => _items.AsReadOnly(); public Guid UserId { get; private set; } public DateTime Created { get; private set; } public DateTime? CheckoutDate { get; private set; } public void Checkout() { CheckoutDate = DateTime.UtcNow; AddEvent<BasketCheckoutEvent>(); } } } using Microsoft.EntityFrameworkCore; using Silverback.EntityFrameworkCore; using Silverback.Messaging.Publishing; namespace Sample { public class SampleDbContext : DbContext { private readonly DbContextEventsPublisher _eventsPublisher; public SampleDbContext(IPublisher publisher) { _eventsPublisher = new DbContextEventsPublisher(publisher, this); } public SampleDbContext(DbContextOptions options, IPublisher publisher) : base(options) { _eventsPublisher = new DbContextEventsPublisher(publisher, this); } public override int SaveChanges() => SaveChanges(true); public override int SaveChanges(bool acceptAllChangesOnSuccess) => _eventsPublisher.ExecuteSaveTransaction(() => base.SaveChanges(acceptAllChangesOnSuccess)); public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) => SaveChangesAsync(true, cancellationToken); public override Task<int> SaveChangesAsync( bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default) => _eventsPublisher.ExecuteSaveTransactionAsync(() => base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken)); } }"
  },
  "concepts/event-sourcing.html": {
    "href": "concepts/event-sourcing.html",
    "title": "Event Sourcing | Silverback",
    "keywords": "Event Sourcing Silverback.EventSourcing is a basic implementation of an event store that perfectly integrates within the Silverback ecosystem. At the moment only a version using Entity Framework Core is implemented, allowing to store the events in a database but other implementations may be added in the future. Configuration The only needed configuration is the call to UseDbContext<TDbContext> when initializing Silverback. public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddSilverback().UseDbContext<MyDbContext>() } } Creating the Event Store Creating an event store is very straightforward and requires basically just 3 components: a domain entity model, the event store model and a repository. Domain Entity model The domain entity have to extend EventSourcingDomainEntity (or a custom class implementing IEventSourcingDomainEntity ). The two generic type parameters refer to the type of the key (entity unique identifier) and the base type for the domain events (can be omited if you don't need domain events). public class Person : EventSourcingDomainEntity<int, PersonDomainEvent> { public Person() { } public Person(IReadOnlyCollection<IEntityEvent> events) : base(events) { } public string Name { get; private set; } public string SocialSecurityNumber { get; private set; } public int Age { get; private set; } public string PhoneNumber { get; private set; } } Important The domain entity must have a constructor able to rebuild the entity state from the stored events. The AddAndApplyEvent protected method must be used to add new events. public class Person : EventSourcingDomainEntity<int, PersonDomainEvent> { public void ChangeName(string newName) => AddAndApplyEvent(new NameChangedEvent { NewName = newName }); public void ChangeAge(int newAge) => AddAndApplyEvent(new AgeChangedEvent { NewAge = newAge }); public void ChangePhoneNumber(string newPhoneNumber) => AddAndApplyEvent(new PhoneNumberChangedEvent { NewPhoneNumber = newPhoneNumber }); } An Apply method is needed for each event type to modify the entity current state according to the described mutation. public class Person : EventSourcingDomainEntity<int, PersonDomainEvent> { private void Apply(NameChangedEvent @event) => Name = @event.NewName; private void Apply(AgeChangedEvent @event) => Age = @event.NewAge; private void Apply(PhoneNumberChangedEvent @event, bool isReplaying) { PhoneNumber = @event.NewPhoneNumber; // Fire domain event only if the event is new if (!isReplaying) AddEvent<PhoneNumberChangedDomainEvent>(); } } Note The apply method can be private but it must have a specific signature: its name must begin with \"Apply\" and have a parameter of the specific event type (or base type). It can also receive an additional boolean parameter ( isReplaying ) that will let you differentiate between new events and events that are being reapplied because loaded from the store. The events are just models inheriting from EntityEvent (or another custom class implementing IEntityEvent ). public class NameChangedEvent : EntityEvent { public string NewName { get; set; } } public class AgeChangedEvent : EntityEvent { public int NewAge { get; set; } } public class PhoneNumberChangedEvent : EntityEvent { public string NewPhoneNumber { get; set; } } Event Store model The event store basically consists of an EventStore entity and related event (they either inherit from EventStoreEntity and EventEntity or implement the interfaces IEventStoreEntity and IEventEntity respectively). public class PersonEventStore : EventStoreEntity<PersonEvent> { [Key] public int Id { get; set; } public string SocialSecurityNumber { get; set; } } public class PersonEvent : EventEntity { [Key] public int Id { get; private set; } } Note The event store record can be extended with extra fields (see SocialSecurityNumber in the example above) and those will be automatically set with the value of the matching propertyi in the domain entity (unless the mapping method is overridden in the repository implementing a custom logic). Important It is advised to add some indexes and a concurrency token, to ensure proper performance and consistency. A DbSet must also be mapped to the defined event store entity and that's it. public class MyDbContext : DbContext { public MyDbContext(DbContextOptions options) : base(options) { } public DbSet<PersonEventStore> Persons { get; set; } } EventStore repository The repository is the component that is storing the domain entity in form of single events, being able to rebuild it afterwards. The repository must inherit from DbContextEventStoreRepository and the 4 generic type parameters refer respectively to: the domain entity its unique key the event store entity its related event entity public class PersonEventStoreRepository : DbContextEventStoreRepository<Person, int, PersonEventStore, PersonEvent> { public PersonEventStoreRepository(DbContext dbContext) : base(dbContext) { } } Storing and retrieving entities Using the EventStoreRepository to store and retrieve domain entities is fairly simple. Have a look at the following code snippet to get an idea. public class PersonService { private readonly MyDbContext _dbContext; private readonly PersonEventStoreRepository _repository = new PersonEventStoreRepository(_dbContext); public async Task<Person> CreatePerson(string name, int age) { var person = new Person(); person.ChangeName(\"Sergio\"); person.ChangeAge(35); person = await _repository.StoreAsync(person); await _dbContext.SaveChangesAsync(); return person; } public async Task<Person> ChangePhoneNumber( int personId, string newPhoneNumber) { var person = _repository.Get(p => p.Id == personId); person.ChangePhoneNumber(newPhoneNumber); person = await _repository.StoreAsync(person); await _dbContext.SaveChangesAsync(); return person; } } Merging events / handling conflicts You may need to merge events coming from different sources and/or being received with a certain latency. In the example below the Apply method checks whether another (newer) conflicting event was added already in the meantime. private void Apply(NameChangedEvent @event, bool isReplaying) { // Skip if a newer event exists if (!isReplaying && Events.Any(e => e is NameChangedEvent && e.Timestamp > @event.Timestamp)) { return; } Name = @event.NewName; }"
  },
  "concepts/introduction.html": {
    "href": "concepts/introduction.html",
    "title": "Introduction | Silverback",
    "keywords": "Introduction What's Silverback? Silverback is essentially a bus that can be either used internally to an application or connected to a message broker to integrate different applications or microservices. Silverback is used to exchange message inside an application and/or connect to a message broker to integrate with other applications or microservices. Samples and examples This documentation is filled with examples and code snippets, plus an entire section is dedicated to fully functional ready-to-run code samples . The plan is to improve the samples section over time, adding real-world scenarios that demonstrates how to take advantage of the various Silverback features in your projects. A few notes about the code: Even though it will compile and work just fine (most of the time), it is intended for demo purpose only and don't automatically imply the best practices are being in place nor it is by any mean production ready. Sometimes some shortcuts may have been taken to keep the code compact, readable and focused on the aspect that is being highlighted. Not all examples are ported to each message broker implementation, but most of them can be adapted to work with either Kafka, MQTT or Rabbit with minimal effort (unless some broker-specific features are being used, of course). Packages Silverback is modular and delivered in multiple packages, available through nuget.org . Core Silverback.Core It implements a very simple, yet very effective, publish/subscribe in-memory bus that can be used to decouple the software parts and easily implement a Domain Driven Design approach. Silverback.Core.Model It contains some interfaces that will help organize the messages and write cleaner code, adding some semantic. It also includes a sample implementation of a base class for your domain entities. Silverback.Core.EntityFrameworkCore It contains the storage implementation to integrate Silverback with Entity Framework Core. It is needed to use a DbContext as storage for (temporary) data and to fire the domain events as part of the SaveChanges transaction. Silverback.Core.Rx Adds the possibility to create an Rx Observable over the internal bus. Integration Silverback.Integration Contains the message broker and connectors abstraction. Inbound and outbound connectors can be attached to a message broker to either export some events/commands/messages to other microservices or react to the messages fired by other microservices in the same way as internal messages are handled. Silverback.Integration.Testing Includes some utilities to help writing automated tests involving Silverback.Integration. Silverback.Integration.Kafka An implementation of Silverback.Integration for the popular Apache Kafka message broker. Silverback.Integration.Kafka.SchemaRegistry Adds the support for Apache Avro and the schema registry on top of Silverback.Integration.Kafka . Silverback.Integration.Kafka.Testing Includes a mock for the Kafka message broker to be used for in-memory testing. Silverback.Integration.MQTT An implementation of Silverback.Integration for MQTT. Silverback.Integration.MQTT.Testing Includes a mock for the MQTT message broker to be used for in-memory testing. Silverback.Integration.RabbitMQ An implementation of Silverback.Integration for the popular RabbitMQ message broker. Silverback.Integration.RabbitMQ.Testing (coming soon) Includes a mock for the RabbitMQ message broker to be used for in-memory testing. Silverback.Integration.HealthChecks Contains the extensions for Microsoft.Extensions.Diagnostics.HealthChecks to monitor the connection to the message broker. Silverback.Integration.Newtonsoft Contains the legacy implementations of IMessageSerializer , based on Newtonsoft.Json. Event Sourcing Silverback.EventSourcing Contains an implementation of an event store that perfectly integrates within the Silverback ecosystem. Glossary The following list serves as introduction to the terminology and types used in Silverback. Publisher An object that can be used to publish messages to the internal in-memory bus. It is represented by the <xref:Silverback.Messaging.Publishing.IPublisher> or (better) the more specific IEventPublisher and ICommandPublisher interfaces, that can be resolved via dependency injection. Subscriber A method (or delegate) that is subscribed to the bus and will process some (or all) of the messages that will be published or consumed from a message broker (since those messages are automatically pushed to the internal bus). Broker A message broker, like Apache Kafka or RabbitMQ. It is represented by the IBroker interface and is used internally by Silverback to bind the internal bus with a message broker. It can be resolved and used directly but that shouldn't be necessary for most of the use cases. Producer An object used to publish messages to the broker. It is represented by the IProducer interface. Consumer An object used to receive messages from the broker. It is represented by the IConsumer interface. Endpoint Identifies a specific topic or queue. It also contains all the settings to bind to that endpoint and is therefore specific to the message broker implementation. It is represented by an implementation of the IEndpoint interface. Inbound Endpoint / Consumer Endpoint An endpoint that is consumed and whose messages are relayed into the internal bus, where they can be consumed by one or more subscribers. It is represented by an implementation of the IConsumerEndpoint interface such as the <xref:Silverback.Messaging.KafkaConsumerEndpoint>. Outbound Endpoint / Producer Endpoint Silverback can be configured to automatically publish some messages to the message broker, observing the internal bus and relaying the messages matching with the configure type. The outbound/producer endpoint specifies the topic or queue where those message have to be produced. It is represented by an implementation of the IProducerEndpoint interface such as the <xref:Silverback.Messaging.KafkaProducerEndpoint>. Behavior Multiple behaviors are chained to build a sort of pipeline to process the messages transiting across the internal bus, the consumer or the producer. They are used to implement cross-cutting concerns, isolate responsibilities and allow for greater flexibility. Some built-in behaviors are responsible for serialization, error policies enforcement, batching, chunking, encryption, etc."
  },
  "concepts/logging.html": {
    "href": "concepts/logging.html",
    "title": "Logging | Silverback",
    "keywords": "Logging Silverback logs quite a few events that may be very useful for troubleshooting. It is recommended to set the minum log level to Information for the Silverback namespace, in order to have the important logs while avoiding too much noise. Customizing log levels The WithLogLevels configuration method can be used to tweak the log levels of each event. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithLogLevels(configurator => configurator .SetLogLevel(IntegrationLogEvents.MessageSkipped, LogLevel.Critical) .SetLogLevel(IntegrationLogEvents.ErrorProcessingInboundMessage, LogLevel.Error)); } } Each package (that writes any log) has a static class declaring each log event (see next chapter). Logged events Here is a list of all events that are being logged and their default log level. See also: <xref:Silverback.Diagnostics.CoreLogEvents> IntegrationLogEvents <xref:Silverback.Diagnostics.KafkaLogEvents> <xref:Silverback.Diagnostics.RabbitLogEvents> Core Id Level Message Reference 11 Debug Discarding result of type {type} because it doesn't match the expected return type {expectedType}. SubscriberResultDiscarded 21 Information Trying to acquire lock {lockName} ({lockUniqueId})... AcquiringDistributedLock 22 Information Acquired lock {lockName} ({lockUniqueId}). DistributedLockAcquired 23 Debug Failed to acquire lock {lockName} ({lockUniqueId}). FailedToAcquireDistributedLock 24 Information Released lock {lockName} ({lockUniqueId}). DistributedLockReleased 25 Warning Failed to release lock {lockName} ({lockUniqueId}). FailedToReleaseDistributedLock 26 Error Failed to check lock {lockName} ({lockUniqueId}). FailedToCheckDistributedLock 27 Error Failed to send heartbeat for lock {lockName} ({lockUniqueId}). FailedToSendDistributedLockHeartbeat 41 Information Starting background service {backgroundService}... BackgroundServiceStarting 42 Information Lock acquired, executing background service {backgroundService}. BackgroundServiceLockAcquired 43 Error Background service {backgroundService} execution failed. BackgroundServiceException 51 Information Background service {backgroundService} stopped. RecurringBackgroundServiceStopped 52 Debug Background service {backgroundService} sleeping for {delay} milliseconds. RecurringBackgroundServiceSleeping 53 Warning Background service {backgroundService} execution failed. RecurringBackgroundServiceException Integration Id Level Message Reference 1001 Information Processing inbound message. ProcessingInboundMessage 1002 Error Error occurred processing the inbound message. ErrorProcessingInboundMessage 1003 Debug Message '{messageId}' added to {sequenceType} '{sequenceId}'. | length: {sequenceLength} MessageAddedToSequence 1004 Debug Started new {sequenceType} '{sequenceId}'. SequenceStarted 1005 Debug {sequenceType} '{sequenceId}' completed. | length: {sequenceLength} SequenceCompleted 1006 Debug The {sequenceType} '{sequenceId}' processing has been aborted. | length: {sequenceLength}, reason: {reason} SequenceProcessingAborted 1007 Error Error occurred processing the {sequenceType} '{sequenceId}'. | length: {sequenceLength} ErrorProcessingInboundSequence 1008 Warning The incomplete {sequenceType} '{sequenceId}' is aborted. | length: {sequenceLength} IncompleteSequenceAborted 1009 Warning Skipping the incomplete sequence '{sequenceId}'. The first message is missing. SkippingIncompleteSequence 1110 Warning Error occurred aborting the {sequenceType} '{sequenceId}'. ErrorAbortingInboundSequence 1011 Debug {broker} connecting to message broker... BrokerConnecting 1012 Information {broker} connected to message broker. BrokerConnected 1013 Debug {broker} disconnecting from message broker... BrokerDisconnecting 1014 Information {broker} disconnected from message broker. BrokerDisconnected 1015 Information Creating new consumer for endpoint '{endpointName}'. CreatingNewConsumer 1016 Information Creating new producer for endpoint '{endpointName}'. CreatingNewProducer 1017 Error Error occurred connecting to the message broker(s). BrokerConnectionError 1021 Debug Connected consumer to endpoint. ConsumerConnected 1022 Debug Disconnected consumer from endpoint. ConsumerDisconnected 1023 Critical Fatal error occurred processing the consumed message. The consumer will be stopped. ConsumerFatalError 1024 Warning Error occurred while disposing the consumer. ConsumerDisposingError 1025 Error Commit failed. ConsumerCommitError 1026 Error Rollback failed. ConsumerRollbackError 1127 Error Error occurred while connecting the consumer. ConsumerConnectError 1128 Error Error occurred while disconnecting the consumer. ConsumerDisconnectError 1129 Error Error occurred while (re)starting the consumer. ConsumerStartError 1130 Error Error occurred while stopping the consumer. ConsumerStopError 1027 Debug Connected producer to endpoint. ProducerConnected 1028 Debug Disconnected producer from endpoint. ProducerDisconnected 1031 Information Message produced. MessageProduced 1032 Warning Error occurred producing the message. ErrorProducingMessage 1041 Trace The {policyType} will be skipped because the current failed attempts ({failedAttempts}) exceeds the configured maximum attempts ({maxFailedAttempts}). PolicyMaxFailedAttemptsExceeded 1042 Trace The {policyType} will be skipped because the {exceptionType} is not in the list of handled exceptions. PolicyExceptionNotIncluded 1043 Trace The {policyType} will be skipped because the {exceptionType} is in the list of excluded exceptions. PolicyExceptionExcluded 1044 Trace The {policyType} will be skipped because the apply rule evaluated to false. PolicyApplyRuleReturnedFalse 1045 Trace All policies have been applied but the message(s) couldn't be successfully processed. The consumer will be stopped. PolicyChainCompleted 1046 Information The message(s) will be processed again. RetryMessageProcessing 1047 Trace Waiting {delay} milliseconds before retrying to process the message(s). RetryDelayed 1048 Information The message will be moved to the endpoint '{targetEndpointName}'. MessageMoved 1049 Information The message(s) will be skipped. MessageSkipped 1050 Warning The message belongs to a {sequenceType} and cannot be moved. CannotMoveSequences 1051 Warning Error occurred while rolling back, the retry error policy cannot be applied. The consumer will be reset. RollbackToRetryFailed 1052 Warning Error occurred while rolling back or committing, the skip message error policy cannot be applied. The consumer will be reset. RollbackToSkipFailed 1061 Warning Not used anymore. ErrorInitializingActivity 1062 Information The null message will be skipped. NullMessageSkipped 1072 Information Message is being skipped since it was already processed. MessageAlreadyProcessed 1073 Debug Writing the outbound message to the transactional outbox. MessageWrittenToOutbox 1074 Trace Reading a batch of {readBatchSize} messages from the outbox queue... ReadingMessagesFromOutbox 1075 Trace The outbox is empty. OutboxEmpty 1076 Debug Processing outbox message {currentMessageIndex} of {totalMessages}. ProcessingOutboxStoredMessage 1077 Error Failed to produce the message stored in the outbox. ErrorProducingOutboxStoredMessage 1078 Error Error occurred processing the outbox. ErrorProcessingOutbox 1101 Critical Invalid configuration for endpoint '{endpointName}'. InvalidEndpointConfiguration 1102 Critical Error occurred configuring the endpoints. | configurator: {endpointsConfiguratorName} EndpointConfiguratorError 1103 Error Error occurred invoking the callback handler(s). CallbackHandlerError 1999 Trace The actual message will vary. LowLevelTracing Kafka Id Level Message Reference 2011 Debug Consuming message: {topic}[{partition}]@{offset}. ConsumingMessage 2012 Information Partition EOF reached: {topic}[{partition}]@{offset}. EndOfPartition 2013 Warning An error occurred while trying to pull the next message. The consumer will try to recover. KafkaExceptionAutoRecovery 2014 Error An error occurred while trying to pull the next message. The consumer will be stopped. Enable auto recovery to allow Silverback to automatically try to reconnect (EnableAutoRecovery=true in the consumer configuration). KafkaExceptionNoAutoRecovery 2015 Warning Failed to recover from consumer exception. Will retry in {retryDelay} milliseconds. ErrorRecoveringFromKafkaException 2016 Trace Consuming canceled. ConsumingCanceled 2021 Debug Creating Confluent.Kafka.Producer... CreatingConfluentProducer 2022 Warning The message was transmitted to broker, but no acknowledgement was received. ProduceNotAcknowledged 2031 Information Assigned partition {topic}[{partition}]. PartitionAssigned 2032 Debug {topic}[{partition}] offset will be reset to {offset}. PartitionOffsetReset 2033 Information Revoked partition {topic}[{partition}] (offset was {offset}). PartitionRevoked 2034 Debug Successfully committed offset {topic}[{partition}]@{offset}. OffsetCommitted 2035 Error Error occurred committing the offset {topic}[{partition}]@{offset}: '{errorReason}' ({errorCode}). OffsetCommitError 2036 Error Fatal error in Kafka consumer: '{errorReason}' ({errorCode}). ConfluentConsumerFatalError 2037 Error Error in Kafka consumer error handler. KafkaErrorHandlerError 2038 Debug Kafka consumer statistics received: {statistics} ConsumerStatisticsReceived 2039 Debug Kafka producer statistics received: {statistics} ProducerStatisticsReceived 2040 Error The received statistics JSON couldn't be deserialized. StatisticsDeserializationError 2041 Information Assigned partition {topic}[{partition}]@{offset}. PartitionManuallyAssigned 2042 Warning Error in Kafka consumer: '{errorReason}' ({errorCode}). ConfluentConsumerError 2050 Warning An error occurred while disconnecting the consumer. ConfluentConsumerDisconnectError 2201 Critical {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogCritical 2202 Error {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogError 2203 Warning {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogWarning 2204 Information {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogInformation 2205 Debug {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogDebug 2211 Critical {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogCritical 2212 Error {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogError 2213 Warning {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogWarning 2214 Information {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogInformation 2215 Debug {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogDebug MQTT Id Level Message Reference 4011 Debug Consuming message '{messageId}' from topic '{topic}'. ConsumingMessage 4021 Warning Error occurred connecting to the MQTT broker. | clientId: {clientId} ConnectError 4022 Debug Error occurred retrying to connect to the MQTT broker. | clientId: {clientId} ConnectRetryError 4023 Warning Connection with the MQTT broker lost. The client will try to reconnect. | clientId: {clientId} ConnectionLost 4031 Debug Producer queue processing was canceled. ProducerQueueProcessingCanceled Tracing An Activity is created: in the Consumer when a message is received (initialized with the traceparent header, if submitted) in the Producer when a message is being sent (submitting the Activity.Id in the traceparent header ) when a sequence (e.g. a BatchSequence ) is being consumed when a subscriber is being invoked (either internally or from a consumer) This allows to trace the methods execution and follow a message across different services (distributed tracing). The following table summarizes the activities and the information being tracked. Id Description / Tags Silverback.Integration.Produce A message is being produced to a message broker. Tags: messaging.message_id messaging.destination [ messaging.kafka.message_key ] [ messaging.kafka.partition ] Silverback.Integration.Consume A consumed message is being processed. Tags: messaging.message_id messaging.destination [ messaging.sequence.activity ] [ messaging.kafka.message_key ] [ messaging.kafka.partition ] Silverback.Integration.Sequence A sequence of messages is being processed. Tags: none Silverback.Core.Subscribers.InvokeSubscriber A subscriber is being invoked to process a message. Tags: SubscriberType SubscriberMethod"
  },
  "contributing.html": {
    "href": "contributing.html",
    "title": "Contributing | Silverback",
    "keywords": "Contributing You are encouraged to contribute to Silverback! Please check out the how to contribute guide for guidelines about how to proceed. Source Code The full source code is available on GitHub Versioning The Directory.Build.props file in the root of the repository contains the current version of the NuGet packages being built and referenced. The <BaseVersion> and <VersionSuffix> tags can be used to increment the current version. Commits Please try to follow the Conventional Commits specification for the commit messages. Building (NuGet packages) The nuget packages can be built locally using the powershell script under /nuget/Update.ps1 . Add the -l switch to clear the local nuget cache as well (especially useful when building the same version over and over). Testing The main solution contains quite a few unit tests and additionally some samples are implemented in a separate solution. Contributors Thank you to all the present and future contributors . You are amazing!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | Silverback",
    "keywords": ""
  },
  "releases.html": {
    "href": "releases.html",
    "title": "Releases | Silverback",
    "keywords": "Releases 3.4.1-beta.3 Fixes Fix <xref:Silverback.Messaging.Broker.MqttConsumer> reconnection issues Handle edge cases related to MQTT acknowledgment timeout in <xref:Silverback.Messaging.Broker.MqttConsumer> Allow max retries specification and error policies chains with MQTT V3 3.4.0 What's new Support encryption key rotation (see Encryption ) 3.3.1 Fixes Fix AddHeaders<TMessage> and WithKafkaKey<TMessage> not being correctly invoked by all IProducer.Produce and IProducer.ProducerAsync overloads Add endpoint friendly name to all logs 3.3.0 What's new Optimize in-memory mocked Kafka (avoid spawning too many threads) Support multiple brokers (with overlapping topic names) in mocked Kafka and MQTT Add message validation for both producer and consumer (see Message Validation ) Add new AddInbound overloads specifying message type for a more compact configuration when using the typed deserializer (see Serialization ) Fixes Invoke the Kafka partition EOF callback for all connected consumers Ignore null or empty Kafka key in producer 3.2.0 What's new Add new Kafka partition EOF callback to be notified when the end of a partition is reached by the consumer (see Kafka Events and <xref:Silverback.Messaging.Broker.Callbacks.IKafkaPartitionEofCallback>) Allow multiple calls to IKafkaConsumerEndpointBuilder.Configure or IKafkaProducerEndpointBuilder.Configure for the same endpoint Observe a grace period in the ConsumersHealthCheck to prevent false positives during a normal Kafka rebalance Add optional friendly name to the endpoints (see IEndpointBuilder .WithName and Endpoint.FriendlyName ) Allow filtering the endpoints targeted by the ConsumersHealthCheck (see AddConsumersCheck ) 3.1.1 Fixes Invoke broker callbacks during the application shutdown to allow custom code to be run when disconnecting 3.1.0 What's new Add new ways to configure headers and kafka key (see Message Headers and Kafka Partitioning and Message Key ) New callbacks for Kafka log events (see Kafka Events ) Improve consumer status tracking introducing ConsumerStatus.Ready Revert the Kafka consumer status from Ready to Connected whenever partitions are revoked or a poll timeout occurs Adapt consumer health check to monitor the new status and report unhealthy if not Ready (see Health Monitoring ) Try to automatically recover from Kafka maximum poll interval exceed errors Improve Kafka static partition assignment with resolver function and fetching the available partitions (see Kafka Partitioning and Message Key ) Upgrade to Confluent.Kafka 1.7.0 Upgrade to MQTTnet 3.0.15 Fixes Prevent possible race condition causing messages to be skipped when a RetryPolicy kicks in for messages from multiple Kafka partitions simultaneously Prevent ObjectDisposedException to be thrown when Kafka events (e.g. statistics) are fired during the application shutdown Prevent ObjectDisposedException to be thrown when Consumer.Dispose is called multiple times Properly clear the trace context ( Activity ) when reconnecting the consumer to prevent the newly started consume loop to be tracked under the current message traceId Fix wrong prefix in MQTT log event names 3.0.1 Fixes Fix IOutboxWriter lifecycle [ #128 ] 3.0.0 What's new Add support for MQTT (see Connecting to a Message Broker , Inbound Endpoint , Outbound Endpoint , ...) Simplify configuration and reduce boilerplate (see Subscribing and Connecting to a Message Broker ) Simplify subscribers registration and get rid of the ISubscriber interface (see Subscribing ) Scan subscribers automatically at startup to reduce cost of first message Connect brokers and handle graceful shutdown automatically (see Connecting to a Message Broker ) Improve endpoints configuration API (see Connecting to a Message Broker ) Add IServiceCollection.ConfigureSilverback extension method to conveniently split the configuration code (see Enabling Silverback ) Refactor Silverback.Integration to support streaming Create <xref:Silverback.Messaging.Messages.IMessageStreamEnumerable`1> (see Streaming ) Improve chunking support in conjunction with streaming, requiring only one chunk at a time to be loaded into memory Redesign sequences handling to support chunking, batch consuming and future sequences as well Improve Kafka partitions handling (see Kafka Partitioning and Message Key ) Process partitions independently and concurrently Add setting to produce to a specific partition Add setting to manually assign the consumer partitions Add option to throw an exception if no subscriber is handling a message that was published to the internal bus or was consumed from a message broker (see throwIfUnhandled argument in the <xref:Silverback.Messaging.Publishing.IPublisher> methods and ThrowIfUnhandled property in the IConsumerEndpoint ) Handle null messages as Tombstone / Tombstone<TMessage> (see Tombstone Message ) Replace Newtonsoft.Json with System.Text.Json to improve serialization and deserialization performance (the old serializers have been moved into the Silverback.Integration.Newtonsoft package, see Serialization ) Improve outbound routing customization options with endpoint name resolvers (see Outbound Messages Routing ) Add non-blocking Produce / ProduceAsync / RawProduce / RawProduceAsync overloads to IProducer , better suitable for higher throughput scenarios (see Producer ) Refactor broker event handlers (see Broker Callbacks ) Expose IConsumer.StopAsync and IConsumer.StartAsync methods to pause and resume consumers Add log levels configuration (see Logging ) Improve (distributed) tracing (see Logging ) Allow header names customization (see Message Headers ) Add consumer status information and statistics (see Connecting to a Message Broker ) Add basic consumer health check (see Health Monitoring ) Allow broker behaviors to be registered as transient, meaning that an instance will be created per each producer or consumer (see Broker behaviors pipeline ) Improve code quality Enhance CI pipeline to use Roslyn analyzers Integrate SonarCloud ) Improve integration tests Increase automated tests coverage Enable nullable reference types and adjust all API Document the entire public API (see API Documentation ) Released some utilities to help writing automated tests involving Silverback.Integration (see Testing ) Upgrade to Confluent.Kafka 1.6.2 Upgrade to RabbitMQ.Client 6.2.1 Fixes Fix OutboxWorker not publishing custom headers [ #102 ] Breaking Changes Refactored <xref:Silverback.Messaging.Publishing.IPublisher> Removed the overloads to publish a batch of messages (see Publishing ) Cannot subscribe to collection of messages anymore (see Subscribing ), unless they are consumed from a message broker (see Streaming ) The chunks belonging to the same message must be contiguous (interleaved messages are at the moment not supported anymore) and in the same partition in case of Kafka Removed ISubscriber interface Removed BusConfigurator (moved all the configuration into the <xref:Silverback.Messaging.Configuration.ISilverbackBuilder> extension methods) Replaced BusConfigurator.Connect with ISilverbackBuilder.AddEndpointsConfigurator and ISilverbackBuilder.AddEndpoints (or ISilverbackBuilder.AddKafkaEndpoints etc.) to configure the endpoints, while the broker is connected automatically at startup (see Connecting to a Message Broker ) Replaced BusConfigurator.Subscribe methods with ISilverbackBuilder.AddDelegateSubscriber (see Subscribing ) Replaced BusConfigurator.HandleMessagesOfType methods with ISilverbackBuilder.HandleMessageOfType (see Subscribing ) BusConfigurator.ScanSubscribers is not needed anymore since it gets called automatically at startup (from an IHostedService ) Removed IServiceCollection.Add*Subscriber , IServiceCollection.Add*Behavior , IServiceCollection.Add*BrokerBehavior , IServiceCollection.AddEndpointsConfigurator , IServiceCollection.Add*OutboundRouter extension methods, use the same methods on the <xref:Silverback.Messaging.Configuration.ISilverbackBuilder> (using IServiceCollection.ConfigureSilverback to get an instance if the <xref:Silverback.Messaging.Configuration.ISilverbackBuilder> if necessary, as shown in Enabling Silverback ) Removed IBrokerOptionsBuilder.Add*BrokerBehavior , IBrokerOptionsBuilder.RegisterConfigurator , IBrokerOptionsBuilder.Add*OutboundRouter extension methods, use the same methods on the <xref:Silverback.Messaging.Configuration.ISilverbackBuilder> (using IServiceCollection.ConfigureSilverback to get an instance if the <xref:Silverback.Messaging.Configuration.ISilverbackBuilder> if necessary, as shown in Enabling Silverback ) Reorganized the Silverback.Messaging.Configuration namespace moving some broker specific types under Silverback.Messaging.Configuration.Kafka , Silverback.Messaging.Configuration.Rabbit or Silverback.Messaging.Configuration.Mqtt The visibility of some types has been changed to internal to favor a cleaner and clearer API where the public types are well documented and their backward compatibility is valued Removed Silverback prefix from exceptions name Removed the IRequest interface (it was implemented by both IQuery<TResult> and ICommand<TResult> ) Changed Impl methods suffix with Core , this affects some virtual members in the Broker<TProducerEndpoint, TConsumerEndpoint> and other base classes IConsumer.Received event replaced by a callback delegate IBroker.GetConsumer and IBrokerCollection.GetConsumer methods renamed to IBroker.AddConsumer and IBrokerCollection.AddConsumer IQueueProducer and IQueueConsumer renamed to IOutboxWriter and IOutboxReader The messages with a null body are by default mapped to a Tombstone / Tombstone<TMessage> (see Tombstone Message ) Database: Moved all entities (used with Entity Framework Core) to the Silverback.Database.Model namespace Replaced InboundMessage entity with InboundLogEntry Replaced OutboundMessage entity with OutboxMessage Removed TemporaryMessageChunk Modified schema of StoredOffset entity Moved and renamed some internally used types (e.g. QueuedMessage , DbQueuedMessage , ...) Complete redesign of the error policies Removed IMessageIdProvider and all related logic: the Id or MessageId property will not be automatically initialized anymore and its value will not be used as identifier for the outbound message anymore (refer to the Message Identifier page for further details on how to set a custom message id, if needed) WithConnectionTo<> , WithConnectionToKafka , WithConnectionToRabbitMQ and WithInMemoryBroker have been removed, please use the new WithConnectionToMessageBroker and AddKafka / AddRabbit methods (see Connecting to a Message Broker ) Replaced the internal messages for the Kafka events such as partitions revoked/assigned, offset commit, error, log and statistics with event handler interfaces (see Kafka Events ) Deprecated Silverback.Integration.InMemory , use Silverback.Integration.Kafka.Testing , Silverback.Integration.RabbitMQ.Testing , etc. instead Renamed PartitioningKeyMemberAttribute to <xref:Silverback.Messaging.Messages.KafkaKeyMemberAttribute> Silverback.Integration.Configuration has been discontinued Renamed Settings property to Options in the default JsonMessageSerializer (since the switch to System.Text.Json ) Removed LogWithLevel method from SkipMessageErrorPolicy , use the new WithLogLevels configuration instead Removed Parallel option from <xref:Silverback.Messaging.Subscribers.SubscribeAttribute> Renamed Offset to a more generic BrokerMessageIdentifier in the Silverback.Integration abstractions (including the envelopes) Some changes to the behaviors: Renamed Handle to HandleAsync in the <xref:Silverback.Messaging.Publishing.IBehavior>, IProducerBehavior and IConsumerBehavior Changed signature of the HandleAsync method (see Behaviors and Broker behaviors pipeline ) Changed some sort indexes and introduced some new broker behaviors, you may need to adjust the sort index of your custom behaviors (see Broker behaviors pipeline for the updated list of built-in behaviors) Replaced IBroker.Connect and IBroker.Disconnect with IBroker.ConnectAsync and IBroker.DisconnectAsync Some major changes to batch consuming: Removed all batch events ( BatchStartedEvent , BatchCompleteEvent , BatchProcessedEvent , BatchAbortedEvent ), refer to Streaming to learn how to leverage the new <xref:Silverback.Messaging.Messages.IMessageStreamEnumerable`1> Setting the batch size to 1 doesn't disable batching anymore, set the Batch to null in the ConsumerEndpoint to disable it When batching is enabled the messages can be subscribed only via the <xref:Silverback.Messaging.Messages.IMessageStreamEnumerable`1> (see Streaming ), the subscribers to the single messages will not be invoked ChunkSettings moved from Silverback.Messaging.LargeMessages namespace to Silverback.Messaging.Sequences.Chunking Replaced CoreEventIds , IntegrationEventIds , KafkaEventIds and RabbitEventIds with <xref:Silverback.Diagnostics.CoreLogEvents>, IntegrationLogEvents , <xref:Silverback.Diagnostics.KafkaLogEvents> and <xref:Silverback.Diagnostics.RabbitLogEvents> (see also Logging ) Deprecated support for Entity Framework 2, only the version 3.0.1 of Silverback.Core.EntityFrameworkCore will work with Silverback 3.0.0 Modified message encryption for chunked messages and it will not be compatible with previous versions of Silverback (affects chunking+encryption only) 2.2.0 What's new Allow custom outbound routers to be registered as scoped or transient (instead of singleton only) 2.1.2 Fixes Fix delay in Retry policy [ #97 ] 2.1.1 What's new Add support for multiple message brokers (Kafka and RabbitMQ) in the same application (see Connecting to a Message Broker ) Add end-to-end message encryption (see Encryption ) Add dynamic custom routing of outbound messages (see Outbound Messages Routing ) Improve support for message headers (see Message Headers ) Add support for binary files (see Binary Files ) Improve message identifier handling: the IIntegrationMessage is not required to have an Id property anymore (the x-message-id header will still be generated and if the property exists will continue to be automatically initialized) x-first-chunk-offset header added by default (see Message Headers ) Deserialize KafkaStasticsEvent JSON and provided its content as an object (in addition to the raw JSON) Add support for Apache Avro and schema registry (see Serialization ) Upgrade to Confluent.Kafka 1.4.2 Add consumer PrefetchSize and PrefetchCount settings to <xref:Silverback.Messaging.RabbitConsumerEndpoint> Add AcknowledgeEach to the <xref:Silverback.Messaging.RabbitConsumerEndpoint> to define the number of message processed before sending the acknowledgment to the server Upgrade to RabbitMQ.Client 6.0.0 Improve message type resolution performance and reliability in JsonMessageSerializer Add LogWithLevel method to SkipMessageErrorPolicy to specify the desired level for the \"Message skipped\" log entry (the default is now increased to Error ) Breaking Changes These changes shouldn't affect you unless you built your own IBroker implementation or are interacting at low-level with the IBroker (this is why has been decided to still mark this as a minor release): The IBroker interface and Broker<TProducerEndpoint, TConsumerEndpoint> abstract base class have been modified to explicitly declare which endpoint type is being handled by the broker implementation The IMessageSerializer interfaces has been changed The IConsumerBehavior and IProducerBehavior interfaces have been changed Changed the parameters order in some less used overloads in the IBrokerOptionBuilder Announced Breaking Changes These aren't real breaking changes but some methods have been marked as deprecated and will be removed in one of the next major releases: WithConnectionTo<> , WithConnectionToKafka and WithConnectionToRabbitMQ are deprecated (they will still be supported in this version), please use the new WithConnectionToMessageBroker and AddKafka / AddRabbit methods (see Connecting to a Message Broker ) 2.0.0 What's new Create Silverback.Integration.RabbitMQ package to connect Silverback with RabbitMQ (see Connecting to a Message Broker ) Enable subscription of messages with an empty body (you must subscribe to the IInboundEnvelope ) [ #61 ] Add hook to manually set the Kafka partition start offset when a partition is assigned to the consumer (see Kafka Events ) [ #57 ] Support for multiple consumer groups running in the same process (see Multiple Consumer Groups (in same process) ) [ #59 ] Publish KafkaStatisticsEvent also from the <xref:Silverback.Messaging.Broker.KafkaProducer> (previously done in <xref:Silverback.Messaging.Broker.KafkaConsumer> only) Several reliability and performance related improvements Breaking Changes The IBroker , IProducer and IConsumer interfaces have been slightly modified (it shouldn't affect you unless you built your own IBroker implementation) Many interfaces (such as <xref:Silverback.Messaging.Publishing.IBehavior>) and delegates have been slightly modified to pass around an IReadOnlyCollection instead of an IEnumerable , to avoid the possible issues related to multiple enumeration of an IEnumerable The IMessageKeyProvider interface has been renamed to IMessageIdProvider to prevent to be mistaken with the Kafka Key or Rabbit's Routing Key IInboundMessage / IOutboundMessage (plus all the related types) have been renamed to IInboundEnvelope / IOutboundEnvelope and the property containing the actual message has been renamed from Content to Message The MustUnwrap option has been removed from the inbound connector configuration (messages are unwrapped by default) 1.2.0 What's new Publish events to the internal bus as a consequence to the Kafka events such as partitions assigned or revoked (see Kafka Events ) [ #34 ] 1.1.0 What's new Add IEndpointsConfigurator interface to allow splitting the endpoints configuration across multiple types (see Connecting to a Message Broker ) Add support for distributed tracing (based on System.Diagnostics ) Add IProducerBehavior and IConsumerBehavior to create an extension point closer to the actual message broker logic (see Broker behaviors pipeline ) Breaking Changes Replaced ISortedBehavior with a generic <xref:Silverback.ISorted> interface 1.0.5 What's new Upgrade to Confluent.Kafka 1.3.0 Fixes Fix OutboundQueueHealthCheck [ #43 ] Remove automatic disposal of the <xref:Silverback.Messaging.Broker.KafkaProducer> when a KafkaException is thrown (creating too many instances of the producer over a short time span could lead to too many active TCP connections) Fix the bug preventing a <xref:Silverback.Messaging.KafkaConsumerEndpoint> pointing to multiple topics to be successfully subscribed 1.0.4 Fixes Fix mortal loop issue: it is finally safe to consume and produce the same type of messages from within the same process (in a natural way, without any extra configuration) Since version 1.0.0 the messages routed to an endpoint aren't forwarded to any subscriber directly Now the inbound connector has been fixed as well, preventing the inbound messages to be immediately routed once again to the outbound endpoint and eliminating all possible causes of mortal loops 1.0.3 What's new Deprecate PartitioningKeyMemberAttribute in favor of <xref:Silverback.Messaging.Messages.KafkaKeyMemberAttribute>, since the message key isn't used just for partitioning (see Kafka Partitioning and Message Key ) Fixes Forward Kafka message key as-is (not hashed anymore) to avoid possible collisions and simplify debugging 1.0.2 Fixes Reintroduce Add*Subscriber and Add*Behavior as IServiceCollection extension methods (for backward compatibility and greater flexibility) [ #41 ] Add WithInMemoryBroker and OverrideWithInMemoryBroker extension methods (see Testing ) 1.0.0 What's new Optimize message size (no wrappers anymore) Improve headers usage: identifiers, types, chunks information, etc. are now all sent in the headers Review severity of some log entries Improve and clean up internal implementation Improve exception handling (flattening of AggregateException ) Upgrade to Confluent.Kafka 1.2.2 Add automatic recovers from fatal errors in <xref:Silverback.Messaging.Broker.KafkaConsumer> (can be disabled via Endpoint configuration) Support .Net Core 3.0 and Entity Framework Core 3.0 Refactor packages (EF binding logic is now in a single package, versioned after the related EF version) Improve configuration API Improve and optimize performance (including #37 ) Improve database locks mechanism (used also to run the OutboundQueueWorker ) Fixes Fix issue requiring types not implementing <xref:Silverback.Messaging.Messages.IMessage> to be registered with HandleMessagesOfType<T> to consume them [ #33 ] Mitigate issue causing the <xref:Silverback.Background.DistributedBackgroundService> to sometime fail to acquire the database lock [ #39 ] Fix partition key value being lost when using the DeferredOutboundConnector Other small fixes to improve stability and reliability Breaking Changes By default the messages published via <xref:Silverback.Messaging.Publishing.IPublisher> that are routed to an outbound endpoint are not sent through to the internal bus and cannot therefore be subscribed locally, within the same process (see Outbound Endpoint ) Some changes in IInboundMessage and IOutboundMessage interfaces Changes to the schema of the outbox table ( Silverback.Messaging.Connectors.Model.OutboundMessage ) The configuration fluent API changed quite a bit, refer to the current documentation Important WithConnectionTo<KafkaBroker> has to be replaced with WithConnectionToKafka in order for all features to work properly. When failing to do so no message key will be generated, causing the messages to land in a random partition and/or preventing to publish to a compacted topic. (see Kafka Partitioning and Message Key ) Silverback.Integration.EntityFrameworkCore and Silverback.EventSourcing.EntityFrameworkCore have been deprecated ( Silverback.Core.EntityFrameworkCore contains all the necessary logic to use EF as store) KeyMemberAttribute has been renamed to PartitioningKeyMemberAttribute (see Connecting to a Message Broker ) 0.10.0 What's new Improve error handling: now all exceptions, including the ones thrown by the message serialzer can be handled through the error policies Improve logs: promoted some important logs to Information level, writing all processing errors as (at least) Warning and improved logged information quality (logged attributes) Add ability to modify messages and headers when moving them via MoveMessageErrorPolicy Refactor message processing to a cleaner, more extensible and predictable API and behavior Fixes Fixed several small (and not so small) issues and bugs 0.8.0 - 0.9.0 Released two versions mostly to fix bugs, do some small adjustments according to some user feedbacks and update the external dependencies (e.g. Confluent.Kafka 1.0.1). Fixes Fix exception loading error policies from JSON in Silverback.Integration.Configuration [ #24 ] 0.7.0 What's new Upgrade to Confluent.Kafka 1.0.0 Create a simple event store that perfectly integrates with the rest of the Silverback framework (see Event Sourcing ) Add Silverback.Integration.InMemory package to mock the message broker behavior in your unit tests Several small optimizations and improvements 0.6.0 What's new Add support for message headers Simplify message subscription even further: now all public methods of the types implementing the marker interface ISubscriber are automatically subscribed by default without having to annotate them with the <xref:Silverback.Messaging.Subscribers.SubscribeAttribute> (this behavior is customizable) Upgrade to Confluent.Kafka 1.0.0-RC1 0.3.x - 0.5.x Some releases where done adding quite a few features. What's new Add Silverback.Integration.Configuration package to load the inbound/outbound configuration from the app.settings json Add batch processing Add parallel subscribers Add delegate subscription as an alternative to <xref:Silverback.Messaging.Subscribers.SubscribeAttribute> based subscription Improve support for Rx.net Add support for legacy messages and POCO classes Add offset storage as an alternative and more optimized way to guarantee exactly once processing, storing just the offset of the last message instead of logging every message (see Inbound Endpoint ) Add behaviors as a convenient way to implement your cross-cutting concerns (like logging, validation, etc.) to be plugged into the internal bus publishing pipeline (see Behaviors ) Add message chunking to automatically split the larger messages and rebuild them on the other end (see Chunking ) ...much more...and a huge amount of refactorings Fixes Several fixes and optimizations 0.3.2 The very first public release of Silverback! It included: In-process message bus Inbound/outbound connector for message broker abstraction Kafka broker implementation Outbox table pattern implementation Exactly once processing ..."
  },
  "samples/kafka/basic.html": {
    "href": "samples/kafka/basic.html",
    "title": "Kafka - Basic | Silverback",
    "keywords": "Kafka - Basic This sample implements the simple possible producer and consumer. See also: Connecting to a Message Broker Common The message being exchanged is defined in a common project. namespace Silverback.Samples.Kafka.Basic.Common { public class SampleMessage { public int Number { get; set; } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Basic.Common Producer The producer uses a hosted service to publish some messages in the background. Startup EndpointsConfigurator Background Service using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.Basic.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add the hosted service that produces the random sample messages services.AddHostedService<ProducerBackgroundService>(); } public void Configure() { } } } using Silverback.Messaging.Configuration; using Silverback.Samples.Kafka.Basic.Common; namespace Silverback.Samples.Kafka.Basic.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Produce the SampleMessage to the samples-basic topic .AddOutbound<SampleMessage>( endpoint => endpoint .ProduceTo(\"samples-basic\"))); } } } using System; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using Silverback.Messaging.Broker; using Silverback.Messaging.Publishing; using Silverback.Samples.Kafka.Basic.Common; namespace Silverback.Samples.Kafka.Basic.Producer { public class ProducerBackgroundService : BackgroundService { private readonly IServiceScopeFactory _serviceScopeFactory; private readonly ILogger<ProducerBackgroundService> _logger; public ProducerBackgroundService( IServiceScopeFactory serviceScopeFactory, ILogger<ProducerBackgroundService> logger) { _serviceScopeFactory = serviceScopeFactory; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken stoppingToken) { // Create a service scope and resolve the IPublisher // (the IPublisher cannot be resolved from the root scope and cannot // therefore be directly injected into the BackgroundService) using var scope = _serviceScopeFactory.CreateScope(); var publisher = scope.ServiceProvider.GetRequiredService<IPublisher>(); var broker = scope.ServiceProvider.GetRequiredService<IBroker>(); int number = 0; while (!stoppingToken.IsCancellationRequested) { // Check whether the connection has been established, since the // BackgroundService will start immediately, before the application // is completely bootstrapped if (!broker.IsConnected) { await Task.Delay(100, stoppingToken); continue; } await ProduceMessageAsync(publisher, ++number); await Task.Delay(100, stoppingToken); } } private async Task ProduceMessageAsync(IPublisher publisher, int number) { try { await publisher.PublishAsync( new SampleMessage { Number = number }); _logger.LogInformation($\"Produced {number}\"); } catch (Exception ex) { _logger.LogError(ex, $\"Failed to produce {number}\"); } } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Basic.Producer Consumer The consumer processes the messages and outputs their value to the standard output. Startup EndpointsConfigurator Subscriber using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.Basic.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<SampleMessageSubscriber>(); } public void Configure() { } } } using Confluent.Kafka; using Silverback.Messaging.Configuration; namespace Silverback.Samples.Kafka.Basic.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Consume the samples-basic topic .AddInbound( endpoint => endpoint .ConsumeFrom(\"samples-basic\") .Configure( config => { // The consumer needs at least the bootstrap // server address and a group id to be able // to connect config.GroupId = \"sample-consumer\"; // AutoOffsetReset.Earliest means that the // consumer must start consuming from the // beginning of the topic, if no offset was // stored for this consumer group config.AutoOffsetReset = AutoOffsetReset.Earliest; }))); } } } using Microsoft.Extensions.Logging; using Silverback.Samples.Kafka.Basic.Common; namespace Silverback.Samples.Kafka.Basic.Consumer { public class SampleMessageSubscriber { private readonly ILogger<SampleMessageSubscriber> _logger; public SampleMessageSubscriber(ILogger<SampleMessageSubscriber> logger) { _logger = logger; } public void OnMessageReceived(SampleMessage message) => _logger.LogInformation($\"Received {message.Number}\"); } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Basic.Consumer"
  },
  "samples/kafka/batch.html": {
    "href": "samples/kafka/batch.html",
    "title": "Kafka - Batch Processing | Silverback",
    "keywords": "Kafka - Batch Processing In this sample the consumed messages are processed in batch. See also: Inbound Endpoint - Batch processing Common The message being exchanged is defined in a common project. namespace Silverback.Samples.Kafka.Batch.Common { public class SampleMessage { public int Number { get; set; } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Batch.Common Producer The producer uses a hosted service to publish some messages in the background. Startup EndpointsConfigurator Background Service using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.Batch.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add the hosted service that produces the random sample messages services.AddHostedService<ProducerBackgroundService>(); } public void Configure() { } } } using Silverback.Messaging.Configuration; using Silverback.Samples.Kafka.Batch.Common; namespace Silverback.Samples.Kafka.Batch.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Produce the SampleMessage to the samples-batch topic .AddOutbound<SampleMessage>( endpoint => endpoint .ProduceTo(\"samples-batch\"))); } } } using System; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using Silverback.Messaging.Broker; using Silverback.Messaging.Publishing; using Silverback.Samples.Kafka.Batch.Common; namespace Silverback.Samples.Kafka.Batch.Producer { public class ProducerBackgroundService : BackgroundService { private readonly IServiceScopeFactory _serviceScopeFactory; private readonly ILogger<ProducerBackgroundService> _logger; public ProducerBackgroundService( IServiceScopeFactory serviceScopeFactory, ILogger<ProducerBackgroundService> logger) { _serviceScopeFactory = serviceScopeFactory; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken stoppingToken) { // Create a service scope and resolve the IPublisher // (the IPublisher cannot be resolved from the root scope and cannot // therefore be directly injected into the BackgroundService) using var scope = _serviceScopeFactory.CreateScope(); var publisher = scope.ServiceProvider.GetRequiredService<IPublisher>(); var broker = scope.ServiceProvider.GetRequiredService<IBroker>(); int number = 0; while (!stoppingToken.IsCancellationRequested) { // Check whether the connection has been established, since the // BackgroundService will start immediately, before the application // is completely bootstrapped if (!broker.IsConnected) { await Task.Delay(100, stoppingToken); continue; } await ProduceMessageAsync(publisher, ++number); await Task.Delay(50, stoppingToken); } } private async Task ProduceMessageAsync(IPublisher publisher, int number) { try { await publisher.PublishAsync( new SampleMessage { Number = number }); _logger.LogInformation($\"Produced {number}\"); } catch (Exception ex) { _logger.LogError(ex, $\"Failed to produce {number}\"); } } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Batch.Producer Consumer The consumer processes the messages in batch and outputs the batch sum to the standard output. Startup EndpointsConfigurator Subscriber using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.Batch.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<SampleMessageBatchSubscriber>(); } public void Configure() { } } } using System; using Confluent.Kafka; using Silverback.Messaging.Configuration; namespace Silverback.Samples.Kafka.Batch.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Consume the samples-batch topic .AddInbound( endpoint => endpoint .ConsumeFrom(\"samples-batch\") .Configure( config => { // The consumer needs at least the bootstrap // server address and a group id to be able // to connect config.GroupId = \"sample-consumer\"; // AutoOffsetReset.Earliest means that the // consumer must start consuming from the // beginning of the topic, if no offset was // stored for this consumer group config.AutoOffsetReset = AutoOffsetReset.Earliest; }) // Configure processing in batches of 100 messages, // with a max wait time of 5 seconds .EnableBatchProcessing(100, TimeSpan.FromSeconds(5)))); } } } using System; using System.Collections.Generic; using System.Threading.Tasks; using Microsoft.Extensions.Logging; using Silverback.Messaging.Messages; using Silverback.Samples.Common; using Silverback.Samples.Kafka.Batch.Common; namespace Silverback.Samples.Kafka.Batch.Consumer { public class SampleMessageBatchSubscriber { private readonly ILogger<SampleMessageBatchSubscriber> _logger; public SampleMessageBatchSubscriber( ILogger<SampleMessageBatchSubscriber> logger) { _logger = logger; } public async Task OnBatchReceivedAsync(IAsyncEnumerable<SampleMessage> batch) { int sum = 0; int count = 0; await foreach (var message in batch) { sum += message.Number; count++; } _logger.LogInformation( $\"{Environment.NewLine}{Environment.NewLine}{Environment.NewLine}\" + $\"Received batch of {count} message -> sum: {sum}\" + $\"{Environment.NewLine}{Environment.NewLine}{Environment.NewLine}\"); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Batch.Consumer"
  },
  "samples/kafka/binaryfile-streaming.html": {
    "href": "samples/kafka/binaryfile-streaming.html",
    "title": "Kafka - Files Streaming | Silverback",
    "keywords": "Kafka - Files Streaming This sample demonstrates how to deal with raw binary contents and large messages, to transfer some files through Kafka. See also: Binary Files , Chunking Producer The producer exposes two REST API that receive the path of a local file to be streamed. The second API uses a custom BinaryFileMessage to forward further metadata (the file name in this example). Startup EndpointsConfigurator CustomBinaryFileMessage API Controller using Microsoft.AspNetCore.Builder; using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add API controllers and SwaggerGen services.AddControllers(); services.AddSwaggerGen(); } public void Configure(IApplicationBuilder app) { // Enable middlewares to serve generated Swagger JSON and UI app.UseSwagger().UseSwaggerUI( uiOptions => { uiOptions.SwaggerEndpoint( \"/swagger/v1/swagger.json\", $\"{GetType().Assembly.FullName} API\"); }); // Enable routing and endpoints for controllers app.UseRouting(); app.UseEndpoints(endpoints => { endpoints.MapControllers(); }); } } } using Silverback.Messaging.Configuration; using Silverback.Messaging.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Produce the binary files to the // samples-binary-file-streaming topic .AddOutbound<BinaryFileMessage>( endpoint => endpoint // Force producing to a specific partition (0 in this // case) to be able to scale to multiple producers // writing to the same topic. Assigning a different // partition to each one will ensure that the chunks // are always contiguous. // This isn't mandatory and necessary only when // horizontally scaling the producer. // (In the final solution the \"0\" constant value // should be replaced by a configuration setting.) .ProduceTo(\"samples-binary-file-streaming\", 0) // Split the binary files into chunks of 512 kB .EnableChunking(524288))); } } } using Silverback.Messaging.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Producer.Messages { public class CustomBinaryFileMessage : BinaryFileMessage { [Header(\"x-filename\")] public string? Filename { get; set; } } } using System.IO; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Silverback.Messaging.Messages; using Silverback.Messaging.Publishing; using Silverback.Samples.Kafka.BinaryFileStreaming.Producer.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Producer.Controllers { [ApiController] [Route(\"[controller]\")] public class ProducerController : ControllerBase { private readonly IPublisher _publisher; public ProducerController(IPublisher publisher) { _publisher = publisher; } [HttpPost(\"binary-file\")] public async Task<IActionResult> ProduceBinaryFileAsync( string filePath, string? contentType) { // Open specified file stream using var fileStream = System.IO.File.OpenRead(filePath); // Create a BinaryFileMessage that wraps the file stream var binaryFileMessage = new BinaryFileMessage(fileStream); if (!string.IsNullOrEmpty(contentType)) binaryFileMessage.ContentType = contentType; // Publish the BinaryFileMessage that will be routed to the outbound // endpoint. The FileStream will be read and produced chunk by chunk, // without the entire file being loaded into memory. await _publisher.PublishAsync(binaryFileMessage); return NoContent(); } [HttpPost(\"custom-binary-file\")] public async Task<IActionResult> ProduceBinaryFileWithCustomHeadersAsync( string filePath, string? contentType) { // Open specified file stream using var fileStream = System.IO.File.OpenRead(filePath); // Create a CustomBinaryFileMessage that wraps the file stream. The // CustomBinaryFileMessage extends the BinaryFileMessage adding an extra // Filename property that is also exported as header. var binaryFileMessage = new CustomBinaryFileMessage { Content = fileStream, Filename = Path.GetFileName(filePath) }; if (!string.IsNullOrEmpty(contentType)) binaryFileMessage.ContentType = contentType; // Publish the BinaryFileMessage that will be routed to the outbound // endpoint. The FileStream will be read and produced chunk by chunk, // without the entire file being loaded into memory. await _publisher.PublishAsync(binaryFileMessage); return NoContent(); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/BinaryFileStreaming.Producer Consumer The consumer simply streams the file to a temporary folder in the local file system. Startup EndpointsConfigurator CustomBinaryFileMessage Subscriber using Microsoft.Extensions.DependencyInjection; using Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Subscribers; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<BinaryFileSubscriber>(); } public void Configure() { } } } using Confluent.Kafka; using Silverback.Messaging.Configuration; using Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Consume the samples-binary-file-streaming topic .AddInbound( endpoint => endpoint // Manually assign the partitions to prevent the // broker to rebalance in the middle of a potentially // huge sequence of chunks. This is just an // optimization and isn't strictly necessary. // (The partitions resolver function returns the // untouched collection to assign all available // partitions.) .ConsumeFrom( \"samples-binary-file-streaming\", partitions => partitions) .Configure( config => { // The consumer needs at least the bootstrap // server address and a group id to be able // to connect config.GroupId = \"sample-consumer\"; // AutoOffsetReset.Earliest means that the // consumer must start consuming from the // beginning of the topic, if no offset was // stored for this consumer group config.AutoOffsetReset = AutoOffsetReset.Earliest; }) // Force the consumer to use the // BinaryFileMessageSerializer: this is not strictly // necessary when the messages are produced by // Silverback but it increases the interoperability, // since it doesn't have to rely on the // 'x-message-type' header value to switch to the // BinaryFileMessageSerializer. // // In this example the BinaryFileMessageSerializer is // also set to return a CustomBinaryFileMessage // instead of the normal BinaryFileMessage. This is // only needed because we want to read the custom // 'x-message-filename' header, otherwise // 'ConsumeBinaryFiles()' would work perfectly fine // (returning a basic BinaryFileMessage, without the // extra properties). .ConsumeBinaryFiles( serializer => serializer .UseModel<CustomBinaryFileMessage>()) // Retry each chunks sequence 5 times in case of an // exception .OnError(policy => policy.Retry(5)))); } } } using Silverback.Messaging.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Messages { public class CustomBinaryFileMessage : BinaryFileMessage { [Header(\"x-filename\")] public string? Filename { get; set; } } } using System; using System.IO; using System.Threading.Tasks; using Microsoft.Extensions.Logging; using Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Subscribers { public class BinaryFileSubscriber { private const string OutputPath = \"../../temp\"; private readonly ILogger<BinaryFileSubscriber> _logger; public BinaryFileSubscriber(ILogger<BinaryFileSubscriber> logger) { _logger = logger; } public async Task OnBinaryFileMessageReceivedAsync( CustomBinaryFileMessage binaryFileMessage) { EnsureTargetFolderExists(); var filename = Guid.NewGuid().ToString(\"N\") + binaryFileMessage.Filename; _logger.LogInformation($\"Saving binary file as {filename}...\"); // Create a FileStream to save the file using var fileStream = File.OpenWrite(Path.Combine(OutputPath, filename)); if (binaryFileMessage.Content != null) { // Asynchronously copy the message content to the FileStream. // The message chunks are streamed directly and the entire file is // never loaded into memory. await binaryFileMessage.Content.CopyToAsync(fileStream); } _logger.LogInformation( $\"Written {fileStream.Length} bytes into {filename}.\"); } private static void EnsureTargetFolderExists() { if (!Directory.Exists(OutputPath)) Directory.CreateDirectory(OutputPath); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/BinaryFileStreaming.Consumer"
  },
  "samples/mqtt/basic.html": {
    "href": "samples/mqtt/basic.html",
    "title": "MQTT - Basic | Silverback",
    "keywords": "MQTT - Basic This sample implements the simple possible producer and consumer. See also: Connecting to a Message Broker Common The message being exchanged is defined in a common project. namespace Silverback.Samples.Mqtt.Basic.Common { public class SampleMessage { public int Number { get; set; } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.Common Producer The producer uses a hosted service to publish some messages in the background. Startup EndpointsConfigurator Background Service using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.Basic.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add the hosted service that produces the random sample messages services.AddHostedService<ProducerBackgroundService>(); } public void Configure() { } } } using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.basic.producer\") .ConnectViaTcp(\"localhost\")) // Produce the SampleMessage to the samples-basic topic .AddOutbound<SampleMessage>( endpoint => endpoint .ProduceTo(\"samples/basic\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .Retain())); } } } using System; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using Silverback.Messaging.Broker; using Silverback.Messaging.Publishing; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.Producer { public class ProducerBackgroundService : BackgroundService { private readonly IServiceScopeFactory _serviceScopeFactory; private readonly ILogger<ProducerBackgroundService> _logger; public ProducerBackgroundService( IServiceScopeFactory serviceScopeFactory, ILogger<ProducerBackgroundService> logger) { _serviceScopeFactory = serviceScopeFactory; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken stoppingToken) { // Create a service scope and resolve the IPublisher // (the IPublisher cannot be resolved from the root scope and cannot // therefore be directly injected into the BackgroundService) using var scope = _serviceScopeFactory.CreateScope(); var publisher = scope.ServiceProvider.GetRequiredService<IPublisher>(); var broker = scope.ServiceProvider.GetRequiredService<IBroker>(); int number = 0; while (!stoppingToken.IsCancellationRequested) { // Check whether the connection has been established, since the // BackgroundService will start immediately, before the application // is completely bootstrapped if (!broker.IsConnected) { await Task.Delay(100, stoppingToken); continue; } await ProduceMessageAsync(publisher, ++number); await Task.Delay(100, stoppingToken); } } private async Task ProduceMessageAsync(IPublisher publisher, int number) { try { await publisher.PublishAsync( new SampleMessage { Number = number }); _logger.LogInformation($\"Produced {number}\"); } catch (Exception ex) { _logger.LogError(ex, $\"Failed to produce {number}\"); } } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.Producer Consumer The consumer processes the messages and outputs their value to the standard output. Startup EndpointsConfigurator Subscriber using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.Basic.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<SampleMessageSubscriber>(); } public void Configure() { } } } using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.basic.consumer\") .ConnectViaTcp(\"localhost\") // Send last will message if disconnecting // ungracefully .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"samples/testaments\"))) // Consume the samples/basic topic .AddInbound( endpoint => endpoint .ConsumeFrom(\"samples/basic\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) // Silently skip the messages in case of exception .OnError(policy => policy.Skip()))); } } } using Microsoft.Extensions.Logging; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.Consumer { public class SampleMessageSubscriber { private readonly ILogger<SampleMessageSubscriber> _logger; public SampleMessageSubscriber(ILogger<SampleMessageSubscriber> logger) { _logger = logger; } public void OnMessageReceived(SampleMessage message) => _logger.LogInformation($\"Received {message.Number}\"); } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.Consumer"
  },
  "samples/mqtt/basic-v3.html": {
    "href": "samples/mqtt/basic-v3.html",
    "title": "MQTT - Basic (v3) | Silverback",
    "keywords": "MQTT - Basic (v3) This sample implements the simple possible producer and consumer, but using MQTT protocol version 3. See also: Connecting to a Message Broker Common The message being exchanged is defined in a common project. namespace Silverback.Samples.Mqtt.Basic.Common { public class SampleMessage { public int Number { get; set; } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.Common Producer The producer uses a hosted service to publish some messages in the background. Startup EndpointsConfigurator Background Service using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.Basic.ProducerV3 { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add the hosted service that produces the random sample messages services.AddHostedService<ProducerBackgroundService>(); } public void Configure() { } } } using MQTTnet.Formatter; using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.ProducerV3 { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.basic.producer\") .ConnectViaTcp(\"localhost\") .UseProtocolVersion(MqttProtocolVersion.V310)) // Produce the SampleMessage to the samples-basic topic .AddOutbound<SampleMessage>( endpoint => endpoint .ProduceTo(\"samples/basic\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .Retain())); } } } using System; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using Silverback.Messaging.Broker; using Silverback.Messaging.Publishing; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.ProducerV3 { public class ProducerBackgroundService : BackgroundService { private readonly IServiceScopeFactory _serviceScopeFactory; private readonly ILogger<ProducerBackgroundService> _logger; public ProducerBackgroundService( IServiceScopeFactory serviceScopeFactory, ILogger<ProducerBackgroundService> logger) { _serviceScopeFactory = serviceScopeFactory; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken stoppingToken) { // Create a service scope and resolve the IPublisher // (the IPublisher cannot be resolved from the root scope and cannot // therefore be directly injected into the BackgroundService) using var scope = _serviceScopeFactory.CreateScope(); var publisher = scope.ServiceProvider.GetRequiredService<IPublisher>(); var broker = scope.ServiceProvider.GetRequiredService<IBroker>(); int number = 0; while (!stoppingToken.IsCancellationRequested) { // Check whether the connection has been established, since the // BackgroundService will start immediately, before the application // is completely bootstrapped if (!broker.IsConnected) { await Task.Delay(100, stoppingToken); continue; } await ProduceMessageAsync(publisher, ++number); await Task.Delay(100, stoppingToken); } } private async Task ProduceMessageAsync(IPublisher publisher, int number) { try { await publisher.PublishAsync( new SampleMessage { Number = number }); _logger.LogInformation($\"Produced {number}\"); } catch (Exception ex) { _logger.LogError(ex, $\"Failed to produce {number}\"); } } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.ProducerV3 Consumer The consumer processes the messages and outputs their value to the standard output. Startup EndpointsConfigurator Subscriber using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.Basic.ConsumerV3 { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<SampleMessageSubscriber>(); } public void Configure() { } } } using MQTTnet.Formatter; using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.ConsumerV3 { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.basic.consumer\") .ConnectViaTcp(\"localhost\") .UseProtocolVersion(MqttProtocolVersion.V310) // Send last will message if disconnecting // ungracefully .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"samples/testaments\"))) // Consume the samples/basic topic // Note: It is mandatory to specify the message type, since // MQTT 3 doesn't support message headers (aka user // properties) .AddInbound<SampleMessage>( endpoint => endpoint .ConsumeFrom(\"samples/basic\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) // Silently skip the messages in case of exception .OnError(policy => policy.Skip()))); } } } using Microsoft.Extensions.Logging; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.ConsumerV3 { public class SampleMessageSubscriber { private readonly ILogger<SampleMessageSubscriber> _logger; public SampleMessageSubscriber(ILogger<SampleMessageSubscriber> logger) { _logger = logger; } public void OnMessageReceived(SampleMessage message) => _logger.LogInformation($\"Received {message.Number}\"); } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.ConsumerV3"
  },
  "samples/mqtt/binaryfile-streaming.html": {
    "href": "samples/mqtt/binaryfile-streaming.html",
    "title": "MQTT - Files Streaming | Silverback",
    "keywords": "MQTT - Files Streaming This sample demonstrates how to deal with raw binary contents and large messages, to transfer some files through Mqtt. See also: Binary Files , Chunking Producer The producer exposes two REST API that receive the path of a local file to be streamed. The second API uses a custom BinaryFileMessage to forward further metadata (the file name in this example). Startup EndpointsConfigurator CustomBinaryFileMessage API Controller using Microsoft.AspNetCore.Builder; using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add API controllers and SwaggerGen services.AddControllers(); services.AddSwaggerGen(); } public void Configure(IApplicationBuilder app) { // Enable middlewares to serve generated Swagger JSON and UI app.UseSwagger().UseSwaggerUI( uiOptions => { uiOptions.SwaggerEndpoint( \"/swagger/v1/swagger.json\", $\"{GetType().Assembly.FullName} API\"); }); // Enable routing and endpoints for controllers app.UseRouting(); app.UseEndpoints(endpoints => { endpoints.MapControllers(); }); } } } using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Messaging.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.binary-file.producer\") .ConnectViaTcp(\"localhost\")) // Produce the binary files to the // samples-binary-file-streaming topic .AddOutbound<BinaryFileMessage>( endpoint => endpoint .ProduceTo(\"samples/binary-files\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce))); } } } using Silverback.Messaging.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Producer.Messages { public class CustomBinaryFileMessage : BinaryFileMessage { [Header(\"x-filename\")] public string? Filename { get; set; } } } using System.IO; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Silverback.Messaging.Messages; using Silverback.Messaging.Publishing; using Silverback.Samples.Mqtt.BinaryFileStreaming.Producer.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Producer.Controllers { [ApiController] [Route(\"[controller]\")] public class ProducerController : ControllerBase { private readonly IPublisher _publisher; public ProducerController(IPublisher publisher) { _publisher = publisher; } [HttpPost(\"binary-file\")] public async Task<IActionResult> ProduceBinaryFileAsync( string filePath, string? contentType) { // Open specified file stream using var fileStream = System.IO.File.OpenRead(filePath); // Create a BinaryFileMessage that wraps the file stream var binaryFileMessage = new BinaryFileMessage(fileStream); if (!string.IsNullOrEmpty(contentType)) binaryFileMessage.ContentType = contentType; // Publish the BinaryFileMessage that will be routed to the outbound // endpoint. The FileStream will be read and produced chunk by chunk, // without the entire file being loaded into memory. await _publisher.PublishAsync(binaryFileMessage); return NoContent(); } [HttpPost(\"custom-binary-file\")] public async Task<IActionResult> ProduceBinaryFileWithCustomHeadersAsync( string filePath, string? contentType) { // Open specified file stream using var fileStream = System.IO.File.OpenRead(filePath); // Create a CustomBinaryFileMessage that wraps the file stream. The // CustomBinaryFileMessage extends the BinaryFileMessage adding an extra // Filename property that is also exported as header. var binaryFileMessage = new CustomBinaryFileMessage { Content = fileStream, Filename = Path.GetFileName(filePath) }; if (!string.IsNullOrEmpty(contentType)) binaryFileMessage.ContentType = contentType; // Publish the BinaryFileMessage that will be routed to the outbound // endpoint. The FileStream will be read and produced chunk by chunk, // without the entire file being loaded into memory. await _publisher.PublishAsync(binaryFileMessage); return NoContent(); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/BinaryFileStreaming.Producer Consumer The consumer simply streams the file to a temporary folder in the local file system. Startup EndpointsConfigurator CustomBinaryFileMessage Subscriber using Microsoft.Extensions.DependencyInjection; using Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Subscribers; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<BinaryFileSubscriber>(); } public void Configure() { } } } using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.binary-file.consumer\") .ConnectViaTcp(\"localhost\")) // Consume the samples-binary-file-streaming topic .AddInbound( endpoint => endpoint .ConsumeFrom(\"samples/binary-files\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) // Force the consumer to use the // BinaryFileMessageSerializer: this is not strictly // necessary when the messages are produced by // Silverback but it increases the interoperability, // since it doesn't have to rely on the // 'x-message-type' header value to switch to the // BinaryFileMessageSerializer. // // In this example the BinaryFileMessageSerializer is // also set to return a CustomBinaryFileMessage // instead of the normal BinaryFileMessage. This is // only needed because we want to read the custom // 'x-message-filename' header, otherwise // 'ConsumeBinaryFiles()' would work perfectly fine // (returning a basic BinaryFileMessage, without the // extra properties). .ConsumeBinaryFiles( serializer => serializer .UseModel<CustomBinaryFileMessage>()) // Retry each chunks sequence 5 times in case of an // exception .OnError(policy => policy.Retry(5)))); } } } using Silverback.Messaging.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Messages { public class CustomBinaryFileMessage : BinaryFileMessage { [Header(\"x-filename\")] public string? Filename { get; set; } } } using System; using System.IO; using System.Threading.Tasks; using Microsoft.Extensions.Logging; using Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Subscribers { public class BinaryFileSubscriber { private const string OutputPath = \"../../temp\"; private readonly ILogger<BinaryFileSubscriber> _logger; public BinaryFileSubscriber(ILogger<BinaryFileSubscriber> logger) { _logger = logger; } public async Task OnBinaryFileMessageReceivedAsync( CustomBinaryFileMessage binaryFileMessage) { EnsureTargetFolderExists(); var filename = Guid.NewGuid().ToString(\"N\") + binaryFileMessage.Filename; _logger.LogInformation($\"Saving binary file as {filename}...\"); // Create a FileStream to save the file using var fileStream = File.OpenWrite(Path.Combine(OutputPath, filename)); if (binaryFileMessage.Content != null) { // Asynchronously copy the message content to the FileStream. // The message chunks are streamed directly and the entire file is // never loaded into memory. await binaryFileMessage.Content.CopyToAsync(fileStream); } _logger.LogInformation( $\"Written {fileStream.Length} bytes into {filename}.\"); } private static void EnsureTargetFolderExists() { if (!Directory.Exists(OutputPath)) Directory.CreateDirectory(OutputPath); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/BinaryFileStreaming.Consumer"
  },
  "samples/samples.html": {
    "href": "samples/samples.html",
    "title": "Samples | Silverback",
    "keywords": "Samples In this section you find a collection of working samples based on Silverback and implementing a wide range of different use cases. The full source code can be found in the GitHub repository under the /samples folder. A README.md in the root of the samples folder explains how to run each of the samples."
  }
}