{
  "about.html": {
    "href": "about.html",
    "title": "About | Silverback",
    "keywords": "About Author Silverback is an open-source project maintained by Sergio Aquilini (BEagle1984 on GitHub). GitHub LinkedIn Personal E-Mail Project E-Mail License The code is licensed under MIT license (see LICENSE file for details). Credits Silverback uses the following libraries under the hood: Rx.Net Json.NET Confluent's .NET Client for Apache Kafka MQTTNet RabbitMQ .NET Client Special Thanks A very big thank you to all the contributors and especially to my friends and colleagues: Fabio for the help with Kafka Laurent for constantly challenging, pushing and bringing new ideas and feedbacks Marc for his contributions and the valuable constant feedbacks and ideas"
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddBrokerExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddBrokerExtensions.html",
    "title": "Class BrokerOptionsBuilderAddBrokerExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddBrokerExtensions Adds the AddBroker method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddBrokerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddBrokerExtensions Methods | Improve this doc View source AddBroker<TBroker>(IBrokerOptionsBuilder) Adds the specified IBroker implementation to allow producing and consuming messages. Declaration public static IBrokerOptionsBuilder AddBroker<TBroker>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TBroker : class, IBroker Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TBroker The type of the IBroker implementation to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddInboundLogExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddInboundLogExtensions.html",
    "title": "Class BrokerOptionsBuilderAddInboundLogExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddInboundLogExtensions Adds the AddInboundLog and related methods to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddInboundLogExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddInboundLogExtensions Methods | Improve this doc View source AddInboundLog<TInboundLog>(IBrokerOptionsBuilder) Adds the necessary services to enable the LogExactlyOnceStrategy . The LogExactlyOnceStrategy stores uses an IInboundLog to keep track of to keep track of each processed message and guarantee that each one is processed only once. Declaration public static IBrokerOptionsBuilder AddInboundLog<TInboundLog>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TInboundLog : class, IInboundLog Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TInboundLog The type of the IInboundLog to be used. | Improve this doc View source AddInboundLogDatabaseTable(IBrokerOptionsBuilder) Adds the necessary services to enable the LogExactlyOnceStrategy using a database table as store. The LogExactlyOnceStrategy stores uses an IInboundLog to keep track of to keep track of each processed message and guarantee that each one is processed only once. Declaration public static IBrokerOptionsBuilder AddInboundLogDatabaseTable(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. | Improve this doc View source AddInMemoryInboundLog(IBrokerOptionsBuilder) Adds the necessary services to enable the LogExactlyOnceStrategy storing the messages identifiers in memory. The LogExactlyOnceStrategy stores uses an IInboundLog to keep track of to keep track of each processed message and guarantee that each one is processed only once. Declaration public static IBrokerOptionsBuilder AddInMemoryInboundLog(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddKafkaExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddKafkaExtensions.html",
    "title": "Class BrokerOptionsBuilderAddKafkaExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddKafkaExtensions Adds the AddKafka method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddKafkaExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.Kafka.dll Syntax public static class BrokerOptionsBuilderAddKafkaExtensions Methods | Improve this doc View source AddKafka(IBrokerOptionsBuilder) Registers Apache Kafka as message broker. Declaration public static IBrokerOptionsBuilder AddKafka(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddMockedKafkaExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddMockedKafkaExtensions.html",
    "title": "Class BrokerOptionsBuilderAddMockedKafkaExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddMockedKafkaExtensions Adds the AddMockedKafka method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddMockedKafkaExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public static class BrokerOptionsBuilderAddMockedKafkaExtensions Methods | Improve this doc View source AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) Registers Apache Kafka as message broker but replaces the Kafka connectivity based on Confluent.Kafka with a mocked in-memory message broker that more or less replicates the Kafka behavior. Declaration public static IBrokerOptionsBuilder AddMockedKafka(this IBrokerOptionsBuilder brokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder> optionsAction = null) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Action < IMockedKafkaOptionsBuilder > optionsAction Configures the mock options. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddMockedMqttExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddMockedMqttExtensions.html",
    "title": "Class BrokerOptionsBuilderAddMockedMqttExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddMockedMqttExtensions Adds the AddMockedMqtt method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddMockedMqttExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public static class BrokerOptionsBuilderAddMockedMqttExtensions Methods | Improve this doc View source AddMockedMqtt(IBrokerOptionsBuilder, Action<IMockedMqttOptionsBuilder>) Registers Apache Mqtt as message broker but replaces the MQTT connectivity based on MQTTnet with a mocked in-memory message broker that more or less replicates the MQTT broker behavior. Declaration public static IBrokerOptionsBuilder AddMockedMqtt(this IBrokerOptionsBuilder brokerOptionsBuilder, Action<IMockedMqttOptionsBuilder> optionsAction = null) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Action < IMockedMqttOptionsBuilder > optionsAction Configures the mock options. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddMqttExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddMqttExtensions.html",
    "title": "Class BrokerOptionsBuilderAddMqttExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddMqttExtensions Adds the AddMqtt method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddMqttExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.MQTT.dll Syntax public static class BrokerOptionsBuilderAddMqttExtensions Methods | Improve this doc View source AddMqtt(IBrokerOptionsBuilder) Registers Apache Mqtt as message broker. Declaration public static IBrokerOptionsBuilder AddMqtt(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOffsetStoreExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOffsetStoreExtensions.html",
    "title": "Class BrokerOptionsBuilderAddOffsetStoreExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddOffsetStoreExtensions Adds the AddOffsetStore and related methods to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddOffsetStoreExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddOffsetStoreExtensions Methods | Improve this doc View source AddInMemoryOffsetStore(IBrokerOptionsBuilder) Adds the necessary services to enable the OffsetStoreExactlyOnceStrategy storing the offsets in memory. The OffsetStoreExactlyOnceStrategy stores uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration public static IBrokerOptionsBuilder AddInMemoryOffsetStore(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. | Improve this doc View source AddOffsetStore<TOffsetStore>(IBrokerOptionsBuilder) Adds the necessary services to enable the OffsetStoreExactlyOnceStrategy . The OffsetStoreExactlyOnceStrategy stores uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration public static IBrokerOptionsBuilder AddOffsetStore<TOffsetStore>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TOffsetStore : class, IOffsetStore Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TOffsetStore The type of the IOffsetStore to be used. | Improve this doc View source AddOffsetStoreDatabaseTable(IBrokerOptionsBuilder) Adds the necessary services to enable the OffsetStoreExactlyOnceStrategy using a database table as store. The OffsetStoreExactlyOnceStrategy stores uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration public static IBrokerOptionsBuilder AddOffsetStoreDatabaseTable(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOutboxExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOutboxExtensions.html",
    "title": "Class BrokerOptionsBuilderAddOutboxExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddOutboxExtensions Adds the AddOutbox and related methods to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddOutboxExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddOutboxExtensions Methods | Improve this doc View source AddOutbox<TOutbox>(IBrokerOptionsBuilder) Adds the necessary services to enable the OutboxProduceStrategy . The OutboxProduceStrategy stores the outbound messages into an intermediate outbox, participating in the database transaction. The outbound messages become therefore transactional with the side effects on the local database. Declaration public static IBrokerOptionsBuilder AddOutbox<TOutbox>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TOutbox : class, IOutboxWriter, IOutboxReader Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TOutbox The type implementing both the IOutboxWriter and the IOutboxReader interfaces. | Improve this doc View source AddOutbox<TOutboxWriter, TOutboxReader>(IBrokerOptionsBuilder) Adds the necessary services to enable the OutboxProduceStrategy . The OutboxProduceStrategy stores the outbound messages into an intermediate outbox, participating in the database transaction. The outbound messages become therefore transactional with the side effects on the local database. Declaration public static IBrokerOptionsBuilder AddOutbox<TOutboxWriter, TOutboxReader>(this IBrokerOptionsBuilder brokerOptionsBuilder) where TOutboxWriter : class, IOutboxWriter where TOutboxReader : class, IOutboxReader Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained. Type Parameters Name Description TOutboxWriter The type of the IOutboxWriter to be used. TOutboxReader The type of the IOutboxReader to be used. | Improve this doc View source AddOutboxDatabaseTable(IBrokerOptionsBuilder) Adds the necessary services to enable the OutboxProduceStrategy using a database table as outbox. The OutboxProduceStrategy stores the outbound messages into an intermediate outbox, participating in the database transaction. The outbound messages become therefore transactional with the side effects on the local database. Declaration public static IBrokerOptionsBuilder AddOutboxDatabaseTable(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOutboxWorkerExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddOutboxWorkerExtensions.html",
    "title": "Class BrokerOptionsBuilderAddOutboxWorkerExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddOutboxWorkerExtensions Adds the AddOutboxWorker and related methods to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddOutboxWorkerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAddOutboxWorkerExtensions Methods | Improve this doc View source AddOutboxWorker(IBrokerOptionsBuilder, Nullable<TimeSpan>, Boolean, Int32, DistributedLockSettings) Adds an OutboxWorker to publish the messages stored in the outbox to the configured broker. Declaration public static IBrokerOptionsBuilder AddOutboxWorker(this IBrokerOptionsBuilder brokerOptionsBuilder, TimeSpan? interval = null, bool enforceMessageOrder = true, int batchSize = 1000, DistributedLockSettings distributedLockSettings = null) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Nullable < System.TimeSpan > interval The interval between each run. The default is 500ms. System.Boolean enforceMessageOrder If set to true the message order will be ensured, retrying the same message until it can be successfully produced. System.Int32 batchSize The number of messages to be loaded and processed at once. DistributedLockSettings distributedLockSettings The settings for the locking mechanism. The default settings will be used if not specified. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddRabbitExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAddRabbitExtensions.html",
    "title": "Class BrokerOptionsBuilderAddRabbitExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAddRabbitExtensions Adds the AddRabbit method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAddRabbitExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.RabbitMQ.dll Syntax public static class BrokerOptionsBuilderAddRabbitExtensions Methods | Improve this doc View source AddRabbit(IBrokerOptionsBuilder) Registers RabbitMQ as message broker. Declaration public static IBrokerOptionsBuilder AddRabbit(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAllowDuplicateEndpointsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderAllowDuplicateEndpointsExtensions.html",
    "title": "Class BrokerOptionsBuilderAllowDuplicateEndpointsExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderAllowDuplicateEndpointsExtensions Adds the AllowDuplicateEndpointRegistrations method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderAllowDuplicateEndpointsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderAllowDuplicateEndpointsExtensions Methods | Improve this doc View source AllowDuplicateEndpointRegistrations(IBrokerOptionsBuilder) Enables registration of duplicate endpoints. Declaration public static IBrokerOptionsBuilder AllowDuplicateEndpointRegistrations(this IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder . Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderWithConnectionOptionsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BrokerOptionsBuilderWithConnectionOptionsExtensions.html",
    "title": "Class BrokerOptionsBuilderWithConnectionOptionsExtensions | Silverback",
    "keywords": "Class BrokerOptionsBuilderWithConnectionOptionsExtensions Adds the WithConnectionOptions method to the IBrokerOptionsBuilder . Inheritance System.Object BrokerOptionsBuilderWithConnectionOptionsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class BrokerOptionsBuilderWithConnectionOptionsExtensions Methods | Improve this doc View source WithConnectionOptions(IBrokerOptionsBuilder, BrokerConnectionOptions) Specifies the BrokerConnectionOptions . Declaration public static IBrokerOptionsBuilder WithConnectionOptions(this IBrokerOptionsBuilder brokerOptionsBuilder, BrokerConnectionOptions connectionOptions) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. BrokerConnectionOptions connectionOptions The BrokerConnectionOptions to apply. Returns Type Description IBrokerOptionsBuilder The IBrokerOptionsBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.HealthCheckBuilderExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.HealthCheckBuilderExtensions.html",
    "title": "Class HealthCheckBuilderExtensions | Silverback",
    "keywords": "Class HealthCheckBuilderExtensions Adds methods such as AddOutboundEndpointsCheck and AddOutboundQueueCheck to the Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . Inheritance System.Object HealthCheckBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.HealthChecks.dll Syntax public static class HealthCheckBuilderExtensions Methods | Improve this doc View source AddConsumersCheck(IHealthChecksBuilder, ConsumerStatus, Nullable<TimeSpan>, Func<IConsumerEndpoint, Boolean>, String, Nullable<HealthStatus>, IEnumerable<String>) Adds a health check that verifies that all consumers are connected. Declaration public static IHealthChecksBuilder AddConsumersCheck(this IHealthChecksBuilder builder, ConsumerStatus minHealthyStatus = ConsumerStatus.Ready, TimeSpan? gracePeriod = null, Func<IConsumerEndpoint, bool> endpointsFilter = null, string name = \"Consumers\", HealthStatus? failureStatus = null, IEnumerable<string> tags = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . ConsumerStatus minHealthyStatus The minimum ConsumerStatus a consumer must have to be considered healthy. System.Nullable < System.TimeSpan > gracePeriod The grace period to observe after each status change before a consumer is considered unhealthy. System.Func < IConsumerEndpoint , System.Boolean > endpointsFilter An optional filter to be applied to the endpoints to be tested. System.String name The health check name. The default is \"Consumers\". System.Nullable < Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus > failureStatus The Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus that should be reported when the health check reports a failure. The default is Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy . System.Collections.Generic.IEnumerable < System.String > tags An optional list of tags that can be used for filtering health checks. Returns Type Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder so that additional calls can be chained. | Improve this doc View source AddOutboundEndpointsCheck(IHealthChecksBuilder, String, Nullable<HealthStatus>, IEnumerable<String>) Adds a health check that sends a ping message to all the outbound endpoints. Declaration public static IHealthChecksBuilder AddOutboundEndpointsCheck(this IHealthChecksBuilder builder, string name = \"OutboundEndpoints\", HealthStatus? failureStatus = null, IEnumerable<string> tags = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . System.String name The health check name. The default is \"OutboundEndpoints\". System.Nullable < Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus > failureStatus The Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus that should be reported when the health check reports a failure. The default is Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy . System.Collections.Generic.IEnumerable < System.String > tags An optional list of tags that can be used for filtering health checks. Returns Type Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder so that additional calls can be chained. | Improve this doc View source AddOutboxCheck(IHealthChecksBuilder, String, Nullable<HealthStatus>, IEnumerable<String>) Adds a health check that monitors the outbox, verifying that the messages are being processed. Declaration public static IHealthChecksBuilder AddOutboxCheck(this IHealthChecksBuilder builder, string name = \"OutboundQueue\", HealthStatus? failureStatus = null, IEnumerable<string> tags = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . System.String name The health check name. The default is \"OutboundQueue\". System.Nullable < Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus > failureStatus The Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus that should be reported when the health check reports a failure. The default is Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy . System.Collections.Generic.IEnumerable < System.String > tags An optional list of tags that can be used for filtering health checks. Returns Type Description Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder The Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Silverback",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes BrokerOptionsBuilderAddBrokerExtensions Adds the AddBroker method to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddInboundLogExtensions Adds the AddInboundLog and related methods to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddKafkaExtensions Adds the AddKafka method to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddMockedKafkaExtensions Adds the AddMockedKafka method to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddMockedMqttExtensions Adds the AddMockedMqtt method to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddMqttExtensions Adds the AddMqtt method to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddOffsetStoreExtensions Adds the AddOffsetStore and related methods to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddOutboxExtensions Adds the AddOutbox and related methods to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddOutboxWorkerExtensions Adds the AddOutboxWorker and related methods to the IBrokerOptionsBuilder . BrokerOptionsBuilderAddRabbitExtensions Adds the AddRabbit method to the IBrokerOptionsBuilder . BrokerOptionsBuilderAllowDuplicateEndpointsExtensions Adds the AllowDuplicateEndpointRegistrations method to the IBrokerOptionsBuilder . BrokerOptionsBuilderWithConnectionOptionsExtensions Adds the WithConnectionOptions method to the IBrokerOptionsBuilder . HealthCheckBuilderExtensions Adds methods such as AddOutboundEndpointsCheck and AddOutboundQueueCheck to the Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder . ServiceCollectionAddSilverbackExtensions Adds the AddSilverback method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . ServiceCollectionConfigureSilverbackExtensions Adds the ConfigureSilverback method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . ServiceCollectionUseMockedKafkaExtensions Adds the UseMockedKafka method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . ServiceCollectionUseMockedMqttExtensions Adds the UseMockedMqtt method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . SilverbackBuilderAddBehaviorExtensions Adds the AddTransientBehavior , AddScopedBehavior and AddSingletonBehavior methods to the ISilverbackBuilder . SilverbackBuilderAddBrokerBehaviorExtensions Adds the AddBrokerBehavior methods to the ISilverbackBuilder . SilverbackBuilderAddBrokerCallbackHandlerExtensions Adds the AddBrokerCallbackHandler methods to the ISilverbackBuilder . SilverbackBuilderAddDbDistributedLockManagerExtensions Adds the AddDbDistributedLockManager method to the ISilverbackBuilder . SilverbackBuilderAddDelegateSubscriberExtensions Adds the AddDelegateSubscriber methods to the ISilverbackBuilder . SilverbackBuilderAddEndpointsConfiguratorExtensions Adds the AddEndpointsConfigurator methods to the ISilverbackBuilder . SilverbackBuilderAddEndpointsExtensions Adds the AddEndpoints method to the ISilverbackBuilder . SilverbackBuilderAddIntegrationSpyExtensions Adds the AddIntegrationSpy and AddIntegrationSpyAndSubscriber methods to the ISilverbackBuilder . SilverbackBuilderAddKafkaEndpointsExtensions Adds the AddKafkaEndpoints method to the ISilverbackBuilder . SilverbackBuilderAddMqttEndpointsExtensions Adds the AddMqttEndpoints method to the ISilverbackBuilder . SilverbackBuilderAddOutboundRouterExtensions Adds the AddSingletonOutboundRouter method to the ISilverbackBuilder . SilverbackBuilderAddSequenceReaderExtensions Adds the AddSequenceReader methods to the ISilverbackBuilder . SilverbackBuilderAddSequenceWriterExtensions Adds the AddSequenceWriter methods to the ISilverbackBuilder . SilverbackBuilderAddSubscriberExtensions Adds the AddTransientSubscriber , AddScopedSubscriber and AddSingletonSubscriber methods to the ISilverbackBuilder . SilverbackBuilderAsObservableExtensions Adds the AsObservable method to the ISilverbackBuilder . SilverbackBuilderUseDbContextExtensions Contains the UseDbContext extension for the ISilverbackBuilder . SilverbackBuilderUseMockedKafkaExtensions Adds the UseMockedKafka method to the ISilverbackBuilder . SilverbackBuilderUseMockedMqttExtensions Adds the UseMockedMqtt method to the ISilverbackBuilder . SilverbackBuilderUseModelExtensions Adds the UseModel method to the ISilverbackBuilder . SilverbackBuilderWithConnectionToExtensions Adds the WithConnectionToMessageBroker method to the ISilverbackBuilder . SilverbackBuilderWithLogLevelsExtensions Adds the WithLogLevels method to the ISilverbackBuilder . Interfaces IBrokerOptionsBuilder Exposes the methods to configure the connection with the message broker(s) and add the needed services to the Microsoft.Extensions.DependencyInjection.IServiceCollection . IBrokerOptionsConfigurator<TBroker> The implementations of this class will be located via assembly scanning and invoked when a broker of the matching type TBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection .."
  },
  "api/Microsoft.Extensions.DependencyInjection.IBrokerOptionsBuilder.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.IBrokerOptionsBuilder.html",
    "title": "Interface IBrokerOptionsBuilder | Silverback",
    "keywords": "Interface IBrokerOptionsBuilder Exposes the methods to configure the connection with the message broker(s) and add the needed services to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public interface IBrokerOptionsBuilder Properties | Improve this doc View source SilverbackBuilder Gets the ISilverbackBuilder (that in turn references the Microsoft.Extensions.DependencyInjection.IServiceCollection ). Declaration ISilverbackBuilder SilverbackBuilder { get; } Property Value Type Description ISilverbackBuilder Extension Methods BrokerOptionsBuilderAddMockedMqttExtensions.AddMockedMqtt(IBrokerOptionsBuilder, Action<IMockedMqttOptionsBuilder>) BrokerOptionsBuilderAddRabbitExtensions.AddRabbit(IBrokerOptionsBuilder) BrokerOptionsBuilderAddMqttExtensions.AddMqtt(IBrokerOptionsBuilder) BrokerOptionsBuilderAddMockedKafkaExtensions.AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) BrokerOptionsBuilderAddKafkaExtensions.AddKafka(IBrokerOptionsBuilder) BrokerOptionsBuilderAddBrokerExtensions.AddBroker<TBroker>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddInboundLogExtensions.AddInboundLog<TInboundLog>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddInboundLogExtensions.AddInMemoryInboundLog(IBrokerOptionsBuilder) BrokerOptionsBuilderAddInboundLogExtensions.AddInboundLogDatabaseTable(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOffsetStoreExtensions.AddOffsetStore<TOffsetStore>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOffsetStoreExtensions.AddInMemoryOffsetStore(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOffsetStoreExtensions.AddOffsetStoreDatabaseTable(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOutboxExtensions.AddOutbox<TOutboxWriter, TOutboxReader>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOutboxExtensions.AddOutbox<TOutbox>(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOutboxExtensions.AddOutboxDatabaseTable(IBrokerOptionsBuilder) BrokerOptionsBuilderAddOutboxWorkerExtensions.AddOutboxWorker(IBrokerOptionsBuilder, Nullable<TimeSpan>, Boolean, Int32, DistributedLockSettings) BrokerOptionsBuilderAllowDuplicateEndpointsExtensions.AllowDuplicateEndpointRegistrations(IBrokerOptionsBuilder) BrokerOptionsBuilderWithConnectionOptionsExtensions.WithConnectionOptions(IBrokerOptionsBuilder, BrokerConnectionOptions)"
  },
  "api/Microsoft.Extensions.DependencyInjection.IBrokerOptionsConfigurator-1.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.IBrokerOptionsConfigurator-1.html",
    "title": "Interface IBrokerOptionsConfigurator<TBroker> | Silverback",
    "keywords": "Interface IBrokerOptionsConfigurator<TBroker> The implementations of this class will be located via assembly scanning and invoked when a broker of the matching type TBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection .. Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public interface IBrokerOptionsConfigurator<TBroker> where TBroker : IBroker Type Parameters Name Description TBroker The type of the IBroker implementation being configured. Methods | Improve this doc View source Configure(IBrokerOptionsBuilder) Called while registering the broker to configure the broker-specific services and options (e.g. behaviors). Declaration void Configure(IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionAddSilverbackExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionAddSilverbackExtensions.html",
    "title": "Class ServiceCollectionAddSilverbackExtensions | Silverback",
    "keywords": "Class ServiceCollectionAddSilverbackExtensions Adds the AddSilverback method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Inheritance System.Object ServiceCollectionAddSilverbackExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.dll Syntax public static class ServiceCollectionAddSilverbackExtensions Methods | Improve this doc View source AddSilverback(IServiceCollection) Adds the minimum essential Silverback services to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Additional services including broker support, inbound/outbound connectors and database bindings must be added separately using the returned ISilverbackBuilder . Declaration public static ISilverbackBuilder AddSilverback(this IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder to add the services necessary to enable the Silverback features."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionConfigureSilverbackExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionConfigureSilverbackExtensions.html",
    "title": "Class ServiceCollectionConfigureSilverbackExtensions | Silverback",
    "keywords": "Class ServiceCollectionConfigureSilverbackExtensions Adds the ConfigureSilverback method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Inheritance System.Object ServiceCollectionConfigureSilverbackExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.dll Syntax public static class ServiceCollectionConfigureSilverbackExtensions Methods | Improve this doc View source ConfigureSilverback(IServiceCollection) Returns an ISilverbackBuilder instance that can be used to configure the additional services. Declaration public static ISilverbackBuilder ConfigureSilverback(this IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder to add the services necessary to enable the Silverback features."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionUseMockedKafkaExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionUseMockedKafkaExtensions.html",
    "title": "Class ServiceCollectionUseMockedKafkaExtensions | Silverback",
    "keywords": "Class ServiceCollectionUseMockedKafkaExtensions Adds the UseMockedKafka method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Inheritance System.Object ServiceCollectionUseMockedKafkaExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public static class ServiceCollectionUseMockedKafkaExtensions Methods | Improve this doc View source UseMockedKafka(IServiceCollection, Action<IMockedKafkaOptionsBuilder>) Replaces the Kafka connectivity based on Confluent.Kafka with a mocked in-memory message broker that more or less replicates the Kafka behavior. Declaration public static IServiceCollection UseMockedKafka(this IServiceCollection services, Action<IMockedKafkaOptionsBuilder> optionsAction = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to add the service to. System.Action < IMockedKafkaOptionsBuilder > optionsAction Additional options (such as topics and partitions settings). Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The Microsoft.Extensions.DependencyInjection.IServiceCollection so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionUseMockedMqttExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ServiceCollectionUseMockedMqttExtensions.html",
    "title": "Class ServiceCollectionUseMockedMqttExtensions | Silverback",
    "keywords": "Class ServiceCollectionUseMockedMqttExtensions Adds the UseMockedMqtt method to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Inheritance System.Object ServiceCollectionUseMockedMqttExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public static class ServiceCollectionUseMockedMqttExtensions Methods | Improve this doc View source UseMockedMqtt(IServiceCollection) Replaces the MQTT connectivity based on MQTTnet with a mocked in-memory message broker that more or less replicates the MQTT broker behavior. Declaration public static IServiceCollection UseMockedMqtt(this IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The Microsoft.Extensions.DependencyInjection.IServiceCollection to add the service to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection The Microsoft.Extensions.DependencyInjection.IServiceCollection so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBehaviorExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBehaviorExtensions.html",
    "title": "Class SilverbackBuilderAddBehaviorExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddBehaviorExtensions Adds the AddTransientBehavior , AddScopedBehavior and AddSingletonBehavior methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddBehaviorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.dll Syntax public static class SilverbackBuilderAddBehaviorExtensions Methods | Improve this doc View source AddScopedBehavior(ISilverbackBuilder, Func<IServiceProvider, IBehavior>) Adds a scoped behavior with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedBehavior(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBehavior> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. System.Func < System.IServiceProvider , IBehavior > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedBehavior(ISilverbackBuilder, Type) Adds a scoped behavior of the type specified in behaviorType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedBehavior(this ISilverbackBuilder silverbackBuilder, Type behaviorType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. System.Type behaviorType The type of the behavior to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedBehavior<TBehavior>(ISilverbackBuilder) Adds a scoped behavior of the type specified in TBehavior to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedBehavior<TBehavior>(this ISilverbackBuilder silverbackBuilder) where TBehavior : class, IBehavior Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TBehavior The type of the behavior to add. | Improve this doc View source AddSingletonBehavior(ISilverbackBuilder, IBehavior) Adds a singleton behavior with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBehavior(this ISilverbackBuilder silverbackBuilder, IBehavior implementationInstance) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. IBehavior implementationInstance The instance of the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBehavior(ISilverbackBuilder, Func<IServiceProvider, IBehavior>) Adds a singleton behavior with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBehavior(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBehavior> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. System.Func < System.IServiceProvider , IBehavior > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBehavior(ISilverbackBuilder, Type) Adds a singleton behavior of the type specified in behaviorType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBehavior(this ISilverbackBuilder silverbackBuilder, Type behaviorType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. System.Type behaviorType The type of the behavior to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBehavior<TBehavior>(ISilverbackBuilder) Adds a singleton behavior of the type specified in TBehavior to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBehavior<TBehavior>(this ISilverbackBuilder silverbackBuilder) where TBehavior : class, IBehavior Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TBehavior The type of the behavior to add. | Improve this doc View source AddTransientBehavior(ISilverbackBuilder, Func<IServiceProvider, IBehavior>) Adds a scoped behavior with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBehavior(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBehavior> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. System.Func < System.IServiceProvider , IBehavior > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBehavior(ISilverbackBuilder, Type) Adds a scoped behavior of the type specified in behaviorType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBehavior(this ISilverbackBuilder silverbackBuilder, Type behaviorType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. System.Type behaviorType The type of the behavior to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBehavior<TBehavior>(ISilverbackBuilder) Adds a scoped behavior of the type specified in TBehavior to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBehavior<TBehavior>(this ISilverbackBuilder silverbackBuilder) where TBehavior : class, IBehavior Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the behavior to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TBehavior The type of the behavior to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBrokerBehaviorExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBrokerBehaviorExtensions.html",
    "title": "Class SilverbackBuilderAddBrokerBehaviorExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddBrokerBehaviorExtensions Adds the AddBrokerBehavior methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddBrokerBehaviorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddBrokerBehaviorExtensions Methods | Improve this doc View source AddSingletonBrokerBehavior(ISilverbackBuilder, IBrokerBehavior) Adds a singleton behavior with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerBehavior(this ISilverbackBuilder silverbackBuilder, IBrokerBehavior implementationInstance) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. IBrokerBehavior implementationInstance The instance of the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerBehavior(ISilverbackBuilder, Func<IServiceProvider, IBrokerBehavior>) Adds a singleton behavior with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerBehavior(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerBehavior> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IBrokerBehavior > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerBehavior(ISilverbackBuilder, Type) Adds a singleton behavior of the type specified in behaviorType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerBehavior(this ISilverbackBuilder silverbackBuilder, Type behaviorType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type behaviorType The type of the behavior to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerBehavior<TBehavior>(ISilverbackBuilder) Adds a singleton behavior of the type specified in TBehavior to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerBehavior<TBehavior>(this ISilverbackBuilder silverbackBuilder) where TBehavior : class, IBrokerBehavior Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TBehavior The type of the behavior to add. | Improve this doc View source AddTransientBrokerBehavior(ISilverbackBuilder, Func<IServiceProvider, IBrokerBehavior>) Adds a transient behavior with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerBehavior(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerBehavior> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IBrokerBehavior > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBrokerBehavior(ISilverbackBuilder, Type) Adds a transient behavior of the type specified in behaviorType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerBehavior(this ISilverbackBuilder silverbackBuilder, Type behaviorType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type behaviorType The type of the behavior to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBrokerBehavior<TBehavior>(ISilverbackBuilder) Adds a transient behavior of the type specified in TBehavior to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerBehavior<TBehavior>(this ISilverbackBuilder silverbackBuilder) where TBehavior : class, IBrokerBehavior Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TBehavior The type of the behavior to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBrokerCallbackHandlerExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddBrokerCallbackHandlerExtensions.html",
    "title": "Class SilverbackBuilderAddBrokerCallbackHandlerExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddBrokerCallbackHandlerExtensions Adds the AddBrokerCallbackHandler methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddBrokerCallbackHandlerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddBrokerCallbackHandlerExtensions Methods | Improve this doc View source AddScopedBrokerCallbackHandler(ISilverbackBuilder, Func<IServiceProvider, IBrokerCallback>) Adds a scoped callback with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerCallback> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Func < System.IServiceProvider , IBrokerCallback > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedBrokerCallbackHandler(ISilverbackBuilder, Type) Adds a scoped callback of the type specified in handlerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Type handlerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Type handlerType The type of the handler to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedBrokerCallbackHandler<THandler>(ISilverbackBuilder) Adds a scoped callback of the type specified in THandler to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedBrokerCallbackHandler<THandler>(this ISilverbackBuilder silverbackBuilder) where THandler : class, IBrokerCallback Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description THandler The type of the handler to add. | Improve this doc View source AddSingletonBrokerCallbackHandler(ISilverbackBuilder, IBrokerCallback) Adds a singleton callback with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, IBrokerCallback implementationInstance) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. IBrokerCallback implementationInstance The instance of the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerCallbackHandler(ISilverbackBuilder, Func<IServiceProvider, IBrokerCallback>) Adds a singleton callback with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerCallback> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Func < System.IServiceProvider , IBrokerCallback > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerCallbackHandler(ISilverbackBuilder, Type) Adds a singleton callback of the type specified in handlerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Type handlerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Type handlerType The type of the handler to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonBrokerCallbackHandler<THandler>(ISilverbackBuilder) Adds a singleton callback of the type specified in THandler to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonBrokerCallbackHandler<THandler>(this ISilverbackBuilder silverbackBuilder) where THandler : class, IBrokerCallback Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description THandler The type of the handler to add. | Improve this doc View source AddTransientBrokerCallbackHandler(ISilverbackBuilder, Func<IServiceProvider, IBrokerCallback>) Adds a transient callback with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IBrokerCallback> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Func < System.IServiceProvider , IBrokerCallback > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBrokerCallbackHandler(ISilverbackBuilder, Type) Adds a transient callback of the type specified in handlerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerCallbackHandler(this ISilverbackBuilder silverbackBuilder, Type handlerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. System.Type handlerType The type of the handler to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientBrokerCallbackHandler<THandler>(ISilverbackBuilder) Adds a transient callback of the type specified in THandler to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientBrokerCallbackHandler<THandler>(this ISilverbackBuilder silverbackBuilder) where THandler : class, IBrokerCallback Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the handler to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description THandler The type of the handler to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddDbDistributedLockManagerExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddDbDistributedLockManagerExtensions.html",
    "title": "Class SilverbackBuilderAddDbDistributedLockManagerExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddDbDistributedLockManagerExtensions Adds the AddDbDistributedLockManager method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddDbDistributedLockManagerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.dll Syntax public static class SilverbackBuilderAddDbDistributedLockManagerExtensions Methods | Improve this doc View source AddDbDistributedLockManager(ISilverbackBuilder) Adds the IDistributedLockManager implementation and uses the specified DbContext to handle the distributed locks. Declaration public static ISilverbackBuilder AddDbDistributedLockManager(this ISilverbackBuilder builder) Parameters Type Name Description ISilverbackBuilder builder The ISilverbackBuilder to add the model types to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddDelegateSubscriberExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddDelegateSubscriberExtensions.html",
    "title": "Class SilverbackBuilderAddDelegateSubscriberExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddDelegateSubscriberExtensions Adds the AddDelegateSubscriber methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddDelegateSubscriberExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.dll Syntax public static class SilverbackBuilderAddDelegateSubscriberExtensions Methods | Improve this doc View source AddDelegateSubscriber(ISilverbackBuilder, Delegate, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber(this ISilverbackBuilder silverbackBuilder, Delegate handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Delegate handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Action<TMessage, IServiceProvider>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Action<TMessage, IServiceProvider> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Action <TMessage, System.IServiceProvider > handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Action<TMessage>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Action<TMessage> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Action <TMessage> handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Action<IEnumerable<TMessage>, IServiceProvider>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Action<IEnumerable<TMessage>, IServiceProvider> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Action < System.Collections.Generic.IEnumerable <TMessage>, System.IServiceProvider > handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Action<IEnumerable<TMessage>>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Action<IEnumerable<TMessage>> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Action < System.Collections.Generic.IEnumerable <TMessage>> handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, IServiceProvider, Object>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Func<TMessage, IServiceProvider, object> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Func <TMessage, System.IServiceProvider , System.Object > handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, IServiceProvider, Task>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Func<TMessage, IServiceProvider, Task> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Func <TMessage, System.IServiceProvider , System.Threading.Tasks.Task > handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, Object>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Func<TMessage, object> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Func <TMessage, System.Object > handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, Task<Object>>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Func<TMessage, Task<object>> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Func <TMessage, System.Threading.Tasks.Task < System.Object >> handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, Task>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Func<TMessage, Task> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Func <TMessage, System.Threading.Tasks.Task > handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<IEnumerable<TMessage>, IServiceProvider, Object>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Func<IEnumerable<TMessage>, IServiceProvider, object> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Func < System.Collections.Generic.IEnumerable <TMessage>, System.IServiceProvider , System.Object > handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<IEnumerable<TMessage>, Object>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Func<IEnumerable<TMessage>, object> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Func < System.Collections.Generic.IEnumerable <TMessage>, System.Object > handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<IEnumerable<TMessage>, Task<Object>>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Func<IEnumerable<TMessage>, Task<object>> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Func < System.Collections.Generic.IEnumerable <TMessage>, System.Threading.Tasks.Task < System.Object >> handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled. | Improve this doc View source AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<IEnumerable<TMessage>, Task>, SubscriptionOptions) Subscribes the specified delegate to the messages being published into the bus. Declaration public static ISilverbackBuilder AddDelegateSubscriber<TMessage>(this ISilverbackBuilder silverbackBuilder, Func<IEnumerable<TMessage>, Task> handler, SubscriptionOptions options = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Func < System.Collections.Generic.IEnumerable <TMessage>, System.Threading.Tasks.Task > handler The message handler delegate. SubscriptionOptions options The SubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be handled."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddEndpointsConfiguratorExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddEndpointsConfiguratorExtensions.html",
    "title": "Class SilverbackBuilderAddEndpointsConfiguratorExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddEndpointsConfiguratorExtensions Adds the AddEndpointsConfigurator methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddEndpointsConfiguratorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddEndpointsConfiguratorExtensions Methods | Improve this doc View source AddEndpointsConfigurator(ISilverbackBuilder, Func<IServiceProvider, IEndpointsConfigurator>) Adds an IEndpointsConfigurator to be used to setup the broker endpoints. Declaration public static ISilverbackBuilder AddEndpointsConfigurator(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IEndpointsConfigurator> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IEndpointsConfigurator > implementationFactory The factory that creates the IEndpointsConfigurator to add. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddEndpointsConfigurator(ISilverbackBuilder, Type) Adds an IEndpointsConfigurator to be used to setup the broker endpoints. Declaration public static ISilverbackBuilder AddEndpointsConfigurator(this ISilverbackBuilder silverbackBuilder, Type configuratorType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type configuratorType The type of the IEndpointsConfigurator to add. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddEndpointsConfigurator<TConfigurator>(ISilverbackBuilder) Adds an IEndpointsConfigurator to be used to setup the broker endpoints. Declaration public static ISilverbackBuilder AddEndpointsConfigurator<TConfigurator>(this ISilverbackBuilder silverbackBuilder) where TConfigurator : class, IEndpointsConfigurator Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TConfigurator The type of the IEndpointsConfigurator to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddEndpointsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddEndpointsExtensions.html",
    "title": "Class SilverbackBuilderAddEndpointsExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddEndpointsExtensions Adds the AddEndpoints method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddEndpointsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddEndpointsExtensions Methods | Improve this doc View source AddEndpoints(ISilverbackBuilder, Action<IEndpointsConfigurationBuilder>) Adds the broker endpoints. Declaration public static ISilverbackBuilder AddEndpoints(this ISilverbackBuilder silverbackBuilder, Action<IEndpointsConfigurationBuilder> configureAction) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Action < IEndpointsConfigurationBuilder > configureAction An System.Action<T> that takes the IEndpointsConfigurationBuilder and adds the outbound and inbound endpoints. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddIntegrationSpyExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddIntegrationSpyExtensions.html",
    "title": "Class SilverbackBuilderAddIntegrationSpyExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddIntegrationSpyExtensions Adds the AddIntegrationSpy and AddIntegrationSpyAndSubscriber methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddIntegrationSpyExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.Testing.dll Syntax public static class SilverbackBuilderAddIntegrationSpyExtensions Methods | Improve this doc View source AddIntegrationSpy(ISilverbackBuilder, Boolean) Adds the IIntegrationSpy and its support services to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddIntegrationSpy(this ISilverbackBuilder silverbackBuilder, bool attachSubscriber = false) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Boolean attachSubscriber Specifies whether a generic subscriber ( InboundSpySubscriber must be used to monitor the inbound messages instead of a behavior ( InboundSpyBrokerBehavior ). Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddIntegrationSpyAndSubscriber(ISilverbackBuilder) Adds the IIntegrationSpy and its support services to the Microsoft.Extensions.DependencyInjection.IServiceCollection and uses a generic subscriber to monitor the incoming messages. This is the same as calling AddIntegrationSpy(ISilverbackBuilder, Boolean) with the attachSubscriber parameter set to true . Declaration public static ISilverbackBuilder AddIntegrationSpyAndSubscriber(this ISilverbackBuilder silverbackBuilder) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddKafkaEndpointsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddKafkaEndpointsExtensions.html",
    "title": "Class SilverbackBuilderAddKafkaEndpointsExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddKafkaEndpointsExtensions Adds the AddKafkaEndpoints method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddKafkaEndpointsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.Kafka.dll Syntax public static class SilverbackBuilderAddKafkaEndpointsExtensions Methods | Improve this doc View source AddKafkaEndpoints(ISilverbackBuilder, Action<IKafkaEndpointsConfigurationBuilder>) Adds the Kafka endpoints. Declaration public static ISilverbackBuilder AddKafkaEndpoints(this ISilverbackBuilder silverbackBuilder, Action<IKafkaEndpointsConfigurationBuilder> configureAction) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Action < IKafkaEndpointsConfigurationBuilder > configureAction An System.Action<T> that takes the IKafkaEndpointsConfigurationBuilder and adds the outbound and inbound endpoints. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddMqttEndpointsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddMqttEndpointsExtensions.html",
    "title": "Class SilverbackBuilderAddMqttEndpointsExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddMqttEndpointsExtensions Adds the AddMqttEndpoints method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddMqttEndpointsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.MQTT.dll Syntax public static class SilverbackBuilderAddMqttEndpointsExtensions Methods | Improve this doc View source AddMqttEndpoints(ISilverbackBuilder, Action<IMqttEndpointsConfigurationBuilder>) Adds an IEndpointsConfigurator to be used to setup the broker endpoints. Declaration public static ISilverbackBuilder AddMqttEndpoints(this ISilverbackBuilder silverbackBuilder, Action<IMqttEndpointsConfigurationBuilder> configureAction) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Action < IMqttEndpointsConfigurationBuilder > configureAction An System.Action<T> that takes the IMqttEndpointsConfigurationBuilder and adds the outbound and inbound endpoints. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddOutboundRouterExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddOutboundRouterExtensions.html",
    "title": "Class SilverbackBuilderAddOutboundRouterExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddOutboundRouterExtensions Adds the AddSingletonOutboundRouter method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddOutboundRouterExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddOutboundRouterExtensions Methods | Improve this doc View source AddScopedOutboundRouter(ISilverbackBuilder, Func<IServiceProvider, IOutboundRouter>) Adds a scoped outbound router with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedOutboundRouter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IOutboundRouter> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IOutboundRouter > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedOutboundRouter(ISilverbackBuilder, Type) Adds a scoped outbound router of the type specified in routerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedOutboundRouter(this ISilverbackBuilder silverbackBuilder, Type routerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type routerType The type of the outbound router to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedOutboundRouter<TRouter>(ISilverbackBuilder) Adds a scoped outbound router of the type specified in TRouter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedOutboundRouter<TRouter>(this ISilverbackBuilder silverbackBuilder) where TRouter : class, IOutboundRouter Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TRouter The type of the outbound router to add. | Improve this doc View source AddSingletonOutboundRouter(ISilverbackBuilder, IOutboundRouter) Adds a singleton outbound router with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonOutboundRouter(this ISilverbackBuilder silverbackBuilder, IOutboundRouter implementationInstance) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. IOutboundRouter implementationInstance The instance of the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonOutboundRouter(ISilverbackBuilder, Func<IServiceProvider, IOutboundRouter>) Adds a singleton outbound router with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonOutboundRouter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IOutboundRouter> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IOutboundRouter > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonOutboundRouter(ISilverbackBuilder, Type) Adds a singleton outbound router of the type specified in routerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonOutboundRouter(this ISilverbackBuilder silverbackBuilder, Type routerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type routerType The type of the outbound router to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonOutboundRouter<TRouter>(ISilverbackBuilder) Adds a singleton outbound router of the type specified in TRouter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonOutboundRouter<TRouter>(this ISilverbackBuilder silverbackBuilder) where TRouter : class, IOutboundRouter Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TRouter The type of the outbound router to add. | Improve this doc View source AddTransientOutboundRouter(ISilverbackBuilder, Func<IServiceProvider, IOutboundRouter>) Adds a transient outbound router with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientOutboundRouter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, IOutboundRouter> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , IOutboundRouter > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientOutboundRouter(ISilverbackBuilder, Type) Adds a transient outbound router of the type specified in routerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientOutboundRouter(this ISilverbackBuilder silverbackBuilder, Type routerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type routerType The type of the outbound router to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientOutboundRouter<TRouter>(ISilverbackBuilder) Adds a transient outbound router of the type specified in TRouter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientOutboundRouter<TRouter>(this ISilverbackBuilder silverbackBuilder) where TRouter : class, IOutboundRouter Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TRouter The type of the outbound router to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSequenceReaderExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSequenceReaderExtensions.html",
    "title": "Class SilverbackBuilderAddSequenceReaderExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddSequenceReaderExtensions Adds the AddSequenceReader methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddSequenceReaderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddSequenceReaderExtensions Methods | Improve this doc View source AddSingletonSequenceReader(ISilverbackBuilder, ISequenceReader) Adds a singleton sequence reader with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceReader(this ISilverbackBuilder silverbackBuilder, ISequenceReader implementationInstance) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. ISequenceReader implementationInstance The instance of the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceReader(ISilverbackBuilder, Func<IServiceProvider, ISequenceReader>) Adds a singleton sequence reader with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceReader(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, ISequenceReader> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , ISequenceReader > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceReader(ISilverbackBuilder, Type) Adds a singleton sequence reader of the type specified in readerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceReader(this ISilverbackBuilder silverbackBuilder, Type readerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type readerType The type of the reader to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceReader<TReader>(ISilverbackBuilder) Adds a singleton sequence reader of the type specified in TReader to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceReader<TReader>(this ISilverbackBuilder silverbackBuilder) where TReader : class, ISequenceReader Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TReader The type of the reader to add. | Improve this doc View source AddTransientSequenceReader(ISilverbackBuilder, Func<IServiceProvider, ISequenceReader>) Adds a transient sequence reader with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceReader(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, ISequenceReader> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , ISequenceReader > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSequenceReader(ISilverbackBuilder, Type) Adds a transient sequence reader of the type specified in readerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceReader(this ISilverbackBuilder silverbackBuilder, Type readerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type readerType The type of the reader to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSequenceReader<TReader>(ISilverbackBuilder) Adds a transient sequence reader of the type specified in TReader to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceReader<TReader>(this ISilverbackBuilder silverbackBuilder) where TReader : class, ISequenceReader Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TReader The type of the reader to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSequenceWriterExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSequenceWriterExtensions.html",
    "title": "Class SilverbackBuilderAddSequenceWriterExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddSequenceWriterExtensions Adds the AddSequenceWriter methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddSequenceWriterExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderAddSequenceWriterExtensions Methods | Improve this doc View source AddSingletonSequenceWriter(ISilverbackBuilder, ISequenceWriter) Adds a singleton sequence writer with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceWriter(this ISilverbackBuilder silverbackBuilder, ISequenceWriter implementationInstance) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. ISequenceWriter implementationInstance The instance of the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceWriter(ISilverbackBuilder, Func<IServiceProvider, ISequenceWriter>) Adds a singleton sequence writer with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceWriter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, ISequenceWriter> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , ISequenceWriter > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceWriter(ISilverbackBuilder, Type) Adds a singleton sequence writer of the type specified in writerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceWriter(this ISilverbackBuilder silverbackBuilder, Type writerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type writerType The type of the writer to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSequenceWriter<TWriter>(ISilverbackBuilder) Adds a singleton sequence writer of the type specified in TWriter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSequenceWriter<TWriter>(this ISilverbackBuilder silverbackBuilder) where TWriter : class, ISequenceWriter Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TWriter The type of the writer to add. | Improve this doc View source AddTransientSequenceWriter(ISilverbackBuilder, Func<IServiceProvider, ISequenceWriter>) Adds a transient sequence writer with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceWriter(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, ISequenceWriter> implementationFactory) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Func < System.IServiceProvider , ISequenceWriter > implementationFactory The factory that creates the service. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSequenceWriter(ISilverbackBuilder, Type) Adds a transient sequence writer of the type specified in writerType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceWriter(this ISilverbackBuilder silverbackBuilder, Type writerType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Type writerType The type of the writer to register and the implementation to use. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSequenceWriter<TWriter>(ISilverbackBuilder) Adds a transient sequence writer of the type specified in TWriter to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSequenceWriter<TWriter>(this ISilverbackBuilder silverbackBuilder) where TWriter : class, ISequenceWriter Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TWriter The type of the writer to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSubscriberExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAddSubscriberExtensions.html",
    "title": "Class SilverbackBuilderAddSubscriberExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAddSubscriberExtensions Adds the AddTransientSubscriber , AddScopedSubscriber and AddSingletonSubscriber methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAddSubscriberExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.dll Syntax public static class SilverbackBuilderAddSubscriberExtensions Methods | Improve this doc View source AddScopedSubscriber(ISilverbackBuilder, Type, TypeSubscriptionOptions) Adds a scoped subscriber of the type specified in subscriberType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, TypeSubscriptionOptions options) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register and the implementation to use. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedSubscriber(ISilverbackBuilder, Type, Boolean) Adds a scoped subscriber of the type specified in subscriberType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, bool autoSubscribeAllPublicMethods = true) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register and the implementation to use. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, TypeSubscriptionOptions) Adds a scoped subscriber of the type specified in subscriberType with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, Func<IServiceProvider, object> implementationFactory, TypeSubscriptionOptions options) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register. System.Func < System.IServiceProvider , System.Object > implementationFactory The factory that creates the service. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, Boolean) Adds a scoped subscriber of the type specified in subscriberType with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, Func<IServiceProvider, object> implementationFactory, bool autoSubscribeAllPublicMethods = true) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register. System.Func < System.IServiceProvider , System.Object > implementationFactory The factory that creates the service. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddScopedSubscriber<TSubscriber>(ISilverbackBuilder, TypeSubscriptionOptions) Adds a scoped subscriber of the type specified in TSubscriber to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, TypeSubscriptionOptions options) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddScopedSubscriber<TSubscriber>(ISilverbackBuilder, Boolean) Adds a scoped subscriber of the type specified in TSubscriber to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, bool autoSubscribeAllPublicMethods = true) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddScopedSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, TypeSubscriptionOptions) Adds a scoped subscriber of the type specified in TSubscriber with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, TSubscriber> implementationFactory, TypeSubscriptionOptions options) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Func < System.IServiceProvider , TSubscriber> implementationFactory The factory that creates the service. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddScopedSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, Boolean) Adds a scoped subscriber of the type specified in TSubscriber with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddScopedSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, TSubscriber> implementationFactory, bool autoSubscribeAllPublicMethods = true) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Func < System.IServiceProvider , TSubscriber> implementationFactory The factory that creates the service. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddSingletonSubscriber(ISilverbackBuilder, Type, TypeSubscriptionOptions) Adds a singleton subscriber of the type specified in subscriberType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, TypeSubscriptionOptions options) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register and the implementation to use. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSubscriber(ISilverbackBuilder, Type, Boolean) Adds a singleton subscriber of the type specified in subscriberType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, bool autoSubscribeAllPublicMethods = true) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register and the implementation to use. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, TypeSubscriptionOptions) Adds a singleton subscriber of the type specified in subscriberType with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, Func<IServiceProvider, object> implementationFactory, TypeSubscriptionOptions options) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register. System.Func < System.IServiceProvider , System.Object > implementationFactory The factory that creates the service. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, Boolean) Adds a singleton subscriber of the type specified in subscriberType with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, Func<IServiceProvider, object> implementationFactory, bool autoSubscribeAllPublicMethods = true) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register. System.Func < System.IServiceProvider , System.Object > implementationFactory The factory that creates the service. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSubscriber(ISilverbackBuilder, Type, Object, TypeSubscriptionOptions) Adds a singleton subscriber of the type specified in subscriberType with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, object implementationInstance, TypeSubscriptionOptions options) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register. System.Object implementationInstance The instance of the service. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSubscriber(ISilverbackBuilder, Type, Object, Boolean) Adds a singleton subscriber of the type specified in subscriberType with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, object implementationInstance, bool autoSubscribeAllPublicMethods = true) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register. System.Object implementationInstance The instance of the service. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, TSubscriber, TypeSubscriptionOptions) Adds a singleton subscriber of the type specified in TSubscriber with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, TSubscriber implementationInstance, TypeSubscriptionOptions options) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. TSubscriber implementationInstance The instance of the service. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to register. | Improve this doc View source AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, TSubscriber, Boolean) Adds a singleton subscriber of the type specified in TSubscriber with an instance specified in implementationInstance to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, TSubscriber implementationInstance, bool autoSubscribeAllPublicMethods = true) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. TSubscriber implementationInstance The instance of the service. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to register. | Improve this doc View source AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, TypeSubscriptionOptions) Adds a singleton subscriber of the type specified in TSubscriber to this ISilverbackBuilder . Declaration public static ISilverbackBuilder AddSingletonSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, TypeSubscriptionOptions options) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, Boolean) Adds a singleton subscriber of the type specified in TSubscriber to this ISilverbackBuilder . Declaration public static ISilverbackBuilder AddSingletonSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, bool autoSubscribeAllPublicMethods = true) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, TypeSubscriptionOptions) Adds a singleton subscriber of the type specified in TSubscriber with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, TSubscriber> implementationFactory, TypeSubscriptionOptions options) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Func < System.IServiceProvider , TSubscriber> implementationFactory The factory that creates the service. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, Boolean) Adds a singleton subscriber of the type specified in TSubscriber with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddSingletonSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, TSubscriber> implementationFactory, bool autoSubscribeAllPublicMethods = true) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Func < System.IServiceProvider , TSubscriber> implementationFactory The factory that creates the service. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddSubscribers<TSubscriber>(ISilverbackBuilder, TypeSubscriptionOptions) Registers the base type to be resolved as subscriber. The actual types have to be added to the Microsoft.Extensions.DependencyInjection.IServiceCollection separately. Declaration public static ISilverbackBuilder AddSubscribers<TSubscriber>(this ISilverbackBuilder silverbackBuilder, TypeSubscriptionOptions options) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The base type of the subscribers (class or interface). Remarks The subscribers will have to be registered twice (with the base type and the type itself: .AddScoped<BaseType, Subscriber>.AddScoped<Subscriber> ). | Improve this doc View source AddSubscribers<TSubscriber>(ISilverbackBuilder, Boolean) Registers the base type to be resolved as subscriber. The actual types have to be added to the Microsoft.Extensions.DependencyInjection.IServiceCollection separately. Declaration public static ISilverbackBuilder AddSubscribers<TSubscriber>(this ISilverbackBuilder silverbackBuilder, bool autoSubscribeAllPublicMethods = true) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The base type of the subscribers (class or interface). Remarks The subscribers will have to be registered twice (with the base type and the type itself: .AddScoped<BaseType, Subscriber>.AddScoped<Subscriber> ). | Improve this doc View source AddTransientSubscriber(ISilverbackBuilder, Type, TypeSubscriptionOptions) Adds a scoped subscriber of the type specified in subscriberType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, TypeSubscriptionOptions options) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register and the implementation to use. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSubscriber(ISilverbackBuilder, Type, Boolean) Adds a scoped subscriber of the type specified in subscriberType to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, bool autoSubscribeAllPublicMethods = true) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register and the implementation to use. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, TypeSubscriptionOptions) Adds a scoped subscriber of the type specified in subscriberType with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, Func<IServiceProvider, object> implementationFactory, TypeSubscriptionOptions options) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register. System.Func < System.IServiceProvider , System.Object > implementationFactory The factory that creates the service. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, Boolean) Adds a scoped subscriber of the type specified in subscriberType with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSubscriber(this ISilverbackBuilder silverbackBuilder, Type subscriberType, Func<IServiceProvider, object> implementationFactory, bool autoSubscribeAllPublicMethods = true) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Type subscriberType The type of the subscriber to register. System.Func < System.IServiceProvider , System.Object > implementationFactory The factory that creates the service. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source AddTransientSubscriber<TSubscriber>(ISilverbackBuilder, TypeSubscriptionOptions) Adds a scoped subscriber of the type specified in TSubscriber to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, TypeSubscriptionOptions options) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddTransientSubscriber<TSubscriber>(ISilverbackBuilder, Boolean) Adds a scoped subscriber of the type specified in TSubscriber to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, bool autoSubscribeAllPublicMethods = true) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddTransientSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, TypeSubscriptionOptions) Adds a scoped subscriber of the type specified in TSubscriber with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, TSubscriber> implementationFactory, TypeSubscriptionOptions options) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Func < System.IServiceProvider , TSubscriber> implementationFactory The factory that creates the service. TypeSubscriptionOptions options The TypeSubscriptionOptions . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add. | Improve this doc View source AddTransientSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, Boolean) Adds a scoped subscriber of the type specified in TSubscriber with a factory specified in implementationFactory to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static ISilverbackBuilder AddTransientSubscriber<TSubscriber>(this ISilverbackBuilder silverbackBuilder, Func<IServiceProvider, TSubscriber> implementationFactory, bool autoSubscribeAllPublicMethods = true) where TSubscriber : class Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the subscriber to. System.Func < System.IServiceProvider , TSubscriber> implementationFactory The factory that creates the service. System.Boolean autoSubscribeAllPublicMethods A boolean value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TSubscriber The type of the subscriber to add."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAsObservableExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderAsObservableExtensions.html",
    "title": "Class SilverbackBuilderAsObservableExtensions | Silverback",
    "keywords": "Class SilverbackBuilderAsObservableExtensions Adds the AsObservable method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderAsObservableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.Rx.dll Syntax public static class SilverbackBuilderAsObservableExtensions Methods | Improve this doc View source AsObservable(ISilverbackBuilder) Allows the subscribers to receive an System.IObservable<T> or an IMessageStreamObservable<TMessage> as parameter. Declaration public static ISilverbackBuilder AsObservable(this ISilverbackBuilder silverbackBuilder) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseDbContextExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseDbContextExtensions.html",
    "title": "Class SilverbackBuilderUseDbContextExtensions | Silverback",
    "keywords": "Class SilverbackBuilderUseDbContextExtensions Contains the UseDbContext extension for the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderUseDbContextExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.EFCore30.dll Syntax public static class SilverbackBuilderUseDbContextExtensions Methods | Improve this doc View source UseDbContext<TDbContext>(ISilverbackBuilder) Registers the specified Microsoft.EntityFrameworkCore.DbContext to be used as underlying storage for the services requiring it. Declaration public static ISilverbackBuilder UseDbContext<TDbContext>(this ISilverbackBuilder builder) where TDbContext : DbContext Parameters Type Name Description ISilverbackBuilder builder The ISilverbackBuilder to add the Microsoft.EntityFrameworkCore.DbContext to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TDbContext The type of the Microsoft.EntityFrameworkCore.DbContext to be used."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseMockedKafkaExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseMockedKafkaExtensions.html",
    "title": "Class SilverbackBuilderUseMockedKafkaExtensions | Silverback",
    "keywords": "Class SilverbackBuilderUseMockedKafkaExtensions Adds the UseMockedKafka method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderUseMockedKafkaExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public static class SilverbackBuilderUseMockedKafkaExtensions Methods | Improve this doc View source UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) Replaces the Kafka connectivity based on Confluent.Kafka with a mocked in-memory message broker that more or less replicates the Kafka behavior. Declaration public static ISilverbackBuilder UseMockedKafka(this ISilverbackBuilder builder, Action<IMockedKafkaOptionsBuilder> optionsAction = null) Parameters Type Name Description ISilverbackBuilder builder The ISilverbackBuilder . System.Action < IMockedKafkaOptionsBuilder > optionsAction Configures the mock options. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseMockedMqttExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseMockedMqttExtensions.html",
    "title": "Class SilverbackBuilderUseMockedMqttExtensions | Silverback",
    "keywords": "Class SilverbackBuilderUseMockedMqttExtensions Adds the UseMockedMqtt method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderUseMockedMqttExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public static class SilverbackBuilderUseMockedMqttExtensions Methods | Improve this doc View source UseMockedMqtt(ISilverbackBuilder, Action<IMockedMqttOptionsBuilder>) Replaces the MQTT connectivity based on MQTTnet with a mocked in-memory message broker that more or less replicates the MQTT broker behavior. Declaration public static ISilverbackBuilder UseMockedMqtt(this ISilverbackBuilder builder, Action<IMockedMqttOptionsBuilder> optionsAction = null) Parameters Type Name Description ISilverbackBuilder builder The ISilverbackBuilder . System.Action < IMockedMqttOptionsBuilder > optionsAction Configures the mock options. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseModelExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderUseModelExtensions.html",
    "title": "Class SilverbackBuilderUseModelExtensions | Silverback",
    "keywords": "Class SilverbackBuilderUseModelExtensions Adds the UseModel method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderUseModelExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.Model.dll Syntax public static class SilverbackBuilderUseModelExtensions Methods | Improve this doc View source UseModel(ISilverbackBuilder) Registers the default messages model from Silverback.Core.Model package and the specific publishers ( IEventPublisher , ICommandPublisher and IQueryPublisher ). Declaration public static ISilverbackBuilder UseModel(this ISilverbackBuilder builder) Parameters Type Name Description ISilverbackBuilder builder The ISilverbackBuilder to add the model types to. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderWithConnectionToExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderWithConnectionToExtensions.html",
    "title": "Class SilverbackBuilderWithConnectionToExtensions | Silverback",
    "keywords": "Class SilverbackBuilderWithConnectionToExtensions Adds the WithConnectionToMessageBroker method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderWithConnectionToExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderWithConnectionToExtensions Methods | Improve this doc View source WithConnectionToMessageBroker(ISilverbackBuilder, Action<IBrokerOptionsBuilder>) Registers the types needed to connect with a message broker. Declaration public static ISilverbackBuilder WithConnectionToMessageBroker(this ISilverbackBuilder silverbackBuilder, Action<IBrokerOptionsBuilder> optionsAction = null) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. System.Action < IBrokerOptionsBuilder > optionsAction Additional options such as the actual message brokers to be used. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderWithLogLevelsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SilverbackBuilderWithLogLevelsExtensions.html",
    "title": "Class SilverbackBuilderWithLogLevelsExtensions | Silverback",
    "keywords": "Class SilverbackBuilderWithLogLevelsExtensions Adds the WithLogLevels method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderWithLogLevelsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Silverback.Core.dll Syntax public static class SilverbackBuilderWithLogLevelsExtensions Methods | Improve this doc View source WithLogLevels(ISilverbackBuilder, Action<ILogLevelConfigurator>) Configures the log levels that should be used to log the standard Silverback events. Declaration public static ISilverbackBuilder WithLogLevels(this ISilverbackBuilder silverbackBuilder, Action<ILogLevelConfigurator> logLevelsConfigurationAction) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder . System.Action < ILogLevelConfigurator > logLevelsConfigurationAction The log levels configuration action. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Silverback.Background.DbDistributedLockManager.html": {
    "href": "api/Silverback.Background.DbDistributedLockManager.html",
    "title": "Class DbDistributedLockManager | Silverback",
    "keywords": "Class DbDistributedLockManager Implements a lock mechanism that relies on a shared database table to synchronize different processes. Inheritance System.Object DbDistributedLockManager Implements IDistributedLockManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Background Assembly : Silverback.Core.dll Syntax public class DbDistributedLockManager : IDistributedLockManager Constructors | Improve this doc View source DbDistributedLockManager(IServiceScopeFactory, ISilverbackLogger<DbDistributedLockManager>) Initializes a new instance of the DbDistributedLockManager class. Declaration public DbDistributedLockManager(IServiceScopeFactory serviceScopeFactory, ISilverbackLogger<DbDistributedLockManager> logger) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory The Microsoft.Extensions.DependencyInjection.IServiceScopeFactory used to resolve the scoped types. ISilverbackLogger < DbDistributedLockManager > logger The ISilverbackLogger . Methods | Improve this doc View source AcquireAsync(DistributedLockSettings, CancellationToken) Acquires a new lock on the specified resource. Declaration public async Task<DistributedLock> AcquireAsync(DistributedLockSettings settings, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description DistributedLockSettings settings Specifies all settings of the lock to be acquired. System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task < DistributedLock > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the acquired DistributedLock (or null if no lock was actually acquired). | Improve this doc View source CheckIsStillLockedAsync(DistributedLockSettings) Returns a boolean value indicating whether the specified lock is taken already. Declaration public async Task<bool> CheckIsStillLockedAsync(DistributedLockSettings settings) Parameters Type Name Description DistributedLockSettings settings Specifies the lock to be checked. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean value indicating whether the lock is taken. | Improve this doc View source ReleaseAsync(DistributedLockSettings) Releases the lock. Declaration public async Task ReleaseAsync(DistributedLockSettings settings) Parameters Type Name Description DistributedLockSettings settings Specifies the lock to be released. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source SendHeartbeatAsync(DistributedLockSettings) Called periodically after the lock has been acquired to send an heartbeat that keeps the lock. Declaration public async Task<bool> SendHeartbeatAsync(DistributedLockSettings settings) Parameters Type Name Description DistributedLockSettings settings Specifies the lock to be refreshed. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean value indicating whether the lock could be refreshed. Implements IDistributedLockManager"
  },
  "api/Silverback.Background.DistributedBackgroundService.html": {
    "href": "api/Silverback.Background.DistributedBackgroundService.html",
    "title": "Class DistributedBackgroundService | Silverback",
    "keywords": "Class DistributedBackgroundService Extends the Microsoft.Extensions.Hosting.BackgroundService adding a distributed lock mechanism to prevent concurrent executions. Inheritance System.Object Microsoft.Extensions.Hosting.BackgroundService DistributedBackgroundService RecurringDistributedBackgroundService Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable Inherited Members Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Background Assembly : Silverback.Core.dll Syntax public abstract class DistributedBackgroundService : BackgroundService, IHostedService, IDisposable Constructors | Improve this doc View source DistributedBackgroundService(DistributedLockSettings, IDistributedLockManager, ISilverbackLogger<DistributedBackgroundService>) Initializes a new instance of the DistributedBackgroundService class. Declaration protected DistributedBackgroundService(DistributedLockSettings distributedLockSettings, IDistributedLockManager distributedLockManager, ISilverbackLogger<DistributedBackgroundService> logger) Parameters Type Name Description DistributedLockSettings distributedLockSettings Customizes the lock mechanism settings. IDistributedLockManager distributedLockManager The IDistributedLockManager . ISilverbackLogger < DistributedBackgroundService > logger The ISilverbackLogger . | Improve this doc View source DistributedBackgroundService(IDistributedLockManager, ISilverbackLogger<DistributedBackgroundService>) Initializes a new instance of the DistributedBackgroundService class using the default settings for the lock mechanism. Declaration protected DistributedBackgroundService(IDistributedLockManager distributedLockManager, ISilverbackLogger<DistributedBackgroundService> logger) Parameters Type Name Description IDistributedLockManager distributedLockManager The IDistributedLockManager . ISilverbackLogger < DistributedBackgroundService > logger The ISilverbackLogger . Properties | Improve this doc View source Lock Gets the acquired DistributedLock . Declaration protected DistributedLock Lock { get; } Property Value Type Description DistributedLock Methods | Improve this doc View source ExecuteAsync(CancellationToken) Declaration protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken) | Improve this doc View source ExecuteLockedAsync(CancellationToken) This method is called when the Microsoft.Extensions.Hosting.IHostedService starts and the lock is acquired. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. Declaration protected abstract Task ExecuteLockedAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that represents the long running operations. Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable"
  },
  "api/Silverback.Background.DistributedLock.html": {
    "href": "api/Silverback.Background.DistributedLock.html",
    "title": "Class DistributedLock | Silverback",
    "keywords": "Class DistributedLock Represents a lock that has been acquired through an IDistributedLockManager . Inheritance System.Object DistributedLock Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Background Assembly : Silverback.Core.dll Syntax public class DistributedLock Constructors | Improve this doc View source DistributedLock(DistributedLockSettings, IDistributedLockManager) Initializes a new instance of the DistributedLock class. Declaration public DistributedLock(DistributedLockSettings settings, IDistributedLockManager lockManager) Parameters Type Name Description DistributedLockSettings settings Specifies all settings of the lock to be acquired. IDistributedLockManager lockManager The IDistributedLockManager that generated the lock and can be used to keep it alive and finally release it. Properties | Improve this doc View source Status Gets the lock status. Declaration public DistributedLockStatus Status { get; } Property Value Type Description DistributedLockStatus Methods | Improve this doc View source ReleaseAsync() Releases the lock. Declaration public async Task ReleaseAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RenewAsync(CancellationToken) Ensures that the lock is still valid, otherwise tries to re-acquire it. Declaration public async Task RenewAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Background.DistributedLockSettings.html": {
    "href": "api/Silverback.Background.DistributedLockSettings.html",
    "title": "Class DistributedLockSettings | Silverback",
    "keywords": "Class DistributedLockSettings The settings to be applied to the configured IDistributedLockManager . Inheritance System.Object DistributedLockSettings NullLockSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Background Assembly : Silverback.Core.dll Syntax public class DistributedLockSettings Constructors | Improve this doc View source DistributedLockSettings(String, String, Nullable<TimeSpan>, Nullable<TimeSpan>, Nullable<TimeSpan>, Nullable<TimeSpan>) Initializes a new instance of the DistributedLockSettings class. Declaration public DistributedLockSettings(string resourceName = \"\", string uniqueId = null, TimeSpan? acquireTimeout = null, TimeSpan? acquireRetryInterval = null, TimeSpan? heartbeatTimeout = null, TimeSpan? heartbeatInterval = null) Parameters Type Name Description System.String resourceName The name of the lock / the resource being locked. System.String uniqueId A unique identifier representing the entity trying to acquire the lock. Th default is a new System.Guid . System.Nullable < System.TimeSpan > acquireTimeout After the acquire timeout is expired the lock manager will abort the lock acquisition. The default is no timeout. System.Nullable < System.TimeSpan > acquireRetryInterval The interval at which the lock manager checks if a lock can be acquired for the specified resource. The default is 30 seconds. System.Nullable < System.TimeSpan > heartbeatTimeout After the heartbeat timeout is expired the lock will be considered released. The default is 1 minute. System.Nullable < System.TimeSpan > heartbeatInterval The interval at which the heartbeat has to be sent. The default is 1 second. Properties | Improve this doc View source AcquireRetryInterval Gets the interval at which the lock manager checks if a lock can be acquired for the specified resource. Declaration public TimeSpan AcquireRetryInterval { get; } Property Value Type Description System.TimeSpan | Improve this doc View source AcquireTimeout Gets the timeout after which the lock manager will abort the lock acquisition. Declaration public TimeSpan? AcquireTimeout { get; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source FailedHeartbeatsThreshold Gets the maximum number of heartbeats that can be failed to be sent before stopping. Declaration public int FailedHeartbeatsThreshold { get; } Property Value Type Description System.Int32 | Improve this doc View source HeartbeatInterval Gets the interval at which the heartbeat has to be sent. Declaration public TimeSpan HeartbeatInterval { get; } Property Value Type Description System.TimeSpan | Improve this doc View source HeartbeatTimeout Gets the timeout after which the lock will be considered released if no heartbeat is sent. Declaration public TimeSpan HeartbeatTimeout { get; } Property Value Type Description System.TimeSpan | Improve this doc View source NoLock Gets the DistributedLockSettings signaling that no lock is to be checked and acquired. Corresponds to an instance of NullLockSettings . Declaration public static DistributedLockSettings NoLock { get; } Property Value Type Description DistributedLockSettings | Improve this doc View source ResourceName Gets the name of the lock / the resource being locked. Declaration public string ResourceName { get; } Property Value Type Description System.String | Improve this doc View source UniqueId Gets a unique identifier representing the entity trying to acquire the lock. Declaration public string UniqueId { get; } Property Value Type Description System.String"
  },
  "api/Silverback.Background.DistributedLockStatus.html": {
    "href": "api/Silverback.Background.DistributedLockStatus.html",
    "title": "Enum DistributedLockStatus | Silverback",
    "keywords": "Enum DistributedLockStatus Specifies the current status of the DistributedLock . Namespace : Silverback.Background Assembly : Silverback.Core.dll Syntax public enum DistributedLockStatus Fields Name Description Acquired The lock has been acquired. Lost The previously acquired lock has been lost for some reason (such as failure to send the heartbeat). Released The lock has been released."
  },
  "api/Silverback.Background.html": {
    "href": "api/Silverback.Background.html",
    "title": "Namespace Silverback.Background | Silverback",
    "keywords": "Namespace Silverback.Background Classes DbDistributedLockManager Implements a lock mechanism that relies on a shared database table to synchronize different processes. DistributedBackgroundService Extends the Microsoft.Extensions.Hosting.BackgroundService adding a distributed lock mechanism to prevent concurrent executions. DistributedLock Represents a lock that has been acquired through an IDistributedLockManager . DistributedLockSettings The settings to be applied to the configured IDistributedLockManager . NullLockManager This implementation of IDistributedLockManager doesn't actually acquire nor check any lock. Is is used when the NullLockSettings are specified or no other IDistributedLockManager is registered. NullLockSettings Used to signal that no lock has to be acquired nor checked. RecurringDistributedBackgroundService Extends the DistributedBackgroundService calling the execute method at regular intervals. The distributed lock mechanism prevents concurrent executions. Interfaces IDistributedLockManager Implements a lock mechanism that relies on a shared persisted storage (such as a database) to synchronize different processes. Enums DistributedLockStatus Specifies the current status of the DistributedLock ."
  },
  "api/Silverback.Background.IDistributedLockManager.html": {
    "href": "api/Silverback.Background.IDistributedLockManager.html",
    "title": "Interface IDistributedLockManager | Silverback",
    "keywords": "Interface IDistributedLockManager Implements a lock mechanism that relies on a shared persisted storage (such as a database) to synchronize different processes. Namespace : Silverback.Background Assembly : Silverback.Core.dll Syntax public interface IDistributedLockManager Methods | Improve this doc View source AcquireAsync(DistributedLockSettings, CancellationToken) Acquires a new lock on the specified resource. Declaration Task<DistributedLock> AcquireAsync(DistributedLockSettings settings, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description DistributedLockSettings settings Specifies all settings of the lock to be acquired. System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task < DistributedLock > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the acquired DistributedLock (or null if no lock was actually acquired). | Improve this doc View source CheckIsStillLockedAsync(DistributedLockSettings) Returns a boolean value indicating whether the specified lock is taken already. Declaration Task<bool> CheckIsStillLockedAsync(DistributedLockSettings settings) Parameters Type Name Description DistributedLockSettings settings Specifies the lock to be checked. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean value indicating whether the lock is taken. | Improve this doc View source ReleaseAsync(DistributedLockSettings) Releases the lock. Declaration Task ReleaseAsync(DistributedLockSettings settings) Parameters Type Name Description DistributedLockSettings settings Specifies the lock to be released. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source SendHeartbeatAsync(DistributedLockSettings) Called periodically after the lock has been acquired to send an heartbeat that keeps the lock. Declaration Task<bool> SendHeartbeatAsync(DistributedLockSettings settings) Parameters Type Name Description DistributedLockSettings settings Specifies the lock to be refreshed. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean value indicating whether the lock could be refreshed."
  },
  "api/Silverback.Background.NullLockManager.html": {
    "href": "api/Silverback.Background.NullLockManager.html",
    "title": "Class NullLockManager | Silverback",
    "keywords": "Class NullLockManager This implementation of IDistributedLockManager doesn't actually acquire nor check any lock. Is is used when the NullLockSettings are specified or no other IDistributedLockManager is registered. Inheritance System.Object NullLockManager Implements IDistributedLockManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Background Assembly : Silverback.Core.dll Syntax public class NullLockManager : IDistributedLockManager Methods | Improve this doc View source AcquireAsync(DistributedLockSettings, CancellationToken) Acquires a new lock on the specified resource. Declaration public Task<DistributedLock> AcquireAsync(DistributedLockSettings settings, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description DistributedLockSettings settings Specifies all settings of the lock to be acquired. System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task < DistributedLock > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the acquired DistributedLock (or null if no lock was actually acquired). | Improve this doc View source CheckIsStillLockedAsync(DistributedLockSettings) Returns a boolean value indicating whether the specified lock is taken already. Declaration public Task<bool> CheckIsStillLockedAsync(DistributedLockSettings settings) Parameters Type Name Description DistributedLockSettings settings Specifies the lock to be checked. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean value indicating whether the lock is taken. | Improve this doc View source ReleaseAsync(DistributedLockSettings) Releases the lock. Declaration public Task ReleaseAsync(DistributedLockSettings settings) Parameters Type Name Description DistributedLockSettings settings Specifies the lock to be released. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source SendHeartbeatAsync(DistributedLockSettings) Called periodically after the lock has been acquired to send an heartbeat that keeps the lock. Declaration public Task<bool> SendHeartbeatAsync(DistributedLockSettings settings) Parameters Type Name Description DistributedLockSettings settings Specifies the lock to be refreshed. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean value indicating whether the lock could be refreshed. Implements IDistributedLockManager"
  },
  "api/Silverback.Background.NullLockSettings.html": {
    "href": "api/Silverback.Background.NullLockSettings.html",
    "title": "Class NullLockSettings | Silverback",
    "keywords": "Class NullLockSettings Used to signal that no lock has to be acquired nor checked. Inheritance System.Object DistributedLockSettings NullLockSettings Inherited Members DistributedLockSettings.NoLock DistributedLockSettings.UniqueId DistributedLockSettings.AcquireTimeout DistributedLockSettings.AcquireRetryInterval DistributedLockSettings.HeartbeatTimeout DistributedLockSettings.HeartbeatInterval DistributedLockSettings.FailedHeartbeatsThreshold DistributedLockSettings.ResourceName System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Background Assembly : Silverback.Core.dll Syntax public class NullLockSettings : DistributedLockSettings Constructors | Improve this doc View source NullLockSettings() Initializes a new instance of the NullLockSettings class. Declaration public NullLockSettings()"
  },
  "api/Silverback.Background.RecurringDistributedBackgroundService.html": {
    "href": "api/Silverback.Background.RecurringDistributedBackgroundService.html",
    "title": "Class RecurringDistributedBackgroundService | Silverback",
    "keywords": "Class RecurringDistributedBackgroundService Extends the DistributedBackgroundService calling the execute method at regular intervals. The distributed lock mechanism prevents concurrent executions. Inheritance System.Object Microsoft.Extensions.Hosting.BackgroundService DistributedBackgroundService RecurringDistributedBackgroundService OutboxWorkerService Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable Inherited Members DistributedBackgroundService.Lock DistributedBackgroundService.ExecuteAsync(CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Background Assembly : Silverback.Core.dll Syntax public abstract class RecurringDistributedBackgroundService : DistributedBackgroundService, IHostedService, IDisposable Constructors | Improve this doc View source RecurringDistributedBackgroundService(TimeSpan, DistributedLockSettings, IDistributedLockManager, ISilverbackLogger<RecurringDistributedBackgroundService>) Initializes a new instance of the RecurringDistributedBackgroundService class. Declaration protected RecurringDistributedBackgroundService(TimeSpan interval, DistributedLockSettings distributedLockSettings, IDistributedLockManager distributedLockManager, ISilverbackLogger<RecurringDistributedBackgroundService> logger) Parameters Type Name Description System.TimeSpan interval The System.TimeSpan interval between each execution. DistributedLockSettings distributedLockSettings Customizes the lock mechanism settings. IDistributedLockManager distributedLockManager The IDistributedLockManager . ISilverbackLogger < RecurringDistributedBackgroundService > logger The ISilverbackLogger . | Improve this doc View source RecurringDistributedBackgroundService(TimeSpan, IDistributedLockManager, ISilverbackLogger<RecurringDistributedBackgroundService>) Initializes a new instance of the RecurringDistributedBackgroundService class using the default settings for the lock mechanism. Declaration protected RecurringDistributedBackgroundService(TimeSpan interval, IDistributedLockManager distributedLockManager, ISilverbackLogger<RecurringDistributedBackgroundService> logger) Parameters Type Name Description System.TimeSpan interval The interval between each execution. IDistributedLockManager distributedLockManager The IDistributedLockManager . ISilverbackLogger < RecurringDistributedBackgroundService > logger The ISilverbackLogger . Methods | Improve this doc View source ExecuteLockedAsync(CancellationToken) This method is called when the Microsoft.Extensions.Hosting.IHostedService starts and the lock is acquired. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. Declaration protected override async Task ExecuteLockedAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that represents the long running operations. Overrides DistributedBackgroundService.ExecuteLockedAsync(CancellationToken) | Improve this doc View source ExecuteRecurringAsync(CancellationToken) This method is called at regular intervals after the Microsoft.Extensions.Hosting.IHostedService starts and the lock is acquired. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. Declaration protected abstract Task ExecuteRecurringAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that represents the long running operations. | Improve this doc View source Pause() Pauses the execution of the recurring task. Declaration public void Pause() | Improve this doc View source Resume() Resumes the execution of the previously paused recurring task. Declaration public void Resume() Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable"
  },
  "api/Silverback.Database.DatabaseTableNotFoundException.html": {
    "href": "api/Silverback.Database.DatabaseTableNotFoundException.html",
    "title": "Class DatabaseTableNotFoundException | Silverback",
    "keywords": "Class DatabaseTableNotFoundException The exception that is thrown when a required database table cannot be found via the configured data layer (e.g. Entity Framework Core). Inheritance System.Object System.Exception SilverbackException DatabaseTableNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Database Assembly : Silverback.Core.dll Syntax [Serializable] public class DatabaseTableNotFoundException : SilverbackException, ISerializable Constructors | Improve this doc View source DatabaseTableNotFoundException() Initializes a new instance of the DatabaseTableNotFoundException class. Declaration public DatabaseTableNotFoundException() | Improve this doc View source DatabaseTableNotFoundException(SerializationInfo, StreamingContext) Initializes a new instance of the DatabaseTableNotFoundException class with the serialized data. Declaration protected DatabaseTableNotFoundException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source DatabaseTableNotFoundException(String) Initializes a new instance of the DatabaseTableNotFoundException class with the specified message. Declaration public DatabaseTableNotFoundException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source DatabaseTableNotFoundException(String, Exception) Initializes a new instance of the DatabaseTableNotFoundException class with the specified message and inner exception. Declaration public DatabaseTableNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Database.EfCoreDbContext-1.html": {
    "href": "api/Silverback.Database.EfCoreDbContext-1.html",
    "title": "Class EfCoreDbContext<TDbContext> | Silverback",
    "keywords": "Class EfCoreDbContext<TDbContext> An implementation of IDbContext that works with Entity Framework Core. Inheritance System.Object EfCoreDbContext<TDbContext> Implements IDbContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Database Assembly : Silverback.Core.EFCore30.dll Syntax public class EfCoreDbContext<TDbContext> : IDbContext where TDbContext : DbContext Type Parameters Name Description TDbContext The type of the underlying Microsoft.EntityFrameworkCore.DbContext . Constructors | Improve this doc View source EfCoreDbContext(TDbContext) Initializes a new instance of the EfCoreDbContext<TDbContext> class. Declaration public EfCoreDbContext(TDbContext dbContext) Parameters Type Name Description TDbContext dbContext The wrapped Microsoft.EntityFrameworkCore.DbContext . Methods | Improve this doc View source GetDbSet<TEntity>() Returns an IDbSet<TEntity> for the specified entity type. Declaration public IDbSet<TEntity> GetDbSet<TEntity>() where TEntity : class Returns Type Description IDbSet <TEntity> An IDbSet<TEntity> . Type Parameters Name Description TEntity The type of the entity. | Improve this doc View source SaveChanges() Saves all changes made in this context to the database. Declaration public void SaveChanges() | Improve this doc View source SaveChangesAsync() Saves all changes made in this context to the database. Declaration public Task SaveChangesAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IDbContext"
  },
  "api/Silverback.Database.EfCoreDbSet-1.html": {
    "href": "api/Silverback.Database.EfCoreDbSet-1.html",
    "title": "Class EfCoreDbSet<TEntity> | Silverback",
    "keywords": "Class EfCoreDbSet<TEntity> An implementation of IDbSet<TEntity> that works with Entity Framework Core. Inheritance System.Object EfCoreDbSet<TEntity> Implements IDbSet <TEntity> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Database Assembly : Silverback.Core.EFCore30.dll Syntax public class EfCoreDbSet<TEntity> : IDbSet<TEntity> where TEntity : class Type Parameters Name Description TEntity The type of the entity being stored in this set. Constructors | Improve this doc View source EfCoreDbSet(DbSet<TEntity>) Initializes a new instance of the EfCoreDbSet<TEntity> class. Declaration public EfCoreDbSet(DbSet<TEntity> dbSet) Parameters Type Name Description Microsoft.EntityFrameworkCore.DbSet <TEntity> dbSet The underlying Microsoft.EntityFrameworkCore.DbSet<TEntity> . Methods | Improve this doc View source Add(TEntity) Adds the specified entity to the set and start tracking it. The entity will be inserted into the database when saving changes. Declaration public TEntity Add(TEntity entity) Parameters Type Name Description TEntity entity The entity to be added. Returns Type Description TEntity The added entity. | Improve this doc View source AsQueryable() Returns an System.Linq.IQueryable to query the set. Declaration public IQueryable<TEntity> AsQueryable() Returns Type Description System.Linq.IQueryable <TEntity> An System.Linq.IQueryable<T> . | Improve this doc View source Find(Object[]) Finds the entity with the specified key(s). Returns null if not found. Declaration public TEntity Find(params object[] keyValues) Parameters Type Name Description System.Object [] keyValues The entity keys. Returns Type Description TEntity The entity found, or null . | Improve this doc View source FindAsync(Object[]) Finds the entity with the specified key(s). Returns null if not found. Declaration public async Task<TEntity> FindAsync(params object[] keyValues) Parameters Type Name Description System.Object [] keyValues The entity keys. Returns Type Description System.Threading.Tasks.Task <TEntity> The entity found, or null . | Improve this doc View source GetLocalCache() Returns the locally cached entities. Declaration public IEnumerable<TEntity> GetLocalCache() Returns Type Description System.Collections.Generic.IEnumerable <TEntity> The entities in the local cache. | Improve this doc View source Remove(TEntity) Removes the specified entity from the set causing it to be deleted when saving changes. Declaration public TEntity Remove(TEntity entity) Parameters Type Name Description TEntity entity The entity to be removed. Returns Type Description TEntity The removed entity. | Improve this doc View source RemoveRange(IEnumerable<TEntity>) Removes the specified entities from the set causing them to be deleted when saving changes. Declaration public void RemoveRange(IEnumerable<TEntity> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <TEntity> entities The entities to be removed. Implements IDbSet<TEntity>"
  },
  "api/Silverback.Database.html": {
    "href": "api/Silverback.Database.html",
    "title": "Namespace Silverback.Database | Silverback",
    "keywords": "Namespace Silverback.Database Classes DatabaseTableNotFoundException The exception that is thrown when a required database table cannot be found via the configured data layer (e.g. Entity Framework Core). EfCoreDbContext<TDbContext> An implementation of IDbContext that works with Entity Framework Core. EfCoreDbSet<TEntity> An implementation of IDbSet<TEntity> that works with Entity Framework Core. Interfaces IDbContext Abstracts the DbContext functionality to allow for multiple and decoupled implementations. IDbSet<TEntity> Abstracts the DbSet functionality to allow for multiple and decoupled implementations."
  },
  "api/Silverback.Database.IDbContext.html": {
    "href": "api/Silverback.Database.IDbContext.html",
    "title": "Interface IDbContext | Silverback",
    "keywords": "Interface IDbContext Abstracts the DbContext functionality to allow for multiple and decoupled implementations. Namespace : Silverback.Database Assembly : Silverback.Core.dll Syntax public interface IDbContext Methods | Improve this doc View source GetDbSet<TEntity>() Returns an IDbSet<TEntity> for the specified entity type. Declaration IDbSet<TEntity> GetDbSet<TEntity>() where TEntity : class Returns Type Description IDbSet <TEntity> An IDbSet<TEntity> . Type Parameters Name Description TEntity The type of the entity. | Improve this doc View source SaveChanges() Saves all changes made in this context to the database. Declaration void SaveChanges() | Improve this doc View source SaveChangesAsync() Saves all changes made in this context to the database. Declaration Task SaveChangesAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Database.IDbSet-1.html": {
    "href": "api/Silverback.Database.IDbSet-1.html",
    "title": "Interface IDbSet<TEntity> | Silverback",
    "keywords": "Interface IDbSet<TEntity> Abstracts the DbSet functionality to allow for multiple and decoupled implementations. Namespace : Silverback.Database Assembly : Silverback.Core.dll Syntax public interface IDbSet<TEntity> where TEntity : class Type Parameters Name Description TEntity The type of the entity being stored in this set. Methods | Improve this doc View source Add(TEntity) Adds the specified entity to the set and start tracking it. The entity will be inserted into the database when saving changes. Declaration TEntity Add(TEntity entity) Parameters Type Name Description TEntity entity The entity to be added. Returns Type Description TEntity The added entity. | Improve this doc View source AsQueryable() Returns an System.Linq.IQueryable to query the set. Declaration IQueryable<TEntity> AsQueryable() Returns Type Description System.Linq.IQueryable <TEntity> An System.Linq.IQueryable<T> . | Improve this doc View source Find(Object[]) Finds the entity with the specified key(s). Returns null if not found. Declaration TEntity Find(params object[] keyValues) Parameters Type Name Description System.Object [] keyValues The entity keys. Returns Type Description TEntity The entity found, or null . | Improve this doc View source FindAsync(Object[]) Finds the entity with the specified key(s). Returns null if not found. Declaration Task<TEntity> FindAsync(params object[] keyValues) Parameters Type Name Description System.Object [] keyValues The entity keys. Returns Type Description System.Threading.Tasks.Task <TEntity> The entity found, or null . | Improve this doc View source GetLocalCache() Returns the locally cached entities. Declaration IEnumerable<TEntity> GetLocalCache() Returns Type Description System.Collections.Generic.IEnumerable <TEntity> The entities in the local cache. | Improve this doc View source Remove(TEntity) Removes the specified entity from the set causing it to be deleted when saving changes. Declaration TEntity Remove(TEntity entity) Parameters Type Name Description TEntity entity The entity to be removed. Returns Type Description TEntity The removed entity. | Improve this doc View source RemoveRange(IEnumerable<TEntity>) Removes the specified entities from the set causing them to be deleted when saving changes. Declaration void RemoveRange(IEnumerable<TEntity> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable <TEntity> entities The entities to be removed."
  },
  "api/Silverback.Database.Model.html": {
    "href": "api/Silverback.Database.Model.html",
    "title": "Namespace Silverback.Database.Model | Silverback",
    "keywords": "Namespace Silverback.Database.Model Classes InboundLogEntry The entity stored in the inbound log table. Lock The entity written in the locks table by the DbDistributedLockManager . OutboxMessage The entity stored in the outbox table. StoredOffset The entity stored in the offset storage table."
  },
  "api/Silverback.Database.Model.InboundLogEntry.html": {
    "href": "api/Silverback.Database.Model.InboundLogEntry.html",
    "title": "Class InboundLogEntry | Silverback",
    "keywords": "Class InboundLogEntry The entity stored in the inbound log table. Inheritance System.Object InboundLogEntry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Database.Model Assembly : Silverback.Integration.dll Syntax public class InboundLogEntry Properties | Improve this doc View source Consumed Gets or sets the datetime when the message was consumed. Declaration public DateTime Consumed { get; set; } Property Value Type Description System.DateTime | Improve this doc View source ConsumerGroupName Gets or sets the unique consumer group name of the consumer that received and processed the message. Declaration [Key] [MaxLength(300)] public string ConsumerGroupName { get; set; } Property Value Type Description System.String | Improve this doc View source EndpointName Gets or sets the name of the endpoint the message was consumed from. Declaration [Key] [MaxLength(300)] public string EndpointName { get; set; } Property Value Type Description System.String | Improve this doc View source MessageId Gets or sets the unique identifier of the inbound message. Declaration [Key] [MaxLength(300)] public string MessageId { get; set; } Property Value Type Description System.String"
  },
  "api/Silverback.Database.Model.Lock.html": {
    "href": "api/Silverback.Database.Model.Lock.html",
    "title": "Class Lock | Silverback",
    "keywords": "Class Lock The entity written in the locks table by the DbDistributedLockManager . Inheritance System.Object Lock Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Database.Model Assembly : Silverback.Core.dll Syntax public class Lock Properties | Improve this doc View source Created Gets or sets the record creation date. Declaration public DateTime Created { get; set; } Property Value Type Description System.DateTime | Improve this doc View source Heartbeat Gets or sets the last heartbeat timestamp. Declaration public DateTime Heartbeat { get; set; } Property Value Type Description System.DateTime | Improve this doc View source Name Gets or sets the name of the lock / the resource being locked. Declaration [Key] [MaxLength(500)] public string Name { get; set; } Property Value Type Description System.String | Improve this doc View source Timestamp Gets or sets the concurrency token. Declaration [Timestamp] public byte[] Timestamp { get; set; } Property Value Type Description System.Byte [] | Improve this doc View source UniqueId Gets or sets a unique identifier representing the entity trying to acquire the lock. Declaration [MaxLength(200)] public string UniqueId { get; set; } Property Value Type Description System.String"
  },
  "api/Silverback.Database.Model.OutboxMessage.html": {
    "href": "api/Silverback.Database.Model.OutboxMessage.html",
    "title": "Class OutboxMessage | Silverback",
    "keywords": "Class OutboxMessage The entity stored in the outbox table. Inheritance System.Object OutboxMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Database.Model Assembly : Silverback.Integration.dll Syntax public class OutboxMessage Properties | Improve this doc View source ActualEndpointName Gets or sets the name of the actual target endpoint that was resolved for the message. Declaration [MaxLength(300)] public string ActualEndpointName { get; set; } Property Value Type Description System.String | Improve this doc View source Content Gets or sets the message content (body). Declaration public byte[] Content { get; set; } Property Value Type Description System.Byte [] | Improve this doc View source Created Gets or sets the datetime when the message was stored in the queue. Declaration public DateTime Created { get; set; } Property Value Type Description System.DateTime | Improve this doc View source EndpointName Gets or sets the name of the producer endpoint. Declaration [MaxLength(300)] public string EndpointName { get; set; } Property Value Type Description System.String | Improve this doc View source Headers Gets or sets the serialized message headers. Declaration [Obsolete(\"Replaced by SerializedHeaders.\")] public string Headers { get; set; } Property Value Type Description System.String Remarks This field is no longer used (replaced by SerializedHeaders) and will be removed with the next major release. | Improve this doc View source Id Gets or sets the primary key (identity). Declaration [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] public int Id { get; set; } Property Value Type Description System.Int32 | Improve this doc View source MessageType Gets or sets the assembly qualified name of the message class. Declaration public string MessageType { get; set; } Property Value Type Description System.String | Improve this doc View source SerializedHeaders Gets or sets the serialized message headers. Declaration public byte[] SerializedHeaders { get; set; } Property Value Type Description System.Byte []"
  },
  "api/Silverback.Database.Model.StoredOffset.html": {
    "href": "api/Silverback.Database.Model.StoredOffset.html",
    "title": "Class StoredOffset | Silverback",
    "keywords": "Class StoredOffset The entity stored in the offset storage table. Inheritance System.Object StoredOffset Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Database.Model Assembly : Silverback.Integration.dll Syntax public class StoredOffset Properties | Improve this doc View source ClrType Gets or sets the assembly qualified name of the stored offset class. Declaration [MaxLength(300)] public string ClrType { get; set; } Property Value Type Description System.String | Improve this doc View source Key Gets or sets the offset key. Declaration [Key] [MaxLength(300)] public string Key { get; set; } Property Value Type Description System.String | Improve this doc View source Offset Gets or sets the serialized offset. Declaration [MaxLength(500)] [Obsolete(\"Replaced by ClrType and Value.\")] public string Offset { get; set; } Property Value Type Description System.String Remarks This field is no longer used (replaced by ClrType and Value) and will be removed with the next major release. | Improve this doc View source Value Gets or sets the offset value. Declaration [MaxLength(300)] public string Value { get; set; } Property Value Type Description System.String"
  },
  "api/Silverback.Diagnostics.CoreLogEvents.html": {
    "href": "api/Silverback.Diagnostics.CoreLogEvents.html",
    "title": "Class CoreLogEvents | Silverback",
    "keywords": "Class CoreLogEvents Contains the LogEvent constants of all events logged by the Silverback.Core package. Inheritance System.Object CoreLogEvents Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Diagnostics Assembly : Silverback.Core.dll Syntax public static class CoreLogEvents Properties | Improve this doc View source AcquiringDistributedLock Gets the LogEvent representing the log that is written when the IDistributedLockManager start trying to acquire a lock. Declaration public static LogEvent AcquiringDistributedLock { get; } Property Value Type Description LogEvent | Improve this doc View source BackgroundServiceException Gets the LogEvent representing the log that is written when an error occurs executing the DistributedBackgroundService . Declaration public static LogEvent BackgroundServiceException { get; } Property Value Type Description LogEvent | Improve this doc View source BackgroundServiceLockAcquired Gets the LogEvent representing the log that is written when the lock has been acquired and the DistributedBackgroundService is being executed. Declaration public static LogEvent BackgroundServiceLockAcquired { get; } Property Value Type Description LogEvent | Improve this doc View source BackgroundServiceStarting Gets the LogEvent representing the log that is written the DistributedBackgroundService is starting. Declaration public static LogEvent BackgroundServiceStarting { get; } Property Value Type Description LogEvent | Improve this doc View source DistributedLockAcquired Gets the LogEvent representing the log that is written when the IDistributedLockManager acquires a lock. Declaration public static LogEvent DistributedLockAcquired { get; } Property Value Type Description LogEvent | Improve this doc View source DistributedLockReleased Gets the LogEvent representing the log that is written when the IDistributedLockManager releases a lock. Declaration public static LogEvent DistributedLockReleased { get; } Property Value Type Description LogEvent | Improve this doc View source FailedToAcquireDistributedLock Gets the LogEvent representing the log that is written when an error occurs while the IDistributedLockManager acquires a lock. Declaration public static LogEvent FailedToAcquireDistributedLock { get; } Property Value Type Description LogEvent | Improve this doc View source FailedToCheckDistributedLock Gets the LogEvent representing the log that is written when an error occurs while the IDistributedLockManager checks whether a lock is still valid. Declaration public static LogEvent FailedToCheckDistributedLock { get; } Property Value Type Description LogEvent | Improve this doc View source FailedToReleaseDistributedLock Gets the LogEvent representing the log that is written when an error occurs while the IDistributedLockManager releases a lock. Declaration public static LogEvent FailedToReleaseDistributedLock { get; } Property Value Type Description LogEvent | Improve this doc View source FailedToSendDistributedLockHeartbeat Gets the LogEvent representing the log that is written when an error occurs while the IDistributedLockManager tries to send the heartbeat to keep the lock alive. Declaration public static LogEvent FailedToSendDistributedLockHeartbeat { get; } Property Value Type Description LogEvent | Improve this doc View source RecurringBackgroundServiceException Gets the LogEvent representing the log that is written when an exception is thrown during an execution of the RecurringDistributedBackgroundService . Declaration public static LogEvent RecurringBackgroundServiceException { get; } Property Value Type Description LogEvent | Improve this doc View source RecurringBackgroundServiceSleeping Gets the LogEvent representing the log that is written when the RecurringDistributedBackgroundService is sleeping in between the executions. Declaration public static LogEvent RecurringBackgroundServiceSleeping { get; } Property Value Type Description LogEvent | Improve this doc View source RecurringBackgroundServiceStopped Gets the LogEvent representing the log that is written when the RecurringDistributedBackgroundService is stopped. Declaration public static LogEvent RecurringBackgroundServiceStopped { get; } Property Value Type Description LogEvent | Improve this doc View source SubscriberResultDiscarded Gets the LogEvent representing the log that is written when the IPublisher discards the return value of a subscribed method because it doesn't match with the expected return type. Declaration public static LogEvent SubscriberResultDiscarded { get; } Property Value Type Description LogEvent"
  },
  "api/Silverback.Diagnostics.html": {
    "href": "api/Silverback.Diagnostics.html",
    "title": "Namespace Silverback.Diagnostics | Silverback",
    "keywords": "Namespace Silverback.Diagnostics Classes CoreLogEvents Contains the LogEvent constants of all events logged by the Silverback.Core package. IntegrationLogEvents Contains the LogEvent constants of all events logged by the Silverback.Integration package. KafkaActivityEnricher Enriches the System.Diagnostics.Activity with Kafka specific tags. KafkaLogEvents Contains the LogEvent constants of all events logged by the Silverback.Integration.Kafka package. LogEvent Encapsulates the log level, id and message. MqttLogEvents Contains the LogEvent constants of all events logged by the Silverback.Integration.Mqtt package. RabbitLogEvents Contains the LogEvent constants of all events logged by the Silverback.Integration.RabbitMQ package. Interfaces IBrokerLogEnricher Provides enrichment for the logs written in the context of the consumers and producers. IBrokerLogEnricher<TEndpoint> Provides enrichment for the logs written in the context of the consumers and producers, for the specified endpoint type. IInboundLogger<TCategoryName> An Microsoft.Extensions.Logging.ILogger<TCategoryName> with some specific methods to log inbound messages related events. ILogLevelDictionary Maps Microsoft.Extensions.Logging.EventId s to the Microsoft.Extensions.Logging.LogLevel that should be used for it. IOutboundLogger<TCategoryName> An ISilverbackLogger<TCategoryName> with some specific methods to log outbound messages related events. ISilverbackLogger Used to perform logging in Silverback. ISilverbackLogger<TCategoryName> Used to perform logging in Silverback."
  },
  "api/Silverback.Diagnostics.IBrokerLogEnricher.html": {
    "href": "api/Silverback.Diagnostics.IBrokerLogEnricher.html",
    "title": "Interface IBrokerLogEnricher | Silverback",
    "keywords": "Interface IBrokerLogEnricher Provides enrichment for the logs written in the context of the consumers and producers. Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IBrokerLogEnricher Properties | Improve this doc View source AdditionalPropertyName1 Gets the name of the first additional property. Declaration string AdditionalPropertyName1 { get; } Property Value Type Description System.String | Improve this doc View source AdditionalPropertyName2 Gets the name of the second additional property. Declaration string AdditionalPropertyName2 { get; } Property Value Type Description System.String Methods | Improve this doc View source GetAdditionalValues(IEndpoint, IReadOnlyCollection<MessageHeader>, IBrokerMessageIdentifier) Returns the values for the two additional properties. Declaration (string Value1, string Value2) GetAdditionalValues(IEndpoint endpoint, IReadOnlyCollection<MessageHeader> headers, IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IEndpoint endpoint The target endpoint. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. IBrokerMessageIdentifier brokerMessageIdentifier The message identifier at broker level (e.g. the Kafka offset). Returns Type Description System.ValueTuple < System.String , System.String > Returns a tuple containing the values for the two additional properties."
  },
  "api/Silverback.Diagnostics.IBrokerLogEnricher-1.html": {
    "href": "api/Silverback.Diagnostics.IBrokerLogEnricher-1.html",
    "title": "Interface IBrokerLogEnricher<TEndpoint> | Silverback",
    "keywords": "Interface IBrokerLogEnricher<TEndpoint> Provides enrichment for the logs written in the context of the consumers and producers, for the specified endpoint type. Inherited Members IBrokerLogEnricher.AdditionalPropertyName1 IBrokerLogEnricher.AdditionalPropertyName2 IBrokerLogEnricher.GetAdditionalValues(IEndpoint, IReadOnlyCollection<MessageHeader>, IBrokerMessageIdentifier) Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IBrokerLogEnricher<TEndpoint> : IBrokerLogEnricher where TEndpoint : Endpoint Type Parameters Name Description TEndpoint The type of the endpoint that this enricher can be used for."
  },
  "api/Silverback.Diagnostics.IInboundLogger-1.html": {
    "href": "api/Silverback.Diagnostics.IInboundLogger-1.html",
    "title": "Interface IInboundLogger<TCategoryName> | Silverback",
    "keywords": "Interface IInboundLogger<TCategoryName> An Microsoft.Extensions.Logging.ILogger<TCategoryName> with some specific methods to log inbound messages related events. Inherited Members ISilverbackLogger.InnerLogger ISilverbackLogger.IsEnabled(LogEvent) Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IInboundLogger<out TCategoryName> : ISilverbackLogger<TCategoryName>, ISilverbackLogger Type Parameters Name Description TCategoryName The type who's name is used for the logger category name. Methods | Improve this doc View source LogAlreadyProcessed(IRawInboundEnvelope) Logs the MessageAlreadyProcessed event. Declaration void LogAlreadyProcessed(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . | Improve this doc View source LogCannotMoveSequences(IRawInboundEnvelope, ISequence) Logs the CannotMoveSequences event. Declaration void LogCannotMoveSequences(IRawInboundEnvelope envelope, ISequence sequence) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . ISequence sequence The ISequence . | Improve this doc View source LogInboundLowLevelTrace(String, IRawInboundEnvelope, Exception, Func<Object[]>) Logs the LowLevelTracing event. Declaration void LogInboundLowLevelTrace(string message, IRawInboundEnvelope envelope, Exception exception, Func<object[]> argumentsProvider = null) Parameters Type Name Description System.String message The log message format string. IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception to be logged. System.Func < System.Object []> argumentsProvider The System.Func<TResult> returning the arguments to be used to format the message. | Improve this doc View source LogInboundLowLevelTrace(String, IRawInboundEnvelope, Func<Object[]>) Logs the LowLevelTracing event. Declaration void LogInboundLowLevelTrace(string message, IRawInboundEnvelope envelope, Func<object[]> argumentsProvider = null) Parameters Type Name Description System.String message The log message format string. IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Func < System.Object []> argumentsProvider The System.Func<TResult> returning the arguments to be used to format the message. | Improve this doc View source LogInboundTrace(LogEvent, IRawInboundEnvelope, Exception, Func<Object[]>) Logs the LowLevelTracing event. Declaration void LogInboundTrace(LogEvent logEvent, IRawInboundEnvelope envelope, Exception exception, Func<object[]> argumentsProvider = null) Parameters Type Name Description LogEvent logEvent The LogEvent . IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception to be logged. System.Func < System.Object []> argumentsProvider The System.Func<TResult> returning the arguments to be used to format the message. Remarks This method is less performing and therefore only events with Microsoft.Extensions.Logging.LogLevel.Trace level are allowed. | Improve this doc View source LogInboundTrace(LogEvent, IRawInboundEnvelope, Func<Object[]>) Logs the LowLevelTracing event. Declaration void LogInboundTrace(LogEvent logEvent, IRawInboundEnvelope envelope, Func<object[]> argumentsProvider = null) Parameters Type Name Description LogEvent logEvent The LogEvent . IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Func < System.Object []> argumentsProvider The System.Func<TResult> returning the arguments to be used to format the message. Remarks This method is less performing and therefore only events with Microsoft.Extensions.Logging.LogLevel.Trace level are allowed. | Improve this doc View source LogMoved(IRawInboundEnvelope, IProducerEndpoint) Logs the MessageMoved event. Declaration void LogMoved(IRawInboundEnvelope envelope, IProducerEndpoint targetEndpoint) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . IProducerEndpoint targetEndpoint The target IProducerEndpoint . | Improve this doc View source LogNullMessageSkipped(IRawInboundEnvelope) Logs the NullMessageSkipped event. Declaration void LogNullMessageSkipped(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . | Improve this doc View source LogProcessing(IRawInboundEnvelope) Logs the ProcessingInboundMessage event. Declaration void LogProcessing(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . | Improve this doc View source LogProcessingError(IRawInboundEnvelope, Exception) Logs the ErrorProcessingInboundMessage event. Declaration void LogProcessingError(IRawInboundEnvelope envelope, Exception exception) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogProcessingFatalError(IRawInboundEnvelope, Exception) Logs the ConsumerFatalError event. Declaration void LogProcessingFatalError(IRawInboundEnvelope envelope, Exception exception) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogRetryProcessing(IRawInboundEnvelope) Logs the RetryMessageProcessing event. Declaration void LogRetryProcessing(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . | Improve this doc View source LogRollbackToRetryFailed(IRawInboundEnvelope, Exception) Logs the RollbackToRetryFailed event. Declaration void LogRollbackToRetryFailed(IRawInboundEnvelope envelope, Exception exception) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogRollbackToSkipFailed(IRawInboundEnvelope, Exception) Logs the RollbackToSkipFailed event. Declaration void LogRollbackToSkipFailed(IRawInboundEnvelope envelope, Exception exception) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogSkipped(IRawInboundEnvelope) Logs the MessageSkipped event. Declaration void LogSkipped(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope ."
  },
  "api/Silverback.Diagnostics.ILogLevelDictionary.html": {
    "href": "api/Silverback.Diagnostics.ILogLevelDictionary.html",
    "title": "Interface ILogLevelDictionary | Silverback",
    "keywords": "Interface ILogLevelDictionary Maps Microsoft.Extensions.Logging.EventId s to the Microsoft.Extensions.Logging.LogLevel that should be used for it. Inherited Members System.Collections.Generic.IReadOnlyDictionary<Microsoft.Extensions.Logging.EventId, System.Func<System.Exception, Microsoft.Extensions.Logging.LogLevel, System.Lazy<System.String>, Microsoft.Extensions.Logging.LogLevel>>.ContainsKey(Microsoft.Extensions.Logging.EventId) System.Collections.Generic.IReadOnlyDictionary<Microsoft.Extensions.Logging.EventId, System.Func<System.Exception, Microsoft.Extensions.Logging.LogLevel, System.Lazy<System.String>, Microsoft.Extensions.Logging.LogLevel>>.TryGetValue(Microsoft.Extensions.Logging.EventId, System.Func<System.Exception, Microsoft.Extensions.Logging.LogLevel, System.Lazy<System.String>, Microsoft.Extensions.Logging.LogLevel>) System.Collections.Generic.IReadOnlyDictionary<Microsoft.Extensions.Logging.EventId, System.Func<System.Exception, Microsoft.Extensions.Logging.LogLevel, System.Lazy<System.String>, Microsoft.Extensions.Logging.LogLevel>>.Item[Microsoft.Extensions.Logging.EventId] System.Collections.Generic.IReadOnlyDictionary<Microsoft.Extensions.Logging.EventId, System.Func<System.Exception, Microsoft.Extensions.Logging.LogLevel, System.Lazy<System.String>, Microsoft.Extensions.Logging.LogLevel>>.Keys System.Collections.Generic.IReadOnlyDictionary<Microsoft.Extensions.Logging.EventId, System.Func<System.Exception, Microsoft.Extensions.Logging.LogLevel, System.Lazy<System.String>, Microsoft.Extensions.Logging.LogLevel>>.Values System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<Microsoft.Extensions.Logging.EventId, System.Func<System.Exception, Microsoft.Extensions.Logging.LogLevel, System.Lazy<System.String>, Microsoft.Extensions.Logging.LogLevel>>>.Count System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.Extensions.Logging.EventId, System.Func<System.Exception, Microsoft.Extensions.Logging.LogLevel, System.Lazy<System.String>, Microsoft.Extensions.Logging.LogLevel>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Silverback.Diagnostics Assembly : Silverback.Core.dll Syntax public interface ILogLevelDictionary : IReadOnlyDictionary<EventId, Func<Exception, LogLevel, Lazy<string>, LogLevel>>, IReadOnlyCollection<KeyValuePair<EventId, Func<Exception, LogLevel, Lazy<string>, LogLevel>>>, IEnumerable<KeyValuePair<EventId, Func<Exception, LogLevel, Lazy<string>, LogLevel>>>, IEnumerable"
  },
  "api/Silverback.Diagnostics.IntegrationLogEvents.html": {
    "href": "api/Silverback.Diagnostics.IntegrationLogEvents.html",
    "title": "Class IntegrationLogEvents | Silverback",
    "keywords": "Class IntegrationLogEvents Contains the LogEvent constants of all events logged by the Silverback.Integration package. Inheritance System.Object IntegrationLogEvents Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public static class IntegrationLogEvents Properties | Improve this doc View source BrokerConnected Gets the LogEvent representing the log that is written when connected to the message broker. Declaration public static LogEvent BrokerConnected { get; } Property Value Type Description LogEvent | Improve this doc View source BrokerConnecting Gets the LogEvent representing the log that is written when connecting to the message broker. Declaration public static LogEvent BrokerConnecting { get; } Property Value Type Description LogEvent | Improve this doc View source BrokerConnectionError Gets the LogEvent representing the log that is written when an exception is thrown when connecting to the message broker. Declaration public static LogEvent BrokerConnectionError { get; } Property Value Type Description LogEvent | Improve this doc View source BrokerDisconnected Gets the LogEvent representing the log that is written when disconnected from the message broker. Declaration public static LogEvent BrokerDisconnected { get; } Property Value Type Description LogEvent | Improve this doc View source BrokerDisconnecting Gets the LogEvent representing the log that is written when disconnecting from the message broker. Declaration public static LogEvent BrokerDisconnecting { get; } Property Value Type Description LogEvent | Improve this doc View source CallbackHandlerError Gets the LogEvent representing the log that is written when an exception is thrown by a broker callback handler. Declaration public static LogEvent CallbackHandlerError { get; } Property Value Type Description LogEvent | Improve this doc View source CannotMoveSequences Gets the LogEvent representing the log that is written when the MoveMessageErrorPolicy cannot be applied because the failing message belongs to a sequences (it's either chunked, being processed in batch, etc.). Declaration public static LogEvent CannotMoveSequences { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerCommitError Gets the LogEvent representing the log that is written when an error occurs in the consumer during the commit operation. Declaration public static LogEvent ConsumerCommitError { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerConnected Gets the LogEvent representing the log that is written when the consumer is connected to the endpoint and will start consuming. Declaration public static LogEvent ConsumerConnected { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerConnectError Gets the LogEvent representing the log that is written when an exception is thrown connecting the consumer. Declaration public static LogEvent ConsumerConnectError { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerDisconnected Gets the LogEvent representing the log that is written when the consumer is disconnected from the endpoint. Declaration public static LogEvent ConsumerDisconnected { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerDisconnectError Gets the LogEvent representing the log that is written when an exception is thrown disconnecting the consumer. Declaration public static LogEvent ConsumerDisconnectError { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerDisposingError Gets the LogEvent representing the log that is written when an error occurs while the consumer is disconnecting. This may in some cases cause inconsistencies, with some messages not being properly committed. Declaration public static LogEvent ConsumerDisposingError { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerFatalError Gets the LogEvent representing the log that is written when an unhandled error occurs while consuming and the consumer will be stopped. Declaration public static LogEvent ConsumerFatalError { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerRollbackError Gets the LogEvent representing the log that is written when an error occurs in the consumer during the rollback operation. Declaration public static LogEvent ConsumerRollbackError { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerStartError Gets the LogEvent representing the log that is written when an exception is thrown starting the consumer. Declaration public static LogEvent ConsumerStartError { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumerStopError Gets the LogEvent representing the log that is written when an exception is thrown stopping the consumer. Declaration public static LogEvent ConsumerStopError { get; } Property Value Type Description LogEvent | Improve this doc View source CreatingNewConsumer Gets the LogEvent representing the log that is written when a new consumer is being instantiated. Declaration public static LogEvent CreatingNewConsumer { get; } Property Value Type Description LogEvent | Improve this doc View source CreatingNewProducer Gets the LogEvent representing the log that is written when a new producer is being instantiated. Declaration public static LogEvent CreatingNewProducer { get; } Property Value Type Description LogEvent | Improve this doc View source EndpointConfiguratorError Gets the LogEvent representing the log that is written when an exception is thrown from within an IEndpointsConfigurator . Declaration public static LogEvent EndpointConfiguratorError { get; } Property Value Type Description LogEvent | Improve this doc View source ErrorAbortingInboundSequence Gets the LogEvent representing the log that is written when an error occurs while aborting an inbound sequence. Declaration public static LogEvent ErrorAbortingInboundSequence { get; } Property Value Type Description LogEvent | Improve this doc View source ErrorInitializingActivity Reserved, not used anymore. Declaration [Obsolete(\"Not used anymore.\", true)] public static LogEvent ErrorInitializingActivity { get; } Property Value Type Description LogEvent | Improve this doc View source ErrorProcessingInboundMessage Gets the LogEvent representing the log that is written when an error occurs while processing an inbound message. Declaration public static LogEvent ErrorProcessingInboundMessage { get; } Property Value Type Description LogEvent Remarks If the message belongs to a sequence the ErrorProcessingInboundSequence event is logged instead. | Improve this doc View source ErrorProcessingInboundSequence Gets the LogEvent representing the log that is written when an error occurs while processing an inbound sequence. Declaration public static LogEvent ErrorProcessingInboundSequence { get; } Property Value Type Description LogEvent | Improve this doc View source ErrorProcessingOutbox Gets the LogEvent representing the log that is written when an error occurs while the IOutboxWorker processes the outbox queue. Declaration public static LogEvent ErrorProcessingOutbox { get; } Property Value Type Description LogEvent | Improve this doc View source ErrorProducingMessage Gets the LogEvent representing the log that is written when an error occurs producing a message. Declaration public static LogEvent ErrorProducingMessage { get; } Property Value Type Description LogEvent | Improve this doc View source ErrorProducingOutboxStoredMessage Gets the LogEvent representing the log that is written when an error occurs while producing the message stored in the outbox. Declaration public static LogEvent ErrorProducingOutboxStoredMessage { get; } Property Value Type Description LogEvent | Improve this doc View source ErrorReconnectingConsumer Gets the LogEvent representing the log that is written when an exception is thrown reconnecting the consumer (auto recovery from errors). Declaration public static LogEvent ErrorReconnectingConsumer { get; } Property Value Type Description LogEvent | Improve this doc View source IncompleteSequenceAborted Gets the LogEvent representing the log that is written when an incomplete sequence is aborted because a new sequence starts before the current one is completed or the timeout elapses before the sequence can be completed). Declaration public static LogEvent IncompleteSequenceAborted { get; } Property Value Type Description LogEvent | Improve this doc View source InvalidEndpointConfiguration Gets the LogEvent representing the log that is written when trying to connect an endpoint with an invalid configuration. Declaration public static LogEvent InvalidEndpointConfiguration { get; } Property Value Type Description LogEvent | Improve this doc View source InvalidMessageProcessed Gets the LogEvent representing the log that is written when an invalid message has been processed (see MessageValidationMode ). Declaration public static LogEvent InvalidMessageProcessed { get; } Property Value Type Description LogEvent | Improve this doc View source InvalidMessageProduced Gets the LogEvent representing the log that is written when an invalid message has been produced (see MessageValidationMode ). Declaration public static LogEvent InvalidMessageProduced { get; } Property Value Type Description LogEvent | Improve this doc View source LowLevelTracing Gets the Microsoft.Extensions.Logging.EventId of the low level tracing logs. Declaration public static LogEvent LowLevelTracing { get; } Property Value Type Description LogEvent | Improve this doc View source MessageAddedToSequence Gets the LogEvent representing the log that is written when an inbound message is added to a sequence (e.g. ChunkSequence or a BatchSequence ). Declaration public static LogEvent MessageAddedToSequence { get; } Property Value Type Description LogEvent | Improve this doc View source MessageAlreadyProcessed Gets the LogEvent representing the log that is written when the message is being skipped since already processed (according to the stored offsets or message id). Declaration public static LogEvent MessageAlreadyProcessed { get; } Property Value Type Description LogEvent | Improve this doc View source MessageMoved Gets the LogEvent representing the log that is written when a message couldn't be processed and is moved to another endpoint. This event occurs when the MoveMessageErrorPolicy is applied. Declaration public static LogEvent MessageMoved { get; } Property Value Type Description LogEvent | Improve this doc View source MessageProduced Gets the LogEvent representing the log that is written when a message is produced. Declaration public static LogEvent MessageProduced { get; } Property Value Type Description LogEvent | Improve this doc View source MessageSkipped Gets the LogEvent representing the log that is written when a message couldn't be processed and is skipped. This event occurs when the SkipMessageErrorPolicy is applied. Declaration public static LogEvent MessageSkipped { get; } Property Value Type Description LogEvent | Improve this doc View source MessageWrittenToOutbox Gets the LogEvent representing the log that is written when the message is being written to the outbox. Declaration public static LogEvent MessageWrittenToOutbox { get; } Property Value Type Description LogEvent | Improve this doc View source NullMessageSkipped Gets the LogEvent representing the log that is written when a null message is skipped (see Skip . Declaration public static LogEvent NullMessageSkipped { get; } Property Value Type Description LogEvent | Improve this doc View source OutboxEmpty Gets the LogEvent representing the log that is written when the IOutboxWorker doesn't find any message in the outbox. Declaration public static LogEvent OutboxEmpty { get; } Property Value Type Description LogEvent | Improve this doc View source PolicyApplyRuleReturnedFalse Gets the LogEvent representing the log that is written during the evaluation of an error policy, when the policy isn't applied because of it's apply rule. Declaration public static LogEvent PolicyApplyRuleReturnedFalse { get; } Property Value Type Description LogEvent | Improve this doc View source PolicyChainCompleted Gets the LogEvent representing the log that is written when all chained policies have been applied but the processing still failed and the consumer will therefore be stopped. Declaration public static LogEvent PolicyChainCompleted { get; } Property Value Type Description LogEvent | Improve this doc View source PolicyExceptionExcluded Gets the LogEvent representing the log that is written during the evaluation of an error policy, when the policy isn't applied because the current exception type is in the exclusion list. Declaration public static LogEvent PolicyExceptionExcluded { get; } Property Value Type Description LogEvent | Improve this doc View source PolicyExceptionNotIncluded Gets the LogEvent representing the log that is written during the evaluation of an error policy, when the policy isn't applied because the current exception type is not in the inclusion list. Declaration public static LogEvent PolicyExceptionNotIncluded { get; } Property Value Type Description LogEvent | Improve this doc View source PolicyMaxFailedAttemptsExceeded Gets the LogEvent representing the log that is written during the evaluation of an error policy, when the maximum configured failed attempts for the policies are exceeded and the policy isn't applied anymore. Declaration public static LogEvent PolicyMaxFailedAttemptsExceeded { get; } Property Value Type Description LogEvent | Improve this doc View source ProcessingInboundMessage Gets the LogEvent representing the log that is written when an inbound message is being processed. Declaration public static LogEvent ProcessingInboundMessage { get; } Property Value Type Description LogEvent | Improve this doc View source ProcessingOutboxStoredMessage Gets the LogEvent representing the log that is written when the message stored in the outbox is being processed. Declaration public static LogEvent ProcessingOutboxStoredMessage { get; } Property Value Type Description LogEvent | Improve this doc View source ProducerConnected Gets the LogEvent representing the log that is written when the producer is connected to the endpoint and ready to produce. Declaration public static LogEvent ProducerConnected { get; } Property Value Type Description LogEvent | Improve this doc View source ProducerDisconnected Gets the LogEvent representing the log that is written when the producer is disconnected from the endpoint. Declaration public static LogEvent ProducerDisconnected { get; } Property Value Type Description LogEvent | Improve this doc View source ReadingMessagesFromOutbox Gets the LogEvent representing the log that is written when the IOutboxWorker loads a batch of enqueued messages. Declaration public static LogEvent ReadingMessagesFromOutbox { get; } Property Value Type Description LogEvent | Improve this doc View source RetryDelayed Gets the LogEvent representing the log that is written when a message couldn't be processed and a delay is applied before retrying it. Declaration public static LogEvent RetryDelayed { get; } Property Value Type Description LogEvent | Improve this doc View source RetryMessageProcessing Gets the LogEvent representing the log that is written when a message couldn't be processed and the retry policy is applied, processing the message again. This event occurs when the RetryErrorPolicy is applied. Declaration public static LogEvent RetryMessageProcessing { get; } Property Value Type Description LogEvent | Improve this doc View source RollbackToRetryFailed Gets the LogEvent representing the log that is written when a the rollback initiated by the RetryErrorPolicy fails with an exception. This will cause the consumer to be disconnected and reconnected. Declaration public static LogEvent RollbackToRetryFailed { get; } Property Value Type Description LogEvent | Improve this doc View source RollbackToSkipFailed Gets the LogEvent representing the log that is written when a the rollback initiated by the SkipMessageErrorPolicy fails with an exception. This will cause the consumer to be disconnected and reconnected. Declaration public static LogEvent RollbackToSkipFailed { get; } Property Value Type Description LogEvent | Improve this doc View source SequenceCompleted Gets the LogEvent representing the log that is written when all messages belonging to the sequence have been consumed and published to the internal bus. Declaration public static LogEvent SequenceCompleted { get; } Property Value Type Description LogEvent | Improve this doc View source SequenceProcessingAborted Gets the LogEvent representing the log that is written when the processing of a sequence of messages is aborted, but not because of an error (an ErrorProcessingInboundSequence is logged instead) or an incomplete sequence that gets discarded (an IncompleteSequenceAborted or an SkippingIncompleteSequence is logged instead). Declaration public static LogEvent SequenceProcessingAborted { get; } Property Value Type Description LogEvent | Improve this doc View source SequenceStarted Gets the LogEvent representing the log that is written when the first message of a new sequence is consumed. Declaration public static LogEvent SequenceStarted { get; } Property Value Type Description LogEvent | Improve this doc View source SkippingIncompleteSequence Gets the LogEvent representing the log that is written when an incomplete sequence is skipped because first consumed message of that sequence doesn't correspond to the actual sequence beginning (e.g. the first chunk). Declaration public static LogEvent SkippingIncompleteSequence { get; } Property Value Type Description LogEvent"
  },
  "api/Silverback.Diagnostics.IOutboundLogger-1.html": {
    "href": "api/Silverback.Diagnostics.IOutboundLogger-1.html",
    "title": "Interface IOutboundLogger<TCategoryName> | Silverback",
    "keywords": "Interface IOutboundLogger<TCategoryName> An ISilverbackLogger<TCategoryName> with some specific methods to log outbound messages related events. Inherited Members ISilverbackLogger.InnerLogger ISilverbackLogger.IsEnabled(LogEvent) Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IOutboundLogger<out TCategoryName> : ISilverbackLogger<TCategoryName>, ISilverbackLogger Type Parameters Name Description TCategoryName The type who's name is used for the logger category name. Methods | Improve this doc View source LogErrorProducingOutboxStoredMessage(IOutboundEnvelope, Exception) Logs the ErrorProducingOutboxStoredMessage event. Declaration void LogErrorProducingOutboxStoredMessage(IOutboundEnvelope envelope, Exception exception) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogProduced(IProducerEndpoint, String, IReadOnlyCollection<MessageHeader>, IBrokerMessageIdentifier) Logs the MessageProduced event. Declaration void LogProduced(IProducerEndpoint endpoint, string actualEndpointName, IReadOnlyCollection<MessageHeader> headers, IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IProducerEndpoint endpoint The IProducerEndpoint . System.String actualEndpointName The name of the actual target endpoint. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. IBrokerMessageIdentifier brokerMessageIdentifier The IBrokerMessageIdentifier . | Improve this doc View source LogProduced(IOutboundEnvelope) Logs the MessageProduced event. Declaration void LogProduced(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope . | Improve this doc View source LogProduceError(IProducerEndpoint, String, IReadOnlyCollection<MessageHeader>, Exception) Logs the ErrorProducingMessage event. Declaration void LogProduceError(IProducerEndpoint endpoint, string actualEndpointName, IReadOnlyCollection<MessageHeader> headers, Exception exception) Parameters Type Name Description IProducerEndpoint endpoint The IProducerEndpoint . System.String actualEndpointName The name of the actual target endpoint. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.Exception exception The System.Exception . | Improve this doc View source LogProduceError(IOutboundEnvelope, Exception) Logs the ErrorProducingMessage event. Declaration void LogProduceError(IOutboundEnvelope envelope, Exception exception) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope . System.Exception exception The System.Exception . | Improve this doc View source LogWrittenToOutbox(IOutboundEnvelope) Logs the MessageWrittenToOutbox event. Declaration void LogWrittenToOutbox(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope ."
  },
  "api/Silverback.Diagnostics.ISilverbackLogger.html": {
    "href": "api/Silverback.Diagnostics.ISilverbackLogger.html",
    "title": "Interface ISilverbackLogger | Silverback",
    "keywords": "Interface ISilverbackLogger Used to perform logging in Silverback. Namespace : Silverback.Diagnostics Assembly : Silverback.Core.dll Syntax public interface ISilverbackLogger Properties | Improve this doc View source InnerLogger Gets the underlying Microsoft.Extensions.Logging.ILogger . Declaration ILogger InnerLogger { get; } Property Value Type Description Microsoft.Extensions.Logging.ILogger Methods | Improve this doc View source IsEnabled(LogEvent) Checks if the given LogEvent is enabled according to its default or overridden Microsoft.Extensions.Logging.LogLevel . Declaration bool IsEnabled(LogEvent logEvent) Parameters Type Name Description LogEvent logEvent The LogEvent to be checked. Returns Type Description System.Boolean true if enabled."
  },
  "api/Silverback.Diagnostics.ISilverbackLogger-1.html": {
    "href": "api/Silverback.Diagnostics.ISilverbackLogger-1.html",
    "title": "Interface ISilverbackLogger<TCategoryName> | Silverback",
    "keywords": "Interface ISilverbackLogger<TCategoryName> Used to perform logging in Silverback. Inherited Members ISilverbackLogger.InnerLogger ISilverbackLogger.IsEnabled(LogEvent) Namespace : Silverback.Diagnostics Assembly : Silverback.Core.dll Syntax public interface ISilverbackLogger<out TCategoryName> : ISilverbackLogger Type Parameters Name Description TCategoryName The type who's name is used for the logger category name."
  },
  "api/Silverback.Diagnostics.KafkaActivityEnricher.html": {
    "href": "api/Silverback.Diagnostics.KafkaActivityEnricher.html",
    "title": "Class KafkaActivityEnricher | Silverback",
    "keywords": "Class KafkaActivityEnricher Enriches the System.Diagnostics.Activity with Kafka specific tags. Inheritance System.Object KafkaActivityEnricher Implements IBrokerActivityEnricher < KafkaConsumerEndpoint > IBrokerActivityEnricher < KafkaProducerEndpoint > IBrokerActivityEnricher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaActivityEnricher : IBrokerActivityEnricher<KafkaConsumerEndpoint>, IBrokerActivityEnricher<KafkaProducerEndpoint>, IBrokerActivityEnricher Methods | Improve this doc View source EnrichInboundActivity(Activity, ConsumerPipelineContext) Enriches Activities created by the ActivityConsumerBehavior . Declaration public void EnrichInboundActivity(Activity activity, ConsumerPipelineContext consumerContext) Parameters Type Name Description System.Diagnostics.Activity activity The System.Diagnostics.Activity to be enriched. ConsumerPipelineContext consumerContext The ConsumerPipelineContext . | Improve this doc View source EnrichOutboundActivity(Activity, ProducerPipelineContext) Enriches Activities created by the ActivityProducerBehavior . Declaration public void EnrichOutboundActivity(Activity activity, ProducerPipelineContext producerContext) Parameters Type Name Description System.Diagnostics.Activity activity The System.Diagnostics.Activity to be enriched. ProducerPipelineContext producerContext The ProducerPipelineContext . Implements IBrokerActivityEnricher<TEndpoint> IBrokerActivityEnricher<TEndpoint> IBrokerActivityEnricher"
  },
  "api/Silverback.Diagnostics.KafkaLogEvents.html": {
    "href": "api/Silverback.Diagnostics.KafkaLogEvents.html",
    "title": "Class KafkaLogEvents | Silverback",
    "keywords": "Class KafkaLogEvents Contains the LogEvent constants of all events logged by the Silverback.Integration.Kafka package. Inheritance System.Object KafkaLogEvents Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.Kafka.dll Syntax public static class KafkaLogEvents Properties | Improve this doc View source ConfluentConsumerDisconnectError Gets the LogEvent representing the log that is written when an exception is thrown disconnecting the underlying Confluent.Kafka consumer. Declaration public static LogEvent ConfluentConsumerDisconnectError { get; } Property Value Type Description LogEvent | Improve this doc View source ConfluentConsumerError Gets the LogEvent representing the log that is written when a non fatal error is reported by the Confluent.Kafka.Consumer`2 . Declaration public static LogEvent ConfluentConsumerError { get; } Property Value Type Description LogEvent Remarks Fatal errors are reported with a different event id. | Improve this doc View source ConfluentConsumerFatalError Gets the LogEvent representing the log that is written when a fatal error is reported by the Confluent.Kafka.Consumer`2 . Declaration public static LogEvent ConfluentConsumerFatalError { get; } Property Value Type Description LogEvent Remarks Non fatal errors are reported with a different event id. | Improve this doc View source ConfluentConsumerLogCritical Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Consumer`2 . Declaration public static LogEvent ConfluentConsumerLogCritical { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConfluentConsumerLogDebug Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Consumer`2 . Declaration public static LogEvent ConfluentConsumerLogDebug { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConfluentConsumerLogError Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Consumer`2 . Declaration public static LogEvent ConfluentConsumerLogError { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConfluentConsumerLogInformation Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Consumer`2 . Declaration public static LogEvent ConfluentConsumerLogInformation { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConfluentConsumerLogWarning Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Consumer`2 . Declaration public static LogEvent ConfluentConsumerLogWarning { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConfluentProducerLogCritical Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Producer`2 . Declaration public static LogEvent ConfluentProducerLogCritical { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConfluentProducerLogDebug Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Producer`2 . Declaration public static LogEvent ConfluentProducerLogDebug { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConfluentProducerLogError Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Producer`2 . Declaration public static LogEvent ConfluentProducerLogError { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConfluentProducerLogInformation Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Producer`2 . Declaration public static LogEvent ConfluentProducerLogInformation { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConfluentProducerLogWarning Gets the LogEvent representing the log that is written when a log event is received from the underlying Confluent.Kafka.Producer`2 . Declaration public static LogEvent ConfluentProducerLogWarning { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ConsumerStatisticsReceived Gets the LogEvent representing the log that is written when the consumer statistics are received. Declaration public static LogEvent ConsumerStatisticsReceived { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumingCanceled Gets the LogEvent representing the log that is written when the Consume is aborted (usually because the broker is being disconnected or the application is exiting). Declaration public static LogEvent ConsumingCanceled { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumingMessage Gets the LogEvent representing the log that is written when a message is consumed from a Kafka topic. Declaration public static LogEvent ConsumingMessage { get; } Property Value Type Description LogEvent | Improve this doc View source CreatingConfluentProducer Gets the LogEvent representing the log that is written when the Confluent.Kafka.Producer`2 is being instantiated. Declaration public static LogEvent CreatingConfluentProducer { get; } Property Value Type Description LogEvent | Improve this doc View source EndOfPartition Gets the LogEvent representing the log that is written when the end of partition is reached. Declaration public static LogEvent EndOfPartition { get; } Property Value Type Description LogEvent | Improve this doc View source ErrorRecoveringFromKafkaException Gets the LogEvent representing the log that is written when the KafkaConsumer is unable to recover from the KafkaExceptionAutoRecovery . Declaration [Obsolete(\"Not used anymore.\", true)] public static LogEvent ErrorRecoveringFromKafkaException { get; } Property Value Type Description LogEvent | Improve this doc View source KafkaErrorHandlerError Gets the LogEvent representing the log that is written when the custom error handler throws an unhandled exception. Declaration public static LogEvent KafkaErrorHandlerError { get; } Property Value Type Description LogEvent | Improve this doc View source KafkaExceptionAutoRecovery Gets the LogEvent representing the log that is written when a Confluent.Kafka.KafkaException is thrown inside the Consume method. The consumer will automatically recover from these exceptions ( EnableAutoRecovery is true ). Declaration public static LogEvent KafkaExceptionAutoRecovery { get; } Property Value Type Description LogEvent | Improve this doc View source KafkaExceptionNoAutoRecovery Gets the LogEvent representing the log that is written when a Confluent.Kafka.KafkaException is thrown inside the Consume method. The consumer will be stopped ( EnableAutoRecovery is false ). Declaration public static LogEvent KafkaExceptionNoAutoRecovery { get; } Property Value Type Description LogEvent | Improve this doc View source KafkaLogHandlerError Gets the LogEvent representing the log that is written when the custom log handler throws an unhandled exception. Declaration public static LogEvent KafkaLogHandlerError { get; } Property Value Type Description LogEvent | Improve this doc View source OffsetCommitError Gets the LogEvent representing the log that is written when an error occurs while committing the offset. Declaration public static LogEvent OffsetCommitError { get; } Property Value Type Description LogEvent | Improve this doc View source OffsetCommitted Gets the LogEvent representing the log that is written when an offset is successfully committed. Declaration public static LogEvent OffsetCommitted { get; } Property Value Type Description LogEvent | Improve this doc View source PartitionAssigned Gets the LogEvent representing the log that is written when a new consumer group partition assignment has been received by a consumer. Declaration public static LogEvent PartitionAssigned { get; } Property Value Type Description LogEvent Remarks An event will be logged for each assigned partition. | Improve this doc View source PartitionManuallyAssigned Gets the LogEvent representing the log that is written when the partitions are manually assigned. Declaration public static LogEvent PartitionManuallyAssigned { get; } Property Value Type Description LogEvent Remarks An event will be logged for each assigned partition. | Improve this doc View source PartitionOffsetReset Gets the LogEvent representing the log that is written when the offset of an assigned partition is being reset. Declaration public static LogEvent PartitionOffsetReset { get; } Property Value Type Description LogEvent | Improve this doc View source PartitionRevoked Gets the LogEvent representing the log that is written when a group partition assignment is being revoked. Declaration public static LogEvent PartitionRevoked { get; } Property Value Type Description LogEvent Remarks An event will be logged for each revoked partition. | Improve this doc View source PollTimeoutAutoRecovery Gets the LogEvent representing the log that is written when a poll timeout is notified. The consumer will automatically recover from these situation ( EnableAutoRecovery is true ). Declaration public static LogEvent PollTimeoutAutoRecovery { get; } Property Value Type Description LogEvent | Improve this doc View source PollTimeoutNoAutoRecovery Gets the LogEvent representing the log that is written when a poll timeout is notified. The consumer will be stopped ( EnableAutoRecovery is false ). Declaration public static LogEvent PollTimeoutNoAutoRecovery { get; } Property Value Type Description LogEvent | Improve this doc View source ProduceNotAcknowledged Gets the LogEvent representing the log that is written when the message is sent to the broker but no acknowledge is received. This is logged only if ThrowIfNotAcknowledged is false . Declaration public static LogEvent ProduceNotAcknowledged { get; } Property Value Type Description LogEvent | Improve this doc View source ProducerStatisticsReceived Gets the LogEvent representing the log that is written when the producer statistics are received. Declaration public static LogEvent ProducerStatisticsReceived { get; } Property Value Type Description LogEvent | Improve this doc View source StatisticsDeserializationError Gets the LogEvent representing the log that is written when the statistics JSON cannot be deserialized. Declaration public static LogEvent StatisticsDeserializationError { get; } Property Value Type Description LogEvent"
  },
  "api/Silverback.Diagnostics.LogEvent.html": {
    "href": "api/Silverback.Diagnostics.LogEvent.html",
    "title": "Class LogEvent | Silverback",
    "keywords": "Class LogEvent Encapsulates the log level, id and message. Inheritance System.Object LogEvent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Diagnostics Assembly : Silverback.Core.dll Syntax public class LogEvent Constructors | Improve this doc View source LogEvent(LogLevel, EventId, String) Initializes a new instance of the LogEvent class. Declaration public LogEvent(LogLevel level, EventId eventId, string message) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel level The default Microsoft.Extensions.Logging.LogLevel . Microsoft.Extensions.Logging.EventId eventId The EventId . System.String message The logged message. Properties | Improve this doc View source EventId Gets the EventId . Declaration public EventId EventId { get; } Property Value Type Description Microsoft.Extensions.Logging.EventId | Improve this doc View source Level Gets the default Microsoft.Extensions.Logging.LogLevel . Declaration public LogLevel Level { get; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel | Improve this doc View source Message Gets the logged message. Declaration public string Message { get; } Property Value Type Description System.String"
  },
  "api/Silverback.Diagnostics.MqttLogEvents.html": {
    "href": "api/Silverback.Diagnostics.MqttLogEvents.html",
    "title": "Class MqttLogEvents | Silverback",
    "keywords": "Class MqttLogEvents Contains the LogEvent constants of all events logged by the Silverback.Integration.Mqtt package. Inheritance System.Object MqttLogEvents Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.MQTT.dll Syntax public static class MqttLogEvents Properties | Improve this doc View source ConnectError Gets the LogEvent representing the log that is written when an error occurs while connecting to the MQTT broker. Declaration public static LogEvent ConnectError { get; } Property Value Type Description LogEvent | Improve this doc View source ConnectionLost Gets the LogEvent representing the log that is written when the connection to the MQTT broker is lost. Declaration public static LogEvent ConnectionLost { get; } Property Value Type Description LogEvent | Improve this doc View source ConnectRetryError Gets the LogEvent representing the log that is written when an error occurs while retrying to connect to the MQTT broker. Declaration public static LogEvent ConnectRetryError { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumingMessage Gets the LogEvent representing the log that is written when a message is consumed from a MQTT topic. Declaration public static LogEvent ConsumingMessage { get; } Property Value Type Description LogEvent | Improve this doc View source MqttClientLogError Gets the LogEvent representing the log that is written when a log event is received from the underlying MQTTnet.Client.MqttClient . Declaration public static LogEvent MqttClientLogError { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source MqttClientLogInformation Gets the LogEvent representing the log that is written when a log event is received from the underlying MQTTnet.Client.MqttClient . Declaration public static LogEvent MqttClientLogInformation { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source MqttClientLogVerbose Gets the LogEvent representing the log that is written when a log event is received from the underlying MQTTnet.Client.MqttClient . Declaration public static LogEvent MqttClientLogVerbose { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source MqttClientLogWarning Gets the LogEvent representing the log that is written when a log event is received from the underlying MQTTnet.Client.MqttClient . Declaration public static LogEvent MqttClientLogWarning { get; } Property Value Type Description LogEvent Remarks A different event id is used per each log level. | Improve this doc View source ProducerQueueProcessingCanceled Gets the LogEvent representing the log that is written when the processing of the producer queue is being stopped (usually because the application is exiting). Declaration public static LogEvent ProducerQueueProcessingCanceled { get; } Property Value Type Description LogEvent"
  },
  "api/Silverback.Diagnostics.RabbitLogEvents.html": {
    "href": "api/Silverback.Diagnostics.RabbitLogEvents.html",
    "title": "Class RabbitLogEvents | Silverback",
    "keywords": "Class RabbitLogEvents Contains the LogEvent constants of all events logged by the Silverback.Integration.RabbitMQ package. Inheritance System.Object RabbitLogEvents Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Diagnostics Assembly : Silverback.Integration.RabbitMQ.dll Syntax public static class RabbitLogEvents Properties | Improve this doc View source Commit Gets the LogEvent representing the log that is written when a delivery tag is successfully committed. Declaration public static LogEvent Commit { get; } Property Value Type Description LogEvent | Improve this doc View source CommitError Reserved, not used anymore. Declaration [Obsolete(\"Logged in the base consumer.\", true)] public static LogEvent CommitError { get; } Property Value Type Description LogEvent | Improve this doc View source ConsumingMessage Gets the LogEvent representing the log that is written when a message is consumed from a Rabbit queue. Declaration public static LogEvent ConsumingMessage { get; } Property Value Type Description LogEvent | Improve this doc View source ProducerQueueProcessingCanceled Gets the LogEvent representing the log that is written when the processing of the producer queue is being stopped (usually because the application is exiting). Declaration public static LogEvent ProducerQueueProcessingCanceled { get; } Property Value Type Description LogEvent | Improve this doc View source Rollback Gets the LogEvent representing the log that is written when a delivery tag is successfully rolled back. Declaration public static LogEvent Rollback { get; } Property Value Type Description LogEvent | Improve this doc View source RollbackError Reserved, not used anymore. Declaration [Obsolete(\"Logged in the base consumer.\", true)] public static LogEvent RollbackError { get; } Property Value Type Description LogEvent"
  },
  "api/Silverback.Domain.DomainEntity.html": {
    "href": "api/Silverback.Domain.DomainEntity.html",
    "title": "Class DomainEntity | Silverback",
    "keywords": "Class DomainEntity The base class for the domain entities that encapsulate domain events. Inheritance System.Object MessagesSource < IDomainEvent > DomainEntity Implements IMessagesSource Inherited Members MessagesSource<IDomainEvent>.GetMessages() MessagesSource<IDomainEvent>.ClearMessages() MessagesSource<IDomainEvent>.AddEvent(IDomainEvent) MessagesSource<IDomainEvent>.AddEvent<TEvent>(Boolean) MessagesSource<IDomainEvent>.RemoveEvent(IDomainEvent) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public abstract class DomainEntity : MessagesSource<IDomainEvent>, IMessagesSource Remarks It's not mandatory to use this base class as long as long as the domain entities implement the IMessagesSource interface. Properties | Improve this doc View source DomainEvents Gets the domain events that have been added but not yet published. Declaration [NotMapped] public IEnumerable<IDomainEvent> DomainEvents { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IDomainEvent > Implements IMessagesSource"
  },
  "api/Silverback.Domain.DomainEvent-1.html": {
    "href": "api/Silverback.Domain.DomainEvent-1.html",
    "title": "Class DomainEvent<TEntity> | Silverback",
    "keywords": "Class DomainEvent<TEntity> An event that generates inside the domain (model). Inheritance System.Object DomainEvent<TEntity> Implements IDomainEvent <TEntity> IDomainEvent IMessageWithSource IEvent IMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public abstract class DomainEvent<TEntity> : IDomainEvent<TEntity>, IDomainEvent, IMessageWithSource, IEvent, IMessage where TEntity : class Type Parameters Name Description TEntity The type of the related domain entity. Properties | Improve this doc View source Source Gets the reference to the domain entity that generated this event. Declaration public TEntity Source { get; set; } Property Value Type Description TEntity Explicit Interface Implementations | Improve this doc View source IMessageWithSource.Source Gets or sets the reference to the object that generated the message. Declaration object IMessageWithSource.Source { get; set; } Returns Type Description System.Object Implements IDomainEvent<TEntity> IDomainEvent IMessageWithSource IEvent IMessage"
  },
  "api/Silverback.Domain.EntityEvent.html": {
    "href": "api/Silverback.Domain.EntityEvent.html",
    "title": "Class EntityEvent | Silverback",
    "keywords": "Class EntityEvent A recorded event that can be re-applied to rebuild the entity status. Inheritance System.Object EntityEvent Implements IEntityEvent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax public abstract class EntityEvent : IEntityEvent Properties | Improve this doc View source Sequence Gets or sets the sequence number that is used to replay the messages in the right order. Declaration [JsonIgnore] public int Sequence { get; set; } Property Value Type Description System.Int32 | Improve this doc View source Timestamp Gets or sets the datetime when the event occured. Declaration [JsonIgnore] public DateTime Timestamp { get; set; } Property Value Type Description System.DateTime Implements IEntityEvent"
  },
  "api/Silverback.Domain.EventSourcingDomainEntity-1.html": {
    "href": "api/Silverback.Domain.EventSourcingDomainEntity-1.html",
    "title": "Class EventSourcingDomainEntity<TKey> | Silverback",
    "keywords": "Class EventSourcingDomainEntity<TKey> The base class for the domain entities that are persisted in the event store. Inheritance System.Object MessagesSource < System.Object > EventSourcingDomainEntity <TKey, System.Object > EventSourcingDomainEntity<TKey> Implements IMessagesSource IEventSourcingDomainEntity <TKey> IEventSourcingDomainEntity Inherited Members EventSourcingDomainEntity<TKey, Object>.DomainEvents EventSourcingDomainEntity<TKey, Object>.Events EventSourcingDomainEntity<TKey, Object>.Id EventSourcingDomainEntity<TKey, Object>.GetVersion() EventSourcingDomainEntity<TKey, Object>.GetNewEvents() EventSourcingDomainEntity<TKey, Object>.AddAndApplyEvent(IEntityEvent) MessagesSource<Object>.GetMessages() MessagesSource<Object>.ClearMessages() MessagesSource<Object>.AddEvent(Object) MessagesSource<Object>.AddEvent<TEvent>(Boolean) MessagesSource<Object>.RemoveEvent(Object) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax public abstract class EventSourcingDomainEntity<TKey> : EventSourcingDomainEntity<TKey, object>, IMessagesSource, IEventSourcingDomainEntity<TKey>, IEventSourcingDomainEntity Type Parameters Name Description TKey The type of the entity key. Remarks It's not mandatory to use this base class as long as long as the domain entities implement the IEventSourcingDomainEntity<TKey> interface. Constructors | Improve this doc View source EventSourcingDomainEntity() Initializes a new instance of the EventSourcingDomainEntity<TKey> class. Declaration protected EventSourcingDomainEntity() | Improve this doc View source EventSourcingDomainEntity(IReadOnlyCollection<IEntityEvent>) Initializes a new instance of the EventSourcingDomainEntity<TKey> class from the stored events. Declaration protected EventSourcingDomainEntity(IReadOnlyCollection<IEntityEvent> events) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IEntityEvent > events The stored events to be re-applied to rebuild the entity state. Implements IMessagesSource IEventSourcingDomainEntity<TKey> IEventSourcingDomainEntity"
  },
  "api/Silverback.Domain.EventSourcingDomainEntity-2.html": {
    "href": "api/Silverback.Domain.EventSourcingDomainEntity-2.html",
    "title": "Class EventSourcingDomainEntity<TKey, TDomainEvent> | Silverback",
    "keywords": "Class EventSourcingDomainEntity<TKey, TDomainEvent> The base class for the domain entities that are persisted in the event store. Inheritance System.Object MessagesSource <TDomainEvent> EventSourcingDomainEntity<TKey, TDomainEvent> EventSourcingDomainEntity<TKey> Implements IMessagesSource IEventSourcingDomainEntity <TKey> IEventSourcingDomainEntity Inherited Members MessagesSource<TDomainEvent>.GetMessages() MessagesSource<TDomainEvent>.ClearMessages() MessagesSource<TDomainEvent>.AddEvent(TDomainEvent) MessagesSource<TDomainEvent>.AddEvent<TEvent>(Boolean) MessagesSource<TDomainEvent>.RemoveEvent(TDomainEvent) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax public abstract class EventSourcingDomainEntity<TKey, TDomainEvent> : MessagesSource<TDomainEvent>, IMessagesSource, IEventSourcingDomainEntity<TKey>, IEventSourcingDomainEntity Type Parameters Name Description TKey The type of the entity key. TDomainEvent The base type of the domain events. Remarks It's not mandatory to use this base class as long as long as the domain entities implement the IEventSourcingDomainEntity<TKey> interface. Constructors | Improve this doc View source EventSourcingDomainEntity() Initializes a new instance of the EventSourcingDomainEntity<TKey, TDomainEvent> class. Declaration protected EventSourcingDomainEntity() | Improve this doc View source EventSourcingDomainEntity(IReadOnlyCollection<IEntityEvent>) Initializes a new instance of the EventSourcingDomainEntity<TKey, TDomainEvent> class from the stored events. Declaration protected EventSourcingDomainEntity(IReadOnlyCollection<IEntityEvent> events) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IEntityEvent > events The stored events to be re-applied to rebuild the entity state. Properties | Improve this doc View source DomainEvents Gets the domain events that have been added but not yet published. Declaration [NotMapped] public IEnumerable<TDomainEvent> DomainEvents { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TDomainEvent> | Improve this doc View source Events Gets the events that have been applied to build the current state. Declaration [NotMapped] public IEnumerable<IEntityEvent> Events { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntityEvent > | Improve this doc View source Id Gets the entity identifier. Declaration public TKey Id { get; protected set; } Property Value Type Description TKey Methods | Improve this doc View source AddAndApplyEvent(IEntityEvent) Adds the specified event and applies it to update the entity state. Declaration protected virtual IEntityEvent AddAndApplyEvent(IEntityEvent entityEvent) Parameters Type Name Description IEntityEvent entityEvent The event to be added. Returns Type Description IEntityEvent The IEntityEvent that was added and applied. | Improve this doc View source GetNewEvents() Returns the new events that have to be persisted. Declaration public IEnumerable<IEntityEvent> GetNewEvents() Returns Type Description System.Collections.Generic.IEnumerable < IEntityEvent > The new events to be persisted. | Improve this doc View source GetVersion() Returns the version of the entity. In the default implementation this is a sequence that is increment every time a new event is applied. Declaration public int GetVersion() Returns Type Description System.Int32 The entity version. Implements IMessagesSource IEventSourcingDomainEntity<TKey> IEventSourcingDomainEntity"
  },
  "api/Silverback.Domain.EventSourcingException.html": {
    "href": "api/Silverback.Domain.EventSourcingException.html",
    "title": "Class EventSourcingException | Silverback",
    "keywords": "Class EventSourcingException The exception that is thrown when the stored events cannot be applied back to the domain entity. Inheritance System.Object System.Exception SilverbackException EventSourcingException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax [Serializable] public class EventSourcingException : SilverbackException, ISerializable Constructors | Improve this doc View source EventSourcingException() Initializes a new instance of the EventSourcingException class. Declaration public EventSourcingException() | Improve this doc View source EventSourcingException(SerializationInfo, StreamingContext) Initializes a new instance of the EventSourcingException class with the serialized data. Declaration protected EventSourcingException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EventSourcingException(String) Initializes a new instance of the EventSourcingException class with the specified message. Declaration public EventSourcingException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EventSourcingException(String, Exception) Initializes a new instance of the EventSourcingException class with the specified message and inner exception. Declaration public EventSourcingException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Domain.html": {
    "href": "api/Silverback.Domain.html",
    "title": "Namespace Silverback.Domain | Silverback",
    "keywords": "Namespace Silverback.Domain Classes DomainEntity The base class for the domain entities that encapsulate domain events. DomainEvent<TEntity> An event that generates inside the domain (model). EntityEvent A recorded event that can be re-applied to rebuild the entity status. EventSourcingDomainEntity<TKey> The base class for the domain entities that are persisted in the event store. EventSourcingDomainEntity<TKey, TDomainEvent> The base class for the domain entities that are persisted in the event store. EventSourcingException The exception that is thrown when the stored events cannot be applied back to the domain entity. Interfaces IAggregateRoot This empty interface has no other purpose than help recognizing the aggregate root. IDomainEvent An event that generates inside the domain (model). IDomainEvent<TEntity> IEntityEvent A recorded event that can be re-applied to rebuild the entity status."
  },
  "api/Silverback.Domain.IAggregateRoot.html": {
    "href": "api/Silverback.Domain.IAggregateRoot.html",
    "title": "Interface IAggregateRoot | Silverback",
    "keywords": "Interface IAggregateRoot This empty interface has no other purpose than help recognizing the aggregate root. Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public interface IAggregateRoot"
  },
  "api/Silverback.Domain.IDomainEvent.html": {
    "href": "api/Silverback.Domain.IDomainEvent.html",
    "title": "Interface IDomainEvent | Silverback",
    "keywords": "Interface IDomainEvent An event that generates inside the domain (model). Inherited Members IMessageWithSource.Source Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public interface IDomainEvent : IMessageWithSource, IEvent, IMessage"
  },
  "api/Silverback.Domain.IDomainEvent-1.html": {
    "href": "api/Silverback.Domain.IDomainEvent-1.html",
    "title": "Interface IDomainEvent<TEntity> | Silverback",
    "keywords": "Interface IDomainEvent<TEntity> Namespace : Silverback.Domain Assembly : Silverback.Core.Model.dll Syntax public interface IDomainEvent<out TEntity> : IDomainEvent, IMessageWithSource, IEvent, IMessage where TEntity : class Type Parameters Name Description TEntity The type of the related domain entity. Properties | Improve this doc View source Source Gets the reference to the domain entity that generated this event. Declaration TEntity Source { get; } Property Value Type Description TEntity"
  },
  "api/Silverback.Domain.IEntityEvent.html": {
    "href": "api/Silverback.Domain.IEntityEvent.html",
    "title": "Interface IEntityEvent | Silverback",
    "keywords": "Interface IEntityEvent A recorded event that can be re-applied to rebuild the entity status. Namespace : Silverback.Domain Assembly : Silverback.EventSourcing.dll Syntax public interface IEntityEvent Properties | Improve this doc View source Sequence Gets or sets the sequence number that is used to replay the messages in the right order. Declaration int Sequence { get; set; } Property Value Type Description System.Int32 | Improve this doc View source Timestamp Gets or sets the datetime when the event occured. Declaration DateTime Timestamp { get; set; } Property Value Type Description System.DateTime"
  },
  "api/Silverback.EntityFrameworkCore.DbContextEventsPublisher.html": {
    "href": "api/Silverback.EntityFrameworkCore.DbContextEventsPublisher.html",
    "title": "Class DbContextEventsPublisher | Silverback",
    "keywords": "Class DbContextEventsPublisher Exposes some methods to handle domain events as part of the SaveChanges transaction. Inheritance System.Object DbContextEventsPublisher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.EntityFrameworkCore Assembly : Silverback.Core.EFCore30.dll Syntax public class DbContextEventsPublisher Constructors | Improve this doc View source DbContextEventsPublisher(IPublisher, DbContext) Initializes a new instance of the DbContextEventsPublisher class. Declaration public DbContextEventsPublisher(IPublisher publisher, DbContext dbContext) Parameters Type Name Description IPublisher publisher The IPublisher to be used to publish the events to the internal bus. Microsoft.EntityFrameworkCore.DbContext dbContext The Microsoft.EntityFrameworkCore.DbContext to be scanned for domain events. | Improve this doc View source DbContextEventsPublisher(Func<Object, IEnumerable<Object>>, Action<Object>, IPublisher, DbContext) Initializes a new instance of the DbContextEventsPublisher class. Declaration public DbContextEventsPublisher(Func<object, IEnumerable<object>> eventsSelector, Action<object> clearEventsAction, IPublisher publisher, DbContext dbContext) Parameters Type Name Description System.Func < System.Object , System.Collections.Generic.IEnumerable < System.Object >> eventsSelector The custom delegate to be used to get the events out of the entities being saved. System.Action < System.Object > clearEventsAction The custom delegate to be used to clear the events from the entities after they have been published. IPublisher publisher The IPublisher to be used to publish the events to the internal bus. Microsoft.EntityFrameworkCore.DbContext dbContext The Microsoft.EntityFrameworkCore.DbContext to be scanned for domain events. Methods | Improve this doc View source ExecuteSaveTransaction(Func<Int32>) Publishes the domain events generated by the tracked entities and then executes the provided save changes procedure. Declaration public int ExecuteSaveTransaction(Func<int> saveChanges) Parameters Type Name Description System.Func < System.Int32 > saveChanges The delegate to the original SaveChanges method. Returns Type Description System.Int32 The number of entities saved to the database. | Improve this doc View source ExecuteSaveTransactionAsync(Func<Task<Int32>>) Publishes the domain events generated by the tracked entities and then executes the provided save changes procedure. Declaration public Task<int> ExecuteSaveTransactionAsync(Func<Task<int>> saveChangesAsync) Parameters Type Name Description System.Func < System.Threading.Tasks.Task < System.Int32 >> saveChangesAsync The delegate to the original SaveChangesAsync method. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of entities saved to the database."
  },
  "api/Silverback.EntityFrameworkCore.html": {
    "href": "api/Silverback.EntityFrameworkCore.html",
    "title": "Namespace Silverback.EntityFrameworkCore | Silverback",
    "keywords": "Namespace Silverback.EntityFrameworkCore Classes DbContextEventsPublisher Exposes some methods to handle domain events as part of the SaveChanges transaction."
  },
  "api/Silverback.EventStore.DbEventStoreRepository-4.html": {
    "href": "api/Silverback.EventStore.DbEventStoreRepository-4.html",
    "title": "Class DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> | Silverback",
    "keywords": "Class DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> The base class for the event store repositories that persist the events into a database. Inheritance System.Object EventStoreRepository <TDomainEntity, TEventStoreEntity, TEventEntity> DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> Inherited Members EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.Store(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.StoreAsync(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.Remove(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.RemoveAsync(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntity(TDomainEntity, Boolean) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntityAsync(TDomainEntity, Boolean) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.AddEventStoreEntity(TEventStoreEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntity(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntityAsync(TDomainEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.MapEventStoreEntity(TDomainEntity, TEventStoreEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetDomainEntity(TEventStoreEntity, Nullable<DateTime>) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.MapEventEntity(IEntityEvent) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.MapEvent(TEventEntity) EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.RemoveCore(TEventStoreEntity) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public abstract class DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> : EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> where TDomainEntity : class, IEventSourcingDomainEntity<TKey> where TEventStoreEntity : EventStoreEntity<TEventEntity>, new() where TEventEntity : class, IEventEntity, new() Type Parameters Name Description TDomainEntity The type of the domain entity whose events are stored in this repository. TKey The type of the domain entity key. TEventStoreEntity The type of event store entity being persisted to the underlying storage. TEventEntity The base type of the events that will be associated to the event store entity. Constructors | Improve this doc View source DbEventStoreRepository(IDbContext) Initializes a new instance of the DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> class. Declaration protected DbEventStoreRepository(IDbContext dbContext) Parameters Type Name Description IDbContext dbContext The IDbContext to use as storage. Properties | Improve this doc View source EventStores Gets the System.Linq.IQueryable<T> of event store entities. Declaration protected IQueryable<TEventStoreEntity> EventStores { get; } Property Value Type Description System.Linq.IQueryable <TEventStoreEntity> Remarks This System.Linq.IQueryable<T> is pre-configured to include the events and is meant for read only (changes are not being tracked). Methods | Improve this doc View source AddEventStoreEntity(TEventStoreEntity) Adds the new event store entity to the storage, without committing yet. Declaration protected override void AddEventStoreEntity(TEventStoreEntity eventStoreEntity) Parameters Type Name Description TEventStoreEntity eventStoreEntity The event store entity to be added. Overrides Silverback.EventStore.EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.AddEventStoreEntity(TEventStoreEntity) Remarks In EF Core this equals to adding the entity to the DbSet without calling SaveChanges (that will be called later by the framework). | Improve this doc View source Find(Expression<Func<TEventStoreEntity, Boolean>>, Nullable<DateTime>) Finds the event store matching the specified predicate and if found returns the domain entity after having applied the stored events. Declaration public TDomainEntity Find(Expression<Func<TEventStoreEntity, bool>> predicate, DateTime? snapshot = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TEventStoreEntity, System.Boolean >> predicate The predicate applied to get the desired event store. System.Nullable < System.DateTime > snapshot The optional snapshot datetime. When not null only the events registered until the specified datetime are applied, returning the entity in its state back in that moment. Returns Type Description TDomainEntity The domain entity or null if not found. | Improve this doc View source FindAsync(Expression<Func<TEventStoreEntity, Boolean>>, Nullable<DateTime>) Finds the event store matching the specified predicate and if found returns the domain entity after having applied the stored events. Declaration public async Task<TDomainEntity> FindAsync(Expression<Func<TEventStoreEntity, bool>> predicate, DateTime? snapshot = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TEventStoreEntity, System.Boolean >> predicate The predicate applied to get the desired event store. System.Nullable < System.DateTime > snapshot The optional snapshot datetime. When not null only the events registered until the specified datetime are applied, returning the entity in its state back in that moment. Returns Type Description System.Threading.Tasks.Task <TDomainEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the domain entity or null if not found. | Improve this doc View source GetEventStoreEntity(TDomainEntity) Returns the event store entity related to the specified domain entity. Declaration protected override TEventStoreEntity GetEventStoreEntity(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity. Returns Type Description TEventStoreEntity The event store entity. Overrides Silverback.EventStore.EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntity(TDomainEntity) | Improve this doc View source GetEventStoreEntityAsync(TDomainEntity) Returns the event store entity related to the specified domain entity. Declaration protected override async Task<TEventStoreEntity> GetEventStoreEntityAsync(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity. Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the event store entity. Overrides Silverback.EventStore.EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.GetEventStoreEntityAsync(TDomainEntity) | Improve this doc View source RemoveCore(TEventStoreEntity) Removes the event store entity and all related events from the store. Declaration protected override void RemoveCore(TEventStoreEntity eventStore) Parameters Type Name Description TEventStoreEntity eventStore The entity to be removed. Overrides Silverback.EventStore.EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity>.RemoveCore(TEventStoreEntity)"
  },
  "api/Silverback.EventStore.EventEntity.html": {
    "href": "api/Silverback.EventStore.EventEntity.html",
    "title": "Class EventEntity | Silverback",
    "keywords": "Class EventEntity The stored entity that contains the information about an event applied to a domain entity. Inheritance System.Object EventEntity Implements IEventEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public abstract class EventEntity : IEventEntity Properties | Improve this doc View source ClrType Gets or sets the assembly qualified name of the event class. Declaration [MaxLength(500)] public string ClrType { get; set; } Property Value Type Description System.String | Improve this doc View source Sequence Gets or sets the sequence number that is used to replay the messages in the right order. Declaration public int Sequence { get; set; } Property Value Type Description System.Int32 | Improve this doc View source SerializedEvent Gets or sets the serialized event. Declaration public string SerializedEvent { get; set; } Property Value Type Description System.String | Improve this doc View source Timestamp Gets or sets the datetime when the event occured. Declaration public DateTime Timestamp { get; set; } Property Value Type Description System.DateTime Implements IEventEntity"
  },
  "api/Silverback.EventStore.EventStoreConcurrencyException.html": {
    "href": "api/Silverback.EventStore.EventStoreConcurrencyException.html",
    "title": "Class EventStoreConcurrencyException | Silverback",
    "keywords": "Class EventStoreConcurrencyException The exception that is thrown when the event store detects that the record being saved has been modified since it was read. Inheritance System.Object System.Exception SilverbackException EventStoreException EventStoreConcurrencyException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax [Serializable] public class EventStoreConcurrencyException : EventStoreException, ISerializable Constructors | Improve this doc View source EventStoreConcurrencyException() Initializes a new instance of the EventStoreConcurrencyException class. Declaration public EventStoreConcurrencyException() | Improve this doc View source EventStoreConcurrencyException(SerializationInfo, StreamingContext) Initializes a new instance of the EventStoreConcurrencyException class with the serialized data. Declaration protected EventStoreConcurrencyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EventStoreConcurrencyException(String) Initializes a new instance of the EventStoreConcurrencyException class with the specified message. Declaration public EventStoreConcurrencyException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EventStoreConcurrencyException(String, Exception) Initializes a new instance of the EventStoreConcurrencyException class with the specified message and inner exception. Declaration public EventStoreConcurrencyException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.EventStore.EventStoreEntity-1.html": {
    "href": "api/Silverback.EventStore.EventStoreEntity-1.html",
    "title": "Class EventStoreEntity<TEventEntity> | Silverback",
    "keywords": "Class EventStoreEntity<TEventEntity> The stored entity that contain/references all the events applied to a domain entity. Inheritance System.Object MessagesSource < System.Object > EventStoreEntity<TEventEntity> Implements IMessagesSource IEventStoreEntity <TEventEntity> Inherited Members MessagesSource<Object>.GetMessages() MessagesSource<Object>.ClearMessages() MessagesSource<Object>.AddEvent(Object) MessagesSource<Object>.AddEvent<TEvent>(Boolean) MessagesSource<Object>.RemoveEvent(Object) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public class EventStoreEntity<TEventEntity> : MessagesSource<object>, IMessagesSource, IEventStoreEntity<TEventEntity> where TEventEntity : IEventEntity Type Parameters Name Description TEventEntity The type of the related event entity that will be referenced. Remarks Used to implement the domain entities and automatically publish their events when the entity is saved to the underlying database. Properties | Improve this doc View source EntityVersion Gets or sets the version of the entity. Declaration public int EntityVersion { get; set; } Property Value Type Description System.Int32 Remarks In the default implementation this is a sequence that is increment every time a new event is applied. | Improve this doc View source Events Gets the events that have been applied to the domain entity. Declaration public ICollection<TEventEntity> Events { get; } Property Value Type Description System.Collections.Generic.ICollection <TEventEntity> Methods | Improve this doc View source AddDomainEvents(IEnumerable<Object>) Adds the specified events. Declaration public void AddDomainEvents(IEnumerable<object> events) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Object > events The events to be stored. Implements IMessagesSource IEventStoreEntity<TEventEntity>"
  },
  "api/Silverback.EventStore.EventStoreException.html": {
    "href": "api/Silverback.EventStore.EventStoreException.html",
    "title": "Class EventStoreException | Silverback",
    "keywords": "Class EventStoreException The base class for the exceptions related to the event store. Inheritance System.Object System.Exception SilverbackException EventStoreException EventStoreConcurrencyException EventStoreNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax [Serializable] public abstract class EventStoreException : SilverbackException, ISerializable Constructors | Improve this doc View source EventStoreException() Initializes a new instance of the EventStoreException class. Declaration protected EventStoreException() | Improve this doc View source EventStoreException(SerializationInfo, StreamingContext) Initializes a new instance of the EventStoreException class with the serialized data. Declaration protected EventStoreException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EventStoreException(String) Initializes a new instance of the EventStoreException class with the specified message. Declaration protected EventStoreException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EventStoreException(String, Exception) Initializes a new instance of the EventStoreException class with the specified message and inner exception. Declaration protected EventStoreException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.EventStore.EventStoreNotFoundException.html": {
    "href": "api/Silverback.EventStore.EventStoreNotFoundException.html",
    "title": "Class EventStoreNotFoundException | Silverback",
    "keywords": "Class EventStoreNotFoundException The exception that is thrown when the event store entity cannot be found. Inheritance System.Object System.Exception SilverbackException EventStoreException EventStoreNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax [Serializable] public class EventStoreNotFoundException : EventStoreException, ISerializable Constructors | Improve this doc View source EventStoreNotFoundException() Initializes a new instance of the EventStoreNotFoundException class. Declaration public EventStoreNotFoundException() | Improve this doc View source EventStoreNotFoundException(SerializationInfo, StreamingContext) Initializes a new instance of the EventStoreNotFoundException class with the serialized data. Declaration protected EventStoreNotFoundException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EventStoreNotFoundException(String) Initializes a new instance of the EventStoreNotFoundException class with the specified message. Declaration public EventStoreNotFoundException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EventStoreNotFoundException(String, Exception) Initializes a new instance of the EventStoreNotFoundException class with the specified message and inner exception. Declaration public EventStoreNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.EventStore.EventStoreRepository-3.html": {
    "href": "api/Silverback.EventStore.EventStoreRepository-3.html",
    "title": "Class EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> | Silverback",
    "keywords": "Class EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> The base class for the event store repositories. Inheritance System.Object EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public abstract class EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> where TDomainEntity : class, IEventSourcingDomainEntity where TEventStoreEntity : class, IEventStoreEntity<TEventEntity>, new() where TEventEntity : class, IEventEntity, new() Type Parameters Name Description TDomainEntity The type of the domain entity whose events are stored in this repository. TEventStoreEntity The type of event store entity being persisted to the underlying storage. TEventEntity The base type of the events that will be associated to the event store entity. Methods | Improve this doc View source AddEventStoreEntity(TEventStoreEntity) Adds the new event store entity to the storage, without committing yet. Declaration protected abstract void AddEventStoreEntity(TEventStoreEntity eventStoreEntity) Parameters Type Name Description TEventStoreEntity eventStoreEntity The event store entity to be added. Remarks In EF Core this equals to adding the entity to the DbSet without calling SaveChanges (that will be called later by the framework). | Improve this doc View source GetDomainEntity(TEventStoreEntity, Nullable<DateTime>) Rebuilds the domain entity applying the stored events. Declaration protected virtual TDomainEntity GetDomainEntity(TEventStoreEntity eventStoreEntity, DateTime? snapshot = null) Parameters Type Name Description TEventStoreEntity eventStoreEntity The event store entity referencing the events to be applied. System.Nullable < System.DateTime > snapshot The optional datetime of the snapshot to build. Specifying it will cause only the events up to this datetime to be applied. Returns Type Description TDomainEntity The domain entity rebuilt from the stored events. | Improve this doc View source GetEventStoreEntity(TDomainEntity) Returns the event store entity related to the specified domain entity. Declaration protected abstract TEventStoreEntity GetEventStoreEntity(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity. Returns Type Description TEventStoreEntity The event store entity. | Improve this doc View source GetEventStoreEntity(TDomainEntity, Boolean) Returns the event store entity related to the specified domain entity. Declaration protected virtual TEventStoreEntity GetEventStoreEntity(TDomainEntity domainEntity, bool addIfNotFound) Parameters Type Name Description TDomainEntity domainEntity The domain entity. System.Boolean addIfNotFound Specifies whether the entity must be created when not found. Returns Type Description TEventStoreEntity The event store entity. | Improve this doc View source GetEventStoreEntityAsync(TDomainEntity) Returns the event store entity related to the specified domain entity. Declaration protected abstract Task<TEventStoreEntity> GetEventStoreEntityAsync(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity. Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the event store entity. | Improve this doc View source GetEventStoreEntityAsync(TDomainEntity, Boolean) Returns the event store entity related to the specified domain entity. Declaration protected virtual async Task<TEventStoreEntity> GetEventStoreEntityAsync(TDomainEntity domainEntity, bool addIfNotFound) Parameters Type Name Description TDomainEntity domainEntity The domain entity. System.Boolean addIfNotFound Specifies whether the entity must be created when not found. Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the event store entity. | Improve this doc View source MapEvent(TEventEntity) Maps the persisted entity back to the IEntityEvent . Declaration protected virtual IEntityEvent MapEvent(TEventEntity eventEntity) Parameters Type Name Description TEventEntity eventEntity The stored event entity to be mapped. Returns Type Description IEntityEvent The IEntityEvent . | Improve this doc View source MapEventEntity(IEntityEvent) Maps the IEntityEvent to the related entity being persisted into the underlying storage. Declaration protected virtual TEventEntity MapEventEntity(IEntityEvent entityEvent) Parameters Type Name Description IEntityEvent entityEvent The entity event to be mapped. Returns Type Description TEventEntity The entity representing the IEntityEvent . | Improve this doc View source MapEventStoreEntity(TDomainEntity, TEventStoreEntity) Maps the domain entity to the event store entity. Declaration protected virtual void MapEventStoreEntity(TDomainEntity domainEntity, TEventStoreEntity eventStoreEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be mapped. TEventStoreEntity eventStoreEntity The event store entity to be initialized after the domain entity. Remarks This method should map the entity keys only. The events are handled automatically. | Improve this doc View source Remove(TDomainEntity) Removes the specified domain entity from the event store. Declaration public TEventStoreEntity Remove(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be removed. Returns Type Description TEventStoreEntity The event store entity that was removed. | Improve this doc View source RemoveAsync(TDomainEntity) Removes the specified domain entity from the event store. Declaration public async Task<TEventStoreEntity> RemoveAsync(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be removed. Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the event store entity that was removed. | Improve this doc View source RemoveCore(TEventStoreEntity) Removes the event store entity and all related events from the store. Declaration protected abstract void RemoveCore(TEventStoreEntity eventStore) Parameters Type Name Description TEventStoreEntity eventStore The entity to be removed. | Improve this doc View source Store(TDomainEntity) Stores the specified domain entity into the event store. Declaration public TEventStoreEntity Store(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be stored. Returns Type Description TEventStoreEntity The event store entity that was persisted. | Improve this doc View source StoreAsync(TDomainEntity) Stores the specified domain entity into the event store. Declaration public async Task<TEventStoreEntity> StoreAsync(TDomainEntity domainEntity) Parameters Type Name Description TDomainEntity domainEntity The domain entity to be stored. Returns Type Description System.Threading.Tasks.Task <TEventStoreEntity> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the event store entity that was persisted."
  },
  "api/Silverback.EventStore.html": {
    "href": "api/Silverback.EventStore.html",
    "title": "Namespace Silverback.EventStore | Silverback",
    "keywords": "Namespace Silverback.EventStore Classes DbEventStoreRepository<TDomainEntity, TKey, TEventStoreEntity, TEventEntity> The base class for the event store repositories that persist the events into a database. EventEntity The stored entity that contains the information about an event applied to a domain entity. EventStoreConcurrencyException The exception that is thrown when the event store detects that the record being saved has been modified since it was read. EventStoreEntity<TEventEntity> The stored entity that contain/references all the events applied to a domain entity. EventStoreException The base class for the exceptions related to the event store. EventStoreNotFoundException The exception that is thrown when the event store entity cannot be found. EventStoreRepository<TDomainEntity, TEventStoreEntity, TEventEntity> The base class for the event store repositories. Interfaces IEventEntity The stored entity that contains the information about an event applied to a domain entity. IEventSourcingDomainEntity A domain entity that is persisted in the event store. IEventSourcingDomainEntity<TKey> A domain entity that is persisted in the event store. IEventStoreEntity<TEventEntity> The stored entity that contain/references all the events applied to a domain entity."
  },
  "api/Silverback.EventStore.IEventEntity.html": {
    "href": "api/Silverback.EventStore.IEventEntity.html",
    "title": "Interface IEventEntity | Silverback",
    "keywords": "Interface IEventEntity The stored entity that contains the information about an event applied to a domain entity. Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public interface IEventEntity Properties | Improve this doc View source ClrType Gets or sets the assembly qualified name of the event class. Declaration string ClrType { get; set; } Property Value Type Description System.String | Improve this doc View source Sequence Gets or sets the sequence number that is used to replay the messages in the right order. Declaration int Sequence { get; set; } Property Value Type Description System.Int32 | Improve this doc View source SerializedEvent Gets or sets the serialized event. Declaration string SerializedEvent { get; set; } Property Value Type Description System.String | Improve this doc View source Timestamp Gets or sets the datetime when the event occured. Declaration DateTime Timestamp { get; set; } Property Value Type Description System.DateTime"
  },
  "api/Silverback.EventStore.IEventSourcingDomainEntity.html": {
    "href": "api/Silverback.EventStore.IEventSourcingDomainEntity.html",
    "title": "Interface IEventSourcingDomainEntity | Silverback",
    "keywords": "Interface IEventSourcingDomainEntity A domain entity that is persisted in the event store. Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public interface IEventSourcingDomainEntity Methods | Improve this doc View source GetNewEvents() Returns the new events that have to be persisted. Declaration IEnumerable<IEntityEvent> GetNewEvents() Returns Type Description System.Collections.Generic.IEnumerable < IEntityEvent > The new events to be persisted. | Improve this doc View source GetVersion() Returns the version of the entity. In the default implementation this is a sequence that is increment every time a new event is applied. Declaration int GetVersion() Returns Type Description System.Int32 The entity version."
  },
  "api/Silverback.EventStore.IEventSourcingDomainEntity-1.html": {
    "href": "api/Silverback.EventStore.IEventSourcingDomainEntity-1.html",
    "title": "Interface IEventSourcingDomainEntity<TKey> | Silverback",
    "keywords": "Interface IEventSourcingDomainEntity<TKey> A domain entity that is persisted in the event store. Inherited Members IEventSourcingDomainEntity.GetVersion() IEventSourcingDomainEntity.GetNewEvents() Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public interface IEventSourcingDomainEntity<out TKey> : IEventSourcingDomainEntity Type Parameters Name Description TKey The type of the entity key. Properties | Improve this doc View source Id Gets the entity identifier. Declaration TKey Id { get; } Property Value Type Description TKey"
  },
  "api/Silverback.EventStore.IEventStoreEntity-1.html": {
    "href": "api/Silverback.EventStore.IEventStoreEntity-1.html",
    "title": "Interface IEventStoreEntity<TEventEntity> | Silverback",
    "keywords": "Interface IEventStoreEntity<TEventEntity> The stored entity that contain/references all the events applied to a domain entity. Namespace : Silverback.EventStore Assembly : Silverback.EventSourcing.dll Syntax public interface IEventStoreEntity<TEventEntity> where TEventEntity : IEventEntity Type Parameters Name Description TEventEntity The type of the related event entity that will be referenced. Properties | Improve this doc View source EntityVersion Gets or sets the version of the entity. Declaration int EntityVersion { get; set; } Property Value Type Description System.Int32 Remarks In the default implementation this is a sequence that is increment every time a new event is applied. | Improve this doc View source Events Gets the events that have been applied to the domain entity. Declaration ICollection<TEventEntity> Events { get; } Property Value Type Description System.Collections.Generic.ICollection <TEventEntity> Methods | Improve this doc View source AddDomainEvents(IEnumerable<Object>) Adds the specified events. Declaration void AddDomainEvents(IEnumerable<object> events) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Object > events The events to be stored."
  },
  "api/Silverback.html": {
    "href": "api/Silverback.html",
    "title": "Namespace Silverback | Silverback",
    "keywords": "Namespace Silverback Classes InstanceIdentifier The identifier used to distinguish the instances of the same type. Used mostly for logging and debugging. SilverbackException The base class for all the custom exceptions thrown by Silverback. Interfaces ISorted Declares a SortIndex property that can be used to properly order the objects implementing this interface."
  },
  "api/Silverback.Infrastructure.html": {
    "href": "api/Silverback.Infrastructure.html",
    "title": "Namespace Silverback.Infrastructure | Silverback",
    "keywords": "Namespace Silverback.Infrastructure Classes RepositoryBase<TEntity> The base class for the repositories used to read and write data from a persistent storage."
  },
  "api/Silverback.Infrastructure.RepositoryBase-1.html": {
    "href": "api/Silverback.Infrastructure.RepositoryBase-1.html",
    "title": "Class RepositoryBase<TEntity> | Silverback",
    "keywords": "Class RepositoryBase<TEntity> The base class for the repositories used to read and write data from a persistent storage. Inheritance System.Object RepositoryBase<TEntity> DbInboundLog DbOffsetStore DbOutboxReader DbOutboxWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Infrastructure Assembly : Silverback.Integration.dll Syntax public abstract class RepositoryBase<TEntity> where TEntity : class Type Parameters Name Description TEntity The type of the entities being managed by the repository. Constructors | Improve this doc View source RepositoryBase(IDbContext) Initializes a new instance of the RepositoryBase<TEntity> class. Declaration protected RepositoryBase(IDbContext dbContext) Parameters Type Name Description IDbContext dbContext The IDbContext to be used. Properties | Improve this doc View source DbContext Gets the underlying IDbContext . Declaration protected IDbContext DbContext { get; } Property Value Type Description IDbContext | Improve this doc View source DbSet Gets the underlying IDbSet<TEntity> . Declaration protected IDbSet<TEntity> DbSet { get; } Property Value Type Description IDbSet <TEntity>"
  },
  "api/Silverback.InstanceIdentifier.html": {
    "href": "api/Silverback.InstanceIdentifier.html",
    "title": "Class InstanceIdentifier | Silverback",
    "keywords": "Class InstanceIdentifier The identifier used to distinguish the instances of the same type. Used mostly for logging and debugging. Inheritance System.Object InstanceIdentifier Implements System.IEquatable < InstanceIdentifier > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback Assembly : Silverback.Core.dll Syntax public sealed class InstanceIdentifier : IEquatable<InstanceIdentifier> Remarks Using this class instead of a System.Guid allocates more memory (about 152 bytes, instead of the 16 bytes used by a System.Guid ) because the value is stored directly as string to avoid extra allocations in the ToString() method (e.g. when writing to a log). This is also a reference type and passing is around requires less allocations. Constructors | Improve this doc View source InstanceIdentifier(Nullable<Guid>) Initializes a new instance of the InstanceIdentifier class. Declaration public InstanceIdentifier(Guid? value = null) Parameters Type Name Description System.Nullable < System.Guid > value The System.Guid representing the identifier value. If null a random one will be generated. Properties | Improve this doc View source Value Gets the identifier. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this doc View source Equals(InstanceIdentifier) Declaration public bool Equals(InstanceIdentifier other) Parameters Type Name Description InstanceIdentifier other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source ToString() Converts the InstanceIdentifier to a string. Declaration public override string ToString() Returns Type Description System.String The identifier value. Overrides System.Object.ToString() Operators | Improve this doc View source Equality(InstanceIdentifier, InstanceIdentifier) Declaration public static bool operator ==(InstanceIdentifier left, InstanceIdentifier right) Parameters Type Name Description InstanceIdentifier left InstanceIdentifier right Returns Type Description System.Boolean | Improve this doc View source Implicit(InstanceIdentifier to String) Converts the InstanceIdentifier to a string. Declaration public static implicit operator string (InstanceIdentifier identifier) Parameters Type Name Description InstanceIdentifier identifier The InstanceIdentifier to be converted. Returns Type Description System.String The identifier value. | Improve this doc View source Inequality(InstanceIdentifier, InstanceIdentifier) Declaration public static bool operator !=(InstanceIdentifier left, InstanceIdentifier right) Parameters Type Name Description InstanceIdentifier left InstanceIdentifier right Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/Silverback.ISorted.html": {
    "href": "api/Silverback.ISorted.html",
    "title": "Interface ISorted | Silverback",
    "keywords": "Interface ISorted Declares a SortIndex property that can be used to properly order the objects implementing this interface. Namespace : Silverback Assembly : Silverback.Core.dll Syntax public interface ISorted Remarks Used for example to sort the behaviors. The SortBySortIndex extension method can be used to sort the enumerable collections of objects implementing this interface. Properties | Improve this doc View source SortIndex Gets the sort index. Declaration int SortIndex { get; } Property Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.BinaryFiles.BinaryFileHandlerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.BinaryFileHandlerConsumerBehavior.html",
    "title": "Class BinaryFileHandlerConsumerBehavior | Silverback",
    "keywords": "Class BinaryFileHandlerConsumerBehavior Switches to the BinaryFileMessageSerializer if the message being consumed is a binary message (according to the x-message-type header). Inheritance System.Object BinaryFileHandlerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.BinaryFiles Assembly : Silverback.Integration.dll Syntax public class BinaryFileHandlerConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.BinaryFiles.BinaryFileHandlerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.BinaryFileHandlerProducerBehavior.html",
    "title": "Class BinaryFileHandlerProducerBehavior | Silverback",
    "keywords": "Class BinaryFileHandlerProducerBehavior Switches to the BinaryFileMessageSerializer if the message being produced implements the IBinaryFileMessage interface. Inheritance System.Object BinaryFileHandlerProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.BinaryFiles Assembly : Silverback.Integration.dll Syntax public class BinaryFileHandlerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.BinaryFiles.BinaryFileMessageSerializer.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.BinaryFileMessageSerializer.html",
    "title": "Class BinaryFileMessageSerializer | Silverback",
    "keywords": "Class BinaryFileMessageSerializer Handles the default implementation of IBinaryFileMessage . It's not really a serializer, since the raw binary content is transmitted as-is. Inheritance System.Object BinaryFileMessageSerializer Implements IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.BinaryFiles Assembly : Silverback.Integration.dll Syntax public class BinaryFileMessageSerializer : IMessageSerializer Properties | Improve this doc View source Default Gets the default static instance of BinaryFileMessageSerializer . Declaration public static BinaryFileMessageSerializer Default { get; } Property Value Type Description BinaryFileMessageSerializer | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public bool RequireHeaders { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. Implements IMessageSerializer"
  },
  "api/Silverback.Messaging.BinaryFiles.BinaryFileMessageSerializer-1.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.BinaryFileMessageSerializer-1.html",
    "title": "Class BinaryFileMessageSerializer<TModel> | Silverback",
    "keywords": "Class BinaryFileMessageSerializer<TModel> Handles the IBinaryFileMessage . It's not really a serializer, since the raw binary content is transmitted as-is. Inheritance System.Object BinaryFileMessageSerializer<TModel> Implements IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.BinaryFiles Assembly : Silverback.Integration.dll Syntax public class BinaryFileMessageSerializer<TModel> : IMessageSerializer where TModel : IBinaryFileMessage, new() Type Parameters Name Description TModel The type of the IBinaryFileMessage implementation. Properties | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public bool RequireHeaders { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. Implements IMessageSerializer"
  },
  "api/Silverback.Messaging.BinaryFiles.html": {
    "href": "api/Silverback.Messaging.BinaryFiles.html",
    "title": "Namespace Silverback.Messaging.BinaryFiles | Silverback",
    "keywords": "Namespace Silverback.Messaging.BinaryFiles Classes BinaryFileHandlerConsumerBehavior Switches to the BinaryFileMessageSerializer if the message being consumed is a binary message (according to the x-message-type header). BinaryFileHandlerProducerBehavior Switches to the BinaryFileMessageSerializer if the message being produced implements the IBinaryFileMessage interface. BinaryFileMessageSerializer Handles the default implementation of IBinaryFileMessage . It's not really a serializer, since the raw binary content is transmitted as-is. BinaryFileMessageSerializer<TModel> Handles the IBinaryFileMessage . It's not really a serializer, since the raw binary content is transmitted as-is."
  },
  "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsProvider-1.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsProvider-1.html",
    "title": "Class BrokerBehaviorsProvider<TBehavior> | Silverback",
    "keywords": "Class BrokerBehaviorsProvider<TBehavior> Provides the System.Collections.Generic.IReadOnlyList<T> of IProducerBehavior and IConsumerBehavior to be used in the IProducer and IConsumer pipeline. Inheritance System.Object BrokerBehaviorsProvider<TBehavior> Implements IBrokerBehaviorsProvider <TBehavior> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public class BrokerBehaviorsProvider<TBehavior> : IBrokerBehaviorsProvider<TBehavior> where TBehavior : IBrokerBehavior Type Parameters Name Description TBehavior The type of the behaviors to be provided, either IProducerBehavior or IConsumerBehavior . Constructors | Improve this doc View source BrokerBehaviorsProvider(IServiceProvider) Initializes a new instance of the BrokerBehaviorsProvider<TBehavior> class. Declaration public BrokerBehaviorsProvider(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the behaviors. Methods | Improve this doc View source GetBehaviorsList() Creates a new System.Collections.Generic.IReadOnlyList<T> of IProducerBehavior or IConsumerBehavior to be used in the IProducer or IConsumer pipeline. Declaration public IReadOnlyList<TBehavior> GetBehaviorsList() Returns Type Description System.Collections.Generic.IReadOnlyList <TBehavior> The ready-to-use System.Collections.Generic.Stack<T> of TBehavior . Implements IBrokerBehaviorsProvider<TBehavior>"
  },
  "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.Consumer.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.Consumer.html",
    "title": "Class BrokerBehaviorsSortIndexes.Consumer | Silverback",
    "keywords": "Class BrokerBehaviorsSortIndexes.Consumer Contains the sort index constants of the consumer behaviors added by Silverback.Integration. Inheritance System.Object BrokerBehaviorsSortIndexes.Consumer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public static class Consumer Fields | Improve this doc View source Activity The ActivityConsumerBehavior sort index. Declaration public const int Activity = 100 Field Value Type Description System.Int32 | Improve this doc View source BinaryFileHandler The BinaryFileHandlerConsumerBehavior sort index. Declaration public const int BinaryFileHandler = 800 Field Value Type Description System.Int32 | Improve this doc View source CustomHeadersMapper The CustomHeadersMapperConsumerBehavior sort index. Declaration public const int CustomHeadersMapper = 300 Field Value Type Description System.Int32 | Improve this doc View source Decryptor The DecryptorConsumerBehavior sort index. Declaration public const int Decryptor = 700 Field Value Type Description System.Int32 | Improve this doc View source Deserializer The DeserializerConsumerBehavior sort index. Declaration public const int Deserializer = 900 Field Value Type Description System.Int32 | Improve this doc View source ExactlyOnceGuard The ExactlyOnceGuardConsumerBehavior sort index. Declaration public const int ExactlyOnceGuard = 600 Field Value Type Description System.Int32 | Improve this doc View source FatalExceptionLogger The FatalExceptionLoggerConsumerBehavior sort index. Declaration public const int FatalExceptionLogger = 200 Field Value Type Description System.Int32 | Improve this doc View source HeadersReader The HeadersReaderConsumerBehavior sort index. Declaration public const int HeadersReader = 1000 Field Value Type Description System.Int32 | Improve this doc View source Publisher The PublisherConsumerBehavior sort index. Declaration public const int Publisher = 2000 Field Value Type Description System.Int32 | Improve this doc View source RawSequencer The RawSequencerConsumerBehavior sort index. Declaration public const int RawSequencer = 500 Field Value Type Description System.Int32 | Improve this doc View source Sequencer The SequencerConsumerBehavior sort index. Declaration public const int Sequencer = 1100 Field Value Type Description System.Int32 | Improve this doc View source TransactionHandler The TransactionHandlerConsumerBehavior sort index. Declaration public const int TransactionHandler = 400 Field Value Type Description System.Int32 | Improve this doc View source Validator The ValidatorConsumerBehavior sort index. Declaration public const int Validator = 950 Field Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.html",
    "title": "Class BrokerBehaviorsSortIndexes | Silverback",
    "keywords": "Class BrokerBehaviorsSortIndexes Contains the sort index constants of the default IBrokerBehavior added by Silverback.Integration. Inheritance System.Object BrokerBehaviorsSortIndexes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public static class BrokerBehaviorsSortIndexes"
  },
  "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.Producer.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.BrokerBehaviorsSortIndexes.Producer.html",
    "title": "Class BrokerBehaviorsSortIndexes.Producer | Silverback",
    "keywords": "Class BrokerBehaviorsSortIndexes.Producer Contains the sort index constants of the producer behaviors added by Silverback.Integration. Inheritance System.Object BrokerBehaviorsSortIndexes.Producer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public static class Producer Fields | Improve this doc View source Activity The ActivityProducerBehavior sort index. Declaration public const int Activity = 100 Field Value Type Description System.Int32 | Improve this doc View source BinaryFileHandler The BinaryFileHandlerProducerBehavior sort index. Declaration public const int BinaryFileHandler = 500 Field Value Type Description System.Int32 | Improve this doc View source BrokerKeyHeaderInitializer The KafkaMessageKeyInitializerProducerBehavior , RabbitRoutingKeyInitializerProducerBehavior or similar sort index. Declaration public const int BrokerKeyHeaderInitializer = 400 Field Value Type Description System.Int32 | Improve this doc View source CustomHeadersMapper The CustomHeadersMapperProducerBehavior sort index. Declaration public const int CustomHeadersMapper = 1000 Field Value Type Description System.Int32 | Improve this doc View source Encryptor The EncryptorProducerBehavior sort index. Declaration public const int Encryptor = 700 Field Value Type Description System.Int32 | Improve this doc View source EndpointNameResolver The EndpointNameResolverProducerBehavior sort index. Declaration public const int EndpointNameResolver = 900 Field Value Type Description System.Int32 | Improve this doc View source HeadersWriter The HeadersWriterProducerBehavior sort index. Declaration public const int HeadersWriter = 200 Field Value Type Description System.Int32 | Improve this doc View source MessageEnricher The MessageEnricherProducerBehavior sort index. Declaration public const int MessageEnricher = 250 Field Value Type Description System.Int32 | Improve this doc View source MessageIdInitializer The MessageIdInitializerProducerBehavior sort index. Declaration public const int MessageIdInitializer = 300 Field Value Type Description System.Int32 | Improve this doc View source Sequencer The SequencerProducerBehavior sort index. Declaration public const int Sequencer = 800 Field Value Type Description System.Int32 | Improve this doc View source Serializer The SerializerProducerBehavior sort index. Declaration public const int Serializer = 600 Field Value Type Description System.Int32 | Improve this doc View source Validator The ValidatorProducerBehavior sort index. Declaration public const int Validator = 550 Field Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Broker.Behaviors.ConsumerBehaviorHandler.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.ConsumerBehaviorHandler.html",
    "title": "Delegate ConsumerBehaviorHandler | Silverback",
    "keywords": "Delegate ConsumerBehaviorHandler The delegate that describes a message handler in the consumer pipeline. Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public delegate Task ConsumerBehaviorHandler(ConsumerPipelineContext context); Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the consumer behaviors pipeline. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Silverback.Messaging.Broker.Behaviors.ConsumerPipelineContext.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.ConsumerPipelineContext.html",
    "title": "Class ConsumerPipelineContext | Silverback",
    "keywords": "Class ConsumerPipelineContext The context that is passed along the consumer behaviors pipeline. Inheritance System.Object ConsumerPipelineContext Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public sealed class ConsumerPipelineContext : IDisposable Constructors | Improve this doc View source ConsumerPipelineContext(IRawInboundEnvelope, IConsumer, ISequenceStore, IServiceProvider) Initializes a new instance of the ConsumerPipelineContext class. Declaration public ConsumerPipelineContext(IRawInboundEnvelope envelope, IConsumer consumer, ISequenceStore sequenceStore, IServiceProvider serviceProvider) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message being processed. IConsumer consumer The IConsumer that triggered this pipeline. ISequenceStore sequenceStore The ISequenceStore used to temporary store the pending sequences being consumed. System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Properties | Improve this doc View source Consumer Gets the IConsumer that triggered this pipeline. Declaration public IConsumer Consumer { get; } Property Value Type Description IConsumer | Improve this doc View source Envelope Gets or sets the envelopes containing the messages being processed. Declaration public IRawInboundEnvelope Envelope { get; set; } Property Value Type Description IRawInboundEnvelope | Improve this doc View source IsSequenceEnd Gets a value indicating whether the current message was recognized as the end of the sequence. Declaration public bool IsSequenceEnd { get; } Property Value Type Description System.Boolean | Improve this doc View source IsSequenceStart Gets a value indicating whether the current message was recognized as the beginning of a new sequence. Declaration public bool IsSequenceStart { get; } Property Value Type Description System.Boolean | Improve this doc View source ProcessingTask Gets the System.Threading.Tasks.Task representing the message processing when it is not directly awaited (e.g. when starting the processing of a Sequence . This System.Threading.Tasks.Task will complete when all subscribers return. Declaration public Task ProcessingTask { get; } Property Value Type Description System.Threading.Tasks.Task | Improve this doc View source Sequence Gets a the ISequence the current message belongs to. Declaration public ISequence Sequence { get; } Property Value Type Description ISequence | Improve this doc View source SequenceStore Gets the ISequenceStore used to temporary store the pending sequences being consumed. Declaration public ISequenceStore SequenceStore { get; } Property Value Type Description ISequenceStore | Improve this doc View source ServiceProvider Gets the System.IServiceProvider to be used to resolve the required services. Declaration public IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider | Improve this doc View source TransactionManager Gets the IConsumerTransactionManager that is handling the current pipeline transaction. Declaration public IConsumerTransactionManager TransactionManager { get; } Property Value Type Description IConsumerTransactionManager Methods | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source GetBrokerMessageIdentifiers() Gets the identifiers of the messages being handled in this context (either the single message or the sequence). Declaration public IReadOnlyCollection<IBrokerMessageIdentifier> GetBrokerMessageIdentifiers() Returns Type Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > The list of identifiers. | Improve this doc View source ReplaceServiceScope(IServiceScope) Replaces the System.IServiceProvider with the one from the specified scope. Declaration public void ReplaceServiceScope(IServiceScope newServiceScope) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceScope newServiceScope The Microsoft.Extensions.DependencyInjection.IServiceScope to be used. | Improve this doc View source SetIsSequenceEnd() Sets the IsSequenceEnd property to true , indicating that the current message was recognized as the end of the sequence. Declaration public void SetIsSequenceEnd() | Improve this doc View source SetSequence(ISequence, in Boolean) Sets the current sequence. Declaration public void SetSequence(ISequence sequence, in bool isSequenceStart) Parameters Type Name Description ISequence sequence The ISequence being processed. System.Boolean isSequenceStart A value indicating whether the current message was recognized as the beginning of a new sequence. Implements System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.Behaviors.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.html",
    "title": "Namespace Silverback.Messaging.Broker.Behaviors | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Behaviors Classes BrokerBehaviorsProvider<TBehavior> Provides the System.Collections.Generic.IReadOnlyList<T> of IProducerBehavior and IConsumerBehavior to be used in the IProducer and IConsumer pipeline. BrokerBehaviorsSortIndexes Contains the sort index constants of the default IBrokerBehavior added by Silverback.Integration. BrokerBehaviorsSortIndexes.Consumer Contains the sort index constants of the consumer behaviors added by Silverback.Integration. BrokerBehaviorsSortIndexes.Producer Contains the sort index constants of the producer behaviors added by Silverback.Integration. ConsumerPipelineContext The context that is passed along the consumer behaviors pipeline. MessageIdInitializerProducerBehavior It ensures that an x-message-id header is always produced. ProducerPipelineContext The context that is passed along the producer behaviors pipeline. Interfaces IBrokerBehavior Can be used to build a custom pipeline, plugging some functionality into either the IProducer (see IProducerBehavior ) or the IConsumer (see IConsumerBehavior ). IBrokerBehaviorsProvider<TBehavior> Provides the System.Collections.Generic.IReadOnlyList<T> of IProducerBehavior and IConsumerBehavior to be used in the IProducer and IConsumer pipeline. IConsumerBehavior Can be used to build a custom pipeline, plugging some functionality into the IConsumer . IProducerBehavior Can be used to build a custom pipeline, plugging some functionality into the IProducer . Delegates ConsumerBehaviorHandler The delegate that describes a message handler in the consumer pipeline. ProducerBehaviorHandler The delegate that describes a message handler in the producer pipeline."
  },
  "api/Silverback.Messaging.Broker.Behaviors.IBrokerBehavior.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.IBrokerBehavior.html",
    "title": "Interface IBrokerBehavior | Silverback",
    "keywords": "Interface IBrokerBehavior Can be used to build a custom pipeline, plugging some functionality into either the IProducer (see IProducerBehavior ) or the IConsumer (see IConsumerBehavior ). Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public interface IBrokerBehavior"
  },
  "api/Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider-1.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider-1.html",
    "title": "Interface IBrokerBehaviorsProvider<TBehavior> | Silverback",
    "keywords": "Interface IBrokerBehaviorsProvider<TBehavior> Provides the System.Collections.Generic.IReadOnlyList<T> of IProducerBehavior and IConsumerBehavior to be used in the IProducer and IConsumer pipeline. Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public interface IBrokerBehaviorsProvider<out TBehavior> where TBehavior : IBrokerBehavior Type Parameters Name Description TBehavior The type of the behaviors to be provided, either IProducerBehavior or IConsumerBehavior . Methods | Improve this doc View source GetBehaviorsList() Creates a new System.Collections.Generic.IReadOnlyList<T> of IProducerBehavior or IConsumerBehavior to be used in the IProducer or IConsumer pipeline. Declaration IReadOnlyList<TBehavior> GetBehaviorsList() Returns Type Description System.Collections.Generic.IReadOnlyList <TBehavior> The ready-to-use System.Collections.Generic.Stack<T> of TBehavior ."
  },
  "api/Silverback.Messaging.Broker.Behaviors.IConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.IConsumerBehavior.html",
    "title": "Interface IConsumerBehavior | Silverback",
    "keywords": "Interface IConsumerBehavior Can be used to build a custom pipeline, plugging some functionality into the IConsumer . Inherited Members ISorted.SortIndex Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public interface IConsumerBehavior : IBrokerBehavior, ISorted Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Broker.Behaviors.IProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.IProducerBehavior.html",
    "title": "Interface IProducerBehavior | Silverback",
    "keywords": "Interface IProducerBehavior Can be used to build a custom pipeline, plugging some functionality into the IProducer . Inherited Members ISorted.SortIndex Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public interface IProducerBehavior : IBrokerBehavior, ISorted Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Broker.Behaviors.MessageIdInitializerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.MessageIdInitializerProducerBehavior.html",
    "title": "Class MessageIdInitializerProducerBehavior | Silverback",
    "keywords": "Class MessageIdInitializerProducerBehavior It ensures that an x-message-id header is always produced. Inheritance System.Object MessageIdInitializerProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public class MessageIdInitializerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Broker.Behaviors.ProducerBehaviorHandler.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.ProducerBehaviorHandler.html",
    "title": "Delegate ProducerBehaviorHandler | Silverback",
    "keywords": "Delegate ProducerBehaviorHandler The delegate that describes a message handler in the producer pipeline. Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public delegate Task ProducerBehaviorHandler(ProducerPipelineContext context); Parameters Type Name Description ProducerPipelineContext context The context that is passed along the producer behaviors pipeline. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Silverback.Messaging.Broker.Behaviors.ProducerPipelineContext.html": {
    "href": "api/Silverback.Messaging.Broker.Behaviors.ProducerPipelineContext.html",
    "title": "Class ProducerPipelineContext | Silverback",
    "keywords": "Class ProducerPipelineContext The context that is passed along the producer behaviors pipeline. Inheritance System.Object ProducerPipelineContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Behaviors Assembly : Silverback.Integration.dll Syntax public class ProducerPipelineContext Constructors | Improve this doc View source ProducerPipelineContext(IOutboundEnvelope, IProducer, IServiceProvider) Initializes a new instance of the ProducerPipelineContext class. Declaration public ProducerPipelineContext(IOutboundEnvelope envelope, IProducer producer, IServiceProvider serviceProvider) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be produced. IProducer producer The IProducer that triggered this pipeline. System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Properties | Improve this doc View source Envelope Gets or sets the envelope containing the message to be produced. Declaration public IOutboundEnvelope Envelope { get; set; } Property Value Type Description IOutboundEnvelope | Improve this doc View source Producer Gets the IProducer that triggered this pipeline. Declaration public IProducer Producer { get; } Property Value Type Description IProducer | Improve this doc View source ServiceProvider Gets or sets the System.IServiceProvider to be used to resolve the required services. Declaration public IServiceProvider ServiceProvider { get; set; } Property Value Type Description System.IServiceProvider"
  },
  "api/Silverback.Messaging.Broker.Broker-2.html": {
    "href": "api/Silverback.Messaging.Broker.Broker-2.html",
    "title": "Class Broker<TProducerEndpoint, TConsumerEndpoint> | Silverback",
    "keywords": "Class Broker<TProducerEndpoint, TConsumerEndpoint> The base class for all IBroker implementations. Inheritance System.Object Broker<TProducerEndpoint, TConsumerEndpoint> KafkaBroker MqttBroker RabbitBroker TransactionalOutboxBroker Implements IBroker System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Broker<TProducerEndpoint, TConsumerEndpoint> : IBroker, IDisposable where TProducerEndpoint : IProducerEndpoint where TConsumerEndpoint : IConsumerEndpoint Type Parameters Name Description TProducerEndpoint The type of the IProducerEndpoint that is being handled by this broker implementation. TConsumerEndpoint The type of the IConsumerEndpoint that is being handled by this broker implementation. Constructors | Improve this doc View source Broker(IServiceProvider) Initializes a new instance of the Broker<TProducerEndpoint, TConsumerEndpoint> class. Declaration protected Broker(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Properties | Improve this doc View source ConsumerEndpointType Gets the type of the IConsumerEndpoint that is being handled by this broker implementation. Declaration public Type ConsumerEndpointType { get; } Property Value Type Description System.Type | Improve this doc View source Consumers Gets the collection of IConsumer that have been created so far. Declaration public IReadOnlyList<IConsumer> Consumers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IConsumer > | Improve this doc View source IsConnected Gets a value indicating whether this broker is currently connected. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source ProducerEndpointType Gets the type of the IProducerEndpoint that is being handled by this broker implementation. Declaration public Type ProducerEndpointType { get; } Property Value Type Description System.Type | Improve this doc View source Producers Gets the collection of IProducer that have been created so far. Declaration public IReadOnlyList<IProducer> Producers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProducer > Methods | Improve this doc View source AddConsumer(IConsumerEndpoint) Adds an IConsumer that will consume from the specified endpoint as soon as the broker is connected. The received messages will be forwarded to the specified callback delegate. Declaration public virtual IConsumer AddConsumer(IConsumerEndpoint endpoint) Parameters Type Name Description IConsumerEndpoint endpoint The source endpoint. Returns Type Description IConsumer The IConsumer for the specified endpoint. | Improve this doc View source ConnectAsync() Connect to the message broker to start consuming. Declaration public async Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ConnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Connects all the consumers and starts consuming. Declaration protected virtual async Task ConnectAsync(IReadOnlyCollection<IProducer> producers, IReadOnlyCollection<IConsumer> consumers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IProducer > producers The producers to be connected. System.Collections.Generic.IReadOnlyCollection < IConsumer > consumers The consumers to be connected and started. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnect from the message broker to stop consuming. Declaration public async Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Disconnects all the consumers and stops consuming. Declaration protected virtual async Task DisconnectAsync(IReadOnlyCollection<IProducer> producers, IReadOnlyCollection<IConsumer> consumers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IProducer > producers The producers to be disconnected. System.Collections.Generic.IReadOnlyCollection < IConsumer > consumers The consumers to be stopped and disconnected. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether the method has been called by the Dispose method and not from the finalizer. | Improve this doc View source GetProducer(IProducerEndpoint) Returns an IProducer to be used to produce to the specified endpoint. Declaration public virtual IProducer GetProducer(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint The target endpoint. Returns Type Description IProducer The IProducer for the specified endpoint. | Improve this doc View source GetProducer(String) Returns an existing IProducer to be used to produce to the specified endpoint. Declaration public virtual IProducer GetProducer(string endpointName) Parameters Type Name Description System.String endpointName The target endpoint name (or friendly name). Returns Type Description IProducer The IProducer for the specified endpoint. | Improve this doc View source InstantiateConsumer(TConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Returns a new instance of IConsumer to subscribe to the specified endpoint. Declaration protected abstract IConsumer InstantiateConsumer(TConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description TConsumerEndpoint endpoint The endpoint. IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IConsumer The instantiated IConsumer . | Improve this doc View source InstantiateProducer(TProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Returns a new instance of IProducer to publish to the specified endpoint. The returned instance will be cached and reused for the same endpoint. Declaration protected abstract IProducer InstantiateProducer(TProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description TProducerEndpoint endpoint The endpoint. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IProducer The instantiated IProducer . Implements IBroker System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.BrokerCollection.html": {
    "href": "api/Silverback.Messaging.Broker.BrokerCollection.html",
    "title": "Class BrokerCollection | Silverback",
    "keywords": "Class BrokerCollection Holds a reference to all the registered IBroker implementations and is able to resolve the right instance according to the IEndpoint type. Inheritance System.Object BrokerCollection Implements IBrokerCollection System.Collections.Generic.IReadOnlyList < IBroker > System.Collections.Generic.IReadOnlyCollection < IBroker > System.Collections.Generic.IEnumerable < IBroker > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public class BrokerCollection : IBrokerCollection, IReadOnlyList<IBroker>, IReadOnlyCollection<IBroker>, IEnumerable<IBroker>, IEnumerable Constructors | Improve this doc View source BrokerCollection(IEnumerable<IBroker>) Initializes a new instance of the BrokerCollection class. Declaration public BrokerCollection(IEnumerable<IBroker> brokers) Parameters Type Name Description System.Collections.Generic.IEnumerable < IBroker > brokers The brokers to be added to the collection. Properties | Improve this doc View source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this doc View source Item[Int32] Declaration public IBroker this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description IBroker Methods | Improve this doc View source AddConsumer(IConsumerEndpoint) Adds an IConsumer that will consume from the specified endpoint as soon as the broker is connected. The received messages will be forwarded to the specified callback delegate. Declaration public IConsumer AddConsumer(IConsumerEndpoint endpoint) Parameters Type Name Description IConsumerEndpoint endpoint The source endpoint. Returns Type Description IConsumer The IConsumer for the specified endpoint. | Improve this doc View source ConnectAsync() Connect to all message brokers to start consuming. Declaration public Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnect from all message brokers to stop consuming. Declaration public Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source GetEnumerator() Declaration public IEnumerator<IBroker> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IBroker > | Improve this doc View source GetProducer(IProducerEndpoint) Returns an IProducer to be used to produce to the specified endpoint. Declaration public IProducer GetProducer(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint The target endpoint. Returns Type Description IProducer The IProducer for the specified endpoint. Explicit Interface Implementations | Improve this doc View source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IBrokerCollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Silverback.Messaging.Broker.BrokerConnectorService.html": {
    "href": "api/Silverback.Messaging.Broker.BrokerConnectorService.html",
    "title": "Class BrokerConnectorService | Silverback",
    "keywords": "Class BrokerConnectorService Automatically connects the message brokers when the application starts and disconnects them when the application is being stopped. Inheritance System.Object Microsoft.Extensions.Hosting.BackgroundService BrokerConnectorService Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable Inherited Members Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public class BrokerConnectorService : BackgroundService, IHostedService, IDisposable Constructors | Improve this doc View source BrokerConnectorService(IHostApplicationLifetime, IBrokerCollection, BrokerConnectionOptions, ISilverbackLogger<BrokerConnectorService>) Initializes a new instance of the BrokerConnectorService class. Declaration public BrokerConnectorService(IHostApplicationLifetime applicationLifetime, IBrokerCollection brokersCollection, BrokerConnectionOptions connectionOptions, ISilverbackLogger<BrokerConnectorService> logger) Parameters Type Name Description Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime The Microsoft.Extensions.Hosting.IHostApplicationLifetime . IBrokerCollection brokersCollection The IBrokerCollection . BrokerConnectionOptions connectionOptions The BrokerConnectionOptions . ISilverbackLogger < BrokerConnectorService > logger The ISilverbackLogger . Methods | Improve this doc View source ExecuteAsync(CancellationToken) Declaration protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken) Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.Callbacks.BrokerCallbackInvocationException.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.BrokerCallbackInvocationException.html",
    "title": "Class BrokerCallbackInvocationException | Silverback",
    "keywords": "Class BrokerCallbackInvocationException The exception that wraps the exception thrown by a IBrokerCallback . Inheritance System.Object System.Exception SilverbackException BrokerCallbackInvocationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.dll Syntax [Serializable] public class BrokerCallbackInvocationException : SilverbackException, ISerializable Constructors | Improve this doc View source BrokerCallbackInvocationException() Initializes a new instance of the BrokerCallbackInvocationException class. Declaration public BrokerCallbackInvocationException() | Improve this doc View source BrokerCallbackInvocationException(SerializationInfo, StreamingContext) Initializes a new instance of the BrokerCallbackInvocationException class with the serialized data. Declaration protected BrokerCallbackInvocationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source BrokerCallbackInvocationException(String) Initializes a new instance of the BrokerCallbackInvocationException class with the specified message. Declaration public BrokerCallbackInvocationException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source BrokerCallbackInvocationException(String, Exception) Initializes a new instance of the BrokerCallbackInvocationException class with the specified message and inner exception. Declaration public BrokerCallbackInvocationException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Broker.Callbacks.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.html",
    "title": "Namespace Silverback.Messaging.Broker.Callbacks | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Callbacks Classes BrokerCallbackInvocationException The exception that wraps the exception thrown by a IBrokerCallback . Interfaces IBrokerCallback The marker interface implemented by all interfaces declaring the broker callbacks handlers. IBrokerCallbacksInvoker Used to invoke the registered IBrokerCallback . IEndpointsConfiguredCallback Declares the OnEndpointsConfiguredAsync() callback. IKafkaConsumerErrorCallback Declares the OnConsumerError(Error, KafkaConsumer) event handler. IKafkaConsumerLogCallback Declares the OnConsumerLog(LogMessage, KafkaConsumer) event handler. IKafkaConsumerStatisticsCallback Declares the OnConsumerStatistics(KafkaStatistics, String, KafkaConsumer) event handler. IKafkaOffsetCommittedCallback Declares the OnOffsetsCommitted(CommittedOffsets, KafkaConsumer) event handler. IKafkaPartitionEofCallback Declares the OnEndOfTopicPartitionReached(TopicPartition, KafkaConsumer) event handler. IKafkaPartitionsAssignedCallback Declares the OnPartitionsAssigned(IReadOnlyCollection<TopicPartition>, KafkaConsumer) event handler. IKafkaPartitionsRevokedCallback Declares the OnPartitionsRevoked(IReadOnlyCollection<TopicPartitionOffset>, KafkaConsumer) event handler. IKafkaProducerLogCallback Declares the OnProducerLog(LogMessage, KafkaProducer) event handler. IKafkaProducerStatisticsCallback Declares the OnProducerStatistics(KafkaStatistics, String, KafkaProducer) event handler. IMqttClientConnectedCallback Declares the OnClientConnectedAsync(MqttClientConfig) event handler. IMqttClientDisconnectingCallback Declares the OnClientDisconnectingAsync(MqttClientConfig) event handler."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IBrokerCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IBrokerCallback.html",
    "title": "Interface IBrokerCallback | Silverback",
    "keywords": "Interface IBrokerCallback The marker interface implemented by all interfaces declaring the broker callbacks handlers. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.dll Syntax public interface IBrokerCallback"
  },
  "api/Silverback.Messaging.Broker.Callbacks.IBrokerCallbacksInvoker.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IBrokerCallbacksInvoker.html",
    "title": "Interface IBrokerCallbacksInvoker | Silverback",
    "keywords": "Interface IBrokerCallbacksInvoker Used to invoke the registered IBrokerCallback . Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.dll Syntax public interface IBrokerCallbacksInvoker Methods | Improve this doc View source Invoke<THandler>(Action<THandler>, IServiceProvider, Boolean) Resolves and invokes all handlers of the specified type. Declaration void Invoke<THandler>(Action<THandler> action, IServiceProvider scopedServiceProvider = null, bool invokeDuringShutdown = true) Parameters Type Name Description System.Action <THandler> action The action to be executed for each handler. System.IServiceProvider scopedServiceProvider The scoped System.IServiceProvider . If not provided a new scope will be created. System.Boolean invokeDuringShutdown Specifies whether the callback must be called even if the application is shutting down. Type Parameters Name Description THandler The type of the handler. | Improve this doc View source InvokeAsync<THandler>(Func<THandler, Task>, IServiceProvider, Boolean) Resolves and invokes all handlers of the specified type. Declaration Task InvokeAsync<THandler>(Func<THandler, Task> action, IServiceProvider scopedServiceProvider = null, bool invokeDuringShutdown = true) Parameters Type Name Description System.Func <THandler, System.Threading.Tasks.Task > action The action to be executed for each handler. System.IServiceProvider scopedServiceProvider The scoped System.IServiceProvider . If not provided a new scope will be created. System.Boolean invokeDuringShutdown Specifies whether the callback must be called even if the application is shutting down. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Type Parameters Name Description THandler The type of the handler."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IEndpointsConfiguredCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IEndpointsConfiguredCallback.html",
    "title": "Interface IEndpointsConfiguredCallback | Silverback",
    "keywords": "Interface IEndpointsConfiguredCallback Declares the OnEndpointsConfiguredAsync() callback. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.dll Syntax public interface IEndpointsConfiguredCallback : IBrokerCallback Methods | Improve this doc View source OnEndpointsConfiguredAsync() Called when all endpoints have been configured. Declaration Task OnEndpointsConfiguredAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IKafkaConsumerErrorCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IKafkaConsumerErrorCallback.html",
    "title": "Interface IKafkaConsumerErrorCallback | Silverback",
    "keywords": "Interface IKafkaConsumerErrorCallback Declares the OnConsumerError(Error, KafkaConsumer) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaConsumerErrorCallback : IBrokerCallback Methods | Improve this doc View source OnConsumerError(Error, KafkaConsumer) Called when an error is reported by the underlying consumer. Declaration bool OnConsumerError(Error error, KafkaConsumer consumer) Parameters Type Name Description Confluent.Kafka.Error error An Confluent.Kafka.Error containing the error details. KafkaConsumer consumer The related consumer instance. Returns Type Description System.Boolean A value whether the error was handled. When true the error will not be logged nor handled in any other way by Silverback. Remarks Note that the system (either the Kafka client itself or Silverback) will try to automatically recover from all errors automatically, so these errors have to be considered mostly informational."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IKafkaConsumerLogCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IKafkaConsumerLogCallback.html",
    "title": "Interface IKafkaConsumerLogCallback | Silverback",
    "keywords": "Interface IKafkaConsumerLogCallback Declares the OnConsumerLog(LogMessage, KafkaConsumer) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaConsumerLogCallback : IBrokerCallback Methods | Improve this doc View source OnConsumerLog(LogMessage, KafkaConsumer) Called when a log message is being reported by the underlying consumer. Declaration bool OnConsumerLog(LogMessage logMessage, KafkaConsumer consumer) Parameters Type Name Description Confluent.Kafka.LogMessage logMessage The Confluent.Kafka.LogMessage . KafkaConsumer consumer The related consumer instance. Returns Type Description System.Boolean A value whether the log message was handled/written. When true the message will not be logged nor handled in any other way by Silverback."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IKafkaConsumerStatisticsCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IKafkaConsumerStatisticsCallback.html",
    "title": "Interface IKafkaConsumerStatisticsCallback | Silverback",
    "keywords": "Interface IKafkaConsumerStatisticsCallback Declares the OnConsumerStatistics(KafkaStatistics, String, KafkaConsumer) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaConsumerStatisticsCallback : IBrokerCallback Methods | Improve this doc View source OnConsumerStatistics(KafkaStatistics, String, KafkaConsumer) Called on statistics events. Declaration void OnConsumerStatistics(KafkaStatistics statistics, string rawStatistics, KafkaConsumer consumer) Parameters Type Name Description KafkaStatistics statistics The deserialized statistics. System.String rawStatistics The raw statistics string. KafkaConsumer consumer The related consumer instance. Remarks You can enable statistics and set the statistics interval using the StatisticsIntervalMs configuration property (disabled by default)."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IKafkaOffsetCommittedCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IKafkaOffsetCommittedCallback.html",
    "title": "Interface IKafkaOffsetCommittedCallback | Silverback",
    "keywords": "Interface IKafkaOffsetCommittedCallback Declares the OnOffsetsCommitted(CommittedOffsets, KafkaConsumer) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaOffsetCommittedCallback : IBrokerCallback Methods | Improve this doc View source OnOffsetsCommitted(CommittedOffsets, KafkaConsumer) Called to report the result of offset commits. Declaration void OnOffsetsCommitted(CommittedOffsets offsets, KafkaConsumer consumer) Parameters Type Name Description Confluent.Kafka.CommittedOffsets offsets The per-partition offsets and success or error information and the overall operation success or error information. KafkaConsumer consumer The related consumer instance. Remarks Possible error conditions: Entire request failed: Error is set, but not per-partition errors. All partitions failed: Error is set to the value of the last failed partition, but each partition may have different errors. Some partitions failed: global Error is success ( Confluent.Kafka.ErrorCode.NoError )."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IKafkaPartitionEofCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IKafkaPartitionEofCallback.html",
    "title": "Interface IKafkaPartitionEofCallback | Silverback",
    "keywords": "Interface IKafkaPartitionEofCallback Declares the OnEndOfTopicPartitionReached(TopicPartition, KafkaConsumer) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaPartitionEofCallback : IBrokerCallback Remarks The EnablePartitionEof must be set to true in the KafkaConsumerConfig , otherwise the underlying library will not emit this event. Methods | Improve this doc View source OnEndOfTopicPartitionReached(TopicPartition, KafkaConsumer) Called to report that the end of a partition has been reached, meaning that it has been completely consumed. Declaration void OnEndOfTopicPartitionReached(TopicPartition topicPartition, KafkaConsumer consumer) Parameters Type Name Description Confluent.Kafka.TopicPartition topicPartition The topic partition. KafkaConsumer consumer The related consumer. Remarks The EnablePartitionEof must be set to true in the KafkaConsumerConfig , otherwise the underlying library will not emit this event."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IKafkaPartitionsAssignedCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IKafkaPartitionsAssignedCallback.html",
    "title": "Interface IKafkaPartitionsAssignedCallback | Silverback",
    "keywords": "Interface IKafkaPartitionsAssignedCallback Declares the OnPartitionsAssigned(IReadOnlyCollection<TopicPartition>, KafkaConsumer) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaPartitionsAssignedCallback : IBrokerCallback Methods | Improve this doc View source OnPartitionsAssigned(IReadOnlyCollection<TopicPartition>, KafkaConsumer) Called when a new consumer group partition assignment has been received by the consumer. Declaration IEnumerable<TopicPartitionOffset> OnPartitionsAssigned(IReadOnlyCollection<TopicPartition> topicPartitions, KafkaConsumer consumer) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition > topicPartitions A collection of Confluent.Kafka.TopicPartition representing the assigned partitions. KafkaConsumer consumer The related consumer instance. Returns Type Description System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset > Optionally returns the actual partitions to consume from and start offsets are specified by the return value of the this set of partitions is not required to match the assignment provided by the consumer group, but typically will. Partition offsets may be a specific offset, or special value ( Beginning , End or Unset ). If Unset , consumption will resume from the last committed offset for each partition, or if there is no committed offset, in accordance with the auto.offset.reset configuration property. When null the partitions assignment from the broker is taken and all offsets will be considered Unset ."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IKafkaPartitionsRevokedCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IKafkaPartitionsRevokedCallback.html",
    "title": "Interface IKafkaPartitionsRevokedCallback | Silverback",
    "keywords": "Interface IKafkaPartitionsRevokedCallback Declares the OnPartitionsRevoked(IReadOnlyCollection<TopicPartitionOffset>, KafkaConsumer) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaPartitionsRevokedCallback : IBrokerCallback Methods | Improve this doc View source OnPartitionsRevoked(IReadOnlyCollection<TopicPartitionOffset>, KafkaConsumer) Called immediately prior to a group partition assignment being revoked. Declaration void OnPartitionsRevoked(IReadOnlyCollection<TopicPartitionOffset> topicPartitionsOffset, KafkaConsumer consumer) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartitionOffset > topicPartitionsOffset A collection of Confluent.Kafka.TopicPartitionOffset representing the the set of partitions the consumer is currently assigned to, and the current position of the consumer on each of these partitions. KafkaConsumer consumer The related consumer instance."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IKafkaProducerLogCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IKafkaProducerLogCallback.html",
    "title": "Interface IKafkaProducerLogCallback | Silverback",
    "keywords": "Interface IKafkaProducerLogCallback Declares the OnProducerLog(LogMessage, KafkaProducer) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaProducerLogCallback : IBrokerCallback Methods | Improve this doc View source OnProducerLog(LogMessage, KafkaProducer) Called when a log message is being reported by the underlying producer. Declaration bool OnProducerLog(LogMessage logMessage, KafkaProducer producer) Parameters Type Name Description Confluent.Kafka.LogMessage logMessage The Confluent.Kafka.LogMessage . KafkaProducer producer The related producer instance. Returns Type Description System.Boolean A value whether the log message was handled/written. When true the message will not be logged nor handled in any other way by Silverback."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IKafkaProducerStatisticsCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IKafkaProducerStatisticsCallback.html",
    "title": "Interface IKafkaProducerStatisticsCallback | Silverback",
    "keywords": "Interface IKafkaProducerStatisticsCallback Declares the OnProducerStatistics(KafkaStatistics, String, KafkaProducer) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaProducerStatisticsCallback : IBrokerCallback Methods | Improve this doc View source OnProducerStatistics(KafkaStatistics, String, KafkaProducer) Called on statistics events. Declaration void OnProducerStatistics(KafkaStatistics statistics, string rawStatistics, KafkaProducer producer) Parameters Type Name Description KafkaStatistics statistics The deserialized statistics. System.String rawStatistics The raw statistics string. KafkaProducer producer The related producer instance. Remarks You can enable statistics and set the statistics interval using the StatisticsIntervalMs configuration property (disabled by default)."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IMqttClientConnectedCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IMqttClientConnectedCallback.html",
    "title": "Interface IMqttClientConnectedCallback | Silverback",
    "keywords": "Interface IMqttClientConnectedCallback Declares the OnClientConnectedAsync(MqttClientConfig) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.MQTT.dll Syntax public interface IMqttClientConnectedCallback : IBrokerCallback Methods | Improve this doc View source OnClientConnectedAsync(MqttClientConfig) Called when the underlying MQTTnet.Client.IMqttClient connects to the broker. Declaration Task OnClientConnectedAsync(MqttClientConfig config) Parameters Type Name Description MqttClientConfig config The client configuration. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Broker.Callbacks.IMqttClientDisconnectingCallback.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.IMqttClientDisconnectingCallback.html",
    "title": "Interface IMqttClientDisconnectingCallback | Silverback",
    "keywords": "Interface IMqttClientDisconnectingCallback Declares the OnClientDisconnectingAsync(MqttClientConfig) event handler. Namespace : Silverback.Messaging.Broker.Callbacks Assembly : Silverback.Integration.MQTT.dll Syntax public interface IMqttClientDisconnectingCallback : IBrokerCallback Methods | Improve this doc View source OnClientDisconnectingAsync(MqttClientConfig) Called when the underlying MQTTnet.Client.IMqttClient is disconnecting from the broker. Declaration Task OnClientDisconnectingAsync(MqttClientConfig config) Parameters Type Name Description MqttClientConfig config The client configuration. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Broker.Callbacks.Statistics.BrokerStatistics.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.Statistics.BrokerStatistics.html",
    "title": "Class BrokerStatistics | Silverback",
    "keywords": "Class BrokerStatistics Inheritance System.Object BrokerStatistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Callbacks.Statistics Assembly : Silverback.Integration.Kafka.dll Syntax public class BrokerStatistics Properties | Improve this doc View source BufGrow Declaration [JsonPropertyName(\"buf_grow\")] public long BufGrow { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Connects Declaration [JsonPropertyName(\"connects\")] public long Connects { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Disconnects Declaration [JsonPropertyName(\"disconnects\")] public long Disconnects { get; set; } Property Value Type Description System.Int64 | Improve this doc View source IntLatency Declaration [JsonPropertyName(\"int_latency\")] public WindowStatistics IntLatency { get; set; } Property Value Type Description WindowStatistics | Improve this doc View source Name Declaration [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value Type Description System.String | Improve this doc View source NodeId Declaration [JsonPropertyName(\"nodeid\")] public long NodeId { get; set; } Property Value Type Description System.Int64 | Improve this doc View source NodeName Declaration [JsonPropertyName(\"nodename\")] public string NodeName { get; set; } Property Value Type Description System.String | Improve this doc View source OutbufCnt Declaration [JsonPropertyName(\"outbuf_cnt\")] public long OutbufCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source OutbufLatency Declaration [JsonPropertyName(\"outbuf_latency\")] public WindowStatistics OutbufLatency { get; set; } Property Value Type Description WindowStatistics | Improve this doc View source OutbufMsgCnt Declaration [JsonPropertyName(\"outbuf_msg_cnt\")] public long OutbufMsgCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source ReqTimeouts Declaration [JsonPropertyName(\"req_timeouts\")] public long ReqTimeouts { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Requests Declaration [JsonPropertyName(\"req\")] public Dictionary<string, long> Requests { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int64 > | Improve this doc View source Rtt Declaration [JsonPropertyName(\"rtt\")] public WindowStatistics Rtt { get; set; } Property Value Type Description WindowStatistics | Improve this doc View source Rx Declaration [JsonPropertyName(\"rx\")] public long Rx { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxBytes Declaration [JsonPropertyName(\"rxbytes\")] public long RxBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxCorriderrs Declaration [JsonPropertyName(\"rxcorriderrs\")] public long RxCorriderrs { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxErrs Declaration [JsonPropertyName(\"rxerrs\")] public long RxErrs { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxPartial Declaration [JsonPropertyName(\"rxpartial\")] public long RxPartial { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Source Declaration [JsonPropertyName(\"source\")] public string Source { get; set; } Property Value Type Description System.String | Improve this doc View source State Declaration [JsonPropertyName(\"state\")] public string State { get; set; } Property Value Type Description System.String | Improve this doc View source StateAge Declaration [JsonPropertyName(\"stateage\")] public long StateAge { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Throttle Declaration [JsonPropertyName(\"throttle\")] public WindowStatistics Throttle { get; set; } Property Value Type Description WindowStatistics | Improve this doc View source TopicPartitions Declaration [JsonPropertyName(\"toppars\")] public Dictionary<string, TopicPartitions> TopicPartitions { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , TopicPartitions > | Improve this doc View source Tx Declaration [JsonPropertyName(\"tx\")] public long Tx { get; set; } Property Value Type Description System.Int64 | Improve this doc View source TxBytes Declaration [JsonPropertyName(\"txbytes\")] public long TxBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source TxErrs Declaration [JsonPropertyName(\"txerrs\")] public long TxErrs { get; set; } Property Value Type Description System.Int64 | Improve this doc View source TxRetries Declaration [JsonPropertyName(\"txretries\")] public long TxRetries { get; set; } Property Value Type Description System.Int64 | Improve this doc View source WaitRespCnt Declaration [JsonPropertyName(\"waitresp_cnt\")] public long WaitRespCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source WaitRespMsgCnt Declaration [JsonPropertyName(\"waitresp_msg_cnt\")] public long WaitRespMsgCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Wakeups Declaration [JsonPropertyName(\"wakeups\")] public long Wakeups { get; set; } Property Value Type Description System.Int64 | Improve this doc View source ZBufGrow Declaration [JsonPropertyName(\"zbuf_grow\")] public long ZBufGrow { get; set; } Property Value Type Description System.Int64"
  },
  "api/Silverback.Messaging.Broker.Callbacks.Statistics.ConsumerGroupStatistics.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.Statistics.ConsumerGroupStatistics.html",
    "title": "Class ConsumerGroupStatistics | Silverback",
    "keywords": "Class ConsumerGroupStatistics Inheritance System.Object ConsumerGroupStatistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Callbacks.Statistics Assembly : Silverback.Integration.Kafka.dll Syntax public class ConsumerGroupStatistics Properties | Improve this doc View source AssignmentSize Declaration [JsonPropertyName(\"assignment_size\")] public long AssignmentSize { get; set; } Property Value Type Description System.Int64 | Improve this doc View source JoinState Declaration [JsonPropertyName(\"join_state\")] public string JoinState { get; set; } Property Value Type Description System.String | Improve this doc View source RebalanceAge Declaration [JsonPropertyName(\"rebalance_age\")] public long RebalanceAge { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RebalanceCnt Declaration [JsonPropertyName(\"rebalance_cnt\")] public long RebalanceCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RebalanceReason Declaration [JsonPropertyName(\"rebalance_reason\")] public string RebalanceReason { get; set; } Property Value Type Description System.String | Improve this doc View source State Declaration [JsonPropertyName(\"state\")] public string State { get; set; } Property Value Type Description System.String | Improve this doc View source StateAge Declaration [JsonPropertyName(\"stateage\")] public long StateAge { get; set; } Property Value Type Description System.Int64"
  },
  "api/Silverback.Messaging.Broker.Callbacks.Statistics.ExactlyOnceSemanticsStatistics.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.Statistics.ExactlyOnceSemanticsStatistics.html",
    "title": "Class ExactlyOnceSemanticsStatistics | Silverback",
    "keywords": "Class ExactlyOnceSemanticsStatistics Inheritance System.Object ExactlyOnceSemanticsStatistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Callbacks.Statistics Assembly : Silverback.Integration.Kafka.dll Syntax public class ExactlyOnceSemanticsStatistics Properties | Improve this doc View source EpochCnt Declaration [JsonPropertyName(\"epoch_cnt\")] public long EpochCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source IdempState Declaration [JsonPropertyName(\"idemp_state\")] public string IdempState { get; set; } Property Value Type Description System.String | Improve this doc View source IdempStateAge Declaration [JsonPropertyName(\"idemp_stateage\")] public long IdempStateAge { get; set; } Property Value Type Description System.Int64 | Improve this doc View source ProducerEpoch Declaration [JsonPropertyName(\"producer_epoch\")] public long ProducerEpoch { get; set; } Property Value Type Description System.Int64 | Improve this doc View source ProducerId Declaration [JsonPropertyName(\"producer_id\")] public long ProducerId { get; set; } Property Value Type Description System.Int64 | Improve this doc View source TxnMayEnq Declaration [JsonPropertyName(\"txn_may_enq\")] public bool TxnMayEnq { get; set; } Property Value Type Description System.Boolean | Improve this doc View source TxnState Declaration [JsonPropertyName(\"txn_state\")] public string TxnState { get; set; } Property Value Type Description System.String | Improve this doc View source TxnStateAge Declaration [JsonPropertyName(\"txn_stateage\")] public long TxnStateAge { get; set; } Property Value Type Description System.Int64"
  },
  "api/Silverback.Messaging.Broker.Callbacks.Statistics.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.Statistics.html",
    "title": "Namespace Silverback.Messaging.Broker.Callbacks.Statistics | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Callbacks.Statistics Classes BrokerStatistics ConsumerGroupStatistics ExactlyOnceSemanticsStatistics KafkaStatistics A Kafka statistics event. See https://github.com/edenhill/librdkafka/blob/master/STATISTICS.md for information about the structure. PartitionStatistics TopicPartitions TopicStatistics WindowStatistics"
  },
  "api/Silverback.Messaging.Broker.Callbacks.Statistics.KafkaStatistics.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.Statistics.KafkaStatistics.html",
    "title": "Class KafkaStatistics | Silverback",
    "keywords": "Class KafkaStatistics A Kafka statistics event. See https://github.com/edenhill/librdkafka/blob/master/STATISTICS.md for information about the structure. Inheritance System.Object KafkaStatistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Callbacks.Statistics Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaStatistics Properties | Improve this doc View source Brokers Declaration [JsonPropertyName(\"brokers\")] public Dictionary<string, BrokerStatistics> Brokers { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , BrokerStatistics > | Improve this doc View source ClientId Declaration [JsonPropertyName(\"client_id\")] public string ClientId { get; set; } Property Value Type Description System.String | Improve this doc View source ConsumerGroup Declaration [JsonPropertyName(\"cgrp\")] public ConsumerGroupStatistics ConsumerGroup { get; set; } Property Value Type Description ConsumerGroupStatistics | Improve this doc View source ExactlyOnceSemantics Declaration [JsonPropertyName(\"eos\")] public ExactlyOnceSemanticsStatistics ExactlyOnceSemantics { get; set; } Property Value Type Description ExactlyOnceSemanticsStatistics | Improve this doc View source MetadataCacheCnt Declaration [JsonPropertyName(\"metadata_cache_cnt\")] public long MetadataCacheCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source MsgCnt Declaration [JsonPropertyName(\"msg_cnt\")] public long MsgCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source MsgMax Declaration [JsonPropertyName(\"msg_max\")] public long MsgMax { get; set; } Property Value Type Description System.Int64 | Improve this doc View source MsgSize Declaration [JsonPropertyName(\"msg_size\")] public long MsgSize { get; set; } Property Value Type Description System.Int64 | Improve this doc View source MsgSizeMax Declaration [JsonPropertyName(\"msg_size_max\")] public long MsgSizeMax { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Name Declaration [JsonPropertyName(\"name\")] public string Name { get; set; } Property Value Type Description System.String | Improve this doc View source ReplyQ Declaration [JsonPropertyName(\"replyq\")] public long ReplyQ { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Rx Declaration [JsonPropertyName(\"rx\")] public long Rx { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxBytes Declaration [JsonPropertyName(\"rx_bytes\")] public long RxBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxMsgBytes Declaration [JsonPropertyName(\"rxmsg_bytes\")] public long RxMsgBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxMsgs Declaration [JsonPropertyName(\"rxmsgs\")] public long RxMsgs { get; set; } Property Value Type Description System.Int64 | Improve this doc View source SimpleCnt Declaration [JsonPropertyName(\"simple_cnt\")] public long SimpleCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Time Declaration [JsonPropertyName(\"time\")] public long Time { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Topics Declaration [JsonPropertyName(\"topics\")] public Dictionary<string, TopicStatistics> Topics { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , TopicStatistics > | Improve this doc View source Ts Declaration [JsonPropertyName(\"ts\")] public long Ts { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Tx Declaration [JsonPropertyName(\"tx\")] public long Tx { get; set; } Property Value Type Description System.Int64 | Improve this doc View source TxBytes Declaration [JsonPropertyName(\"tx_bytes\")] public long TxBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source TxMsgBytes Declaration [JsonPropertyName(\"txmsg_bytes\")] public long TxMsgBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source TxMsgs Declaration [JsonPropertyName(\"txmsgs\")] public long TxMsgs { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Type Declaration [JsonPropertyName(\"type\")] public string Type { get; set; } Property Value Type Description System.String"
  },
  "api/Silverback.Messaging.Broker.Callbacks.Statistics.PartitionStatistics.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.Statistics.PartitionStatistics.html",
    "title": "Class PartitionStatistics | Silverback",
    "keywords": "Class PartitionStatistics Inheritance System.Object PartitionStatistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Callbacks.Statistics Assembly : Silverback.Integration.Kafka.dll Syntax public class PartitionStatistics Properties | Improve this doc View source AckedMsgId Declaration [JsonPropertyName(\"acked_msgid\")] public long AckedMsgId { get; set; } Property Value Type Description System.Int64 | Improve this doc View source AppOffset Declaration [JsonPropertyName(\"app_offset\")] public long AppOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Broker Declaration [JsonPropertyName(\"broker\")] public long Broker { get; set; } Property Value Type Description System.Int64 | Improve this doc View source CommitedOffset Declaration [JsonPropertyName(\"commited_offset\")] public long CommitedOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source CommittedOffset Declaration [JsonPropertyName(\"committed_offset\")] public long CommittedOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source ConsumerLag Declaration [JsonPropertyName(\"consumer_lag\")] public long ConsumerLag { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Desired Declaration [JsonPropertyName(\"desired\")] public bool Desired { get; set; } Property Value Type Description System.Boolean | Improve this doc View source EofOffset Declaration [JsonPropertyName(\"eof_offset\")] public long EofOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source FetchqCnt Declaration [JsonPropertyName(\"fetchq_cnt\")] public long FetchqCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source FetchqSize Declaration [JsonPropertyName(\"fetchq_size\")] public long FetchqSize { get; set; } Property Value Type Description System.Int64 | Improve this doc View source FetchState Declaration [JsonPropertyName(\"fetch_state\")] public string FetchState { get; set; } Property Value Type Description System.String | Improve this doc View source HiOffset Declaration [JsonPropertyName(\"hi_offset\")] public long HiOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Leader Declaration [JsonPropertyName(\"leader\")] public long Leader { get; set; } Property Value Type Description System.Int64 | Improve this doc View source LoOffset Declaration [JsonPropertyName(\"lo_offset\")] public long LoOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source LsOffset Declaration [JsonPropertyName(\"ls_offset\")] public long LsOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source MsgqBytes Declaration [JsonPropertyName(\"msgq_bytes\")] public long MsgqBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source MsgqCnt Declaration [JsonPropertyName(\"msgq_cnt\")] public long MsgqCnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Msgs Declaration [JsonPropertyName(\"msgs\")] public long Msgs { get; set; } Property Value Type Description System.Int64 | Improve this doc View source MsgsInflight Declaration [JsonPropertyName(\"msgs_inflight\")] public long MsgsInflight { get; set; } Property Value Type Description System.Int64 | Improve this doc View source NextAckSeq Declaration [JsonPropertyName(\"next_ack_seq\")] public long NextAckSeq { get; set; } Property Value Type Description System.Int64 | Improve this doc View source NextErrSeq Declaration [JsonPropertyName(\"next_err_seq\")] public long NextErrSeq { get; set; } Property Value Type Description System.Int64 | Improve this doc View source NextOffset Declaration [JsonPropertyName(\"next_offset\")] public long NextOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Partition Declaration [JsonPropertyName(\"partition\")] public long Partition { get; set; } Property Value Type Description System.Int64 | Improve this doc View source QueryOffset Declaration [JsonPropertyName(\"query_offset\")] public long QueryOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxBytes Declaration [JsonPropertyName(\"rxbytes\")] public long RxBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxMsgs Declaration [JsonPropertyName(\"rxmsgs\")] public long RxMsgs { get; set; } Property Value Type Description System.Int64 | Improve this doc View source RxVerDrops Declaration [JsonPropertyName(\"rx_ver_drops\")] public long RxVerDrops { get; set; } Property Value Type Description System.Int64 | Improve this doc View source StoredOffset Declaration [JsonPropertyName(\"stored_offset\")] public long StoredOffset { get; set; } Property Value Type Description System.Int64 | Improve this doc View source TxBytes Declaration [JsonPropertyName(\"txbytes\")] public long TxBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source TxMsgs Declaration [JsonPropertyName(\"txmsgs\")] public long TxMsgs { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Unknown Declaration [JsonPropertyName(\"unknown\")] public bool Unknown { get; set; } Property Value Type Description System.Boolean | Improve this doc View source XmitMsgqBytes Declaration [JsonPropertyName(\"xmit_msgq_bytes\")] public long XmitMsgqBytes { get; set; } Property Value Type Description System.Int64 | Improve this doc View source XmitMsgqCnt Declaration [JsonPropertyName(\"xmit_msgq_cnt\")] public long XmitMsgqCnt { get; set; } Property Value Type Description System.Int64"
  },
  "api/Silverback.Messaging.Broker.Callbacks.Statistics.TopicPartitions.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.Statistics.TopicPartitions.html",
    "title": "Class TopicPartitions | Silverback",
    "keywords": "Class TopicPartitions Inheritance System.Object TopicPartitions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Callbacks.Statistics Assembly : Silverback.Integration.Kafka.dll Syntax public class TopicPartitions Properties | Improve this doc View source Partition Declaration [JsonPropertyName(\"partition\")] public long Partition { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Topic Declaration [JsonPropertyName(\"topic\")] public string Topic { get; set; } Property Value Type Description System.String"
  },
  "api/Silverback.Messaging.Broker.Callbacks.Statistics.TopicStatistics.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.Statistics.TopicStatistics.html",
    "title": "Class TopicStatistics | Silverback",
    "keywords": "Class TopicStatistics Inheritance System.Object TopicStatistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Callbacks.Statistics Assembly : Silverback.Integration.Kafka.dll Syntax public class TopicStatistics Properties | Improve this doc View source BatchCnt Declaration [JsonPropertyName(\"batchcnt\")] public WindowStatistics BatchCnt { get; set; } Property Value Type Description WindowStatistics | Improve this doc View source BatchSize Declaration [JsonPropertyName(\"batchsize\")] public WindowStatistics BatchSize { get; set; } Property Value Type Description WindowStatistics | Improve this doc View source MetadataAge Declaration [JsonPropertyName(\"metadata_age\")] public long MetadataAge { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Partitions Declaration [JsonPropertyName(\"partitions\")] public Dictionary<string, PartitionStatistics> Partitions { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , PartitionStatistics > | Improve this doc View source Topic Declaration [JsonPropertyName(\"topic\")] public string Topic { get; set; } Property Value Type Description System.String"
  },
  "api/Silverback.Messaging.Broker.Callbacks.Statistics.WindowStatistics.html": {
    "href": "api/Silverback.Messaging.Broker.Callbacks.Statistics.WindowStatistics.html",
    "title": "Class WindowStatistics | Silverback",
    "keywords": "Class WindowStatistics Inheritance System.Object WindowStatistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Callbacks.Statistics Assembly : Silverback.Integration.Kafka.dll Syntax public class WindowStatistics Properties | Improve this doc View source Avg Declaration [JsonPropertyName(\"avg\")] public long Avg { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Cnt Declaration [JsonPropertyName(\"cnt\")] public long Cnt { get; set; } Property Value Type Description System.Int64 | Improve this doc View source HdrSize Declaration [JsonPropertyName(\"hdrsize\")] public long HdrSize { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Max Declaration [JsonPropertyName(\"max\")] public long Max { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Min Declaration [JsonPropertyName(\"min\")] public long Min { get; set; } Property Value Type Description System.Int64 | Improve this doc View source OutOfRange Declaration [JsonPropertyName(\"outofrange\")] public long OutOfRange { get; set; } Property Value Type Description System.Int64 | Improve this doc View source P50 Declaration [JsonPropertyName(\"p50\")] public long P50 { get; set; } Property Value Type Description System.Int64 | Improve this doc View source P75 Declaration [JsonPropertyName(\"p75\")] public long P75 { get; set; } Property Value Type Description System.Int64 | Improve this doc View source P90 Declaration [JsonPropertyName(\"p90\")] public long P90 { get; set; } Property Value Type Description System.Int64 | Improve this doc View source P95 Declaration [JsonPropertyName(\"p95\")] public long P95 { get; set; } Property Value Type Description System.Int64 | Improve this doc View source P99 Declaration [JsonPropertyName(\"p99\")] public long P99 { get; set; } Property Value Type Description System.Int64 | Improve this doc View source P99_99 Declaration [JsonPropertyName(\"p99_99\")] public long P99_99 { get; set; } Property Value Type Description System.Int64 | Improve this doc View source StdDev Declaration [JsonPropertyName(\"stddev\")] public long StdDev { get; set; } Property Value Type Description System.Int64 | Improve this doc View source Sum Declaration [JsonPropertyName(\"sum\")] public long Sum { get; set; } Property Value Type Description System.Int64"
  },
  "api/Silverback.Messaging.Broker.Consumer.html": {
    "href": "api/Silverback.Messaging.Broker.Consumer.html",
    "title": "Class Consumer | Silverback",
    "keywords": "Class Consumer Consumes an endpoint and invokes a callback delegate when a message is received. Inheritance System.Object Consumer Consumer<TBroker, TEndpoint, TIdentifier> Implements IConsumer System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Consumer : IConsumer, IDisposable Constructors | Improve this doc View source Consumer(IBroker, IConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider, ISilverbackLogger<Consumer>) Initializes a new instance of the Consumer class. Declaration protected Consumer(IBroker broker, IConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider, ISilverbackLogger<Consumer> logger) Parameters Type Name Description IBroker broker The IBroker that is instantiating the consumer. IConsumerEndpoint endpoint The endpoint to be consumed. IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. ISilverbackLogger < Consumer > logger The ISilverbackLogger . Properties | Improve this doc View source Broker Gets the IBroker that owns this consumer. Declaration public IBroker Broker { get; } Property Value Type Description IBroker | Improve this doc View source Endpoint Gets the IConsumerEndpoint representing the endpoint that is being consumed. Declaration public IConsumerEndpoint Endpoint { get; } Property Value Type Description IConsumerEndpoint | Improve this doc View source Id Gets the InstanceIdentifier uniquely identifying the consumer instance. Declaration public InstanceIdentifier Id { get; } Property Value Type Description InstanceIdentifier | Improve this doc View source IsConnected Gets a value indicating whether this consumer has successfully initialized the connection to the message broker. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean Remarks This doesn't necessary mean that it is connected and ready to consume. The underlying library might handle the connection process asynchronously in the background or the protocol might require extra steps (e.g. Kafka might require the partitions to be assigned). | Improve this doc View source IsConnecting Gets a value indicating whether this consumer is initializing the connection to the message broker. Declaration public bool IsConnecting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsConsuming Gets a value indicating whether this consumer is connected and consuming (started). Declaration public bool IsConsuming { get; protected set; } Property Value Type Description System.Boolean | Improve this doc View source IsDisconnecting Gets a value indicating whether the consumer is being disconnected. Declaration protected bool IsDisconnecting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsStopping Gets a value indicating whether the consumer is being stopped. Declaration protected bool IsStopping { get; } Property Value Type Description System.Boolean | Improve this doc View source SequenceStores Gets the ISequenceStore instances used by this consumer. Some brokers will require multiple stores (e.g. the KafkaConsumer will create a store per each assigned partition). Declaration protected IList<ISequenceStore> SequenceStores { get; } Property Value Type Description System.Collections.Generic.IList < ISequenceStore > | Improve this doc View source ServiceProvider Gets the System.IServiceProvider to be used to resolve the required services. Declaration protected IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider | Improve this doc View source StatusInfo Gets the IConsumerStatusInfo containing the status details and basic statistics of this consumer. Declaration public IConsumerStatusInfo StatusInfo { get; } Property Value Type Description IConsumerStatusInfo Methods | Improve this doc View source CommitAsync(IBrokerMessageIdentifier) Confirms that the specified message has been successfully processed. The acknowledgement will be sent to the message broker and the message will never be consumed again (by the same logical consumer / consumer group). Declaration public Task CommitAsync(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier The identifier of the message to be committed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Confirms that the specified messages have been successfully processed. The acknowledgement will be sent to the message broker and the message will never be consumed again (by the same logical consumer / consumer group). Declaration public async Task CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be committed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Commits the specified messages sending the acknowledgement to the message broker. Declaration protected abstract Task CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be committed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ConnectAsync() Connects and starts consuming. Declaration public async Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ConnectCoreAsync() Connects to the message broker. Declaration protected abstract Task ConnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnects and stops consuming. Declaration public async Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectCoreAsync() Disconnects from the message broker. Declaration protected abstract Task DisconnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether the method has been called by the Dispose method and not from the finalizer. | Improve this doc View source GetCurrentSequenceStores() Gets the ISequenceStore instances used by this consumer. Some brokers will require multiple stores (e.g. the KafkaConsumer will create a store per each assigned partition). Declaration public IReadOnlyList<ISequenceStore> GetCurrentSequenceStores() Returns Type Description System.Collections.Generic.IReadOnlyList < ISequenceStore > The list of ISequenceStore . | Improve this doc View source GetSequenceStore(IBrokerMessageIdentifier) Returns the ISequenceStore to be used to store the pending sequences. Declaration protected virtual ISequenceStore GetSequenceStore(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier The message identifier (the offset in Kafka) may determine which store is being used. For example a dedicated sequence store is used per each Kafka partition, since they may be processed concurrently. Returns Type Description ISequenceStore The ISequenceStore . | Improve this doc View source HandleMessageAsync(Byte[], IReadOnlyCollection<MessageHeader>, String, IBrokerMessageIdentifier) Handles the consumed message invoking each IConsumerBehavior in the pipeline. Declaration protected virtual async Task HandleMessageAsync(byte[] message, IReadOnlyCollection<MessageHeader> headers, string sourceEndpointName, IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description System.Byte [] message The body of the consumed message. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The headers of the consumed message. System.String sourceEndpointName The name of the actual endpoint (topic) where the message has been delivered. IBrokerMessageIdentifier brokerMessageIdentifier The identifier of the consumed message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source IncrementFailedAttempts(IRawInboundEnvelope) Increments the stored failed attempts count for the specified envelope. Declaration public int IncrementFailedAttempts(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope. Returns Type Description System.Int32 The current failed attempts count after the increment. | Improve this doc View source RevertReadyStatus() Called when the connection is lost to transitions the consumer back to Connected . Declaration protected void RevertReadyStatus() | Improve this doc View source RollbackAsync(IBrokerMessageIdentifier) Notifies that an error occured while processing the specified message. If necessary the information will be sent to the message broker to ensure that the message will be consumed again. Declaration public Task RollbackAsync(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier The identifier of the message to be rolled back. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Notifies that an error occured while processing the specified messages. If necessary the information will be sent to the message broker to ensure that the message will be re-processed. Declaration public Task RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be rolled back. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) If necessary notifies the message broker that the specified messages couldn't be processed successfully, to ensure that they will be consumed again. Declaration protected abstract Task RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be rolled back. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source SetReadyStatus() Called when fully connected to transitions the consumer to Ready . Declaration protected void SetReadyStatus() | Improve this doc View source StartAsync() Starts consuming. Used after StopAsync() has been called to resume consuming. Declaration public async Task StartAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source StartCoreAsync() Starts consuming. Called to resume consuming after StopAsync() has been called. Declaration protected abstract Task StartCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source StopAsync() Stops the consumer without disconnecting. Can be used to pause and resume consuming. Declaration public async Task StopAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. This System.Threading.Tasks.Task will complete as soon as the stopping signal has been sent. | Improve this doc View source StopCoreAsync() Stops consuming while staying connected to the message broker. Declaration protected abstract Task StopCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source TriggerReconnectAsync() Disconnects and stops consuming. Declaration public async Task TriggerReconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source WaitUntilConsumingStoppedCoreAsync() Waits until the consuming is stopped. Declaration protected abstract Task WaitUntilConsumingStoppedCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumer System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.Consumer-3.html": {
    "href": "api/Silverback.Messaging.Broker.Consumer-3.html",
    "title": "Class Consumer<TBroker, TEndpoint, TIdentifier> | Silverback",
    "keywords": "Class Consumer<TBroker, TEndpoint, TIdentifier> Consumes an endpoint and invokes a callback delegate when a message is received. Inheritance System.Object Consumer Consumer<TBroker, TEndpoint, TIdentifier> KafkaConsumer MqttConsumer RabbitConsumer Implements IConsumer System.IDisposable Inherited Members Consumer.Id Consumer.StatusInfo Consumer.IsConnecting Consumer.IsConnected Consumer.IsConsuming Consumer.ServiceProvider Consumer.SequenceStores Consumer.IsDisconnecting Consumer.IsStopping Consumer.ConnectAsync() Consumer.DisconnectAsync() Consumer.TriggerReconnectAsync() Consumer.StartAsync() Consumer.StopAsync() Consumer.CommitAsync(IBrokerMessageIdentifier) Consumer.CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.RollbackAsync(IBrokerMessageIdentifier) Consumer.RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.IncrementFailedAttempts(IRawInboundEnvelope) Consumer.Dispose() Consumer.GetCurrentSequenceStores() Consumer.ConnectCoreAsync() Consumer.DisconnectCoreAsync() Consumer.StartCoreAsync() Consumer.StopCoreAsync() Consumer.WaitUntilConsumingStoppedCoreAsync() Consumer.HandleMessageAsync(Byte[], IReadOnlyCollection<MessageHeader>, String, IBrokerMessageIdentifier) Consumer.SetReadyStatus() Consumer.RevertReadyStatus() Consumer.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Consumer<TBroker, TEndpoint, TIdentifier> : Consumer, IConsumer, IDisposable where TBroker : IBroker where TEndpoint : IConsumerEndpoint where TIdentifier : IBrokerMessageIdentifier Type Parameters Name Description TBroker The type of the related IBroker implementation. TEndpoint The type of the IConsumerEndpoint implementation used by this consumer implementation. TIdentifier The type of the IBrokerMessageIdentifier used by this broker implementation. Constructors | Improve this doc View source Consumer(TBroker, TEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider, IInboundLogger<Consumer<TBroker, TEndpoint, TIdentifier>>) Initializes a new instance of the Consumer<TBroker, TEndpoint, TIdentifier> class. Declaration protected Consumer(TBroker broker, TEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IInboundLogger<Consumer<TBroker, TEndpoint, TIdentifier>> logger) Parameters Type Name Description TBroker broker The IBroker that is instantiating the consumer. TEndpoint endpoint The endpoint to be consumed. IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IInboundLogger < Consumer <TBroker, TEndpoint, TIdentifier>> logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source Broker Gets the IBroker that owns this consumer. Declaration public TBroker Broker { get; } Property Value Type Description TBroker | Improve this doc View source Endpoint Gets the IConsumerEndpoint representing the endpoint that is being consumed. Declaration public TEndpoint Endpoint { get; } Property Value Type Description TEndpoint Methods | Improve this doc View source CommitCoreAsync(IReadOnlyCollection<TIdentifier>) Commits the specified messages sending the acknowledgement to the message broker. Declaration protected abstract Task CommitCoreAsync(IReadOnlyCollection<TIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection <TIdentifier> brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Commits the specified messages sending the acknowledgement to the message broker. Declaration protected override Task CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be committed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) | Improve this doc View source GetSequenceStore(TIdentifier) Returns the ISequenceStore to be used to store the pending sequences. Declaration protected virtual ISequenceStore GetSequenceStore(TIdentifier brokerMessageIdentifier) Parameters Type Name Description TIdentifier brokerMessageIdentifier Returns Type Description ISequenceStore The ISequenceStore . | Improve this doc View source GetSequenceStore(IBrokerMessageIdentifier) Returns the ISequenceStore to be used to store the pending sequences. Declaration protected override ISequenceStore GetSequenceStore(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier The message identifier (the offset in Kafka) may determine which store is being used. For example a dedicated sequence store is used per each Kafka partition, since they may be processed concurrently. Returns Type Description ISequenceStore The ISequenceStore . Overrides Consumer.GetSequenceStore(IBrokerMessageIdentifier) | Improve this doc View source RollbackCoreAsync(IReadOnlyCollection<TIdentifier>) If necessary notifies the message broker that the specified messages couldn't be processed successfully, to ensure that they will be consumed again. Declaration protected abstract Task RollbackCoreAsync(IReadOnlyCollection<TIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection <TIdentifier> brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) If necessary notifies the message broker that the specified messages couldn't be processed successfully, to ensure that they will be consumed again. Declaration protected override Task RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be rolled back. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Implements IConsumer System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.ConsumerStatus.html": {
    "href": "api/Silverback.Messaging.Broker.ConsumerStatus.html",
    "title": "Enum ConsumerStatus | Silverback",
    "keywords": "Enum ConsumerStatus The possible states of the IConsumer as exposed in the IConsumerStatusInfo . Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public enum ConsumerStatus Fields Name Description Connected The consumer has successfully initialized the connection to the message broker. Consuming The consumer is connected and has received some messages. Disconnected The consumer is not connected to the message broker. Ready The consumer is completely initialized and is ready to consume."
  },
  "api/Silverback.Messaging.Broker.html": {
    "href": "api/Silverback.Messaging.Broker.html",
    "title": "Namespace Silverback.Messaging.Broker | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker Classes Broker<TProducerEndpoint, TConsumerEndpoint> The base class for all IBroker implementations. BrokerCollection Holds a reference to all the registered IBroker implementations and is able to resolve the right instance according to the IEndpoint type. BrokerConnectorService Automatically connects the message brokers when the application starts and disconnects them when the application is being stopped. Consumer Consumes an endpoint and invokes a callback delegate when a message is received. Consumer<TBroker, TEndpoint, TIdentifier> Consumes an endpoint and invokes a callback delegate when a message is received. KafkaBroker An IBroker implementation for Apache Kafka. KafkaConsumer Consumes an endpoint and invokes a callback delegate when a message is received. KafkaConsumerLocalTimeoutMonitor Handles the consumer error callback and reverts the consumer Ready status to Connected when the local poll timeout is exceeded. The consumer should eventually reconnect but this allows to accurately track its status. KafkaOffset Represents the position of the message in a partition. KafkaProducer Produces to an endpoint. MqttBroker An IBroker implementation for MQTT. MqttConsumer Consumes an endpoint and invokes a callback delegate when a message is received. MqttMessageIdentifier The MQTT broker doesn't provide any message identifier, so the identifier is either the MessageId header value or a client-side generated System.Guid . MqttProducer Produces to an endpoint. ProduceException The exception that is thrown by the IProducer when the message cannot be produced or the message broker didn't acknowledge it. Producer Produces to an endpoint. Producer<TBroker, TEndpoint> Produces to an endpoint. RabbitBroker An IBroker implementation for RabbitMQ. RabbitConsumer Consumes an endpoint and invokes a callback delegate when a message is received. RabbitDeliveryTag Represents the unique message identifier assigned by the message broker. RabbitProducer Produces to an endpoint. Interfaces IBroker The basic interface to interact with the message broker. IBrokerCollection Holds a reference to all the registered IBroker implementations and is able to resolve the right instance according to the IEndpoint type. IBrokerMessageIdentifier Represents the primary identifier used by the message broker to recognize the exact message. It can represent a Kafka offset, a RabbitMQ delivery tag or other similar constructs. The IBrokerMessageOffset interface should be implemented whenever possible to allow the exactly-one delivery using the OffsetStoreExactlyOnceStrategy . If the message broker doesn't provide any message identifier, a local one can be created (e.g. Guid.NewGuid() ) but this will prevent some features to work properly. IBrokerMessageOffset Represents the primary identifier used by the message broker to recognize the exact message. This is different than the base IBrokerMessageIdentifier because it has a ordinal meaning and is comparable. It can represent a Kafka offset or another similar construct. Being able to compare the identifiers (offsets) allows the exactly-one delivery using the OffsetStoreExactlyOnceStrategy and for it to work properly the offsets have to be universally comparable (across restarts and across multiple instances, for a given Key). IConsumer Consumes an endpoint and invokes a callback delegate when a message is received. IConsumerStatusChange Encapsulates the information about the consumer status transition. IConsumerStatusInfo Encapsulates the status details and basic statistics of an IConsumer . IProducer Produces to an endpoint. Enums ConsumerStatus The possible states of the IConsumer as exposed in the IConsumerStatusInfo ."
  },
  "api/Silverback.Messaging.Broker.IBroker.html": {
    "href": "api/Silverback.Messaging.Broker.IBroker.html",
    "title": "Interface IBroker | Silverback",
    "keywords": "Interface IBroker The basic interface to interact with the message broker. Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IBroker Properties | Improve this doc View source ConsumerEndpointType Gets the type of the IConsumerEndpoint that is being handled by this broker implementation. Declaration Type ConsumerEndpointType { get; } Property Value Type Description System.Type | Improve this doc View source Consumers Gets the collection of IConsumer that have been created so far. Declaration IReadOnlyList<IConsumer> Consumers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IConsumer > | Improve this doc View source IsConnected Gets a value indicating whether this broker is currently connected. Declaration bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source ProducerEndpointType Gets the type of the IProducerEndpoint that is being handled by this broker implementation. Declaration Type ProducerEndpointType { get; } Property Value Type Description System.Type | Improve this doc View source Producers Gets the collection of IProducer that have been created so far. Declaration IReadOnlyList<IProducer> Producers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IProducer > Methods | Improve this doc View source AddConsumer(IConsumerEndpoint) Adds an IConsumer that will consume from the specified endpoint as soon as the broker is connected. The received messages will be forwarded to the specified callback delegate. Declaration IConsumer AddConsumer(IConsumerEndpoint endpoint) Parameters Type Name Description IConsumerEndpoint endpoint The source endpoint. Returns Type Description IConsumer The IConsumer for the specified endpoint. | Improve this doc View source ConnectAsync() Connect to the message broker to start consuming. Declaration Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnect from the message broker to stop consuming. Declaration Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source GetProducer(IProducerEndpoint) Returns an IProducer to be used to produce to the specified endpoint. Declaration IProducer GetProducer(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint The target endpoint. Returns Type Description IProducer The IProducer for the specified endpoint. | Improve this doc View source GetProducer(String) Returns an existing IProducer to be used to produce to the specified endpoint. Declaration IProducer GetProducer(string endpointName) Parameters Type Name Description System.String endpointName The target endpoint name (or friendly name). Returns Type Description IProducer The IProducer for the specified endpoint."
  },
  "api/Silverback.Messaging.Broker.IBrokerCollection.html": {
    "href": "api/Silverback.Messaging.Broker.IBrokerCollection.html",
    "title": "Interface IBrokerCollection | Silverback",
    "keywords": "Interface IBrokerCollection Holds a reference to all the registered IBroker implementations and is able to resolve the right instance according to the IEndpoint type. Inherited Members System.Collections.Generic.IReadOnlyList<Silverback.Messaging.Broker.IBroker>.Item[System.Int32] System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Broker.IBroker>.Count System.Collections.Generic.IEnumerable<Silverback.Messaging.Broker.IBroker>.GetEnumerator() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IBrokerCollection : IReadOnlyList<IBroker>, IReadOnlyCollection<IBroker>, IEnumerable<IBroker>, IEnumerable Methods | Improve this doc View source AddConsumer(IConsumerEndpoint) Adds an IConsumer that will consume from the specified endpoint as soon as the broker is connected. The received messages will be forwarded to the specified callback delegate. Declaration IConsumer AddConsumer(IConsumerEndpoint endpoint) Parameters Type Name Description IConsumerEndpoint endpoint The source endpoint. Returns Type Description IConsumer The IConsumer for the specified endpoint. | Improve this doc View source ConnectAsync() Connect to all message brokers to start consuming. Declaration Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnect from all message brokers to stop consuming. Declaration Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source GetProducer(IProducerEndpoint) Returns an IProducer to be used to produce to the specified endpoint. Declaration IProducer GetProducer(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint The target endpoint. Returns Type Description IProducer The IProducer for the specified endpoint."
  },
  "api/Silverback.Messaging.Broker.IBrokerMessageIdentifier.html": {
    "href": "api/Silverback.Messaging.Broker.IBrokerMessageIdentifier.html",
    "title": "Interface IBrokerMessageIdentifier | Silverback",
    "keywords": "Interface IBrokerMessageIdentifier Represents the primary identifier used by the message broker to recognize the exact message. It can represent a Kafka offset, a RabbitMQ delivery tag or other similar constructs. The IBrokerMessageOffset interface should be implemented whenever possible to allow the exactly-one delivery using the OffsetStoreExactlyOnceStrategy . If the message broker doesn't provide any message identifier, a local one can be created (e.g. Guid.NewGuid() ) but this will prevent some features to work properly. Inherited Members System.IEquatable<Silverback.Messaging.Broker.IBrokerMessageIdentifier>.Equals(Silverback.Messaging.Broker.IBrokerMessageIdentifier) Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IBrokerMessageIdentifier : IEquatable<IBrokerMessageIdentifier> Remarks The classes implementing this interface should also implement a public constructor accepting key and value as string arguments. Properties | Improve this doc View source Key Gets the unique key of the queue, topic or partition the message was produced to or consumed from. Declaration string Key { get; } Property Value Type Description System.String | Improve this doc View source Value Gets the identifier value. Declaration string Value { get; } Property Value Type Description System.String Methods | Improve this doc View source ToLogString() Gets a string that can be used to log the offset value. Declaration string ToLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string should contain all identifiers except the endpoint name. | Improve this doc View source ToVerboseLogString() Gets a string that can be used to log the offset value. Declaration string ToVerboseLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string must include the endpoint name, if the identifier value isn't unique across different endpoints."
  },
  "api/Silverback.Messaging.Broker.IBrokerMessageOffset.html": {
    "href": "api/Silverback.Messaging.Broker.IBrokerMessageOffset.html",
    "title": "Interface IBrokerMessageOffset | Silverback",
    "keywords": "Interface IBrokerMessageOffset Represents the primary identifier used by the message broker to recognize the exact message. This is different than the base IBrokerMessageIdentifier because it has a ordinal meaning and is comparable. It can represent a Kafka offset or another similar construct. Being able to compare the identifiers (offsets) allows the exactly-one delivery using the OffsetStoreExactlyOnceStrategy and for it to work properly the offsets have to be universally comparable (across restarts and across multiple instances, for a given Key). Inherited Members IBrokerMessageIdentifier.Key IBrokerMessageIdentifier.Value IBrokerMessageIdentifier.ToLogString() IBrokerMessageIdentifier.ToVerboseLogString() System.IEquatable<Silverback.Messaging.Broker.IBrokerMessageIdentifier>.Equals(Silverback.Messaging.Broker.IBrokerMessageIdentifier) System.IComparable<Silverback.Messaging.Broker.IBrokerMessageOffset>.CompareTo(Silverback.Messaging.Broker.IBrokerMessageOffset) Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IBrokerMessageOffset : IBrokerMessageIdentifier, IEquatable<IBrokerMessageIdentifier>, IComparable<IBrokerMessageOffset>"
  },
  "api/Silverback.Messaging.Broker.IConsumer.html": {
    "href": "api/Silverback.Messaging.Broker.IConsumer.html",
    "title": "Interface IConsumer | Silverback",
    "keywords": "Interface IConsumer Consumes an endpoint and invokes a callback delegate when a message is received. Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IConsumer Properties | Improve this doc View source Broker Gets the IBroker that owns this consumer. Declaration IBroker Broker { get; } Property Value Type Description IBroker | Improve this doc View source Endpoint Gets the IConsumerEndpoint representing the endpoint that is being consumed. Declaration IConsumerEndpoint Endpoint { get; } Property Value Type Description IConsumerEndpoint | Improve this doc View source Id Gets the InstanceIdentifier uniquely identifying the consumer instance. Declaration InstanceIdentifier Id { get; } Property Value Type Description InstanceIdentifier | Improve this doc View source IsConnected Gets a value indicating whether this consumer has successfully initialized the connection to the message broker. Declaration bool IsConnected { get; } Property Value Type Description System.Boolean Remarks This doesn't necessary mean that it is connected and ready to consume. The underlying library might handle the connection process asynchronously in the background or the protocol might require extra steps (e.g. Kafka might require the partitions to be assigned). | Improve this doc View source IsConnecting Gets a value indicating whether this consumer is initializing the connection to the message broker. Declaration bool IsConnecting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsConsuming Gets a value indicating whether this consumer is connected and consuming (started). Declaration bool IsConsuming { get; } Property Value Type Description System.Boolean | Improve this doc View source StatusInfo Gets the IConsumerStatusInfo containing the status details and basic statistics of this consumer. Declaration IConsumerStatusInfo StatusInfo { get; } Property Value Type Description IConsumerStatusInfo Methods | Improve this doc View source CommitAsync(IBrokerMessageIdentifier) Confirms that the specified message has been successfully processed. The acknowledgement will be sent to the message broker and the message will never be consumed again (by the same logical consumer / consumer group). Declaration Task CommitAsync(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier The identifier of the message to be committed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Confirms that the specified messages have been successfully processed. The acknowledgement will be sent to the message broker and the message will never be consumed again (by the same logical consumer / consumer group). Declaration Task CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be committed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ConnectAsync() Connects and starts consuming. Declaration Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnects and stops consuming. Declaration Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source GetCurrentSequenceStores() Gets the ISequenceStore instances used by this consumer. Some brokers will require multiple stores (e.g. the KafkaConsumer will create a store per each assigned partition). Declaration IReadOnlyList<ISequenceStore> GetCurrentSequenceStores() Returns Type Description System.Collections.Generic.IReadOnlyList < ISequenceStore > The list of ISequenceStore . | Improve this doc View source IncrementFailedAttempts(IRawInboundEnvelope) Increments the stored failed attempts count for the specified envelope. Declaration int IncrementFailedAttempts(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope. Returns Type Description System.Int32 The current failed attempts count after the increment. | Improve this doc View source RollbackAsync(IBrokerMessageIdentifier) Notifies that an error occured while processing the specified message. If necessary the information will be sent to the message broker to ensure that the message will be consumed again. Declaration Task RollbackAsync(IBrokerMessageIdentifier brokerMessageIdentifier) Parameters Type Name Description IBrokerMessageIdentifier brokerMessageIdentifier The identifier of the message to be rolled back. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Notifies that an error occured while processing the specified messages. If necessary the information will be sent to the message broker to ensure that the message will be re-processed. Declaration Task RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IBrokerMessageIdentifier > brokerMessageIdentifiers The identifiers of to message be rolled back. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source StartAsync() Starts consuming. Used after StopAsync() has been called to resume consuming. Declaration Task StartAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source StopAsync() Stops the consumer without disconnecting. Can be used to pause and resume consuming. Declaration Task StopAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. This System.Threading.Tasks.Task will complete as soon as the stopping signal has been sent. | Improve this doc View source TriggerReconnectAsync() Stops the consumer and starts an asynchronous System.Threading.Tasks.Task to disconnect and reconnect it. Declaration Task TriggerReconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. This System.Threading.Tasks.Task will complete as soon as the stopping signal has been sent, while the process will be completed in another asynchronous System.Threading.Tasks.Task ."
  },
  "api/Silverback.Messaging.Broker.IConsumerStatusChange.html": {
    "href": "api/Silverback.Messaging.Broker.IConsumerStatusChange.html",
    "title": "Interface IConsumerStatusChange | Silverback",
    "keywords": "Interface IConsumerStatusChange Encapsulates the information about the consumer status transition. Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IConsumerStatusChange Properties | Improve this doc View source Status Gets the status into which the consumer has transitioned. Declaration ConsumerStatus Status { get; } Property Value Type Description ConsumerStatus | Improve this doc View source Timestamp Gets the timestamp at which the consumer transitioned to this status. Declaration DateTime? Timestamp { get; } Property Value Type Description System.Nullable < System.DateTime >"
  },
  "api/Silverback.Messaging.Broker.IConsumerStatusInfo.html": {
    "href": "api/Silverback.Messaging.Broker.IConsumerStatusInfo.html",
    "title": "Interface IConsumerStatusInfo | Silverback",
    "keywords": "Interface IConsumerStatusInfo Encapsulates the status details and basic statistics of an IConsumer . Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IConsumerStatusInfo Properties | Improve this doc View source ConsumedMessagesCount Gets the total number of messages that have been consumed by the consumer instance. Declaration int ConsumedMessagesCount { get; } Property Value Type Description System.Int32 | Improve this doc View source History Gets the collection of IConsumerStatusChange recording all state transitions. Declaration IReadOnlyCollection<IConsumerStatusChange> History { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < IConsumerStatusChange > | Improve this doc View source LatestConsumedMessageIdentifier Gets the message identifier of the latest consumed message. Declaration IBrokerMessageIdentifier LatestConsumedMessageIdentifier { get; } Property Value Type Description IBrokerMessageIdentifier | Improve this doc View source LatestConsumedMessageTimestamp Gets the timestamp at which the latest message has been consumed. Declaration DateTime? LatestConsumedMessageTimestamp { get; } Property Value Type Description System.Nullable < System.DateTime > | Improve this doc View source Status Gets the current consumer status. Declaration ConsumerStatus Status { get; } Property Value Type Description ConsumerStatus"
  },
  "api/Silverback.Messaging.Broker.IProducer.html": {
    "href": "api/Silverback.Messaging.Broker.IProducer.html",
    "title": "Interface IProducer | Silverback",
    "keywords": "Interface IProducer Produces to an endpoint. Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public interface IProducer Properties | Improve this doc View source Broker Gets the IBroker instance that owns this . Declaration IBroker Broker { get; } Property Value Type Description IBroker | Improve this doc View source Endpoint Gets the IProducerEndpoint this instance is connected to. Declaration IProducerEndpoint Endpoint { get; } Property Value Type Description IProducerEndpoint | Improve this doc View source Id Gets the InstanceIdentifier uniquely identifying the producer instance. Declaration InstanceIdentifier Id { get; } Property Value Type Description InstanceIdentifier | Improve this doc View source IsConnected Gets a value indicating whether this producer is connected to the message broker and ready to produce messages. Declaration bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source IsConnecting Gets a value indicating whether this producer is trying to connect to the message broker. Declaration bool IsConnecting { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source ConnectAsync() Initializes the connection to the message broker (if needed). Declaration Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnects from the message broker (if needed). Declaration Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Produce(IOutboundEnvelope) Publishes the specified message. Declaration IBrokerMessageIdentifier Produce(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration void Produce(IOutboundEnvelope envelope, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source Produce(Object, IReadOnlyCollection<MessageHeader>) Publishes the specified message. Declaration IBrokerMessageIdentifier Produce(object message, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration void Produce(object message, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceAsync(IOutboundEnvelope) Publishes the specified message. Declaration Task<IBrokerMessageIdentifier> ProduceAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration Task ProduceAsync(IOutboundEnvelope envelope, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Publishes the specified message. Declaration Task<IBrokerMessageIdentifier> ProduceAsync(object message, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration Task ProduceAsync(object message, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration IBrokerMessageIdentifier RawProduce(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration void RawProduce(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration IBrokerMessageIdentifier RawProduce(Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration void RawProduce(Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration IBrokerMessageIdentifier RawProduce(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration void RawProduce(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration IBrokerMessageIdentifier RawProduce(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration void RawProduce(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task<IBrokerMessageIdentifier> RawProduceAsync(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task RawProduceAsync(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task<IBrokerMessageIdentifier> RawProduceAsync(Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task RawProduceAsync(Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task<IBrokerMessageIdentifier> RawProduceAsync(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task RawProduceAsync(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task<IBrokerMessageIdentifier> RawProduceAsync(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration Task RawProduceAsync(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed)."
  },
  "api/Silverback.Messaging.Broker.Kafka.ConfluentAdminClientBuilder.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.ConfluentAdminClientBuilder.html",
    "title": "Class ConfluentAdminClientBuilder | Silverback",
    "keywords": "Class ConfluentAdminClientBuilder Wraps the Confluent.Kafka.AdminClientBuilder . Inheritance System.Object ConfluentAdminClientBuilder Implements IConfluentAdminClientBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public class ConfluentAdminClientBuilder : IConfluentAdminClientBuilder Methods | Improve this doc View source Build(ClientConfig) Returns an Confluent.Kafka.IAdminClient . Declaration public IAdminClient Build(ClientConfig config) Parameters Type Name Description Confluent.Kafka.ClientConfig config The client configuration. Returns Type Description Confluent.Kafka.IAdminClient The Confluent.Kafka.IAdminClient . Implements IConfluentAdminClientBuilder"
  },
  "api/Silverback.Messaging.Broker.Kafka.ConfluentConsumerBuilder.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.ConfluentConsumerBuilder.html",
    "title": "Class ConfluentConsumerBuilder | Silverback",
    "keywords": "Class ConfluentConsumerBuilder Wraps the Confluent.Kafka.ConsumerBuilder`2 . Inheritance System.Object ConfluentConsumerBuilder Implements IConfluentConsumerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public class ConfluentConsumerBuilder : IConfluentConsumerBuilder Methods | Improve this doc View source Build() Builds the Confluent.Kafka.IConsumer<TKey, TValue> instance. Declaration public IConsumer<byte[], byte[]> Build() Returns Type Description Confluent.Kafka.IConsumer < System.Byte [], System.Byte []> The Confluent.Kafka.IConsumer<TKey, TValue> . | Improve this doc View source SetConfig(ConsumerConfig) Sets the consumer configuration. Declaration public IConfluentConsumerBuilder SetConfig(ConsumerConfig config) Parameters Type Name Description Confluent.Kafka.ConsumerConfig config The configuration. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetErrorHandler(Action<IConsumer<Byte[], Byte[]>, Error>) Sets the handler to call on error events. Declaration public IConfluentConsumerBuilder SetErrorHandler(Action<IConsumer<byte[], byte[]>, Error> errorHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, Confluent.Kafka.Error > errorHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetLogHandler(Action<IConsumer<Byte[], Byte[]>, LogMessage>) Set the handler to call when there is information available to be logged. If not specified, a default callback that writes to stderr will be used. Declaration public IConfluentConsumerBuilder SetLogHandler(Action<IConsumer<byte[], byte[]>, LogMessage> logHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, Confluent.Kafka.LogMessage > logHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetOffsetsCommittedHandler(Action<IConsumer<Byte[], Byte[]>, CommittedOffsets>) Sets the handler to call on offsets committed events. Declaration public IConfluentConsumerBuilder SetOffsetsCommittedHandler(Action<IConsumer<byte[], byte[]>, CommittedOffsets> offsetsCommittedHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, Confluent.Kafka.CommittedOffsets > offsetsCommittedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsAssignedHandler(Action<IConsumer<Byte[], Byte[]>, List<TopicPartition>>) Sets the handler to call on partitions assigned events. Declaration public IConfluentConsumerBuilder SetPartitionsAssignedHandler(Action<IConsumer<byte[], byte[]>, List<TopicPartition>> partitionsAssignedHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartition >> partitionsAssignedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsAssignedHandler(Func<IConsumer<Byte[], Byte[]>, List<TopicPartition>, IEnumerable<TopicPartitionOffset>>) Sets the handler to call on partitions assigned events. Declaration public IConfluentConsumerBuilder SetPartitionsAssignedHandler(Func<IConsumer<byte[], byte[]>, List<TopicPartition>, IEnumerable<TopicPartitionOffset>> partitionsAssignedHandler) Parameters Type Name Description System.Func < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> partitionsAssignedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsRevokedHandler(Action<IConsumer<Byte[], Byte[]>, List<TopicPartitionOffset>>) Sets the handler to call on partitions revoked events. Declaration public IConfluentConsumerBuilder SetPartitionsRevokedHandler(Action<IConsumer<byte[], byte[]>, List<TopicPartitionOffset>> partitionsRevokedHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartitionOffset >> partitionsRevokedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsRevokedHandler(Func<IConsumer<Byte[], Byte[]>, List<TopicPartitionOffset>, IEnumerable<TopicPartitionOffset>>) Sets the handler to call on partitions revoked events. Declaration public IConfluentConsumerBuilder SetPartitionsRevokedHandler(Func<IConsumer<byte[], byte[]>, List<TopicPartitionOffset>, IEnumerable<TopicPartitionOffset>> partitionsRevokedHandler) Parameters Type Name Description System.Func < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartitionOffset >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> partitionsRevokedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetStatisticsHandler(Action<IConsumer<Byte[], Byte[]>, String>) Sets the handler to call on statistics events. Declaration public IConfluentConsumerBuilder SetStatisticsHandler(Action<IConsumer<byte[], byte[]>, string> statisticsHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.String > statisticsHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. Implements IConfluentConsumerBuilder"
  },
  "api/Silverback.Messaging.Broker.Kafka.ConfluentProducerBuilder.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.ConfluentProducerBuilder.html",
    "title": "Class ConfluentProducerBuilder | Silverback",
    "keywords": "Class ConfluentProducerBuilder Wraps the Confluent.Kafka.ProducerBuilder`2 . Inheritance System.Object ConfluentProducerBuilder Implements IConfluentProducerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public class ConfluentProducerBuilder : IConfluentProducerBuilder Methods | Improve this doc View source Build() Builds the Confluent.Kafka.IProducer<TKey, TValue> instance. Declaration public IProducer<byte[], byte[]> Build() Returns Type Description Confluent.Kafka.IProducer < System.Byte [], System.Byte []> The Confluent.Kafka.IProducer<TKey, TValue> . | Improve this doc View source SetConfig(ProducerConfig) Sets the producer configuration. Declaration public IConfluentProducerBuilder SetConfig(ProducerConfig config) Parameters Type Name Description Confluent.Kafka.ProducerConfig config The configuration. Returns Type Description IConfluentProducerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetLogHandler(Action<IProducer<Byte[], Byte[]>, LogMessage>) Set the handler to call when there is information available to be logged. If not specified, a default callback that writes to stderr will be used. Declaration public IConfluentProducerBuilder SetLogHandler(Action<IProducer<byte[], byte[]>, LogMessage> logHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IProducer < System.Byte [], System.Byte []>, Confluent.Kafka.LogMessage > logHandler The event handler. Returns Type Description IConfluentProducerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetStatisticsHandler(Action<IProducer<Byte[], Byte[]>, String>) Sets the handler to call on statistics events. Declaration public IConfluentProducerBuilder SetStatisticsHandler(Action<IProducer<byte[], byte[]>, string> statisticsHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IProducer < System.Byte [], System.Byte []>, System.String > statisticsHandler The event handler. Returns Type Description IConfluentProducerBuilder The IConfluentProducerBuilder so that additional calls can be chained. Implements IConfluentProducerBuilder"
  },
  "api/Silverback.Messaging.Broker.Kafka.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.html",
    "title": "Namespace Silverback.Messaging.Broker.Kafka | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Kafka Classes ConfluentAdminClientBuilder Wraps the Confluent.Kafka.AdminClientBuilder . ConfluentConsumerBuilder Wraps the Confluent.Kafka.ConsumerBuilder`2 . ConfluentProducerBuilder Wraps the Confluent.Kafka.ProducerBuilder`2 . MockedConfluentAdminClientBuilder The builder for the Silverback.Messaging.Broker.Kafka.Mocks.MockedConfluentAdminClient . MockedConfluentConsumerBuilder The builder for the Silverback.Messaging.Broker.Kafka.Mocks.MockedConfluentConsumer . MockedConfluentProducerBuilder The builder for the Silverback.Messaging.Broker.Kafka.Mocks.MockedConfluentProducer . Interfaces IConfluentAdminClientBuilder Used to build the Confluent.Kafka.IAdminClient . IConfluentConsumerBuilder The Confluent.Kafka.IConsumer<TKey, TValue> builder used by the KafkaConsumer . IConfluentProducerBuilder The Confluent.Kafka.IProducer<TKey, TValue> builder used by the KafkaProducer . IConfluentProducersCache Creates and stores the Confluent.Kafka.IProducer<TKey, TValue> instances in order to reuse them for the same KafkaProducerConfig configuration."
  },
  "api/Silverback.Messaging.Broker.Kafka.IConfluentAdminClientBuilder.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.IConfluentAdminClientBuilder.html",
    "title": "Interface IConfluentAdminClientBuilder | Silverback",
    "keywords": "Interface IConfluentAdminClientBuilder Used to build the Confluent.Kafka.IAdminClient . Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public interface IConfluentAdminClientBuilder Methods | Improve this doc View source Build(ClientConfig) Returns an Confluent.Kafka.IAdminClient . Declaration IAdminClient Build(ClientConfig config) Parameters Type Name Description Confluent.Kafka.ClientConfig config The client configuration. Returns Type Description Confluent.Kafka.IAdminClient The Confluent.Kafka.IAdminClient ."
  },
  "api/Silverback.Messaging.Broker.Kafka.IConfluentConsumerBuilder.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.IConfluentConsumerBuilder.html",
    "title": "Interface IConfluentConsumerBuilder | Silverback",
    "keywords": "Interface IConfluentConsumerBuilder The Confluent.Kafka.IConsumer<TKey, TValue> builder used by the KafkaConsumer . Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public interface IConfluentConsumerBuilder Methods | Improve this doc View source Build() Builds the Confluent.Kafka.IConsumer<TKey, TValue> instance. Declaration IConsumer<byte[], byte[]> Build() Returns Type Description Confluent.Kafka.IConsumer < System.Byte [], System.Byte []> The Confluent.Kafka.IConsumer<TKey, TValue> . | Improve this doc View source SetConfig(ConsumerConfig) Sets the consumer configuration. Declaration IConfluentConsumerBuilder SetConfig(ConsumerConfig config) Parameters Type Name Description Confluent.Kafka.ConsumerConfig config The configuration. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetErrorHandler(Action<IConsumer<Byte[], Byte[]>, Error>) Sets the handler to call on error events. Declaration IConfluentConsumerBuilder SetErrorHandler(Action<IConsumer<byte[], byte[]>, Error> errorHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, Confluent.Kafka.Error > errorHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetLogHandler(Action<IConsumer<Byte[], Byte[]>, LogMessage>) Set the handler to call when there is information available to be logged. If not specified, a default callback that writes to stderr will be used. Declaration IConfluentConsumerBuilder SetLogHandler(Action<IConsumer<byte[], byte[]>, LogMessage> logHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, Confluent.Kafka.LogMessage > logHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetOffsetsCommittedHandler(Action<IConsumer<Byte[], Byte[]>, CommittedOffsets>) Sets the handler to call on offsets committed events. Declaration IConfluentConsumerBuilder SetOffsetsCommittedHandler(Action<IConsumer<byte[], byte[]>, CommittedOffsets> offsetsCommittedHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, Confluent.Kafka.CommittedOffsets > offsetsCommittedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsAssignedHandler(Action<IConsumer<Byte[], Byte[]>, List<TopicPartition>>) Sets the handler to call on partitions assigned events. Declaration IConfluentConsumerBuilder SetPartitionsAssignedHandler(Action<IConsumer<byte[], byte[]>, List<TopicPartition>> partitionsAssignedHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartition >> partitionsAssignedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsAssignedHandler(Func<IConsumer<Byte[], Byte[]>, List<TopicPartition>, IEnumerable<TopicPartitionOffset>>) Sets the handler to call on partitions assigned events. Declaration IConfluentConsumerBuilder SetPartitionsAssignedHandler(Func<IConsumer<byte[], byte[]>, List<TopicPartition>, IEnumerable<TopicPartitionOffset>> partitionsAssignedHandler) Parameters Type Name Description System.Func < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> partitionsAssignedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsRevokedHandler(Action<IConsumer<Byte[], Byte[]>, List<TopicPartitionOffset>>) Sets the handler to call on partitions revoked events. Declaration IConfluentConsumerBuilder SetPartitionsRevokedHandler(Action<IConsumer<byte[], byte[]>, List<TopicPartitionOffset>> partitionsRevokedHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartitionOffset >> partitionsRevokedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsRevokedHandler(Func<IConsumer<Byte[], Byte[]>, List<TopicPartitionOffset>, IEnumerable<TopicPartitionOffset>>) Sets the handler to call on partitions revoked events. Declaration IConfluentConsumerBuilder SetPartitionsRevokedHandler(Func<IConsumer<byte[], byte[]>, List<TopicPartitionOffset>, IEnumerable<TopicPartitionOffset>> partitionsRevokedHandler) Parameters Type Name Description System.Func < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartitionOffset >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> partitionsRevokedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetStatisticsHandler(Action<IConsumer<Byte[], Byte[]>, String>) Sets the handler to call on statistics events. Declaration IConfluentConsumerBuilder SetStatisticsHandler(Action<IConsumer<byte[], byte[]>, string> statisticsHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.String > statisticsHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Broker.Kafka.IConfluentProducerBuilder.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.IConfluentProducerBuilder.html",
    "title": "Interface IConfluentProducerBuilder | Silverback",
    "keywords": "Interface IConfluentProducerBuilder The Confluent.Kafka.IProducer<TKey, TValue> builder used by the KafkaProducer . Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public interface IConfluentProducerBuilder Methods | Improve this doc View source Build() Builds the Confluent.Kafka.IProducer<TKey, TValue> instance. Declaration IProducer<byte[], byte[]> Build() Returns Type Description Confluent.Kafka.IProducer < System.Byte [], System.Byte []> The Confluent.Kafka.IProducer<TKey, TValue> . | Improve this doc View source SetConfig(ProducerConfig) Sets the producer configuration. Declaration IConfluentProducerBuilder SetConfig(ProducerConfig config) Parameters Type Name Description Confluent.Kafka.ProducerConfig config The configuration. Returns Type Description IConfluentProducerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetLogHandler(Action<IProducer<Byte[], Byte[]>, LogMessage>) Set the handler to call when there is information available to be logged. If not specified, a default callback that writes to stderr will be used. Declaration IConfluentProducerBuilder SetLogHandler(Action<IProducer<byte[], byte[]>, LogMessage> logHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IProducer < System.Byte [], System.Byte []>, Confluent.Kafka.LogMessage > logHandler The event handler. Returns Type Description IConfluentProducerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetStatisticsHandler(Action<IProducer<Byte[], Byte[]>, String>) Sets the handler to call on statistics events. Declaration IConfluentProducerBuilder SetStatisticsHandler(Action<IProducer<byte[], byte[]>, string> statisticsHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IProducer < System.Byte [], System.Byte []>, System.String > statisticsHandler The event handler. Returns Type Description IConfluentProducerBuilder The IConfluentProducerBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Broker.Kafka.IConfluentProducersCache.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.IConfluentProducersCache.html",
    "title": "Interface IConfluentProducersCache | Silverback",
    "keywords": "Interface IConfluentProducersCache Creates and stores the Confluent.Kafka.IProducer<TKey, TValue> instances in order to reuse them for the same KafkaProducerConfig configuration. Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public interface IConfluentProducersCache Methods | Improve this doc View source DisposeProducer(KafkaProducerConfig) Disposes the Confluent.Kafka.IProducer<TKey, TValue> for the specified KafkaProducerConfig and removes it from the cache. Declaration void DisposeProducer(KafkaProducerConfig config) Parameters Type Name Description KafkaProducerConfig config The KafkaProducerConfig . | Improve this doc View source GetProducer(KafkaProducerConfig, KafkaProducer) Gets an Confluent.Kafka.IProducer<TKey, TValue> compatible with the specified KafkaProducerConfig . Declaration IProducer<byte[], byte[]> GetProducer(KafkaProducerConfig config, KafkaProducer owner) Parameters Type Name Description KafkaProducerConfig config The KafkaProducerConfig . KafkaProducer owner The KafkaProducer to be linked to the new producer being created. Returns Type Description Confluent.Kafka.IProducer < System.Byte [], System.Byte []> The Confluent.Kafka.IProducer<TKey, TValue> ."
  },
  "api/Silverback.Messaging.Broker.Kafka.MockedConfluentAdminClientBuilder.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.MockedConfluentAdminClientBuilder.html",
    "title": "Class MockedConfluentAdminClientBuilder | Silverback",
    "keywords": "Class MockedConfluentAdminClientBuilder The builder for the Silverback.Messaging.Broker.Kafka.Mocks.MockedConfluentAdminClient . Inheritance System.Object MockedConfluentAdminClientBuilder Implements IConfluentAdminClientBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public class MockedConfluentAdminClientBuilder : IConfluentAdminClientBuilder Constructors | Improve this doc View source MockedConfluentAdminClientBuilder(IMockedKafkaOptions) Initializes a new instance of the MockedConfluentAdminClientBuilder class. Declaration public MockedConfluentAdminClientBuilder(IMockedKafkaOptions options) Parameters Type Name Description IMockedKafkaOptions options The IMockedKafkaOptions . Methods | Improve this doc View source Build(ClientConfig) Returns an Confluent.Kafka.IAdminClient . Declaration public IAdminClient Build(ClientConfig config) Parameters Type Name Description Confluent.Kafka.ClientConfig config The client configuration. Returns Type Description Confluent.Kafka.IAdminClient The Confluent.Kafka.IAdminClient . Implements IConfluentAdminClientBuilder"
  },
  "api/Silverback.Messaging.Broker.Kafka.MockedConfluentConsumerBuilder.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.MockedConfluentConsumerBuilder.html",
    "title": "Class MockedConfluentConsumerBuilder | Silverback",
    "keywords": "Class MockedConfluentConsumerBuilder The builder for the Silverback.Messaging.Broker.Kafka.Mocks.MockedConfluentConsumer . Inheritance System.Object MockedConfluentConsumerBuilder Implements IConfluentConsumerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public class MockedConfluentConsumerBuilder : IConfluentConsumerBuilder Constructors | Improve this doc View source MockedConfluentConsumerBuilder(IInMemoryTopicCollection, IMockedKafkaOptions) Initializes a new instance of the MockedConfluentConsumerBuilder class. Declaration public MockedConfluentConsumerBuilder(IInMemoryTopicCollection topics, IMockedKafkaOptions options) Parameters Type Name Description IInMemoryTopicCollection topics The IInMemoryTopicCollection . IMockedKafkaOptions options The IMockedKafkaOptions . Methods | Improve this doc View source Build() Builds the Confluent.Kafka.IConsumer<TKey, TValue> instance. Declaration public IConsumer<byte[], byte[]> Build() Returns Type Description Confluent.Kafka.IConsumer < System.Byte [], System.Byte []> The Confluent.Kafka.IConsumer<TKey, TValue> . | Improve this doc View source SetConfig(ConsumerConfig) Sets the consumer configuration. Declaration public IConfluentConsumerBuilder SetConfig(ConsumerConfig config) Parameters Type Name Description Confluent.Kafka.ConsumerConfig config The configuration. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetErrorHandler(Action<IConsumer<Byte[], Byte[]>, Error>) Sets the handler to call on error events. Declaration public IConfluentConsumerBuilder SetErrorHandler(Action<IConsumer<byte[], byte[]>, Error> errorHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, Confluent.Kafka.Error > errorHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetLogHandler(Action<IConsumer<Byte[], Byte[]>, LogMessage>) Set the handler to call when there is information available to be logged. If not specified, a default callback that writes to stderr will be used. Declaration public IConfluentConsumerBuilder SetLogHandler(Action<IConsumer<byte[], byte[]>, LogMessage> logHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, Confluent.Kafka.LogMessage > logHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetOffsetsCommittedHandler(Action<IConsumer<Byte[], Byte[]>, CommittedOffsets>) Sets the handler to call on offsets committed events. Declaration public IConfluentConsumerBuilder SetOffsetsCommittedHandler(Action<IConsumer<byte[], byte[]>, CommittedOffsets> offsetsCommittedHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, Confluent.Kafka.CommittedOffsets > offsetsCommittedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsAssignedHandler(Action<IConsumer<Byte[], Byte[]>, List<TopicPartition>>) Sets the handler to call on partitions assigned events. Declaration public IConfluentConsumerBuilder SetPartitionsAssignedHandler(Action<IConsumer<byte[], byte[]>, List<TopicPartition>> partitionsAssignedHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartition >> partitionsAssignedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsAssignedHandler(Func<IConsumer<Byte[], Byte[]>, List<TopicPartition>, IEnumerable<TopicPartitionOffset>>) Sets the handler to call on partitions assigned events. Declaration public IConfluentConsumerBuilder SetPartitionsAssignedHandler(Func<IConsumer<byte[], byte[]>, List<TopicPartition>, IEnumerable<TopicPartitionOffset>> partitionsAssignedHandler) Parameters Type Name Description System.Func < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> partitionsAssignedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsRevokedHandler(Action<IConsumer<Byte[], Byte[]>, List<TopicPartitionOffset>>) Sets the handler to call on partitions revoked events. Declaration public IConfluentConsumerBuilder SetPartitionsRevokedHandler(Action<IConsumer<byte[], byte[]>, List<TopicPartitionOffset>> partitionsRevokedHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartitionOffset >> partitionsRevokedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetPartitionsRevokedHandler(Func<IConsumer<Byte[], Byte[]>, List<TopicPartitionOffset>, IEnumerable<TopicPartitionOffset>>) Sets the handler to call on partitions revoked events. Declaration public IConfluentConsumerBuilder SetPartitionsRevokedHandler(Func<IConsumer<byte[], byte[]>, List<TopicPartitionOffset>, IEnumerable<TopicPartitionOffset>> partitionsRevokedHandler) Parameters Type Name Description System.Func < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.Collections.Generic.List < Confluent.Kafka.TopicPartitionOffset >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> partitionsRevokedHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetStatisticsHandler(Action<IConsumer<Byte[], Byte[]>, String>) Sets the handler to call on statistics events. Declaration public IConfluentConsumerBuilder SetStatisticsHandler(Action<IConsumer<byte[], byte[]>, string> statisticsHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IConsumer < System.Byte [], System.Byte []>, System.String > statisticsHandler The event handler. Returns Type Description IConfluentConsumerBuilder The IConfluentProducerBuilder so that additional calls can be chained. Implements IConfluentConsumerBuilder"
  },
  "api/Silverback.Messaging.Broker.Kafka.MockedConfluentProducerBuilder.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.MockedConfluentProducerBuilder.html",
    "title": "Class MockedConfluentProducerBuilder | Silverback",
    "keywords": "Class MockedConfluentProducerBuilder The builder for the Silverback.Messaging.Broker.Kafka.Mocks.MockedConfluentProducer . Inheritance System.Object MockedConfluentProducerBuilder Implements IConfluentProducerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Kafka Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public class MockedConfluentProducerBuilder : IConfluentProducerBuilder Constructors | Improve this doc View source MockedConfluentProducerBuilder(IInMemoryTopicCollection) Initializes a new instance of the MockedConfluentProducerBuilder class. Declaration public MockedConfluentProducerBuilder(IInMemoryTopicCollection topics) Parameters Type Name Description IInMemoryTopicCollection topics The IInMemoryTopicCollection . Methods | Improve this doc View source Build() Builds the Confluent.Kafka.IProducer<TKey, TValue> instance. Declaration public IProducer<byte[], byte[]> Build() Returns Type Description Confluent.Kafka.IProducer < System.Byte [], System.Byte []> The Confluent.Kafka.IProducer<TKey, TValue> . | Improve this doc View source SetConfig(ProducerConfig) Sets the producer configuration. Declaration public IConfluentProducerBuilder SetConfig(ProducerConfig config) Parameters Type Name Description Confluent.Kafka.ProducerConfig config The configuration. Returns Type Description IConfluentProducerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetLogHandler(Action<IProducer<Byte[], Byte[]>, LogMessage>) Set the handler to call when there is information available to be logged. If not specified, a default callback that writes to stderr will be used. Declaration public IConfluentProducerBuilder SetLogHandler(Action<IProducer<byte[], byte[]>, LogMessage> logHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IProducer < System.Byte [], System.Byte []>, Confluent.Kafka.LogMessage > logHandler The event handler. Returns Type Description IConfluentProducerBuilder The IConfluentProducerBuilder so that additional calls can be chained. | Improve this doc View source SetStatisticsHandler(Action<IProducer<Byte[], Byte[]>, String>) Sets the handler to call on statistics events. Declaration public IConfluentProducerBuilder SetStatisticsHandler(Action<IProducer<byte[], byte[]>, string> statisticsHandler) Parameters Type Name Description System.Action < Confluent.Kafka.IProducer < System.Byte [], System.Byte []>, System.String > statisticsHandler The event handler. Returns Type Description IConfluentProducerBuilder The IConfluentProducerBuilder so that additional calls can be chained. Implements IConfluentProducerBuilder"
  },
  "api/Silverback.Messaging.Broker.Kafka.Mocks.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.Mocks.html",
    "title": "Namespace Silverback.Messaging.Broker.Kafka.Mocks | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Kafka.Mocks Interfaces IInMemoryPartition A mocked topic partition where the messages are just stored in memory. IInMemoryTopic A mocked topic where the messages are just stored in memory. Note that it isn't obviously possible to accurately replicate the message broker behavior and this implementation is just intended for testing purposes. IInMemoryTopicCollection The collection of Silverback.Messaging.Broker.Kafka.Mocks.InMemoryTopic being used in the current session. IMockedConfluentConsumer A mocked implementation of Confluent.Kafka.IConsumer<TKey, TValue> from Confluent.Kafka that consumes from an IInMemoryTopic ."
  },
  "api/Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryPartition.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryPartition.html",
    "title": "Interface IInMemoryPartition | Silverback",
    "keywords": "Interface IInMemoryPartition A mocked topic partition where the messages are just stored in memory. Namespace : Silverback.Messaging.Broker.Kafka.Mocks Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public interface IInMemoryPartition Properties | Improve this doc View source FirstOffset Gets the Confluent.Kafka.Offset of the first message in the partition. Declaration Offset FirstOffset { get; } Property Value Type Description Confluent.Kafka.Offset | Improve this doc View source LastOffset Gets the Confluent.Kafka.Offset of the latest message in the partition. Declaration Offset LastOffset { get; } Property Value Type Description Confluent.Kafka.Offset | Improve this doc View source Messages Gets the messages written to the partition. Declaration IReadOnlyCollection<Message<byte[], byte[]>> Messages { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.Message < System.Byte [], System.Byte []>> | Improve this doc View source Partition Gets the Partition (index). Declaration Partition Partition { get; } Property Value Type Description Confluent.Kafka.Partition Methods | Improve this doc View source TryPull(Offset, out ConsumeResult<Byte[], Byte[]>) Pulls the next message from the partition, if available. Declaration bool TryPull(Offset offset, out ConsumeResult<byte[], byte[]> result) Parameters Type Name Description Confluent.Kafka.Offset offset The offset of the next message to be pulled. Confluent.Kafka.ConsumeResult < System.Byte [], System.Byte []> result The Confluent.Kafka.ConsumeResult<TKey, TValue> wrapping the pulled message. Returns Type Description System.Boolean A value indicating whether a message was available for pulling."
  },
  "api/Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryTopic.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryTopic.html",
    "title": "Interface IInMemoryTopic | Silverback",
    "keywords": "Interface IInMemoryTopic A mocked topic where the messages are just stored in memory. Note that it isn't obviously possible to accurately replicate the message broker behavior and this implementation is just intended for testing purposes. Namespace : Silverback.Messaging.Broker.Kafka.Mocks Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public interface IInMemoryTopic Properties | Improve this doc View source BootstrapServers Gets the bootstrap servers string used to identify the target broker. Declaration string BootstrapServers { get; } Property Value Type Description System.String | Improve this doc View source MessagesCount Gets the total number of messages written into all the partitions of the topic. Declaration int MessagesCount { get; } Property Value Type Description System.Int32 | Improve this doc View source Name Gets the topic name. Declaration string Name { get; } Property Value Type Description System.String | Improve this doc View source Partitions Gets the partitions in the topic. Declaration IReadOnlyList<IInMemoryPartition> Partitions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IInMemoryPartition > Methods | Improve this doc View source Assign(IMockedConfluentConsumer, Partition) Assigns the specified partition to the consumer. Declaration void Assign(IMockedConfluentConsumer consumer, Partition partition) Parameters Type Name Description IMockedConfluentConsumer consumer The IMockedConfluentConsumer instance. Confluent.Kafka.Partition partition The partition. | Improve this doc View source Commit(String, IEnumerable<TopicPartitionOffset>) Commits the offsets of the specified consumer group. Declaration IReadOnlyCollection<TopicPartitionOffset> Commit(string groupId, IEnumerable<TopicPartitionOffset> partitionOffsets) Parameters Type Name Description System.String groupId The consumer group id. System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset > partitionOffsets The offsets to be committed. Returns Type Description System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartitionOffset > The actual committed offsets. | Improve this doc View source EnsurePartitionsAssigned(IMockedConfluentConsumer, TimeSpan, CancellationToken) Ensures that a partition assignment has been given to the specified consumer, otherwise triggers the assignment process. Declaration void EnsurePartitionsAssigned(IMockedConfluentConsumer consumer, TimeSpan assignmentDelay, CancellationToken cancellationToken) Parameters Type Name Description IMockedConfluentConsumer consumer The consumer. System.TimeSpan assignmentDelay The delay to be applied before assigning the partitions. System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. | Improve this doc View source GetAllMessages() Gets all messages written into all the partitions of the topic. Declaration IReadOnlyList<Message<byte[], byte[]>> GetAllMessages() Returns Type Description System.Collections.Generic.IReadOnlyList < Confluent.Kafka.Message < System.Byte [], System.Byte []>> The messages written into the topic. | Improve this doc View source GetCommittedOffset(Partition, String) Gets the latest committed Confluent.Kafka.Offset for the specified partition. Declaration Offset GetCommittedOffset(Partition partition, string groupId) Parameters Type Name Description Confluent.Kafka.Partition partition The partition. System.String groupId The consumer group id. Returns Type Description Confluent.Kafka.Offset The latest Confluent.Kafka.Offset . | Improve this doc View source GetCommittedOffsets(String) Gets the latest committed Confluent.Kafka.Offset for each partition. Declaration IReadOnlyCollection<TopicPartitionOffset> GetCommittedOffsets(string groupId) Parameters Type Name Description System.String groupId The consumer group id. Returns Type Description System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartitionOffset > The collection containing the latest Confluent.Kafka.Offset for each partition. | Improve this doc View source GetCommittedOffsetsCount(String) Gets the number of committed offsets for the specified consumer group. This number is usually equal to the number of consumed messages. Declaration long GetCommittedOffsetsCount(string groupId) Parameters Type Name Description System.String groupId The consumer group id. Returns Type Description System.Int64 The number of committed offsets. | Improve this doc View source GetFirstOffset(Partition) Gets the Confluent.Kafka.Offset of the first message in the specified partition. Declaration Offset GetFirstOffset(Partition partition) Parameters Type Name Description Confluent.Kafka.Partition partition The partition. Returns Type Description Confluent.Kafka.Offset The Confluent.Kafka.Offset of the first message in the partition. | Improve this doc View source GetLastOffset(Partition) Gets the Confluent.Kafka.Offset of the latest message written to the specified partition. Declaration Offset GetLastOffset(Partition partition) Parameters Type Name Description Confluent.Kafka.Partition partition The partition. Returns Type Description Confluent.Kafka.Offset The Confluent.Kafka.Offset of the latest message in the partition. | Improve this doc View source Push(Int32, Message<Byte[], Byte[]>) Writes a message to the topic. Declaration Offset Push(int partition, Message<byte[], byte[]> message) Parameters Type Name Description System.Int32 partition The index of the partition to be written to. Confluent.Kafka.Message < System.Byte [], System.Byte []> message The message to be written. Returns Type Description Confluent.Kafka.Offset The Confluent.Kafka.Offset at which the message was written. | Improve this doc View source Rebalance() Simulates a rebalance and causes all assignments to be revoked and reassigned. Declaration void Rebalance() | Improve this doc View source Subscribe(IMockedConfluentConsumer) Subscribes the consumer to the topic. Declaration void Subscribe(IMockedConfluentConsumer consumer) Parameters Type Name Description IMockedConfluentConsumer consumer The IMockedConfluentConsumer instance. | Improve this doc View source Unsubscribe(IMockedConfluentConsumer) Unsubscribes the consumer from the topic. Declaration void Unsubscribe(IMockedConfluentConsumer consumer) Parameters Type Name Description IMockedConfluentConsumer consumer The IMockedConfluentConsumer instance. | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(CancellationToken) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration Task WaitUntilAllMessagesAreConsumedAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed."
  },
  "api/Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryTopicCollection.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryTopicCollection.html",
    "title": "Interface IInMemoryTopicCollection | Silverback",
    "keywords": "Interface IInMemoryTopicCollection The collection of Silverback.Messaging.Broker.Kafka.Mocks.InMemoryTopic being used in the current session. Inherited Members System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryTopic>.Count System.Collections.Generic.IEnumerable<Silverback.Messaging.Broker.Kafka.Mocks.IInMemoryTopic>.GetEnumerator() Namespace : Silverback.Messaging.Broker.Kafka.Mocks Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public interface IInMemoryTopicCollection : IReadOnlyCollection<IInMemoryTopic>, IEnumerable<IInMemoryTopic>, IEnumerable Methods | Improve this doc View source Get(String, ClientConfig) Gets the topic with the specified name or creates it on the fly. Declaration IInMemoryTopic Get(string name, ClientConfig clientConfig) Parameters Type Name Description System.String name The name of the topic. Confluent.Kafka.ClientConfig clientConfig The client configuration. Returns Type Description IInMemoryTopic The in-memory topic. | Improve this doc View source Get(String, String) Gets the topic with the specified name or creates it on the fly. Declaration IInMemoryTopic Get(string name, string bootstrapServers) Parameters Type Name Description System.String name The name of the topic. System.String bootstrapServers The bootstrap servers string used to identify the target broker. Returns Type Description IInMemoryTopic The in-memory topic."
  },
  "api/Silverback.Messaging.Broker.Kafka.Mocks.IMockedConfluentConsumer.html": {
    "href": "api/Silverback.Messaging.Broker.Kafka.Mocks.IMockedConfluentConsumer.html",
    "title": "Interface IMockedConfluentConsumer | Silverback",
    "keywords": "Interface IMockedConfluentConsumer A mocked implementation of Confluent.Kafka.IConsumer<TKey, TValue> from Confluent.Kafka that consumes from an IInMemoryTopic . Inherited Members Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Consume(System.Int32) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Consume(System.Threading.CancellationToken) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Consume(System.TimeSpan) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Subscribe(System.Collections.Generic.IEnumerable<System.String>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Subscribe(System.String) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Unsubscribe() Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Assign(Confluent.Kafka.TopicPartition) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Assign(Confluent.Kafka.TopicPartitionOffset) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Assign(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartitionOffset>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Assign(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartition>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.IncrementalAssign(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartitionOffset>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.IncrementalAssign(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartition>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.IncrementalUnassign(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartition>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Unassign() Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.StoreOffset(Confluent.Kafka.ConsumeResult<System.Byte[], System.Byte[]>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.StoreOffset(Confluent.Kafka.TopicPartitionOffset) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Commit() Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Commit(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartitionOffset>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Commit(Confluent.Kafka.ConsumeResult<System.Byte[], System.Byte[]>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Seek(Confluent.Kafka.TopicPartitionOffset) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Pause(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartition>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Resume(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartition>) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Committed(System.TimeSpan) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Committed(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartition>, System.TimeSpan) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Position(Confluent.Kafka.TopicPartition) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.OffsetsForTimes(System.Collections.Generic.IEnumerable<Confluent.Kafka.TopicPartitionTimestamp>, System.TimeSpan) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.GetWatermarkOffsets(Confluent.Kafka.TopicPartition) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.QueryWatermarkOffsets(Confluent.Kafka.TopicPartition, System.TimeSpan) Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Close() Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.MemberId Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Assignment Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.Subscription Confluent.Kafka.IConsumer<System.Byte[], System.Byte[]>.ConsumerGroupMetadata Confluent.Kafka.IClient.AddBrokers(System.String) Confluent.Kafka.IClient.Handle Confluent.Kafka.IClient.Name System.IDisposable.Dispose() Namespace : Silverback.Messaging.Broker.Kafka.Mocks Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public interface IMockedConfluentConsumer : IConsumer<byte[], byte[]>, IClient, IDisposable Properties | Improve this doc View source Disposed Gets a value indicating whether this instance was disposed. Declaration bool Disposed { get; } Property Value Type Description System.Boolean | Improve this doc View source EnablePartitionEof Gets a value indicating whether the partition EOF event has to be emitted. Declaration bool EnablePartitionEof { get; } Property Value Type Description System.Boolean | Improve this doc View source GroupId Gets the consumer group id. Declaration string GroupId { get; } Property Value Type Description System.String | Improve this doc View source PartitionsAssigned Gets a value indicating whether the partitions have been assigned to the consumer. Declaration bool PartitionsAssigned { get; } Property Value Type Description System.Boolean Remarks This value indicates that the rebalance process is over. It could be that no partition has actually been assigned."
  },
  "api/Silverback.Messaging.Broker.KafkaBroker.html": {
    "href": "api/Silverback.Messaging.Broker.KafkaBroker.html",
    "title": "Class KafkaBroker | Silverback",
    "keywords": "Class KafkaBroker An IBroker implementation for Apache Kafka. Inheritance System.Object Broker < KafkaProducerEndpoint , KafkaConsumerEndpoint > KafkaBroker Implements IBroker System.IDisposable Inherited Members Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.ProducerEndpointType Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.ConsumerEndpointType Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.Producers Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.Consumers Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.IsConnected Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.GetProducer(IProducerEndpoint) Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.GetProducer(String) Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.AddConsumer(IConsumerEndpoint) Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.ConnectAsync() Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.DisconnectAsync() Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.Dispose() Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.InstantiateProducer(KafkaProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.InstantiateConsumer(KafkaConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.ConnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.DisconnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaBroker : Broker<KafkaProducerEndpoint, KafkaConsumerEndpoint>, IBroker, IDisposable Constructors | Improve this doc View source KafkaBroker(IServiceProvider) Initializes a new instance of the KafkaBroker class. Declaration public KafkaBroker(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Methods | Improve this doc View source InstantiateConsumer(KafkaConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Returns a new instance of IConsumer to subscribe to the specified endpoint. Declaration protected override IConsumer InstantiateConsumer(KafkaConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description KafkaConsumerEndpoint endpoint IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IConsumer The instantiated IConsumer . Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.KafkaProducerEndpoint, Silverback.Messaging.KafkaConsumerEndpoint>.InstantiateConsumer(Silverback.Messaging.KafkaConsumerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IConsumerBehavior>, System.IServiceProvider) | Improve this doc View source InstantiateProducer(KafkaProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Returns a new instance of IProducer to publish to the specified endpoint. The returned instance will be cached and reused for the same endpoint. Declaration protected override IProducer InstantiateProducer(KafkaProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description KafkaProducerEndpoint endpoint IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IProducer The instantiated IProducer . Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.KafkaProducerEndpoint, Silverback.Messaging.KafkaConsumerEndpoint>.InstantiateProducer(Silverback.Messaging.KafkaProducerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IProducerBehavior>, System.IServiceProvider) Implements IBroker System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.KafkaConsumer.html": {
    "href": "api/Silverback.Messaging.Broker.KafkaConsumer.html",
    "title": "Class KafkaConsumer | Silverback",
    "keywords": "Class KafkaConsumer Consumes an endpoint and invokes a callback delegate when a message is received. Inheritance System.Object Consumer Consumer < KafkaBroker , KafkaConsumerEndpoint , KafkaOffset > KafkaConsumer Implements IConsumer System.IDisposable Inherited Members Consumer<KafkaBroker, KafkaConsumerEndpoint, KafkaOffset>.Broker Consumer<KafkaBroker, KafkaConsumerEndpoint, KafkaOffset>.Endpoint Consumer<KafkaBroker, KafkaConsumerEndpoint, KafkaOffset>.CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer<KafkaBroker, KafkaConsumerEndpoint, KafkaOffset>.RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer<KafkaBroker, KafkaConsumerEndpoint, KafkaOffset>.CommitCoreAsync(IReadOnlyCollection<KafkaOffset>) Consumer<KafkaBroker, KafkaConsumerEndpoint, KafkaOffset>.RollbackCoreAsync(IReadOnlyCollection<KafkaOffset>) Consumer<KafkaBroker, KafkaConsumerEndpoint, KafkaOffset>.GetSequenceStore(IBrokerMessageIdentifier) Consumer<KafkaBroker, KafkaConsumerEndpoint, KafkaOffset>.GetSequenceStore(KafkaOffset) Consumer.Id Consumer.Broker Consumer.Endpoint Consumer.StatusInfo Consumer.IsConnecting Consumer.IsConnected Consumer.IsConsuming Consumer.ServiceProvider Consumer.SequenceStores Consumer.IsDisconnecting Consumer.IsStopping Consumer.ConnectAsync() Consumer.DisconnectAsync() Consumer.TriggerReconnectAsync() Consumer.StartAsync() Consumer.StopAsync() Consumer.CommitAsync(IBrokerMessageIdentifier) Consumer.CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.RollbackAsync(IBrokerMessageIdentifier) Consumer.RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.IncrementFailedAttempts(IRawInboundEnvelope) Consumer.Dispose() Consumer.GetCurrentSequenceStores() Consumer.CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.GetSequenceStore(IBrokerMessageIdentifier) Consumer.HandleMessageAsync(Byte[], IReadOnlyCollection<MessageHeader>, String, IBrokerMessageIdentifier) Consumer.SetReadyStatus() Consumer.RevertReadyStatus() Consumer.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaConsumer : Consumer<KafkaBroker, KafkaConsumerEndpoint, KafkaOffset>, IConsumer, IDisposable Constructors | Improve this doc View source KafkaConsumer(KafkaBroker, KafkaConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IConfluentConsumerBuilder, IBrokerCallbacksInvoker, IServiceProvider, IInboundLogger<KafkaConsumer>) Initializes a new instance of the KafkaConsumer class. Declaration public KafkaConsumer(KafkaBroker broker, KafkaConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IConfluentConsumerBuilder confluentConsumerBuilder, IBrokerCallbacksInvoker callbacksInvoker, IServiceProvider serviceProvider, IInboundLogger<KafkaConsumer> logger) Parameters Type Name Description KafkaBroker broker The IBroker that is instantiating the consumer. KafkaConsumerEndpoint endpoint The endpoint to be consumed. IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . IConfluentConsumerBuilder confluentConsumerBuilder The IConfluentConsumerBuilder . IBrokerCallbacksInvoker callbacksInvoker The IBrokerCallbacksInvoker . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IInboundLogger < KafkaConsumer > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source MemberId Gets the (dynamic) group member id of this consumer (as set by the broker). Declaration public string MemberId { get; } Property Value Type Description System.String Methods | Improve this doc View source CommitCoreAsync(IReadOnlyCollection<KafkaOffset>) Commits the specified messages sending the acknowledgement to the message broker. Declaration protected override Task CommitCoreAsync(IReadOnlyCollection<KafkaOffset> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < KafkaOffset > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Silverback.Messaging.Broker.Consumer<Silverback.Messaging.Broker.KafkaBroker, Silverback.Messaging.KafkaConsumerEndpoint, Silverback.Messaging.Broker.KafkaOffset>.CommitCoreAsync(System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Broker.KafkaOffset>) | Improve this doc View source ConnectCoreAsync() Connects to the message broker. Declaration protected override Task ConnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.ConnectCoreAsync() | Improve this doc View source DisconnectCoreAsync() Disconnects from the message broker. Declaration protected override Task DisconnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.DisconnectCoreAsync() | Improve this doc View source GetSequenceStore(KafkaOffset) Returns the ISequenceStore to be used to store the pending sequences. Declaration protected override ISequenceStore GetSequenceStore(KafkaOffset brokerMessageIdentifier) Parameters Type Name Description KafkaOffset brokerMessageIdentifier Returns Type Description ISequenceStore The ISequenceStore . Overrides Silverback.Messaging.Broker.Consumer<Silverback.Messaging.Broker.KafkaBroker, Silverback.Messaging.KafkaConsumerEndpoint, Silverback.Messaging.Broker.KafkaOffset>.GetSequenceStore(Silverback.Messaging.Broker.KafkaOffset) | Improve this doc View source RollbackCoreAsync(IReadOnlyCollection<KafkaOffset>) If necessary notifies the message broker that the specified messages couldn't be processed successfully, to ensure that they will be consumed again. Declaration protected override Task RollbackCoreAsync(IReadOnlyCollection<KafkaOffset> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < KafkaOffset > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Silverback.Messaging.Broker.Consumer<Silverback.Messaging.Broker.KafkaBroker, Silverback.Messaging.KafkaConsumerEndpoint, Silverback.Messaging.Broker.KafkaOffset>.RollbackCoreAsync(System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Broker.KafkaOffset>) | Improve this doc View source StartCoreAsync() Starts consuming. Called to resume consuming after StopAsync() has been called. Declaration protected override Task StartCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.StartCoreAsync() | Improve this doc View source StopCoreAsync() Stops consuming while staying connected to the message broker. Declaration protected override Task StopCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.StopCoreAsync() | Improve this doc View source WaitUntilConsumingStoppedCoreAsync() Waits until the consuming is stopped. Declaration protected override Task WaitUntilConsumingStoppedCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.WaitUntilConsumingStoppedCoreAsync() Implements IConsumer System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.KafkaConsumerLocalTimeoutMonitor.html": {
    "href": "api/Silverback.Messaging.Broker.KafkaConsumerLocalTimeoutMonitor.html",
    "title": "Class KafkaConsumerLocalTimeoutMonitor | Silverback",
    "keywords": "Class KafkaConsumerLocalTimeoutMonitor Handles the consumer error callback and reverts the consumer Ready status to Connected when the local poll timeout is exceeded. The consumer should eventually reconnect but this allows to accurately track its status. Inheritance System.Object KafkaConsumerLocalTimeoutMonitor Implements IKafkaConsumerLogCallback IBrokerCallback Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaConsumerLocalTimeoutMonitor : IKafkaConsumerLogCallback, IBrokerCallback Methods | Improve this doc View source OnConsumerLog(LogMessage, KafkaConsumer) Called when a log message is being reported by the underlying consumer. Declaration public bool OnConsumerLog(LogMessage logMessage, KafkaConsumer consumer) Parameters Type Name Description Confluent.Kafka.LogMessage logMessage The Confluent.Kafka.LogMessage . KafkaConsumer consumer The related consumer instance. Returns Type Description System.Boolean A value whether the log message was handled/written. When true the message will not be logged nor handled in any other way by Silverback. Implements IKafkaConsumerLogCallback IBrokerCallback"
  },
  "api/Silverback.Messaging.Broker.KafkaOffset.html": {
    "href": "api/Silverback.Messaging.Broker.KafkaOffset.html",
    "title": "Class KafkaOffset | Silverback",
    "keywords": "Class KafkaOffset Represents the position of the message in a partition. Inheritance System.Object KafkaOffset Implements IBrokerMessageOffset IBrokerMessageIdentifier System.IEquatable < IBrokerMessageIdentifier > System.IComparable < IBrokerMessageOffset > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.Kafka.dll Syntax public sealed class KafkaOffset : IBrokerMessageOffset, IBrokerMessageIdentifier, IEquatable<IBrokerMessageIdentifier>, IComparable<IBrokerMessageOffset> Constructors | Improve this doc View source KafkaOffset(TopicPartitionOffset) Initializes a new instance of the KafkaOffset class. Declaration public KafkaOffset(TopicPartitionOffset topicPartitionOffset) Parameters Type Name Description Confluent.Kafka.TopicPartitionOffset topicPartitionOffset The Confluent.Kafka.TopicPartitionOffset . | Improve this doc View source KafkaOffset(String, Int32, Int64) Initializes a new instance of the KafkaOffset class. Declaration public KafkaOffset(string topic, int partition, long offset) Parameters Type Name Description System.String topic The name of the topic. System.Int32 partition The partition number. System.Int64 offset The offset in the partition. | Improve this doc View source KafkaOffset(String, String) Initializes a new instance of the KafkaOffset class. Declaration public KafkaOffset(string key, string value) Parameters Type Name Description System.String key The unique key of the queue, topic or partition the message was produced to or consumed from. System.String value The identifier value. Properties | Improve this doc View source Key Gets the unique key of the queue, topic or partition the message was produced to or consumed from. Declaration public string Key { get; } Property Value Type Description System.String | Improve this doc View source Offset Gets the offset in the partition. Declaration public long Offset { get; } Property Value Type Description System.Int64 | Improve this doc View source Partition Gets the partition number. Declaration public int Partition { get; } Property Value Type Description System.Int32 | Improve this doc View source Topic Gets the name of the topic. Declaration public string Topic { get; } Property Value Type Description System.String | Improve this doc View source Value Gets the identifier value. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this doc View source CompareTo(IBrokerMessageOffset) Declaration public int CompareTo(IBrokerMessageOffset other) Parameters Type Name Description IBrokerMessageOffset other Returns Type Description System.Int32 | Improve this doc View source CompareTo(KafkaOffset) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(KafkaOffset other) Parameters Type Name Description KafkaOffset other An object to compare with the current instance. Returns Type Description System.Int32 A value less than zero if this is less than object, zero if this is equal to object, or a value greater than zero if this is greater than object. | Improve this doc View source Equals(IBrokerMessageIdentifier) Declaration public bool Equals(IBrokerMessageIdentifier other) Parameters Type Name Description IBrokerMessageIdentifier other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source ToLogString() Gets a string that can be used to log the offset value. Declaration public string ToLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string should contain all identifiers except the endpoint name. | Improve this doc View source ToVerboseLogString() Gets a string that can be used to log the offset value. Declaration public string ToVerboseLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string must include the endpoint name, if the identifier value isn't unique across different endpoints. Operators | Improve this doc View source Equality(KafkaOffset, KafkaOffset) Equality operator. Declaration public static bool operator ==(KafkaOffset left, KafkaOffset right) Parameters Type Name Description KafkaOffset left Left-hand operand. KafkaOffset right Right-hand operand. Returns Type Description System.Boolean | Improve this doc View source GreaterThan(KafkaOffset, KafkaOffset) Greater than operator. Declaration public static bool operator>(KafkaOffset left, KafkaOffset right) Parameters Type Name Description KafkaOffset left Left-hand operand. KafkaOffset right Right-hand operand. Returns Type Description System.Boolean | Improve this doc View source GreaterThanOrEqual(KafkaOffset, KafkaOffset) Greater than or equal operator. Declaration public static bool operator >=(KafkaOffset left, KafkaOffset right) Parameters Type Name Description KafkaOffset left Left-hand operand. KafkaOffset right Right-hand operand. Returns Type Description System.Boolean | Improve this doc View source Inequality(KafkaOffset, KafkaOffset) Inequality operator. Declaration public static bool operator !=(KafkaOffset left, KafkaOffset right) Parameters Type Name Description KafkaOffset left Left-hand operand. KafkaOffset right Right-hand operand. Returns Type Description System.Boolean | Improve this doc View source LessThan(KafkaOffset, KafkaOffset) Less than operator. Declaration public static bool operator <(KafkaOffset left, KafkaOffset right) Parameters Type Name Description KafkaOffset left Left-hand operand. KafkaOffset right Right-hand operand. Returns Type Description System.Boolean | Improve this doc View source LessThanOrEqual(KafkaOffset, KafkaOffset) Less than or equal operator. Declaration public static bool operator <=(KafkaOffset left, KafkaOffset right) Parameters Type Name Description KafkaOffset left Left-hand operand. KafkaOffset right Right-hand operand. Returns Type Description System.Boolean Implements IBrokerMessageOffset IBrokerMessageIdentifier System.IEquatable<T> System.IComparable<T>"
  },
  "api/Silverback.Messaging.Broker.KafkaProducer.html": {
    "href": "api/Silverback.Messaging.Broker.KafkaProducer.html",
    "title": "Class KafkaProducer | Silverback",
    "keywords": "Class KafkaProducer Produces to an endpoint. Inheritance System.Object Producer Producer < KafkaBroker , KafkaProducerEndpoint > KafkaProducer Implements IProducer System.IDisposable Inherited Members Producer<KafkaBroker, KafkaProducerEndpoint>.Broker Producer<KafkaBroker, KafkaProducerEndpoint>.Endpoint Producer.Id Producer.Broker Producer.Endpoint Producer.IsConnecting Producer.IsConnected Producer.ConnectAsync() Producer.DisconnectAsync() Producer.Produce(Object, IReadOnlyCollection<MessageHeader>) Producer.Produce(IOutboundEnvelope) Producer.Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Producer.ProduceAsync(IOutboundEnvelope) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ConnectCoreAsync() Producer.DisconnectCoreAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.Kafka.dll Syntax public sealed class KafkaProducer : Producer<KafkaBroker, KafkaProducerEndpoint>, IProducer, IDisposable Constructors | Improve this doc View source KafkaProducer(KafkaBroker, KafkaProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IConfluentProducersCache, IServiceProvider, IOutboundLogger<KafkaProducer>) Initializes a new instance of the KafkaProducer class. Declaration public KafkaProducer(KafkaBroker broker, KafkaProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IConfluentProducersCache producersCache, IServiceProvider serviceProvider, IOutboundLogger<KafkaProducer> logger) Parameters Type Name Description KafkaBroker broker The IBroker that instantiated this producer. KafkaProducerEndpoint endpoint The endpoint to produce to. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . IConfluentProducersCache producersCache The IConfluentProducersCache . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. IOutboundLogger < KafkaProducer > logger The IOutboundLogger<TCategoryName> . Methods | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override void ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override void ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override async Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override Task ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override async Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override async Task ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). Implements IProducer System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.Mqtt.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.html",
    "title": "Namespace Silverback.Messaging.Broker.Mqtt | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Mqtt Classes MockedMqttNetClientFactory The factory used to create the MockedMqttClient instances. MqttNetClientFactory Wraps the MQTTnet.MqttFactory . MqttProduceException The exception that is thrown when the result of a publish to the MQTT broker doesn't indicate success. Interfaces IMqttNetClientFactory The factory used to create the MQTTnet.Client.IMqttClient instances."
  },
  "api/Silverback.Messaging.Broker.Mqtt.IMqttNetClientFactory.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.IMqttNetClientFactory.html",
    "title": "Interface IMqttNetClientFactory | Silverback",
    "keywords": "Interface IMqttNetClientFactory The factory used to create the MQTTnet.Client.IMqttClient instances. Namespace : Silverback.Messaging.Broker.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public interface IMqttNetClientFactory Methods | Improve this doc View source CreateClient() Creates a new MQTTnet.Client.IMqttClient . Declaration IMqttClient CreateClient() Returns Type Description MQTTnet.Client.IMqttClient The MQTTnet.Client.IMqttClient ."
  },
  "api/Silverback.Messaging.Broker.Mqtt.MockedMqttNetClientFactory.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.MockedMqttNetClientFactory.html",
    "title": "Class MockedMqttNetClientFactory | Silverback",
    "keywords": "Class MockedMqttNetClientFactory The factory used to create the MockedMqttClient instances. Inheritance System.Object MockedMqttNetClientFactory Implements IMqttNetClientFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Mqtt Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public class MockedMqttNetClientFactory : IMqttNetClientFactory Constructors | Improve this doc View source MockedMqttNetClientFactory(IInMemoryMqttBroker, IMockedMqttOptions) Initializes a new instance of the MockedMqttNetClientFactory class. Declaration public MockedMqttNetClientFactory(IInMemoryMqttBroker broker, IMockedMqttOptions options) Parameters Type Name Description IInMemoryMqttBroker broker The IInMemoryMqttBroker . IMockedMqttOptions options The IMockedMqttOptions . Methods | Improve this doc View source CreateClient() Creates a new MQTTnet.Client.IMqttClient . Declaration public IMqttClient CreateClient() Returns Type Description MQTTnet.Client.IMqttClient The MQTTnet.Client.IMqttClient . Implements IMqttNetClientFactory"
  },
  "api/Silverback.Messaging.Broker.Mqtt.Mocks.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.Mocks.html",
    "title": "Namespace Silverback.Messaging.Broker.Mqtt.Mocks | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Mqtt.Mocks Classes MockedMqttClient A mocked implementation of MQTTnet.Client.IMqttClient from MQTTnet that connects with an in-memory broker. Interfaces IClientSession The session of a client connected to the IInMemoryMqttBroker . IInMemoryMqttBroker A mocked MQTT broker where the messages are just exchanged in-memory. Note that it isn't obviously possible to accurately replicate the message broker behavior and this implementation is just intended for testing purposes."
  },
  "api/Silverback.Messaging.Broker.Mqtt.Mocks.IClientSession.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.Mocks.IClientSession.html",
    "title": "Interface IClientSession | Silverback",
    "keywords": "Interface IClientSession The session of a client connected to the IInMemoryMqttBroker . Namespace : Silverback.Messaging.Broker.Mqtt.Mocks Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IClientSession Properties | Improve this doc View source PendingMessagesCount Gets the number of pending messages ready to be pushed to the client. Declaration int PendingMessagesCount { get; } Property Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Broker.Mqtt.Mocks.IInMemoryMqttBroker.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.Mocks.IInMemoryMqttBroker.html",
    "title": "Interface IInMemoryMqttBroker | Silverback",
    "keywords": "Interface IInMemoryMqttBroker A mocked MQTT broker where the messages are just exchanged in-memory. Note that it isn't obviously possible to accurately replicate the message broker behavior and this implementation is just intended for testing purposes. Namespace : Silverback.Messaging.Broker.Mqtt.Mocks Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IInMemoryMqttBroker Methods | Improve this doc View source Connect(IMqttClientOptions, IMqttApplicationMessageReceivedHandler) Connects the specified client. Declaration void Connect(IMqttClientOptions clientOptions, IMqttApplicationMessageReceivedHandler handler) Parameters Type Name Description MQTTnet.Client.Options.IMqttClientOptions clientOptions The client options. MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler handler The MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler to be pushed with the messages published to the subscribed topics. | Improve this doc View source Disconnect(String) Disconnects the specified client. Declaration void Disconnect(string clientId) Parameters Type Name Description System.String clientId The client identifier. | Improve this doc View source GetClientSession(String) Gets the IClientSession of the specified client. Declaration IClientSession GetClientSession(string clientId) Parameters Type Name Description System.String clientId The client id. Returns Type Description IClientSession The IClientSession . | Improve this doc View source GetMessages(String) Gets the messages that have been published to the specified topic. Declaration IReadOnlyList<MqttApplicationMessage> GetMessages(string topic) Parameters Type Name Description System.String topic The name of the topic. Returns Type Description System.Collections.Generic.IReadOnlyList < MQTTnet.MqttApplicationMessage > The messages published to the topic. | Improve this doc View source PublishAsync(String, MqttApplicationMessage, IMqttClientOptions) Publishes a message. Declaration Task PublishAsync(string clientId, MqttApplicationMessage message, IMqttClientOptions clientOptions) Parameters Type Name Description System.String clientId The client identifier. MQTTnet.MqttApplicationMessage message The MQTTnet.MqttApplicationMessage to be published. MQTTnet.Client.Options.IMqttClientOptions clientOptions The MQTTnet.Client.Options.IMqttClientOptions of the producing MQTTnet.Client.MqttClient . Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Subscribe(String, IReadOnlyCollection<String>) Subscribes the specified client to the specified topics. Declaration void Subscribe(string clientId, IReadOnlyCollection<string> topics) Parameters Type Name Description System.String clientId The client identifier. System.Collections.Generic.IReadOnlyCollection < System.String > topics The name of the topics or the topic filter strings. | Improve this doc View source Unsubscribe(String, IReadOnlyCollection<String>) Unsubscribes the specified client from the specified topics. Declaration void Unsubscribe(string clientId, IReadOnlyCollection<string> topics) Parameters Type Name Description System.String clientId The client identifier. System.Collections.Generic.IReadOnlyCollection < System.String > topics The name of the topics or the topic filter strings. | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(CancellationToken) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration Task WaitUntilAllMessagesAreConsumedAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed."
  },
  "api/Silverback.Messaging.Broker.Mqtt.Mocks.MockedMqttClient.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.Mocks.MockedMqttClient.html",
    "title": "Class MockedMqttClient | Silverback",
    "keywords": "Class MockedMqttClient A mocked implementation of MQTTnet.Client.IMqttClient from MQTTnet that connects with an in-memory broker. Inheritance System.Object MockedMqttClient Implements MQTTnet.Client.IMqttClient MQTTnet.IApplicationMessageReceiver MQTTnet.IApplicationMessagePublisher System.IDisposable MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Mqtt.Mocks Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public sealed class MockedMqttClient : IMqttClient, IApplicationMessageReceiver, IApplicationMessagePublisher, IDisposable, IMqttApplicationMessageReceivedHandler Constructors | Improve this doc View source MockedMqttClient(IInMemoryMqttBroker, IMockedMqttOptions) Initializes a new instance of the MockedMqttClient class. Declaration public MockedMqttClient(IInMemoryMqttBroker broker, IMockedMqttOptions mockOptions) Parameters Type Name Description IInMemoryMqttBroker broker The IInMemoryMqttBroker . IMockedMqttOptions mockOptions The IMockedMqttOptions . Properties | Improve this doc View source ApplicationMessageReceivedHandler Declaration public IMqttApplicationMessageReceivedHandler ApplicationMessageReceivedHandler { get; set; } Property Value Type Description MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler | Improve this doc View source ConnectedHandler Declaration public IMqttClientConnectedHandler ConnectedHandler { get; set; } Property Value Type Description MQTTnet.Client.Connecting.IMqttClientConnectedHandler | Improve this doc View source DisconnectedHandler Declaration public IMqttClientDisconnectedHandler DisconnectedHandler { get; set; } Property Value Type Description MQTTnet.Client.Disconnecting.IMqttClientDisconnectedHandler | Improve this doc View source IsConnected Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source Options Declaration public IMqttClientOptions Options { get; } Property Value Type Description MQTTnet.Client.Options.IMqttClientOptions Methods | Improve this doc View source ConnectAsync(IMqttClientOptions, CancellationToken) Declaration public async Task<MqttClientAuthenticateResult> ConnectAsync(IMqttClientOptions options, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.Options.IMqttClientOptions options System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MQTTnet.Client.Connecting.MqttClientAuthenticateResult > | Improve this doc View source DisconnectAsync(MqttClientDisconnectOptions, CancellationToken) Declaration public Task DisconnectAsync(MqttClientDisconnectOptions options, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.Disconnecting.MqttClientDisconnectOptions options System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source HandleApplicationMessageReceivedAsync(MqttApplicationMessageReceivedEventArgs) Declaration public Task HandleApplicationMessageReceivedAsync(MqttApplicationMessageReceivedEventArgs eventArgs) Parameters Type Name Description MQTTnet.MqttApplicationMessageReceivedEventArgs eventArgs Returns Type Description System.Threading.Tasks.Task | Improve this doc View source PingAsync(CancellationToken) Declaration public Task PingAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this doc View source PublishAsync(MqttApplicationMessage, CancellationToken) Declaration public async Task<MqttClientPublishResult> PublishAsync(MqttApplicationMessage applicationMessage, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.MqttApplicationMessage applicationMessage System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MQTTnet.Client.Publishing.MqttClientPublishResult > | Improve this doc View source SendExtendedAuthenticationExchangeDataAsync(MqttExtendedAuthenticationExchangeData, CancellationToken) Declaration public Task SendExtendedAuthenticationExchangeDataAsync(MqttExtendedAuthenticationExchangeData data, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.ExtendedAuthenticationExchange.MqttExtendedAuthenticationExchangeData data System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this doc View source SubscribeAsync(MqttClientSubscribeOptions, CancellationToken) Declaration public Task<MqttClientSubscribeResult> SubscribeAsync(MqttClientSubscribeOptions options, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.Subscribing.MqttClientSubscribeOptions options System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MQTTnet.Client.Subscribing.MqttClientSubscribeResult > | Improve this doc View source UnsubscribeAsync(MqttClientUnsubscribeOptions, CancellationToken) Declaration public Task<MqttClientUnsubscribeResult> UnsubscribeAsync(MqttClientUnsubscribeOptions options, CancellationToken cancellationToken) Parameters Type Name Description MQTTnet.Client.Unsubscribing.MqttClientUnsubscribeOptions options System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < MQTTnet.Client.Unsubscribing.MqttClientUnsubscribeResult > Implements MQTTnet.Client.IMqttClient MQTTnet.IApplicationMessageReceiver MQTTnet.IApplicationMessagePublisher System.IDisposable MQTTnet.Client.Receiving.IMqttApplicationMessageReceivedHandler"
  },
  "api/Silverback.Messaging.Broker.Mqtt.MqttNetClientFactory.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.MqttNetClientFactory.html",
    "title": "Class MqttNetClientFactory | Silverback",
    "keywords": "Class MqttNetClientFactory Wraps the MQTTnet.MqttFactory . Inheritance System.Object MqttNetClientFactory Implements IMqttNetClientFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public class MqttNetClientFactory : IMqttNetClientFactory Constructors | Improve this doc View source MqttNetClientFactory(IMqttNetLogger) Initializes a new instance of the MqttNetClientFactory class. Declaration public MqttNetClientFactory(IMqttNetLogger mqttNetLogger) Parameters Type Name Description MQTTnet.Diagnostics.IMqttNetLogger mqttNetLogger The MQTTnet.Diagnostics.IMqttNetLogger . Methods | Improve this doc View source CreateClient() Creates a new MQTTnet.Client.IMqttClient . Declaration public IMqttClient CreateClient() Returns Type Description MQTTnet.Client.IMqttClient The MQTTnet.Client.IMqttClient . Implements IMqttNetClientFactory"
  },
  "api/Silverback.Messaging.Broker.Mqtt.MqttProduceException.html": {
    "href": "api/Silverback.Messaging.Broker.Mqtt.MqttProduceException.html",
    "title": "Class MqttProduceException | Silverback",
    "keywords": "Class MqttProduceException The exception that is thrown when the result of a publish to the MQTT broker doesn't indicate success. Inheritance System.Object System.Exception SilverbackException ProduceException MqttProduceException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Broker.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax [Serializable] public class MqttProduceException : ProduceException, ISerializable Constructors | Improve this doc View source MqttProduceException() Initializes a new instance of the MqttProduceException class. Declaration public MqttProduceException() | Improve this doc View source MqttProduceException(SerializationInfo, StreamingContext) Initializes a new instance of the MqttProduceException class with the serialized data. Declaration protected MqttProduceException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source MqttProduceException(String) Initializes a new instance of the MqttProduceException class with the specified message. Declaration public MqttProduceException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source MqttProduceException(String, MqttClientPublishResult) Initializes a new instance of the MqttProduceException class with the specified message. Declaration public MqttProduceException(string message, MqttClientPublishResult result) Parameters Type Name Description System.String message The exception message. MQTTnet.Client.Publishing.MqttClientPublishResult result The MQTTnet.Client.Publishing.MqttClientPublishResult . | Improve this doc View source MqttProduceException(String, Exception) Initializes a new instance of the MqttProduceException class with the specified message and inner exception. Declaration public MqttProduceException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Properties | Improve this doc View source Result Gets the MQTTnet.Client.Publishing.MqttClientPublishResult of the failed publish operation. Declaration public MqttClientPublishResult Result { get; } Property Value Type Description MQTTnet.Client.Publishing.MqttClientPublishResult Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Broker.MqttBroker.html": {
    "href": "api/Silverback.Messaging.Broker.MqttBroker.html",
    "title": "Class MqttBroker | Silverback",
    "keywords": "Class MqttBroker An IBroker implementation for MQTT. Inheritance System.Object Broker < MqttProducerEndpoint , MqttConsumerEndpoint > MqttBroker Implements IBroker System.IDisposable Inherited Members Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.ProducerEndpointType Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.ConsumerEndpointType Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.Producers Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.Consumers Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.IsConnected Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.GetProducer(IProducerEndpoint) Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.GetProducer(String) Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.AddConsumer(IConsumerEndpoint) Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.ConnectAsync() Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.DisconnectAsync() Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.Dispose() Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.InstantiateProducer(MqttProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.InstantiateConsumer(MqttConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.ConnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.DisconnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<MqttProducerEndpoint, MqttConsumerEndpoint>.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.MQTT.dll Syntax public class MqttBroker : Broker<MqttProducerEndpoint, MqttConsumerEndpoint>, IBroker, IDisposable Constructors | Improve this doc View source MqttBroker(IServiceProvider) Initializes a new instance of the MqttBroker class. Declaration public MqttBroker(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Methods | Improve this doc View source InstantiateConsumer(MqttConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Returns a new instance of IConsumer to subscribe to the specified endpoint. Declaration protected override IConsumer InstantiateConsumer(MqttConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description MqttConsumerEndpoint endpoint IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IConsumer The instantiated IConsumer . Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.MqttProducerEndpoint, Silverback.Messaging.MqttConsumerEndpoint>.InstantiateConsumer(Silverback.Messaging.MqttConsumerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IConsumerBehavior>, System.IServiceProvider) | Improve this doc View source InstantiateProducer(MqttProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Returns a new instance of IProducer to publish to the specified endpoint. The returned instance will be cached and reused for the same endpoint. Declaration protected override IProducer InstantiateProducer(MqttProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description MqttProducerEndpoint endpoint IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IProducer The instantiated IProducer . Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.MqttProducerEndpoint, Silverback.Messaging.MqttConsumerEndpoint>.InstantiateProducer(Silverback.Messaging.MqttProducerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IProducerBehavior>, System.IServiceProvider) Implements IBroker System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.MqttConsumer.html": {
    "href": "api/Silverback.Messaging.Broker.MqttConsumer.html",
    "title": "Class MqttConsumer | Silverback",
    "keywords": "Class MqttConsumer Consumes an endpoint and invokes a callback delegate when a message is received. Inheritance System.Object Consumer Consumer < MqttBroker , MqttConsumerEndpoint , MqttMessageIdentifier > MqttConsumer Implements IConsumer System.IDisposable Inherited Members Consumer<MqttBroker, MqttConsumerEndpoint, MqttMessageIdentifier>.Broker Consumer<MqttBroker, MqttConsumerEndpoint, MqttMessageIdentifier>.Endpoint Consumer<MqttBroker, MqttConsumerEndpoint, MqttMessageIdentifier>.CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer<MqttBroker, MqttConsumerEndpoint, MqttMessageIdentifier>.RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer<MqttBroker, MqttConsumerEndpoint, MqttMessageIdentifier>.CommitCoreAsync(IReadOnlyCollection<MqttMessageIdentifier>) Consumer<MqttBroker, MqttConsumerEndpoint, MqttMessageIdentifier>.RollbackCoreAsync(IReadOnlyCollection<MqttMessageIdentifier>) Consumer<MqttBroker, MqttConsumerEndpoint, MqttMessageIdentifier>.GetSequenceStore(IBrokerMessageIdentifier) Consumer<MqttBroker, MqttConsumerEndpoint, MqttMessageIdentifier>.GetSequenceStore(MqttMessageIdentifier) Consumer.Id Consumer.Broker Consumer.Endpoint Consumer.StatusInfo Consumer.IsConnecting Consumer.IsConnected Consumer.IsConsuming Consumer.ServiceProvider Consumer.SequenceStores Consumer.IsDisconnecting Consumer.IsStopping Consumer.ConnectAsync() Consumer.DisconnectAsync() Consumer.TriggerReconnectAsync() Consumer.StartAsync() Consumer.StopAsync() Consumer.CommitAsync(IBrokerMessageIdentifier) Consumer.CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.RollbackAsync(IBrokerMessageIdentifier) Consumer.RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.IncrementFailedAttempts(IRawInboundEnvelope) Consumer.Dispose() Consumer.GetCurrentSequenceStores() Consumer.CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.GetSequenceStore(IBrokerMessageIdentifier) Consumer.HandleMessageAsync(Byte[], IReadOnlyCollection<MessageHeader>, String, IBrokerMessageIdentifier) Consumer.SetReadyStatus() Consumer.RevertReadyStatus() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.MQTT.dll Syntax public class MqttConsumer : Consumer<MqttBroker, MqttConsumerEndpoint, MqttMessageIdentifier>, IConsumer, IDisposable Constructors | Improve this doc View source MqttConsumer(MqttBroker, MqttConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider, IInboundLogger<MqttConsumer>) Initializes a new instance of the MqttConsumer class. Declaration public MqttConsumer(MqttBroker broker, MqttConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IInboundLogger<MqttConsumer> logger) Parameters Type Name Description MqttBroker broker The IBroker that is instantiating the consumer. MqttConsumerEndpoint endpoint The endpoint to be consumed. IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IInboundLogger < MqttConsumer > logger The IInboundLogger<TCategoryName> . Methods | Improve this doc View source CommitCoreAsync(IReadOnlyCollection<MqttMessageIdentifier>) Commits the specified messages sending the acknowledgement to the message broker. Declaration protected override Task CommitCoreAsync(IReadOnlyCollection<MqttMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < MqttMessageIdentifier > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Silverback.Messaging.Broker.Consumer<Silverback.Messaging.Broker.MqttBroker, Silverback.Messaging.MqttConsumerEndpoint, Silverback.Messaging.Broker.MqttMessageIdentifier>.CommitCoreAsync(System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Broker.MqttMessageIdentifier>) | Improve this doc View source ConnectCoreAsync() Connects to the message broker. Declaration protected override Task ConnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.ConnectCoreAsync() | Improve this doc View source DisconnectCoreAsync() Disconnects from the message broker. Declaration protected override async Task DisconnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.DisconnectCoreAsync() | Improve this doc View source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether the method has been called by the Dispose method and not from the finalizer. Overrides Consumer.Dispose(Boolean) | Improve this doc View source RollbackCoreAsync(IReadOnlyCollection<MqttMessageIdentifier>) If necessary notifies the message broker that the specified messages couldn't be processed successfully, to ensure that they will be consumed again. Declaration protected override Task RollbackCoreAsync(IReadOnlyCollection<MqttMessageIdentifier> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < MqttMessageIdentifier > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Silverback.Messaging.Broker.Consumer<Silverback.Messaging.Broker.MqttBroker, Silverback.Messaging.MqttConsumerEndpoint, Silverback.Messaging.Broker.MqttMessageIdentifier>.RollbackCoreAsync(System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Broker.MqttMessageIdentifier>) | Improve this doc View source StartCoreAsync() Starts consuming. Called to resume consuming after StopAsync() has been called. Declaration protected override Task StartCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.StartCoreAsync() | Improve this doc View source StopCoreAsync() Stops consuming while staying connected to the message broker. Declaration protected override Task StopCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.StopCoreAsync() | Improve this doc View source WaitUntilConsumingStoppedCoreAsync() Waits until the consuming is stopped. Declaration protected override Task WaitUntilConsumingStoppedCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.WaitUntilConsumingStoppedCoreAsync() Implements IConsumer System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.MqttMessageIdentifier.html": {
    "href": "api/Silverback.Messaging.Broker.MqttMessageIdentifier.html",
    "title": "Class MqttMessageIdentifier | Silverback",
    "keywords": "Class MqttMessageIdentifier The MQTT broker doesn't provide any message identifier, so the identifier is either the MessageId header value or a client-side generated System.Guid . Inheritance System.Object MqttMessageIdentifier Implements IBrokerMessageIdentifier System.IEquatable < IBrokerMessageIdentifier > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.MQTT.dll Syntax public sealed class MqttMessageIdentifier : IBrokerMessageIdentifier, IEquatable<IBrokerMessageIdentifier> Remarks Generating the identifier client-side might prevent some Silverback features to work properly (e.g. MaxFailedAttempts(Nullable<Int32>) ). Constructors | Improve this doc View source MqttMessageIdentifier(String, String) Initializes a new instance of the MqttMessageIdentifier class. Declaration public MqttMessageIdentifier(string clientId, string messageId) Parameters Type Name Description System.String clientId The client identifier. System.String messageId The message identifier. Properties | Improve this doc View source ClientId Gets the client identifier. Declaration public string ClientId { get; } Property Value Type Description System.String | Improve this doc View source Key Gets the unique key of the queue, topic or partition the message was produced to or consumed from. Declaration public string Key { get; } Property Value Type Description System.String | Improve this doc View source MessageId Gets the client-side generated message identifier. Declaration public string MessageId { get; } Property Value Type Description System.String | Improve this doc View source Value Gets the identifier value. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this doc View source Equals(IBrokerMessageIdentifier) Declaration public bool Equals(IBrokerMessageIdentifier other) Parameters Type Name Description IBrokerMessageIdentifier other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source ToLogString() Gets a string that can be used to log the offset value. Declaration public string ToLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string should contain all identifiers except the endpoint name. | Improve this doc View source ToVerboseLogString() Gets a string that can be used to log the offset value. Declaration public string ToVerboseLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string must include the endpoint name, if the identifier value isn't unique across different endpoints. Implements IBrokerMessageIdentifier System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Broker.MqttProducer.html": {
    "href": "api/Silverback.Messaging.Broker.MqttProducer.html",
    "title": "Class MqttProducer | Silverback",
    "keywords": "Class MqttProducer Produces to an endpoint. Inheritance System.Object Producer Producer < MqttBroker , MqttProducerEndpoint > MqttProducer Implements IProducer System.IDisposable Inherited Members Producer<MqttBroker, MqttProducerEndpoint>.Broker Producer<MqttBroker, MqttProducerEndpoint>.Endpoint Producer.Id Producer.Broker Producer.Endpoint Producer.IsConnecting Producer.IsConnected Producer.ConnectAsync() Producer.DisconnectAsync() Producer.Produce(Object, IReadOnlyCollection<MessageHeader>) Producer.Produce(IOutboundEnvelope) Producer.Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Producer.ProduceAsync(IOutboundEnvelope) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.MQTT.dll Syntax public sealed class MqttProducer : Producer<MqttBroker, MqttProducerEndpoint>, IProducer, IDisposable Constructors | Improve this doc View source MqttProducer(MqttBroker, MqttProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider, IOutboundLogger<MqttProducer>) Initializes a new instance of the MqttProducer class. Declaration public MqttProducer(MqttBroker broker, MqttProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IOutboundLogger<MqttProducer> logger) Parameters Type Name Description MqttBroker broker The IBroker that instantiated this producer. MqttProducerEndpoint endpoint The endpoint to produce to. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. IOutboundLogger < MqttProducer > logger The IOutboundLogger<TCategoryName> . Methods | Improve this doc View source ConnectCoreAsync() Connects to the message broker. Declaration protected override Task ConnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Producer.ConnectCoreAsync() | Improve this doc View source DisconnectCoreAsync() Disconnects from the message broker. Declaration protected override Task DisconnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Producer.DisconnectCoreAsync() | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override void ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override void ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override async Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override async Task ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override async Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override async Task ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). Implements IProducer System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.ProduceException.html": {
    "href": "api/Silverback.Messaging.Broker.ProduceException.html",
    "title": "Class ProduceException | Silverback",
    "keywords": "Class ProduceException The exception that is thrown by the IProducer when the message cannot be produced or the message broker didn't acknowledge it. Inheritance System.Object System.Exception SilverbackException ProduceException MqttProduceException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax [Serializable] public class ProduceException : SilverbackException, ISerializable Constructors | Improve this doc View source ProduceException() Initializes a new instance of the ProduceException class. Declaration public ProduceException() | Improve this doc View source ProduceException(SerializationInfo, StreamingContext) Initializes a new instance of the ProduceException class with the serialized data. Declaration protected ProduceException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source ProduceException(String) Initializes a new instance of the ProduceException class with the specified message. Declaration public ProduceException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source ProduceException(String, Exception) Initializes a new instance of the ProduceException class with the specified message and inner exception. Declaration public ProduceException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Broker.Producer.html": {
    "href": "api/Silverback.Messaging.Broker.Producer.html",
    "title": "Class Producer | Silverback",
    "keywords": "Class Producer Produces to an endpoint. Inheritance System.Object Producer Producer<TBroker, TEndpoint> Implements IProducer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Producer : IProducer Constructors | Improve this doc View source Producer(IBroker, IProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider, IOutboundLogger<Producer>) Initializes a new instance of the Producer class. Declaration protected Producer(IBroker broker, IProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IOutboundLogger<Producer> logger) Parameters Type Name Description IBroker broker The IBroker that instantiated this producer. IProducerEndpoint endpoint The endpoint to produce to. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IOutboundLogger < Producer > logger The IOutboundLogger<TCategoryName> . Properties | Improve this doc View source Broker Gets the IBroker instance that owns this . Declaration public IBroker Broker { get; } Property Value Type Description IBroker | Improve this doc View source Endpoint Gets the IProducerEndpoint this instance is connected to. Declaration public IProducerEndpoint Endpoint { get; } Property Value Type Description IProducerEndpoint | Improve this doc View source Id Gets the InstanceIdentifier uniquely identifying the producer instance. Declaration public InstanceIdentifier Id { get; } Property Value Type Description InstanceIdentifier | Improve this doc View source IsConnected Gets a value indicating whether this producer is connected to the message broker and ready to produce messages. Declaration public bool IsConnected { get; } Property Value Type Description System.Boolean | Improve this doc View source IsConnecting Gets a value indicating whether this producer is trying to connect to the message broker. Declaration public bool IsConnecting { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source ConnectAsync() Initializes the connection to the message broker (if needed). Declaration public async Task ConnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ConnectCoreAsync() Connects to the message broker. Declaration protected virtual Task ConnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectAsync() Disconnects from the message broker (if needed). Declaration public async Task DisconnectAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source DisconnectCoreAsync() Disconnects from the message broker. Declaration protected virtual Task DisconnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Produce(IOutboundEnvelope) Publishes the specified message. Declaration public IBrokerMessageIdentifier Produce(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration public void Produce(IOutboundEnvelope envelope, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source Produce(Object, IReadOnlyCollection<MessageHeader>) Publishes the specified message. Declaration public IBrokerMessageIdentifier Produce(object message, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration public void Produce(object message, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceAsync(IOutboundEnvelope) Publishes the specified message. Declaration public async Task<IBrokerMessageIdentifier> ProduceAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration public async Task ProduceAsync(IOutboundEnvelope envelope, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be delivered. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Publishes the specified message. Declaration public Task<IBrokerMessageIdentifier> ProduceAsync(object message, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message. Declaration public Task ProduceAsync(object message, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected abstract IBrokerMessageIdentifier ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected abstract void ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected abstract IBrokerMessageIdentifier ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected abstract void ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected abstract Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected abstract Task ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected abstract Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected abstract Task ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public IBrokerMessageIdentifier RawProduce(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public void RawProduce(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public IBrokerMessageIdentifier RawProduce(Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public void RawProduce(Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public IBrokerMessageIdentifier RawProduce(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public void RawProduce(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public IBrokerMessageIdentifier RawProduce(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description IBrokerMessageIdentifier The IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public void RawProduce(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public Task<IBrokerMessageIdentifier> RawProduceAsync(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public Task RawProduceAsync(byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public Task<IBrokerMessageIdentifier> RawProduceAsync(Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public Task RawProduceAsync(Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public async Task<IBrokerMessageIdentifier> RawProduceAsync(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public Task RawProduceAsync(string actualEndpointName, byte[] messageContent, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.Byte [] messageContent The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public async Task<IBrokerMessageIdentifier> RawProduceAsync(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers = null) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. | Improve this doc View source RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message as-is, without sending it through the behaviors pipeline. Declaration public Task RawProduceAsync(string actualEndpointName, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.String actualEndpointName The actual target endpoint name. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The optional message headers. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the IBrokerMessageIdentifier of the produced record. Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). Implements IProducer"
  },
  "api/Silverback.Messaging.Broker.Producer-2.html": {
    "href": "api/Silverback.Messaging.Broker.Producer-2.html",
    "title": "Class Producer<TBroker, TEndpoint> | Silverback",
    "keywords": "Class Producer<TBroker, TEndpoint> Produces to an endpoint. Inheritance System.Object Producer Producer<TBroker, TEndpoint> KafkaProducer MqttProducer RabbitProducer OutboundQueueProducer Implements IProducer Inherited Members Producer.Id Producer.IsConnecting Producer.IsConnected Producer.ConnectAsync() Producer.DisconnectAsync() Producer.Produce(Object, IReadOnlyCollection<MessageHeader>) Producer.Produce(IOutboundEnvelope) Producer.Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Producer.ProduceAsync(IOutboundEnvelope) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ConnectCoreAsync() Producer.DisconnectCoreAsync() Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.dll Syntax public abstract class Producer<TBroker, TEndpoint> : Producer, IProducer where TBroker : IBroker where TEndpoint : IProducerEndpoint Type Parameters Name Description TBroker TEndpoint Constructors | Improve this doc View source Producer(TBroker, TEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider, IOutboundLogger<Producer>) Initializes a new instance of the Producer<TBroker, TEndpoint> class. Declaration protected Producer(TBroker broker, TEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IOutboundLogger<Producer> logger) Parameters Type Name Description TBroker broker The IBroker that instantiated this producer. TEndpoint endpoint The endpoint to produce to. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IOutboundLogger < Producer > logger The IOutboundLogger<TCategoryName> . Properties | Improve this doc View source Broker Gets the TBroker that owns this producer. Declaration public TBroker Broker { get; } Property Value Type Description TBroker | Improve this doc View source Endpoint Gets the TEndpoint representing the endpoint that is being produced to. Declaration public TEndpoint Endpoint { get; } Property Value Type Description TEndpoint Implements IProducer"
  },
  "api/Silverback.Messaging.Broker.Rabbit.html": {
    "href": "api/Silverback.Messaging.Broker.Rabbit.html",
    "title": "Namespace Silverback.Messaging.Broker.Rabbit | Silverback",
    "keywords": "Namespace Silverback.Messaging.Broker.Rabbit Classes RabbitConnectionFactory"
  },
  "api/Silverback.Messaging.Broker.Rabbit.RabbitConnectionFactory.html": {
    "href": "api/Silverback.Messaging.Broker.Rabbit.RabbitConnectionFactory.html",
    "title": "Class RabbitConnectionFactory | Silverback",
    "keywords": "Class RabbitConnectionFactory Inheritance System.Object RabbitConnectionFactory Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker.Rabbit Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitConnectionFactory : IRabbitConnectionFactory, IDisposable Methods | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source GetChannel(RabbitConsumerEndpoint) Declaration public (IModel Channel, string QueueName) GetChannel(RabbitConsumerEndpoint endpoint) Parameters Type Name Description RabbitConsumerEndpoint endpoint Returns Type Description System.ValueTuple < RabbitMQ.Client.IModel , System.String > | Improve this doc View source GetChannel(RabbitProducerEndpoint, String) Declaration public IModel GetChannel(RabbitProducerEndpoint endpoint, string actualEndpointName) Parameters Type Name Description RabbitProducerEndpoint endpoint System.String actualEndpointName Returns Type Description RabbitMQ.Client.IModel Implements System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.RabbitBroker.html": {
    "href": "api/Silverback.Messaging.Broker.RabbitBroker.html",
    "title": "Class RabbitBroker | Silverback",
    "keywords": "Class RabbitBroker An IBroker implementation for RabbitMQ. Inheritance System.Object Broker < RabbitProducerEndpoint , RabbitConsumerEndpoint > RabbitBroker Implements IBroker System.IDisposable Inherited Members Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.ProducerEndpointType Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.ConsumerEndpointType Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.Producers Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.Consumers Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.IsConnected Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.GetProducer(IProducerEndpoint) Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.GetProducer(String) Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.AddConsumer(IConsumerEndpoint) Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.ConnectAsync() Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.DisconnectAsync() Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.Dispose() Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.InstantiateProducer(RabbitProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.InstantiateConsumer(RabbitConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.ConnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.DisconnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.RabbitMQ.dll Syntax public class RabbitBroker : Broker<RabbitProducerEndpoint, RabbitConsumerEndpoint>, IBroker, IDisposable Constructors | Improve this doc View source RabbitBroker(IServiceProvider) Initializes a new instance of the RabbitBroker class. Declaration public RabbitBroker(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Methods | Improve this doc View source InstantiateConsumer(RabbitConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Returns a new instance of IConsumer to subscribe to the specified endpoint. Declaration protected override IConsumer InstantiateConsumer(RabbitConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description RabbitConsumerEndpoint endpoint IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IConsumer The instantiated IConsumer . Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.RabbitProducerEndpoint, Silverback.Messaging.RabbitConsumerEndpoint>.InstantiateConsumer(Silverback.Messaging.RabbitConsumerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IConsumerBehavior>, System.IServiceProvider) | Improve this doc View source InstantiateProducer(RabbitProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Returns a new instance of IProducer to publish to the specified endpoint. The returned instance will be cached and reused for the same endpoint. Declaration protected override IProducer InstantiateProducer(RabbitProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description RabbitProducerEndpoint endpoint IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IProducer The instantiated IProducer . Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.RabbitProducerEndpoint, Silverback.Messaging.RabbitConsumerEndpoint>.InstantiateProducer(Silverback.Messaging.RabbitProducerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IProducerBehavior>, System.IServiceProvider) Implements IBroker System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.RabbitConsumer.html": {
    "href": "api/Silverback.Messaging.Broker.RabbitConsumer.html",
    "title": "Class RabbitConsumer | Silverback",
    "keywords": "Class RabbitConsumer Consumes an endpoint and invokes a callback delegate when a message is received. Inheritance System.Object Consumer Consumer < RabbitBroker , RabbitConsumerEndpoint , RabbitDeliveryTag > RabbitConsumer Implements IConsumer System.IDisposable Inherited Members Consumer<RabbitBroker, RabbitConsumerEndpoint, RabbitDeliveryTag>.Broker Consumer<RabbitBroker, RabbitConsumerEndpoint, RabbitDeliveryTag>.Endpoint Consumer<RabbitBroker, RabbitConsumerEndpoint, RabbitDeliveryTag>.CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer<RabbitBroker, RabbitConsumerEndpoint, RabbitDeliveryTag>.RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer<RabbitBroker, RabbitConsumerEndpoint, RabbitDeliveryTag>.CommitCoreAsync(IReadOnlyCollection<RabbitDeliveryTag>) Consumer<RabbitBroker, RabbitConsumerEndpoint, RabbitDeliveryTag>.RollbackCoreAsync(IReadOnlyCollection<RabbitDeliveryTag>) Consumer<RabbitBroker, RabbitConsumerEndpoint, RabbitDeliveryTag>.GetSequenceStore(IBrokerMessageIdentifier) Consumer<RabbitBroker, RabbitConsumerEndpoint, RabbitDeliveryTag>.GetSequenceStore(RabbitDeliveryTag) Consumer.Id Consumer.Broker Consumer.Endpoint Consumer.StatusInfo Consumer.IsConnecting Consumer.IsConnected Consumer.IsConsuming Consumer.ServiceProvider Consumer.SequenceStores Consumer.IsDisconnecting Consumer.IsStopping Consumer.ConnectAsync() Consumer.DisconnectAsync() Consumer.TriggerReconnectAsync() Consumer.StartAsync() Consumer.StopAsync() Consumer.CommitAsync(IBrokerMessageIdentifier) Consumer.CommitAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.RollbackAsync(IBrokerMessageIdentifier) Consumer.RollbackAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.IncrementFailedAttempts(IRawInboundEnvelope) Consumer.Dispose() Consumer.GetCurrentSequenceStores() Consumer.CommitCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.RollbackCoreAsync(IReadOnlyCollection<IBrokerMessageIdentifier>) Consumer.GetSequenceStore(IBrokerMessageIdentifier) Consumer.HandleMessageAsync(Byte[], IReadOnlyCollection<MessageHeader>, String, IBrokerMessageIdentifier) Consumer.SetReadyStatus() Consumer.RevertReadyStatus() Consumer.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.RabbitMQ.dll Syntax public class RabbitConsumer : Consumer<RabbitBroker, RabbitConsumerEndpoint, RabbitDeliveryTag>, IConsumer, IDisposable Constructors | Improve this doc View source RabbitConsumer(RabbitBroker, RabbitConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider, IInboundLogger<RabbitConsumer>) Initializes a new instance of the RabbitConsumer class. Declaration public RabbitConsumer(RabbitBroker broker, RabbitConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IInboundLogger<RabbitConsumer> logger) Parameters Type Name Description RabbitBroker broker The IBroker that is instantiating the consumer. RabbitConsumerEndpoint endpoint The endpoint to be consumed. IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IInboundLogger < RabbitConsumer > logger The IInboundLogger<TCategoryName> . Methods | Improve this doc View source CommitCoreAsync(IReadOnlyCollection<RabbitDeliveryTag>) Commits the specified messages sending the acknowledgement to the message broker. Declaration protected override Task CommitCoreAsync(IReadOnlyCollection<RabbitDeliveryTag> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < RabbitDeliveryTag > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Silverback.Messaging.Broker.Consumer<Silverback.Messaging.Broker.RabbitBroker, Silverback.Messaging.RabbitConsumerEndpoint, Silverback.Messaging.Broker.RabbitDeliveryTag>.CommitCoreAsync(System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Broker.RabbitDeliveryTag>) | Improve this doc View source ConnectCoreAsync() Connects to the message broker. Declaration protected override Task ConnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.ConnectCoreAsync() | Improve this doc View source DisconnectCoreAsync() Disconnects from the message broker. Declaration protected override Task DisconnectCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.DisconnectCoreAsync() | Improve this doc View source RollbackCoreAsync(IReadOnlyCollection<RabbitDeliveryTag>) If necessary notifies the message broker that the specified messages couldn't be processed successfully, to ensure that they will be consumed again. Declaration protected override Task RollbackCoreAsync(IReadOnlyCollection<RabbitDeliveryTag> brokerMessageIdentifiers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < RabbitDeliveryTag > brokerMessageIdentifiers Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Silverback.Messaging.Broker.Consumer<Silverback.Messaging.Broker.RabbitBroker, Silverback.Messaging.RabbitConsumerEndpoint, Silverback.Messaging.Broker.RabbitDeliveryTag>.RollbackCoreAsync(System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Broker.RabbitDeliveryTag>) | Improve this doc View source StartCoreAsync() Stops consuming while staying connected to the message broker. Declaration protected override Task StartCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.StartCoreAsync() | Improve this doc View source StopCoreAsync() Stops consuming while staying connected to the message broker. Declaration protected override Task StopCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.StopCoreAsync() | Improve this doc View source WaitUntilConsumingStoppedCoreAsync() Waits until the consuming is stopped. Declaration protected override Task WaitUntilConsumingStoppedCoreAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Consumer.WaitUntilConsumingStoppedCoreAsync() Implements IConsumer System.IDisposable"
  },
  "api/Silverback.Messaging.Broker.RabbitDeliveryTag.html": {
    "href": "api/Silverback.Messaging.Broker.RabbitDeliveryTag.html",
    "title": "Class RabbitDeliveryTag | Silverback",
    "keywords": "Class RabbitDeliveryTag Represents the unique message identifier assigned by the message broker. Inheritance System.Object RabbitDeliveryTag Implements IBrokerMessageIdentifier System.IEquatable < IBrokerMessageIdentifier > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitDeliveryTag : IBrokerMessageIdentifier, IEquatable<IBrokerMessageIdentifier> Constructors | Improve this doc View source RabbitDeliveryTag(String, String) Initializes a new instance of the RabbitDeliveryTag class. Declaration public RabbitDeliveryTag(string key, string value) Parameters Type Name Description System.String key The unique key of the queue, topic or partition the message was produced to or consumed from. System.String value The identifier value. | Improve this doc View source RabbitDeliveryTag(String, UInt64) Initializes a new instance of the RabbitDeliveryTag class. Declaration public RabbitDeliveryTag(string consumerTag, ulong deliveryTag) Parameters Type Name Description System.String consumerTag The consumer identifier. System.UInt64 deliveryTag The delivery (message) identifier. Properties | Improve this doc View source ConsumerTag Gets the consumer identifier. Declaration public string ConsumerTag { get; } Property Value Type Description System.String | Improve this doc View source DeliveryTag Gets the delivery (message) identifier. Declaration public ulong DeliveryTag { get; } Property Value Type Description System.UInt64 | Improve this doc View source Key Gets the unique key of the queue, topic or partition the message was produced to or consumed from. Declaration public string Key { get; } Property Value Type Description System.String | Improve this doc View source Value Gets the identifier value. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this doc View source Equals(IBrokerMessageIdentifier) Declaration public bool Equals(IBrokerMessageIdentifier other) Parameters Type Name Description IBrokerMessageIdentifier other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source ToLogString() Gets a string that can be used to log the offset value. Declaration public string ToLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string should contain all identifiers except the endpoint name. | Improve this doc View source ToVerboseLogString() Gets a string that can be used to log the offset value. Declaration public string ToVerboseLogString() Returns Type Description System.String A System.String representing the offset value. Remarks This string must include the endpoint name, if the identifier value isn't unique across different endpoints. Implements IBrokerMessageIdentifier System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Broker.RabbitProducer.html": {
    "href": "api/Silverback.Messaging.Broker.RabbitProducer.html",
    "title": "Class RabbitProducer | Silverback",
    "keywords": "Class RabbitProducer Produces to an endpoint. Inheritance System.Object Producer Producer < RabbitBroker , RabbitProducerEndpoint > RabbitProducer Implements IProducer System.IDisposable Inherited Members Producer<RabbitBroker, RabbitProducerEndpoint>.Broker Producer<RabbitBroker, RabbitProducerEndpoint>.Endpoint Producer.Id Producer.Broker Producer.Endpoint Producer.IsConnecting Producer.IsConnected Producer.ConnectAsync() Producer.DisconnectAsync() Producer.Produce(Object, IReadOnlyCollection<MessageHeader>) Producer.Produce(IOutboundEnvelope) Producer.Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Producer.ProduceAsync(IOutboundEnvelope) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ConnectCoreAsync() Producer.DisconnectCoreAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Broker Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitProducer : Producer<RabbitBroker, RabbitProducerEndpoint>, IProducer, IDisposable Constructors | Improve this doc View source RabbitProducer(RabbitBroker, RabbitProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider, IOutboundLogger<Producer>) Initializes a new instance of the RabbitProducer class. Declaration public RabbitProducer(RabbitBroker broker, RabbitProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IOutboundLogger<Producer> logger) Parameters Type Name Description RabbitBroker broker The IBroker that instantiated this producer. RabbitProducerEndpoint endpoint The endpoint to produce to. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IOutboundLogger < Producer > logger The ISilverbackLogger . Methods | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override void ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override void ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override async Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override async Task ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override async Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override async Task ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). Implements IProducer System.IDisposable"
  },
  "api/Silverback.Messaging.Configuration.AvroMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.AvroMessageSerializerBuilder.html",
    "title": "Class AvroMessageSerializerBuilder | Silverback",
    "keywords": "Class AvroMessageSerializerBuilder Builds the AvroMessageSerializer<TMessage> . Inheritance System.Object AvroMessageSerializerBuilder Implements IAvroMessageSerializerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Kafka.SchemaRegistry.dll Syntax public class AvroMessageSerializerBuilder : IAvroMessageSerializerBuilder Methods | Improve this doc View source Build() Builds the IMessageSerializer instance. Declaration public IMessageSerializer Build() Returns Type Description IMessageSerializer The IMessageSerializer . | Improve this doc View source Configure(Action<SchemaRegistryConfig>, Action<AvroSerializerConfig>) Configures the Confluent.SchemaRegistry.SchemaRegistryConfig and the Confluent.SchemaRegistry.Serdes.AvroSerializerConfig . Declaration public IAvroMessageSerializerBuilder Configure(Action<SchemaRegistryConfig> configureSchemaRegistryAction, Action<AvroSerializerConfig> configureSerializerAction = null) Parameters Type Name Description System.Action < Confluent.SchemaRegistry.SchemaRegistryConfig > configureSchemaRegistryAction An System.Action<T> that takes the Confluent.SchemaRegistry.SchemaRegistryConfig and configures it. System.Action < Confluent.SchemaRegistry.Serdes.AvroSerializerConfig > configureSerializerAction An System.Action<T> that takes the Confluent.SchemaRegistry.Serdes.AvroSerializerConfig and configures it. Returns Type Description IAvroMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseType<TMessage>() Specifies the message type. Declaration public IAvroMessageSerializerBuilder UseType<TMessage>() where TMessage : class Returns Type Description IAvroMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the message to serialize or deserialize. Implements IAvroMessageSerializerBuilder"
  },
  "api/Silverback.Messaging.Configuration.BinaryFileMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.BinaryFileMessageSerializerBuilder.html",
    "title": "Class BinaryFileMessageSerializerBuilder | Silverback",
    "keywords": "Class BinaryFileMessageSerializerBuilder Builds the BinaryFileMessageSerializer or BinaryFileMessageSerializer<TModel> . Inheritance System.Object BinaryFileMessageSerializerBuilder Implements IBinaryFileMessageSerializerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class BinaryFileMessageSerializerBuilder : IBinaryFileMessageSerializerBuilder Methods | Improve this doc View source Build() Builds the IMessageSerializer instance. Declaration public IMessageSerializer Build() Returns Type Description IMessageSerializer The IMessageSerializer . | Improve this doc View source UseModel<TModel>() Specifies a custom model to wrap the binary file. Declaration public IBinaryFileMessageSerializerBuilder UseModel<TModel>() where TModel : IBinaryFileMessage, new() Returns Type Description IBinaryFileMessageSerializerBuilder The IBinaryFileMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TModel The type of the IBinaryFileMessage implementation. Implements IBinaryFileMessageSerializerBuilder"
  },
  "api/Silverback.Messaging.Configuration.BrokerConnectionMode.html": {
    "href": "api/Silverback.Messaging.Configuration.BrokerConnectionMode.html",
    "title": "Enum BrokerConnectionMode | Silverback",
    "keywords": "Enum BrokerConnectionMode Specifies if and when the message broker has to be automatically connected. Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public enum BrokerConnectionMode Fields Name Description AfterStartup The message broker is being connected after the application is successfully started. Manual The message broker is not being connected automatically. Startup The message broker is being connected during the application startup."
  },
  "api/Silverback.Messaging.Configuration.BrokerConnectionOptions.html": {
    "href": "api/Silverback.Messaging.Configuration.BrokerConnectionOptions.html",
    "title": "Class BrokerConnectionOptions | Silverback",
    "keywords": "Class BrokerConnectionOptions The options specifying if and when the message broker has to be automatically connected. Inheritance System.Object BrokerConnectionOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class BrokerConnectionOptions Properties | Improve this doc View source Default Gets the default options. Declaration public static BrokerConnectionOptions Default { get; } Property Value Type Description BrokerConnectionOptions | Improve this doc View source Mode Gets or sets the BrokerConnectionMode . The default is Startup . Declaration public BrokerConnectionMode Mode { get; set; } Property Value Type Description BrokerConnectionMode | Improve this doc View source RetryInterval Gets or sets interval between the connection retries. The default is 5 minutes. This setting is ignored when Mode is set to manual. Declaration public TimeSpan RetryInterval { get; set; } Property Value Type Description System.TimeSpan | Improve this doc View source RetryOnFailure Gets or sets a value indicating whether a retry must be performed if an exception is thrown when trying to connect. The default is true . This setting is ignored when Mode is set to manual. Declaration public bool RetryOnFailure { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilder-2.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilder-2.html",
    "title": "Class ConsumerEndpointBuilder<TEndpoint, TBuilder> | Silverback",
    "keywords": "Class ConsumerEndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from ConsumerEndpoint . Inheritance System.Object EndpointBuilder <TEndpoint, TBuilder> ConsumerEndpointBuilder<TEndpoint, TBuilder> KafkaConsumerEndpointBuilder MqttConsumerEndpointBuilder Implements IConsumerEndpointBuilder <TBuilder> IEndpointBuilder <TBuilder> Inherited Members EndpointBuilder<TEndpoint, TBuilder>.EndpointsConfigurationBuilder EndpointBuilder<TEndpoint, TBuilder>.This EndpointBuilder<TEndpoint, TBuilder>.WithName(String) EndpointBuilder<TEndpoint, TBuilder>.UseSerializer(IMessageSerializer) EndpointBuilder<TEndpoint, TBuilder>.WithEncryption(EncryptionSettings) EndpointBuilder<TEndpoint, TBuilder>.ValidateMessage(Boolean) EndpointBuilder<TEndpoint, TBuilder>.DisableMessageValidation() EndpointBuilder<TEndpoint, TBuilder>.Build() EndpointBuilder<TEndpoint, TBuilder>.CreateEndpoint() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public abstract class ConsumerEndpointBuilder<TEndpoint, TBuilder> : EndpointBuilder<TEndpoint, TBuilder>, IConsumerEndpointBuilder<TBuilder>, IEndpointBuilder<TBuilder> where TEndpoint : ConsumerEndpoint where TBuilder : IConsumerEndpointBuilder<TBuilder> Type Parameters Name Description TEndpoint The type of the endpoint being built. TBuilder The actual builder type. Constructors | Improve this doc View source ConsumerEndpointBuilder(Type, IEndpointsConfigurationBuilder) Initializes a new instance of the ConsumerEndpointBuilder<TEndpoint, TBuilder> class. Declaration protected ConsumerEndpointBuilder(Type messageType = null, IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description System.Type messageType Gets the type of the message being consumed. IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source MessageType Gets the type of the message being consumed. Declaration public Type MessageType { get; } Property Value Type Description System.Type Remarks This value might be used during the configuration to automatically determine some configurations (e.g. the correct deserializer to be used) without having to specify the message type once again. Methods | Improve this doc View source Build() Builds the endpoint instance. Declaration public override TEndpoint Build() Returns Type Description TEndpoint The endpoint. Overrides Silverback.Messaging.Configuration.EndpointBuilder<TEndpoint, TBuilder>.Build() | Improve this doc View source Decrypt(EncryptionSettings) Specifies the EncryptionSettings to be used to decrypt the messages. Declaration public TBuilder Decrypt(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings The EncryptionSettings . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source DeserializeUsing(IMessageSerializer) Specifies the IMessageSerializer to be used to deserialize the messages. Declaration public TBuilder DeserializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source EnableBatchProcessing(Int32, Nullable<TimeSpan>) Enables batch processing. Declaration public TBuilder EnableBatchProcessing(int batchSize, TimeSpan? maxWaitTime = null) Parameters Type Name Description System.Int32 batchSize The number of messages to be processed in batch. System.Nullable < System.TimeSpan > maxWaitTime The maximum amount of time to wait for the batch to be filled. After this time the batch will be completed even if the specified batchSize is not reached. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source EnsureExactlyOnce(IExactlyOnceStrategy) Specifies the strategy to be used to ensure that each message is processed exactly once. Declaration public TBuilder EnsureExactlyOnce(IExactlyOnceStrategy strategy) Parameters Type Name Description IExactlyOnceStrategy strategy The IExactlyOnceStrategy . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder>) Specifies the strategy to be used to ensure that each message is processed exactly once. Declaration public TBuilder EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder> strategyBuilderAction) Parameters Type Name Description System.Action < IExactlyOnceStrategyBuilder > strategyBuilderAction An System.Action<T> that takes the IExactlyOnceStrategyBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source HandleTombstoneMessages() Specifies that the null messages have to be mapped to a Tombstone<TMessage> ( Tombstone ). This is the default behavior, use the UseLegacyNullMessageHandling() or SkipNullMessages() methods to change it. Declaration public TBuilder HandleTombstoneMessages() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source IgnoreUnhandledMessages() Specifies that the message has to be silently ignored if no subscriber is handling it. Declaration public TBuilder IgnoreUnhandledMessages() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source OnError(IErrorPolicy) Specifies the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration public TBuilder OnError(IErrorPolicy errorPolicy) Parameters Type Name Description IErrorPolicy errorPolicy The IErrorPolicy . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source OnError(Action<IErrorPolicyBuilder>) Specifies the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration public TBuilder OnError(Action<IErrorPolicyBuilder> errorPolicyBuilderAction) Parameters Type Name Description System.Action < IErrorPolicyBuilder > errorPolicyBuilderAction An System.Action<T> that takes the IErrorPolicyBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source SkipNullMessages() Specifies that the null messages have to be silently skipped ( Skip ). Declaration public TBuilder SkipNullMessages() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ThrowIfUnhandled() Specifies that an exception must be thrown if no subscriber is handling the received message. This option is enabled by default. Use the IgnoreUnhandledMessages() to disable it. Declaration public TBuilder ThrowIfUnhandled() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source UseLegacyNullMessageHandling() Specifies that the null messages have to be forwarded as null ( Legacy ). Declaration public TBuilder UseLegacyNullMessageHandling() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithSequenceTimeout(TimeSpan) Sets the timeout after which an incomplete sequence that isn't pushed with new messages will be aborted and discarded. The default is a conservative 30 minutes. Declaration public TBuilder WithSequenceTimeout(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The timeout. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Remarks This setting is ignored for batches ( BatchSequence ), use the maxWaitTime parameter of EnableBatchProcessing(Int32, Nullable<TimeSpan>) instead. Implements IConsumerEndpointBuilder<TBuilder> IEndpointBuilder<TBuilder> Extension Methods ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ConsumerEndpointBuilderDeserializeAvroExtensions.DeserializeAvro<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>) ConsumerEndpointBuilderConsumeBinaryFilesExtensions.ConsumeBinaryFiles<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) ConsumerEndpointBuilderDecryptUsingExtensions.DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Byte[], Byte[]) ConsumerEndpointBuilderDecryptUsingExtensions.DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Func<String, Byte[]>, Byte[]) ConsumerEndpointBuilderDeserializeJsonExtensions.DeserializeJson<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderConsumeBinaryFilesExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderConsumeBinaryFilesExtensions.html",
    "title": "Class ConsumerEndpointBuilderConsumeBinaryFilesExtensions | Silverback",
    "keywords": "Class ConsumerEndpointBuilderConsumeBinaryFilesExtensions Adds the ConsumeBinaryFiles method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ConsumerEndpointBuilderConsumeBinaryFilesExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ConsumerEndpointBuilderConsumeBinaryFilesExtensions Methods | Improve this doc View source ConsumeBinaryFiles<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) Sets the serializer to an instance of BinaryFileMessageSerializer (or BinaryFileMessageSerializer<TModel> ) to wrap the consumed binary files into a BinaryFileMessage . This settings will force the BinaryFileMessageSerializer to be used regardless of the message type header. Declaration public static TBuilder ConsumeBinaryFiles<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, Action<IBinaryFileMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IBinaryFileMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IBinaryFileMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type. Remarks This replaces the IMessageSerializer and the endpoint will only be able to deal with binary files."
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDecryptUsingExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDecryptUsingExtensions.html",
    "title": "Class ConsumerEndpointBuilderDecryptUsingExtensions | Silverback",
    "keywords": "Class ConsumerEndpointBuilderDecryptUsingExtensions Adds the DecryptUsingAes method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ConsumerEndpointBuilderDecryptUsingExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ConsumerEndpointBuilderDecryptUsingExtensions Methods | Improve this doc View source DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Byte[], Byte[]) Specifies that the AES algorithm has to be used to decrypt the messages. Declaration public static TBuilder DecryptUsingAes<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, byte[] key, byte[] initializationVector = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Byte [] key The secret key for the symmetric algorithm. System.Byte [] initializationVector The optional initialization vector (IV) for the symmetric algorithm. If null it is expected that the IV is prepended to the actual encrypted message. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type. | Improve this doc View source DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Func<String, Byte[]>, Byte[]) Specifies that the AES algorithm has to be used to decrypt the messages. Declaration public static TBuilder DecryptUsingAes<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, Func<string, byte[]> decryptionKeyCallback, byte[] initializationVector = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Func < System.String , System.Byte []> decryptionKeyCallback The function to be used to retrieve the encryption key according to the encryption key identifier passed in the header (see EncryptionKeyId ). System.Byte [] initializationVector The optional initialization vector (IV) for the symmetric algorithm. If null it is expected that the IV is prepended to the actual encrypted message. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeAvroExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeAvroExtensions.html",
    "title": "Class ConsumerEndpointBuilderDeserializeAvroExtensions | Silverback",
    "keywords": "Class ConsumerEndpointBuilderDeserializeAvroExtensions Adds the DeserializeAvro method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ConsumerEndpointBuilderDeserializeAvroExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Kafka.SchemaRegistry.dll Syntax public static class ConsumerEndpointBuilderDeserializeAvroExtensions Methods | Improve this doc View source DeserializeAvro<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>) Sets the serializer to an instance of AvroMessageSerializer<TMessage> to deserialize the consumed Avro serialized message. Declaration public static TBuilder DeserializeAvro<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, Action<IAvroMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IAvroMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IAvroMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeJsonExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeJsonExtensions.html",
    "title": "Class ConsumerEndpointBuilderDeserializeJsonExtensions | Silverback",
    "keywords": "Class ConsumerEndpointBuilderDeserializeJsonExtensions Adds the DeserializeJson method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ConsumerEndpointBuilderDeserializeJsonExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ConsumerEndpointBuilderDeserializeJsonExtensions Methods | Improve this doc View source DeserializeJson<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>) Sets the serializer to an instance of JsonMessageSerializer (or JsonMessageSerializer<TMessage> ) to deserialize the consumed JSON. By default this serializer relies on the message type header to determine the type of the message to be deserialized. This behavior can be changed using the builder action and specifying a fixed message type. Declaration public static TBuilder DeserializeJson<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, Action<IJsonMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IJsonMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.html",
    "title": "Class ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions | Silverback",
    "keywords": "Class ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions Adds the DeserializeJsonUsingNewtonsoft method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Newtonsoft.dll Syntax public static class ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions Methods | Improve this doc View source DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) Sets the serializer to an instance of NewtonsoftJsonMessageSerializer (or NewtonsoftJsonMessageSerializer<TMessage> ) to deserialize the consumed JSON. By default this serializer relies on the message type header to determine the type of the message to be deserialized. This behavior can be changed using the builder action and specifying a fixed message type. Declaration public static TBuilder DeserializeJsonUsingNewtonsoft<TBuilder>(this IConsumerEndpointBuilder<TBuilder> endpointBuilder, Action<INewtonsoftJsonMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IConsumerEndpointBuilder<TBuilder> Parameters Type Name Description IConsumerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < INewtonsoftJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the INewtonsoftJsonMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.EndpointBuilder-2.html": {
    "href": "api/Silverback.Messaging.Configuration.EndpointBuilder-2.html",
    "title": "Class EndpointBuilder<TEndpoint, TBuilder> | Silverback",
    "keywords": "Class EndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from Endpoint . Inheritance System.Object EndpointBuilder<TEndpoint, TBuilder> ConsumerEndpointBuilder<TEndpoint, TBuilder> ProducerEndpointBuilder<TEndpoint, TBuilder> Implements IEndpointBuilder <TBuilder> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public abstract class EndpointBuilder<TEndpoint, TBuilder> : IEndpointBuilder<TBuilder> where TEndpoint : Endpoint where TBuilder : IEndpointBuilder<TBuilder> Type Parameters Name Description TEndpoint The type of the endpoint being built. TBuilder The actual builder type. Constructors | Improve this doc View source EndpointBuilder(IEndpointsConfigurationBuilder) Initializes a new instance of the EndpointBuilder<TEndpoint, TBuilder> class. Declaration protected EndpointBuilder(IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source EndpointsConfigurationBuilder Gets the IEndpointsConfigurationBuilder that instantiated the builder. Declaration public IEndpointsConfigurationBuilder EndpointsConfigurationBuilder { get; } Property Value Type Description IEndpointsConfigurationBuilder | Improve this doc View source This Gets this instance. Declaration protected abstract TBuilder This { get; } Property Value Type Description TBuilder Remarks This is necessary to work around casting in the base classes. Methods | Improve this doc View source Build() Builds the endpoint instance. Declaration public virtual TEndpoint Build() Returns Type Description TEndpoint The endpoint. | Improve this doc View source CreateEndpoint() Creates the endpoint to be configured according to the options stored in the builder. Declaration protected abstract TEndpoint CreateEndpoint() Returns Type Description TEndpoint The endpoint. | Improve this doc View source DisableMessageValidation() Disables the message validation. Declaration public TBuilder DisableMessageValidation() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source UseSerializer(IMessageSerializer) Specifies the IMessageSerializer to be used serialize or deserialize the messages. Declaration public TBuilder UseSerializer(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ValidateMessage(Boolean) Enables the message validation. Declaration public TBuilder ValidateMessage(bool throwException) Parameters Type Name Description System.Boolean throwException A value that specifies whether an exception should be thrown if the message is invalid. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithEncryption(EncryptionSettings) Enables the end-to-end message encryption. Declaration public TBuilder WithEncryption(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings The EncryptionSettings . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithName(String) Specifies an optional friendly name to be used to identify the endpoint. This name can be used to filter or retrieve the endpoints and will also be included in the DisplayName , to be shown in the human-targeted output (e.g. logs, health checks result, etc.). Declaration public TBuilder WithName(string friendlyName) Parameters Type Name Description System.String friendlyName The friendly name. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Implements IEndpointBuilder<TBuilder>"
  },
  "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddInboundExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddInboundExtensions.html",
    "title": "Class EndpointsConfigurationBuilderAddInboundExtensions | Silverback",
    "keywords": "Class EndpointsConfigurationBuilderAddInboundExtensions Adds the AddInbound method to the IEndpointsConfigurationBuilder . Inheritance System.Object EndpointsConfigurationBuilderAddInboundExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class EndpointsConfigurationBuilderAddInboundExtensions Remarks Multiple calls to this methods will cause multiple consumers to be instantiated, which could mean multiple connections being issues and more resources being used (depending on the actual message broker implementation). The consumer endpoint might allow to define multiple endpoints at once, to efficiently instantiate a single consumer for all of them. Methods | Improve this doc View source AddInbound(IEndpointsConfigurationBuilder, IConsumerEndpoint, Int32) Adds an inbound endpoint and instantiates a consumer. Declaration public static IEndpointsConfigurationBuilder AddInbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, IConsumerEndpoint endpoint, int consumersCount = 1) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . IConsumerEndpoint endpoint The endpoint (topic). System.Int32 consumersCount The number of consumers to be instantiated. The default is 1. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddKafkaEndpointsExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddKafkaEndpointsExtensions.html",
    "title": "Class EndpointsConfigurationBuilderAddKafkaEndpointsExtensions | Silverback",
    "keywords": "Class EndpointsConfigurationBuilderAddKafkaEndpointsExtensions Adds the AddKafkaEndpoints method to the IEndpointsConfigurationBuilder . Inheritance System.Object EndpointsConfigurationBuilderAddKafkaEndpointsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Kafka.dll Syntax public static class EndpointsConfigurationBuilderAddKafkaEndpointsExtensions Methods | Improve this doc View source AddKafkaEndpoints(IEndpointsConfigurationBuilder, Action<IKafkaEndpointsConfigurationBuilder>) Adds the Kafka endpoints. Declaration public static IEndpointsConfigurationBuilder AddKafkaEndpoints(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Action<IKafkaEndpointsConfigurationBuilder> kafkaEndpointsBuilderAction) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Action < IKafkaEndpointsConfigurationBuilder > kafkaEndpointsBuilderAction An System.Action<T> that takes the IKafkaEndpointsConfigurationBuilder , configures the connection to the message broker and adds the inbound and outbound endpoints. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddMqttEndpointsExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddMqttEndpointsExtensions.html",
    "title": "Class EndpointsConfigurationBuilderAddMqttEndpointsExtensions | Silverback",
    "keywords": "Class EndpointsConfigurationBuilderAddMqttEndpointsExtensions Adds the AddMqttEndpoints method to the IEndpointsConfigurationBuilder . Inheritance System.Object EndpointsConfigurationBuilderAddMqttEndpointsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.MQTT.dll Syntax public static class EndpointsConfigurationBuilderAddMqttEndpointsExtensions Methods | Improve this doc View source AddMqttEndpoints(IEndpointsConfigurationBuilder, Action<IMqttEndpointsConfigurationBuilder>) Adds the MQTT endpoints. Declaration public static IEndpointsConfigurationBuilder AddMqttEndpoints(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Action<IMqttEndpointsConfigurationBuilder> mqttEndpointsBuilderAction) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Action < IMqttEndpointsConfigurationBuilder > mqttEndpointsBuilderAction An System.Action<T> that takes the IMqttEndpointsConfigurationBuilder , configures the connection to the message broker and adds the inbound and outbound endpoints. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddOutboundExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.EndpointsConfigurationBuilderAddOutboundExtensions.html",
    "title": "Class EndpointsConfigurationBuilderAddOutboundExtensions | Silverback",
    "keywords": "Class EndpointsConfigurationBuilderAddOutboundExtensions Adds the AddOutbound method to the IEndpointsConfigurationBuilder . Inheritance System.Object EndpointsConfigurationBuilderAddOutboundExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class EndpointsConfigurationBuilderAddOutboundExtensions Methods | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, IProducerEndpoint, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, IProducerEndpoint endpoint, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. IProducerEndpoint endpoint The IProducerEndpoint representing the destination topic or queue. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, IProducerEndpoint[]) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, params IProducerEndpoint[] endpoints) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. IProducerEndpoint [] endpoints The collection of IProducerEndpoint representing the destination topics or queues. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, IOutboundRouter, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, IOutboundRouter router, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. IOutboundRouter router The IOutboundRouter<TMessage> to be used to determine the destination endpoint. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, IEnumerable<IProducerEndpoint>, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, IEnumerable<IProducerEndpoint> endpoints, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. System.Collections.Generic.IEnumerable < IProducerEndpoint > endpoints The collection of IProducerEndpoint representing the destination topics or queues. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(IEndpointsConfigurationBuilder, Type, Type, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, Type messageType, Type routerType, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Type messageType The type of the messages to be published to this endpoint. System.Type routerType The type of the IOutboundRouter<TMessage> to be used to determine the destination endpoint. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IProducerEndpoint, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, IProducerEndpoint endpoint, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . IProducerEndpoint endpoint The IProducerEndpoint representing the destination topic or queue. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IProducerEndpoint[]) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, params IProducerEndpoint[] endpoints) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . IProducerEndpoint [] endpoints The collection of IProducerEndpoint representing the destination topics or queues. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IOutboundRouter<TMessage>, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, IOutboundRouter<TMessage> router, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . IOutboundRouter <TMessage> router The IOutboundRouter<TMessage> to be used to determine the destination endpoint. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IEnumerable<IProducerEndpoint>, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, IEnumerable<IProducerEndpoint> endpoints, bool preloadProducers = true) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Collections.Generic.IEnumerable < IProducerEndpoint > endpoints The collection of IProducerEndpoint representing the destination topics or queues. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage, TRouter>(IEndpointsConfigurationBuilder, Boolean) Adds an outbound endpoint for the specified message type. Declaration public static IEndpointsConfigurationBuilder AddOutbound<TMessage, TRouter>(this IEndpointsConfigurationBuilder endpointsConfigurationBuilder, bool preloadProducers = true) where TRouter : IOutboundRouter<TMessage> Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The IEndpointsConfigurationBuilder . System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IEndpointsConfigurationBuilder The IEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. TRouter The type of the IOutboundRouter<TMessage> to be used to determine the destination endpoint."
  },
  "api/Silverback.Messaging.Configuration.ErrorPolicyBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.ErrorPolicyBuilder.html",
    "title": "Class ErrorPolicyBuilder | Silverback",
    "keywords": "Class ErrorPolicyBuilder Builds the IErrorPolicy . Inheritance System.Object ErrorPolicyBuilder Implements IErrorPolicyBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class ErrorPolicyBuilder : IErrorPolicyBuilder Constructors | Improve this doc View source ErrorPolicyBuilder(IEndpointsConfigurationBuilder) Initializes a new instance of the ErrorPolicyBuilder class. Declaration public ErrorPolicyBuilder(IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source EndpointsConfigurationBuilder Gets the IEndpointsConfigurationBuilder that instantiated the builder. Declaration public IEndpointsConfigurationBuilder EndpointsConfigurationBuilder { get; } Property Value Type Description IEndpointsConfigurationBuilder Methods | Improve this doc View source Build() Builds the IErrorPolicy instance. Declaration public IErrorPolicy Build() Returns Type Description IErrorPolicy The IMessageSerializer . | Improve this doc View source Move(IProducerEndpoint, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration public IErrorPolicyChainBuilder Move(IProducerEndpoint endpoint, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IProducerEndpoint endpoint The endpoint to move the message to. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration public IErrorPolicyChainBuilder Retry(Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Int32, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration public IErrorPolicyChainBuilder Retry(int retriesCount, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Int32, TimeSpan, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration public IErrorPolicyChainBuilder Retry(int retriesCount, TimeSpan initialDelay, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.TimeSpan initialDelay The optional delay to be applied to the first retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Nullable<Int32>, Nullable<TimeSpan>, Nullable<TimeSpan>, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration public IErrorPolicyChainBuilder Retry(int? retriesCount = null, TimeSpan? initialDelay = null, TimeSpan? delayIncrement = null, Action<RetryErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Nullable < System.Int32 > retriesCount The maximum number of retries to be performed. System.Nullable < System.TimeSpan > initialDelay The optional delay to be applied to the first retry. System.Nullable < System.TimeSpan > delayIncrement The optional increment to the delay to be applied at each retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Skip(Action<SkipMessageErrorPolicy>) Adds a SkipMessageErrorPolicy that skips the messages that fail to be processed. Declaration public IErrorPolicyChainBuilder Skip(Action<SkipMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < SkipMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Stop(Action<StopConsumerErrorPolicy>) Adds a StopConsumerErrorPolicy that stops the consumer when an exception is thrown during the message processing. Declaration public IErrorPolicyChainBuilder Stop(Action<StopConsumerErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < StopConsumerErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. Implements IErrorPolicyBuilder Extension Methods ErrorPolicyBuilderMoveToMqttTopicExtensions.MoveToMqttTopic(IErrorPolicyBuilder, Action<IMqttProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>) ErrorPolicyBuilderMoveToKafkaTopicExtensions.MoveToKafkaTopic(IErrorPolicyBuilder, Action<IKafkaProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>)"
  },
  "api/Silverback.Messaging.Configuration.ErrorPolicyBuilderMoveToKafkaTopicExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ErrorPolicyBuilderMoveToKafkaTopicExtensions.html",
    "title": "Class ErrorPolicyBuilderMoveToKafkaTopicExtensions | Silverback",
    "keywords": "Class ErrorPolicyBuilderMoveToKafkaTopicExtensions Adds the MoveToKafkaTopic method to the IErrorPolicyBuilder . Inheritance System.Object ErrorPolicyBuilderMoveToKafkaTopicExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Kafka.dll Syntax public static class ErrorPolicyBuilderMoveToKafkaTopicExtensions Methods | Improve this doc View source MoveToKafkaTopic(IErrorPolicyBuilder, Action<IKafkaProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration public static IErrorPolicyChainBuilder MoveToKafkaTopic(this IErrorPolicyBuilder builder, Action<IKafkaProducerEndpointBuilder> endpointBuilderAction, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IErrorPolicyBuilder builder The IErrorPolicyBuilder . System.Action < IKafkaProducerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IKafkaProducerEndpointBuilder and configures it. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.ErrorPolicyBuilderMoveToMqttTopicExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ErrorPolicyBuilderMoveToMqttTopicExtensions.html",
    "title": "Class ErrorPolicyBuilderMoveToMqttTopicExtensions | Silverback",
    "keywords": "Class ErrorPolicyBuilderMoveToMqttTopicExtensions Adds the MoveToMqttTopic method to the IErrorPolicyBuilder . Inheritance System.Object ErrorPolicyBuilderMoveToMqttTopicExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.MQTT.dll Syntax public static class ErrorPolicyBuilderMoveToMqttTopicExtensions Methods | Improve this doc View source MoveToMqttTopic(IErrorPolicyBuilder, Action<IMqttProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration public static IErrorPolicyChainBuilder MoveToMqttTopic(this IErrorPolicyBuilder builder, Action<IMqttProducerEndpointBuilder> endpointBuilderAction, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IErrorPolicyBuilder builder The IErrorPolicyBuilder . System.Action < IMqttProducerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IMqttProducerEndpointBuilder and configures it. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.ErrorPolicyChainBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.ErrorPolicyChainBuilder.html",
    "title": "Class ErrorPolicyChainBuilder | Silverback",
    "keywords": "Class ErrorPolicyChainBuilder Builds the IErrorPolicy . Inheritance System.Object ErrorPolicyChainBuilder Implements IErrorPolicyChainBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class ErrorPolicyChainBuilder : IErrorPolicyChainBuilder Constructors | Improve this doc View source ErrorPolicyChainBuilder(IEndpointsConfigurationBuilder) Initializes a new instance of the ErrorPolicyChainBuilder class. Declaration public ErrorPolicyChainBuilder(IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source EndpointsConfigurationBuilder Gets the IEndpointsConfigurationBuilder that instantiated the builder. Declaration public IEndpointsConfigurationBuilder EndpointsConfigurationBuilder { get; } Property Value Type Description IEndpointsConfigurationBuilder Methods | Improve this doc View source Build() Builds the IErrorPolicy instance. Declaration public IErrorPolicy Build() Returns Type Description IErrorPolicy The IMessageSerializer . | Improve this doc View source ThenMove(IProducerEndpoint, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration public IErrorPolicyChainBuilder ThenMove(IProducerEndpoint endpoint, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IProducerEndpoint endpoint The endpoint to move the message to. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration public IErrorPolicyChainBuilder ThenRetry(Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Int32, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration public IErrorPolicyChainBuilder ThenRetry(int retriesCount, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Int32, TimeSpan, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration public IErrorPolicyChainBuilder ThenRetry(int retriesCount, TimeSpan initialDelay, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.TimeSpan initialDelay The optional delay to be applied to the first retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Nullable<Int32>, Nullable<TimeSpan>, Nullable<TimeSpan>, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration public IErrorPolicyChainBuilder ThenRetry(int? retriesCount = null, TimeSpan? initialDelay = null, TimeSpan? delayIncrement = null, Action<RetryErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Nullable < System.Int32 > retriesCount The maximum number of retries to be performed. System.Nullable < System.TimeSpan > initialDelay The optional delay to be applied to the first retry. System.Nullable < System.TimeSpan > delayIncrement The optional increment to the delay to be applied at each retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenSkip(Action<SkipMessageErrorPolicy>) Adds a SkipMessageErrorPolicy that skips the messages that fail to be processed. Declaration public IErrorPolicyChainBuilder ThenSkip(Action<SkipMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < SkipMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenStop(Action<StopConsumerErrorPolicy>) Adds a StopConsumerErrorPolicy that stops the consumer when an exception is thrown during the message processing. Declaration public IErrorPolicyChainBuilder ThenStop(Action<StopConsumerErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < StopConsumerErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. Implements IErrorPolicyChainBuilder Extension Methods ErrorPolicyChainBuilderMoveToMqttTopicExtensions.ThenMoveToMqttTopic(IErrorPolicyChainBuilder, Action<IMqttProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>) ErrorPolicyChainBuilderMoveToKafkaTopicExtensions.ThenMoveToKafkaTopic(IErrorPolicyChainBuilder, Action<IKafkaProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>)"
  },
  "api/Silverback.Messaging.Configuration.ErrorPolicyChainBuilderMoveToKafkaTopicExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ErrorPolicyChainBuilderMoveToKafkaTopicExtensions.html",
    "title": "Class ErrorPolicyChainBuilderMoveToKafkaTopicExtensions | Silverback",
    "keywords": "Class ErrorPolicyChainBuilderMoveToKafkaTopicExtensions Adds the ThenMoveToKafkaTopic method to the IErrorPolicyChainBuilder . Inheritance System.Object ErrorPolicyChainBuilderMoveToKafkaTopicExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Kafka.dll Syntax public static class ErrorPolicyChainBuilderMoveToKafkaTopicExtensions Methods | Improve this doc View source ThenMoveToKafkaTopic(IErrorPolicyChainBuilder, Action<IKafkaProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration public static IErrorPolicyChainBuilder ThenMoveToKafkaTopic(this IErrorPolicyChainBuilder builder, Action<IKafkaProducerEndpointBuilder> endpointBuilderAction, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IErrorPolicyChainBuilder builder The IErrorPolicyChainBuilder . System.Action < IKafkaProducerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IKafkaProducerEndpointBuilder and configures it. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.ErrorPolicyChainBuilderMoveToMqttTopicExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ErrorPolicyChainBuilderMoveToMqttTopicExtensions.html",
    "title": "Class ErrorPolicyChainBuilderMoveToMqttTopicExtensions | Silverback",
    "keywords": "Class ErrorPolicyChainBuilderMoveToMqttTopicExtensions Adds the ThenMoveToMqttTopic method to the IErrorPolicyChainBuilder . Inheritance System.Object ErrorPolicyChainBuilderMoveToMqttTopicExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.MQTT.dll Syntax public static class ErrorPolicyChainBuilderMoveToMqttTopicExtensions Methods | Improve this doc View source ThenMoveToMqttTopic(IErrorPolicyChainBuilder, Action<IMqttProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration public static IErrorPolicyChainBuilder ThenMoveToMqttTopic(this IErrorPolicyChainBuilder builder, Action<IMqttProducerEndpointBuilder> endpointBuilderAction, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IErrorPolicyChainBuilder builder The IErrorPolicyChainBuilder . System.Action < IMqttProducerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IMqttProducerEndpointBuilder and configures it. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.ExactlyOnceStrategy.html": {
    "href": "api/Silverback.Messaging.Configuration.ExactlyOnceStrategy.html",
    "title": "Class ExactlyOnceStrategy | Silverback",
    "keywords": "Class ExactlyOnceStrategy Contains some helper methods used to build the exactly-once strategies. Inheritance System.Object ExactlyOnceStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ExactlyOnceStrategy Methods | Improve this doc View source Log() Builds an instance of the LogExactlyOnceStrategy that uses an IInboundLog to keep track of each processed message and guarantee that each one is processed only once. Declaration public static IExactlyOnceStrategy Log() Returns Type Description IExactlyOnceStrategy The exactly-once strategy instance. | Improve this doc View source OffsetStore() Builds an instance of the OffsetStoreExactlyOnceStrategy that uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration public static IExactlyOnceStrategy OffsetStore() Returns Type Description IExactlyOnceStrategy The exactly-once strategy instance."
  },
  "api/Silverback.Messaging.Configuration.ExactlyOnceStrategyBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.ExactlyOnceStrategyBuilder.html",
    "title": "Class ExactlyOnceStrategyBuilder | Silverback",
    "keywords": "Class ExactlyOnceStrategyBuilder Builds the IExactlyOnceStrategy . Inheritance System.Object ExactlyOnceStrategyBuilder Implements IExactlyOnceStrategyBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class ExactlyOnceStrategyBuilder : IExactlyOnceStrategyBuilder Methods | Improve this doc View source Build() Builds the IExactlyOnceStrategy instance. Declaration public IExactlyOnceStrategy Build() Returns Type Description IExactlyOnceStrategy The IExactlyOnceStrategy . | Improve this doc View source LogMessages() Creates a LogExactlyOnceStrategy that uses an IInboundLog to keep track of each processed message and guarantee that each one is processed only once. Declaration public IExactlyOnceStrategyBuilder LogMessages() Returns Type Description IExactlyOnceStrategyBuilder The IExactlyOnceStrategyBuilder so that additional calls can be chained. | Improve this doc View source StoreOffsets() Creates an OffsetStoreExactlyOnceStrategy that uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration public IExactlyOnceStrategyBuilder StoreOffsets() Returns Type Description IExactlyOnceStrategyBuilder The IExactlyOnceStrategyBuilder so that additional calls can be chained. Implements IExactlyOnceStrategyBuilder"
  },
  "api/Silverback.Messaging.Configuration.html": {
    "href": "api/Silverback.Messaging.Configuration.html",
    "title": "Namespace Silverback.Messaging.Configuration | Silverback",
    "keywords": "Namespace Silverback.Messaging.Configuration Classes AvroMessageSerializerBuilder Builds the AvroMessageSerializer<TMessage> . BinaryFileMessageSerializerBuilder Builds the BinaryFileMessageSerializer or BinaryFileMessageSerializer<TModel> . BrokerConnectionOptions The options specifying if and when the message broker has to be automatically connected. ConsumerEndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from ConsumerEndpoint . ConsumerEndpointBuilderConsumeBinaryFilesExtensions Adds the ConsumeBinaryFiles method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . ConsumerEndpointBuilderDecryptUsingExtensions Adds the DecryptUsingAes method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . ConsumerEndpointBuilderDeserializeAvroExtensions Adds the DeserializeAvro method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . ConsumerEndpointBuilderDeserializeJsonExtensions Adds the DeserializeJson method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions Adds the DeserializeJsonUsingNewtonsoft method to the ConsumerEndpointBuilder<TEndpoint, TBuilder> . EndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from Endpoint . EndpointsConfigurationBuilderAddInboundExtensions Adds the AddInbound method to the IEndpointsConfigurationBuilder . EndpointsConfigurationBuilderAddKafkaEndpointsExtensions Adds the AddKafkaEndpoints method to the IEndpointsConfigurationBuilder . EndpointsConfigurationBuilderAddMqttEndpointsExtensions Adds the AddMqttEndpoints method to the IEndpointsConfigurationBuilder . EndpointsConfigurationBuilderAddOutboundExtensions Adds the AddOutbound method to the IEndpointsConfigurationBuilder . ErrorPolicyBuilder Builds the IErrorPolicy . ErrorPolicyBuilderMoveToKafkaTopicExtensions Adds the MoveToKafkaTopic method to the IErrorPolicyBuilder . ErrorPolicyBuilderMoveToMqttTopicExtensions Adds the MoveToMqttTopic method to the IErrorPolicyBuilder . ErrorPolicyChainBuilder Builds the IErrorPolicy . ErrorPolicyChainBuilderMoveToKafkaTopicExtensions Adds the ThenMoveToKafkaTopic method to the IErrorPolicyChainBuilder . ErrorPolicyChainBuilderMoveToMqttTopicExtensions Adds the ThenMoveToMqttTopic method to the IErrorPolicyChainBuilder . ExactlyOnceStrategy Contains some helper methods used to build the exactly-once strategies. ExactlyOnceStrategyBuilder Builds the IExactlyOnceStrategy . JsonMessageSerializerBuilder Builds the JsonMessageSerializer or JsonMessageSerializer<TMessage> . KafkaBrokerOptionsConfigurator This class will be located via assembly scanning and invoked when a KafkaBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection . NewtonsoftJsonMessageSerializerBuilder Builds the NewtonsoftJsonMessageSerializer or NewtonsoftJsonMessageSerializer<TMessage> . ProducerEndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from ConsumerEndpoint . ProducerEndpointBuilderEncryptUsingExtensions Adds the EncryptUsingAes method to the ProducerEndpointBuilder<TEndpoint, TBuilder> . ProducerEndpointBuilderProduceBinaryFilesExtensions Adds the ProduceBinaryFiles method to the ProducerEndpointBuilder<TEndpoint, TBuilder> . ProducerEndpointBuilderSerializeAsAvroExtensions Adds the SerializeAsAvro method to the ProducerEndpoint . ProducerEndpointBuilderSerializeAsJsonExtensions Adds the SerializeAsJson method to the ProducerEndpoint . ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions Adds the SerializeAsJsonUsingNewtonsoft method to the ProducerEndpoint . RabbitBrokerOptionsConfigurator This class will be located via assembly scanning and invoked when a RabbitBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection . SilverbackBuilderHandleMessageOfTypeExtensions Adds the HandleMessageOfType methods to the ISilverbackBuilder . SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions Adds the PublishOutboundMessagesToInternalBus method to the ISilverbackBuilder . SilverbackBuilderWithCustomHeaderNameExtensions Adds the WithCustomHeaderName method to the ISilverbackBuilder . Interfaces IAvroMessageSerializerBuilder Builds the AvroMessageSerializer<TMessage> . IBinaryFileMessageSerializerBuilder Builds the BinaryFileMessageSerializer<TModel> or BinaryFileMessageSerializer<TModel> . IBusOptions Stores the internal bus configuration (subscribers, etc.). IConsumerEndpointBuilder<TBuilder> Builds the ConsumerEndpoint . IEndpointBuilder<TBuilder> Builds the Endpoint . IEndpointsConfigurationBuilder Exposes the methods to configure the inbound and outbound endpoints. IEndpointsConfigurator This interface can be implemented to split the message broker endpoints configuration across different types. The types implementing IEndpointsConfigurator must be registered using RegisterConfigurator or AddEndpointConfigurator . IErrorPolicyBuilder Builds the IErrorPolicy . IErrorPolicyChainBuilder Builds the IErrorPolicy . IExactlyOnceStrategyBuilder Builds the IExactlyOnceStrategy . IJsonMessageSerializerBuilder Builds the JsonMessageSerializer or JsonMessageSerializer<TMessage> . ILogLevelConfigurator Configure and stores the Microsoft.Extensions.Logging.LogLevel overrides. INewtonsoftJsonMessageSerializerBuilder Builds the NewtonsoftJsonMessageSerializer or NewtonsoftJsonMessageSerializer<TMessage> . IProducerEndpointBuilder<TBuilder> Builds the ProducerEndpoint . ISilverbackBuilder Exposes the methods to configure Silverback and enable its optional features adding the needed services to the Microsoft.Extensions.DependencyInjection.IServiceCollection . IValidatableEndpointSettings Declares the Validate method that is used to check the provided settings. Enums BrokerConnectionMode Specifies if and when the message broker has to be automatically connected."
  },
  "api/Silverback.Messaging.Configuration.IAvroMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IAvroMessageSerializerBuilder.html",
    "title": "Interface IAvroMessageSerializerBuilder | Silverback",
    "keywords": "Interface IAvroMessageSerializerBuilder Builds the AvroMessageSerializer<TMessage> . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Kafka.SchemaRegistry.dll Syntax public interface IAvroMessageSerializerBuilder Methods | Improve this doc View source Configure(Action<SchemaRegistryConfig>, Action<AvroSerializerConfig>) Configures the Confluent.SchemaRegistry.SchemaRegistryConfig and the Confluent.SchemaRegistry.Serdes.AvroSerializerConfig . Declaration IAvroMessageSerializerBuilder Configure(Action<SchemaRegistryConfig> configureSchemaRegistryAction, Action<AvroSerializerConfig> configureSerializerAction = null) Parameters Type Name Description System.Action < Confluent.SchemaRegistry.SchemaRegistryConfig > configureSchemaRegistryAction An System.Action<T> that takes the Confluent.SchemaRegistry.SchemaRegistryConfig and configures it. System.Action < Confluent.SchemaRegistry.Serdes.AvroSerializerConfig > configureSerializerAction An System.Action<T> that takes the Confluent.SchemaRegistry.Serdes.AvroSerializerConfig and configures it. Returns Type Description IAvroMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseType<TMessage>() Specifies the message type. Declaration IAvroMessageSerializerBuilder UseType<TMessage>() where TMessage : class Returns Type Description IAvroMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the message to serialize or deserialize."
  },
  "api/Silverback.Messaging.Configuration.IBinaryFileMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IBinaryFileMessageSerializerBuilder.html",
    "title": "Interface IBinaryFileMessageSerializerBuilder | Silverback",
    "keywords": "Interface IBinaryFileMessageSerializerBuilder Builds the BinaryFileMessageSerializer<TModel> or BinaryFileMessageSerializer<TModel> . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IBinaryFileMessageSerializerBuilder Methods | Improve this doc View source UseModel<TModel>() Specifies a custom model to wrap the binary file. Declaration IBinaryFileMessageSerializerBuilder UseModel<TModel>() where TModel : IBinaryFileMessage, new() Returns Type Description IBinaryFileMessageSerializerBuilder The IBinaryFileMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TModel The type of the IBinaryFileMessage implementation."
  },
  "api/Silverback.Messaging.Configuration.IBusOptions.html": {
    "href": "api/Silverback.Messaging.Configuration.IBusOptions.html",
    "title": "Interface IBusOptions | Silverback",
    "keywords": "Interface IBusOptions Stores the internal bus configuration (subscribers, etc.). Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Core.dll Syntax public interface IBusOptions Properties | Improve this doc View source MessageTypes Gets the collection of handled message types. These types will be recognized as messages and thus automatically republished when returned by a subscribed method. Declaration IList<Type> MessageTypes { get; } Property Value Type Description System.Collections.Generic.IList < System.Type > | Improve this doc View source Subscriptions Gets the collection of ISubscription . A single subscription can resolve to multiple subscribed methods. Declaration IList<ISubscription> Subscriptions { get; } Property Value Type Description System.Collections.Generic.IList < ISubscription >"
  },
  "api/Silverback.Messaging.Configuration.IConsumerEndpointBuilder-1.html": {
    "href": "api/Silverback.Messaging.Configuration.IConsumerEndpointBuilder-1.html",
    "title": "Interface IConsumerEndpointBuilder<TBuilder> | Silverback",
    "keywords": "Interface IConsumerEndpointBuilder<TBuilder> Builds the ConsumerEndpoint . Inherited Members IEndpointBuilder<TBuilder>.WithName(String) IEndpointBuilder<TBuilder>.UseSerializer(IMessageSerializer) IEndpointBuilder<TBuilder>.WithEncryption(EncryptionSettings) IEndpointBuilder<TBuilder>.ValidateMessage(Boolean) IEndpointBuilder<TBuilder>.DisableMessageValidation() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IConsumerEndpointBuilder<out TBuilder> : IEndpointBuilder<TBuilder> where TBuilder : IConsumerEndpointBuilder<TBuilder> Type Parameters Name Description TBuilder The actual builder type. Properties | Improve this doc View source MessageType Gets the type of the message being consumed. Declaration Type MessageType { get; } Property Value Type Description System.Type Remarks This value might be used during the configuration to automatically determine some configurations (e.g. the correct deserializer to be used) without having to specify the message type once again. Methods | Improve this doc View source Decrypt(EncryptionSettings) Specifies the EncryptionSettings to be used to decrypt the messages. Declaration TBuilder Decrypt(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings The EncryptionSettings . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source DeserializeUsing(IMessageSerializer) Specifies the IMessageSerializer to be used to deserialize the messages. Declaration TBuilder DeserializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source EnableBatchProcessing(Int32, Nullable<TimeSpan>) Enables batch processing. Declaration TBuilder EnableBatchProcessing(int batchSize, TimeSpan? maxWaitTime = null) Parameters Type Name Description System.Int32 batchSize The number of messages to be processed in batch. System.Nullable < System.TimeSpan > maxWaitTime The maximum amount of time to wait for the batch to be filled. After this time the batch will be completed even if the specified batchSize is not reached. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source EnsureExactlyOnce(IExactlyOnceStrategy) Specifies the strategy to be used to ensure that each message is processed exactly once. Declaration TBuilder EnsureExactlyOnce(IExactlyOnceStrategy strategy) Parameters Type Name Description IExactlyOnceStrategy strategy The IExactlyOnceStrategy . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder>) Specifies the strategy to be used to ensure that each message is processed exactly once. Declaration TBuilder EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder> strategyBuilderAction) Parameters Type Name Description System.Action < IExactlyOnceStrategyBuilder > strategyBuilderAction An System.Action<T> that takes the IExactlyOnceStrategyBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source HandleTombstoneMessages() Specifies that the null messages have to be mapped to a Tombstone<TMessage> ( Tombstone ). This is the default behavior, use the UseLegacyNullMessageHandling() or SkipNullMessages() methods to change it. Declaration TBuilder HandleTombstoneMessages() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source IgnoreUnhandledMessages() Specifies that the message has to be silently ignored if no subscriber is handling it. Declaration TBuilder IgnoreUnhandledMessages() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source OnError(IErrorPolicy) Specifies the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration TBuilder OnError(IErrorPolicy errorPolicy) Parameters Type Name Description IErrorPolicy errorPolicy The IErrorPolicy . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source OnError(Action<IErrorPolicyBuilder>) Specifies the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration TBuilder OnError(Action<IErrorPolicyBuilder> errorPolicyBuilderAction) Parameters Type Name Description System.Action < IErrorPolicyBuilder > errorPolicyBuilderAction An System.Action<T> that takes the IErrorPolicyBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source SkipNullMessages() Specifies that the null messages have to be silently skipped ( Skip ). Declaration TBuilder SkipNullMessages() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ThrowIfUnhandled() Specifies that an exception must be thrown if no subscriber is handling the received message. This option is enabled by default. Use the IgnoreUnhandledMessages() to disable it. Declaration TBuilder ThrowIfUnhandled() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source UseLegacyNullMessageHandling() Specifies that the null messages have to be forwarded as null ( Legacy ). Declaration TBuilder UseLegacyNullMessageHandling() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithSequenceTimeout(TimeSpan) Sets the timeout after which an incomplete sequence that isn't pushed with new messages will be aborted and discarded. The default is a conservative 30 minutes. Declaration TBuilder WithSequenceTimeout(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The timeout. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Remarks This setting is ignored for batches ( BatchSequence ), use the maxWaitTime parameter of EnableBatchProcessing(Int32, Nullable<TimeSpan>) instead. Extension Methods ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ConsumerEndpointBuilderDeserializeAvroExtensions.DeserializeAvro<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>) ConsumerEndpointBuilderConsumeBinaryFilesExtensions.ConsumeBinaryFiles<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) ConsumerEndpointBuilderDecryptUsingExtensions.DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Byte[], Byte[]) ConsumerEndpointBuilderDecryptUsingExtensions.DecryptUsingAes<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Func<String, Byte[]>, Byte[]) ConsumerEndpointBuilderDeserializeJsonExtensions.DeserializeJson<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.IEndpointBuilder-1.html": {
    "href": "api/Silverback.Messaging.Configuration.IEndpointBuilder-1.html",
    "title": "Interface IEndpointBuilder<TBuilder> | Silverback",
    "keywords": "Interface IEndpointBuilder<TBuilder> Builds the Endpoint . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IEndpointBuilder<out TBuilder> where TBuilder : IEndpointBuilder<TBuilder> Type Parameters Name Description TBuilder The actual builder type. Methods | Improve this doc View source DisableMessageValidation() Disables the message validation. Declaration TBuilder DisableMessageValidation() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source UseSerializer(IMessageSerializer) Specifies the IMessageSerializer to be used serialize or deserialize the messages. Declaration TBuilder UseSerializer(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ValidateMessage(Boolean) Enables the message validation. Declaration TBuilder ValidateMessage(bool throwException) Parameters Type Name Description System.Boolean throwException A value that specifies whether an exception should be thrown if the message is invalid. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithEncryption(EncryptionSettings) Enables the end-to-end message encryption. Declaration TBuilder WithEncryption(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings The EncryptionSettings . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithName(String) Specifies an optional friendly name to be used to identify the endpoint. This name can be used to filter or retrieve the endpoints and will also be included in the DisplayName , to be shown in the human-targeted output (e.g. logs, health checks result, etc.). Declaration TBuilder WithName(string friendlyName) Parameters Type Name Description System.String friendlyName The friendly name. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.IEndpointsConfigurationBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IEndpointsConfigurationBuilder.html",
    "title": "Interface IEndpointsConfigurationBuilder | Silverback",
    "keywords": "Interface IEndpointsConfigurationBuilder Exposes the methods to configure the inbound and outbound endpoints. Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IEndpointsConfigurationBuilder Properties | Improve this doc View source ServiceProvider Gets the System.IServiceProvider to be used to resolve the needed services. Declaration IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider Extension Methods EndpointsConfigurationBuilderAddMqttEndpointsExtensions.AddMqttEndpoints(IEndpointsConfigurationBuilder, Action<IMqttEndpointsConfigurationBuilder>) EndpointsConfigurationBuilderAddKafkaEndpointsExtensions.AddKafkaEndpoints(IEndpointsConfigurationBuilder, Action<IKafkaEndpointsConfigurationBuilder>) EndpointsConfigurationBuilderAddInboundExtensions.AddInbound(IEndpointsConfigurationBuilder, IConsumerEndpoint, Int32) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IProducerEndpoint[]) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IProducerEndpoint, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IEnumerable<IProducerEndpoint>, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, IProducerEndpoint, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, IProducerEndpoint[]) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, IEnumerable<IProducerEndpoint>, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage, TRouter>(IEndpointsConfigurationBuilder, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound<TMessage>(IEndpointsConfigurationBuilder, IOutboundRouter<TMessage>, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, Type, Boolean) EndpointsConfigurationBuilderAddOutboundExtensions.AddOutbound(IEndpointsConfigurationBuilder, Type, IOutboundRouter, Boolean)"
  },
  "api/Silverback.Messaging.Configuration.IEndpointsConfigurator.html": {
    "href": "api/Silverback.Messaging.Configuration.IEndpointsConfigurator.html",
    "title": "Interface IEndpointsConfigurator | Silverback",
    "keywords": "Interface IEndpointsConfigurator This interface can be implemented to split the message broker endpoints configuration across different types. The types implementing IEndpointsConfigurator must be registered using RegisterConfigurator or AddEndpointConfigurator . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IEndpointsConfigurator Methods | Improve this doc View source Configure(IEndpointsConfigurationBuilder) Configures the message broker endpoints. Declaration void Configure(IEndpointsConfigurationBuilder builder) Parameters Type Name Description IEndpointsConfigurationBuilder builder The IEndpointsConfigurationBuilder instance to be used to configure the endpoints."
  },
  "api/Silverback.Messaging.Configuration.IErrorPolicyBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IErrorPolicyBuilder.html",
    "title": "Interface IErrorPolicyBuilder | Silverback",
    "keywords": "Interface IErrorPolicyBuilder Builds the IErrorPolicy . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IErrorPolicyBuilder Methods | Improve this doc View source Move(IProducerEndpoint, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration IErrorPolicyChainBuilder Move(IProducerEndpoint endpoint, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IProducerEndpoint endpoint The endpoint to move the message to. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder Retry(Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Int32, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder Retry(int retriesCount, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Int32, TimeSpan, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder Retry(int retriesCount, TimeSpan initialDelay, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.TimeSpan initialDelay The optional delay to be applied to the first retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Retry(Nullable<Int32>, Nullable<TimeSpan>, Nullable<TimeSpan>, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder Retry(int? retriesCount = null, TimeSpan? initialDelay = null, TimeSpan? delayIncrement = null, Action<RetryErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Nullable < System.Int32 > retriesCount The maximum number of retries to be performed. System.Nullable < System.TimeSpan > initialDelay The optional delay to be applied to the first retry. System.Nullable < System.TimeSpan > delayIncrement The optional increment to the delay to be applied at each retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Skip(Action<SkipMessageErrorPolicy>) Adds a SkipMessageErrorPolicy that skips the messages that fail to be processed. Declaration IErrorPolicyChainBuilder Skip(Action<SkipMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < SkipMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source Stop(Action<StopConsumerErrorPolicy>) Adds a StopConsumerErrorPolicy that stops the consumer when an exception is thrown during the message processing. Declaration IErrorPolicyChainBuilder Stop(Action<StopConsumerErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < StopConsumerErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. Extension Methods ErrorPolicyBuilderMoveToMqttTopicExtensions.MoveToMqttTopic(IErrorPolicyBuilder, Action<IMqttProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>) ErrorPolicyBuilderMoveToKafkaTopicExtensions.MoveToKafkaTopic(IErrorPolicyBuilder, Action<IKafkaProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>)"
  },
  "api/Silverback.Messaging.Configuration.IErrorPolicyChainBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IErrorPolicyChainBuilder.html",
    "title": "Interface IErrorPolicyChainBuilder | Silverback",
    "keywords": "Interface IErrorPolicyChainBuilder Builds the IErrorPolicy . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IErrorPolicyChainBuilder Methods | Improve this doc View source ThenMove(IProducerEndpoint, Action<MoveMessageErrorPolicy>) Adds a MoveMessageErrorPolicy that moves the messages that fail to be processed to the configured endpoint. Declaration IErrorPolicyChainBuilder ThenMove(IProducerEndpoint endpoint, Action<MoveMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description IProducerEndpoint endpoint The endpoint to move the message to. System.Action < MoveMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder ThenRetry(Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Int32, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder ThenRetry(int retriesCount, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Int32, TimeSpan, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder ThenRetry(int retriesCount, TimeSpan initialDelay, Action<RetryErrorPolicy> policyConfigurationAction) Parameters Type Name Description System.Int32 retriesCount The maximum number of retries to be performed. System.TimeSpan initialDelay The optional delay to be applied to the first retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenRetry(Nullable<Int32>, Nullable<TimeSpan>, Nullable<TimeSpan>, Action<RetryErrorPolicy>) Adds a RetryErrorPolicy that retries to process the messages that previously failed to be to processed. Declaration IErrorPolicyChainBuilder ThenRetry(int? retriesCount = null, TimeSpan? initialDelay = null, TimeSpan? delayIncrement = null, Action<RetryErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Nullable < System.Int32 > retriesCount The maximum number of retries to be performed. System.Nullable < System.TimeSpan > initialDelay The optional delay to be applied to the first retry. System.Nullable < System.TimeSpan > delayIncrement The optional increment to the delay to be applied at each retry. System.Action < RetryErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenSkip(Action<SkipMessageErrorPolicy>) Adds a SkipMessageErrorPolicy that skips the messages that fail to be processed. Declaration IErrorPolicyChainBuilder ThenSkip(Action<SkipMessageErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < SkipMessageErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. | Improve this doc View source ThenStop(Action<StopConsumerErrorPolicy>) Adds a StopConsumerErrorPolicy that stops the consumer when an exception is thrown during the message processing. Declaration IErrorPolicyChainBuilder ThenStop(Action<StopConsumerErrorPolicy> policyConfigurationAction = null) Parameters Type Name Description System.Action < StopConsumerErrorPolicy > policyConfigurationAction The (optional) additional configuration. Returns Type Description IErrorPolicyChainBuilder The IErrorPolicyChainBuilder so that additional calls can be chained. Extension Methods ErrorPolicyChainBuilderMoveToMqttTopicExtensions.ThenMoveToMqttTopic(IErrorPolicyChainBuilder, Action<IMqttProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>) ErrorPolicyChainBuilderMoveToKafkaTopicExtensions.ThenMoveToKafkaTopic(IErrorPolicyChainBuilder, Action<IKafkaProducerEndpointBuilder>, Action<MoveMessageErrorPolicy>)"
  },
  "api/Silverback.Messaging.Configuration.IExactlyOnceStrategyBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IExactlyOnceStrategyBuilder.html",
    "title": "Interface IExactlyOnceStrategyBuilder | Silverback",
    "keywords": "Interface IExactlyOnceStrategyBuilder Builds the IExactlyOnceStrategy . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IExactlyOnceStrategyBuilder Methods | Improve this doc View source LogMessages() Creates a LogExactlyOnceStrategy that uses an IInboundLog to keep track of each processed message and guarantee that each one is processed only once. Declaration IExactlyOnceStrategyBuilder LogMessages() Returns Type Description IExactlyOnceStrategyBuilder The IExactlyOnceStrategyBuilder so that additional calls can be chained. | Improve this doc View source StoreOffsets() Creates an OffsetStoreExactlyOnceStrategy that uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Declaration IExactlyOnceStrategyBuilder StoreOffsets() Returns Type Description IExactlyOnceStrategyBuilder The IExactlyOnceStrategyBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.IJsonMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.IJsonMessageSerializerBuilder.html",
    "title": "Interface IJsonMessageSerializerBuilder | Silverback",
    "keywords": "Interface IJsonMessageSerializerBuilder Builds the JsonMessageSerializer or JsonMessageSerializer<TMessage> . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IJsonMessageSerializerBuilder Methods | Improve this doc View source UseFixedType(Type) Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration IJsonMessageSerializerBuilder UseFixedType(Type messageType) Parameters Type Name Description System.Type messageType The type of the message to serialize or deserialize. Returns Type Description IJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseFixedType<TMessage>() Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration IJsonMessageSerializerBuilder UseFixedType<TMessage>() Returns Type Description IJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the message to serialize or deserialize. | Improve this doc View source WithOptions(JsonSerializerOptions) Specifies the System.Text.Json.JsonSerializerOptions . Declaration IJsonMessageSerializerBuilder WithOptions(JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.JsonSerializerOptions options The System.Text.Json.JsonSerializerOptions . Returns Type Description IJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.ILogLevelConfigurator.html": {
    "href": "api/Silverback.Messaging.Configuration.ILogLevelConfigurator.html",
    "title": "Interface ILogLevelConfigurator | Silverback",
    "keywords": "Interface ILogLevelConfigurator Configure and stores the Microsoft.Extensions.Logging.LogLevel overrides. Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Core.dll Syntax public interface ILogLevelConfigurator Methods | Improve this doc View source Build() Builds the ILogLevelDictionary based on the current state of the configurator. Declaration ILogLevelDictionary Build() Returns Type Description ILogLevelDictionary The ILogLevelDictionary . | Improve this doc View source SetLogLevel(EventId, LogLevel) Configure the log level that should be applied to the specified event. Declaration ILogLevelConfigurator SetLogLevel(EventId eventId, LogLevel logLevel) Parameters Type Name Description Microsoft.Extensions.Logging.EventId eventId The event id. Microsoft.Extensions.Logging.LogLevel logLevel The log level to apply. Returns Type Description ILogLevelConfigurator The ILogLevelConfigurator so that additional calls can be chained. | Improve this doc View source SetLogLevel(EventId, Func<Exception, LogLevel, LogLevel>) Configure a delegate that determines the log level that should be applied to the specified event. Declaration ILogLevelConfigurator SetLogLevel(EventId eventId, Func<Exception, LogLevel, LogLevel> logLevelFunc) Parameters Type Name Description Microsoft.Extensions.Logging.EventId eventId The event id. System.Func < System.Exception , Microsoft.Extensions.Logging.LogLevel , Microsoft.Extensions.Logging.LogLevel > logLevelFunc The function that returns the log level. It takes the logged exception and the default log level as parameters. Returns Type Description ILogLevelConfigurator The ILogLevelConfigurator so that additional calls can be chained. | Improve this doc View source SetLogLevel(EventId, Func<Exception, LogLevel, Lazy<String>, LogLevel>) Configure a delegate that determines the log level that should be applied to the specified event. Declaration ILogLevelConfigurator SetLogLevel(EventId eventId, Func<Exception, LogLevel, Lazy<string>, LogLevel> logLevelFunc) Parameters Type Name Description Microsoft.Extensions.Logging.EventId eventId The event id. System.Func < System.Exception , Microsoft.Extensions.Logging.LogLevel , System.Lazy < System.String >, Microsoft.Extensions.Logging.LogLevel > logLevelFunc The function that returns the log level. It takes the logged exception, the message and the default log level as parameters. Returns Type Description ILogLevelConfigurator The ILogLevelConfigurator so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.INewtonsoftJsonMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.INewtonsoftJsonMessageSerializerBuilder.html",
    "title": "Interface INewtonsoftJsonMessageSerializerBuilder | Silverback",
    "keywords": "Interface INewtonsoftJsonMessageSerializerBuilder Builds the NewtonsoftJsonMessageSerializer or NewtonsoftJsonMessageSerializer<TMessage> . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Newtonsoft.dll Syntax public interface INewtonsoftJsonMessageSerializerBuilder Methods | Improve this doc View source Configure(Action<JsonSerializerSettings>) Configures the Newtonsoft.Json.JsonSerializerSettings . Declaration INewtonsoftJsonMessageSerializerBuilder Configure(Action<JsonSerializerSettings> configureAction) Parameters Type Name Description System.Action < Newtonsoft.Json.JsonSerializerSettings > configureAction An System.Action<T> that takes the Newtonsoft.Json.JsonSerializerSettings and configures it. Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseFixedType(Type) Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration INewtonsoftJsonMessageSerializerBuilder UseFixedType(Type messageType) Parameters Type Name Description System.Type messageType The type of the message to serialize or deserialize. Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseFixedType<TMessage>() Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration INewtonsoftJsonMessageSerializerBuilder UseFixedType<TMessage>() Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the message to serialize or deserialize. | Improve this doc View source WithEncoding(MessageEncoding) Specifies the encoding to be used. Declaration INewtonsoftJsonMessageSerializerBuilder WithEncoding(MessageEncoding encoding) Parameters Type Name Description MessageEncoding encoding The MessageEncoding . Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.IProducerEndpointBuilder-1.html": {
    "href": "api/Silverback.Messaging.Configuration.IProducerEndpointBuilder-1.html",
    "title": "Interface IProducerEndpointBuilder<TBuilder> | Silverback",
    "keywords": "Interface IProducerEndpointBuilder<TBuilder> Builds the ProducerEndpoint . Inherited Members IEndpointBuilder<TBuilder>.WithName(String) IEndpointBuilder<TBuilder>.UseSerializer(IMessageSerializer) IEndpointBuilder<TBuilder>.WithEncryption(EncryptionSettings) IEndpointBuilder<TBuilder>.ValidateMessage(Boolean) IEndpointBuilder<TBuilder>.DisableMessageValidation() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IProducerEndpointBuilder<out TBuilder> : IEndpointBuilder<TBuilder> where TBuilder : IProducerEndpointBuilder<TBuilder> Type Parameters Name Description TBuilder The actual builder type. Methods | Improve this doc View source AddHeader(String, Object) Adds the specified header to all produced messages. Declaration TBuilder AddHeader(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source AddHeader<TMessage>(String, Func<IOutboundEnvelope<TMessage>, Object>) Adds the specified header to all produced messages of the specified type, using a value provider function to determine the header value for each message. Declaration TBuilder AddHeader<TMessage>(string name, Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.String name The header name. System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The value provider function. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched with this header. | Improve this doc View source AddHeader<TMessage>(String, Object) Adds the specified header to all produced messages of the specified type. Declaration TBuilder AddHeader<TMessage>(string name, object value) where TMessage : class Parameters Type Name Description System.String name The header name. System.Object value The header value. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched with this header. | Improve this doc View source EnableChunking(Int32, Boolean) Enables chunking, splitting the larger messages into smaller chunks. Declaration TBuilder EnableChunking(int chunkSize, bool alwaysAddHeaders = true) Parameters Type Name Description System.Int32 chunkSize The maximum chunk size in bytes. System.Boolean alwaysAddHeaders A value indicating whether the x-chunk-index and related headers have to be added to the produced message in any case, even if its size doesn't exceed the single chunk size. The default is true . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source Encrypt(EncryptionSettings) Specifies the EncryptionSettings to be used to encrypt the messages. Declaration TBuilder Encrypt(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings The EncryptionSettings . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ProduceDirectly() Specifies that the Silverback.Messaging.Outbound.DefaultProduceStrategy has to be used, producing directly to the message broker. Declaration TBuilder ProduceDirectly() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ProduceToOutbox() Specifies that the OutboxProduceStrategy has to be used, storing the messages into the transactional outbox table. The operation is therefore included in the database transaction applying the message side effects to the local database. The IOutboxWorker takes care of asynchronously sending the messages to the message broker. Declaration TBuilder ProduceToOutbox() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source SerializeUsing(IMessageSerializer) Specifies the IMessageSerializer to be used to serialize the messages. Declaration TBuilder SerializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source UseStrategy(IProduceStrategy) Specifies the strategy to be used to produce the messages. Declaration TBuilder UseStrategy(IProduceStrategy strategy) Parameters Type Name Description IProduceStrategy strategy The IProduceStrategy . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) Uses the specified value provider function to set the message id header for each produced message. Declaration TBuilder WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The value provider function. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched with this header. Extension Methods ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsAvroExtensions.SerializeAsAvro<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>) ProducerEndpointBuilderEncryptUsingExtensions.EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], Byte[]) ProducerEndpointBuilderEncryptUsingExtensions.EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], String, Byte[]) ProducerEndpointBuilderProduceBinaryFilesExtensions.ProduceBinaryFiles<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsJsonExtensions.SerializeAsJson<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.ISilverbackBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.ISilverbackBuilder.html",
    "title": "Interface ISilverbackBuilder | Silverback",
    "keywords": "Interface ISilverbackBuilder Exposes the methods to configure Silverback and enable its optional features adding the needed services to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Core.dll Syntax public interface ISilverbackBuilder Properties | Improve this doc View source BusOptions Gets the IBusOptions that is being modified by this ISilverbackBuilder . Declaration IBusOptions BusOptions { get; } Property Value Type Description IBusOptions | Improve this doc View source Services Gets the Microsoft.Extensions.DependencyInjection.IServiceCollection that is being modified by this ISilverbackBuilder . Declaration IServiceCollection Services { get; } Property Value Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Extension Methods SilverbackBuilderUseMockedMqttExtensions.UseMockedMqtt(ISilverbackBuilder, Action<IMockedMqttOptionsBuilder>) SilverbackBuilderAddIntegrationSpyExtensions.AddIntegrationSpy(ISilverbackBuilder, Boolean) SilverbackBuilderAddIntegrationSpyExtensions.AddIntegrationSpyAndSubscriber(ISilverbackBuilder) SilverbackBuilderAsObservableExtensions.AsObservable(ISilverbackBuilder) SilverbackBuilderUseModelExtensions.UseModel(ISilverbackBuilder) SilverbackBuilderAddDbDistributedLockManagerExtensions.AddDbDistributedLockManager(ISilverbackBuilder) SilverbackBuilderAddBehaviorExtensions.AddTransientBehavior(ISilverbackBuilder, Type) SilverbackBuilderAddBehaviorExtensions.AddTransientBehavior<TBehavior>(ISilverbackBuilder) SilverbackBuilderAddBehaviorExtensions.AddTransientBehavior(ISilverbackBuilder, Func<IServiceProvider, IBehavior>) SilverbackBuilderAddBehaviorExtensions.AddScopedBehavior(ISilverbackBuilder, Type) SilverbackBuilderAddBehaviorExtensions.AddScopedBehavior<TBehavior>(ISilverbackBuilder) SilverbackBuilderAddBehaviorExtensions.AddScopedBehavior(ISilverbackBuilder, Func<IServiceProvider, IBehavior>) SilverbackBuilderAddBehaviorExtensions.AddSingletonBehavior(ISilverbackBuilder, Type) SilverbackBuilderAddBehaviorExtensions.AddSingletonBehavior<TBehavior>(ISilverbackBuilder) SilverbackBuilderAddBehaviorExtensions.AddSingletonBehavior(ISilverbackBuilder, Func<IServiceProvider, IBehavior>) SilverbackBuilderAddBehaviorExtensions.AddSingletonBehavior(ISilverbackBuilder, IBehavior) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber(ISilverbackBuilder, Delegate, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Action<TMessage>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, Task>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, Object>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, Task<Object>>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Action<IEnumerable<TMessage>>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<IEnumerable<TMessage>, Task>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<IEnumerable<TMessage>, Object>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<IEnumerable<TMessage>, Task<Object>>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Action<TMessage, IServiceProvider>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, IServiceProvider, Task>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<TMessage, IServiceProvider, Object>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Action<IEnumerable<TMessage>, IServiceProvider>, SubscriptionOptions) SilverbackBuilderAddDelegateSubscriberExtensions.AddDelegateSubscriber<TMessage>(ISilverbackBuilder, Func<IEnumerable<TMessage>, IServiceProvider, Object>, SubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddTransientSubscriber(ISilverbackBuilder, Type, Boolean) SilverbackBuilderAddSubscriberExtensions.AddTransientSubscriber(ISilverbackBuilder, Type, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddTransientSubscriber<TSubscriber>(ISilverbackBuilder, Boolean) SilverbackBuilderAddSubscriberExtensions.AddTransientSubscriber<TSubscriber>(ISilverbackBuilder, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddTransientSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, Boolean) SilverbackBuilderAddSubscriberExtensions.AddTransientSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddTransientSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, Boolean) SilverbackBuilderAddSubscriberExtensions.AddTransientSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddScopedSubscriber(ISilverbackBuilder, Type, Boolean) SilverbackBuilderAddSubscriberExtensions.AddScopedSubscriber(ISilverbackBuilder, Type, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddScopedSubscriber<TSubscriber>(ISilverbackBuilder, Boolean) SilverbackBuilderAddSubscriberExtensions.AddScopedSubscriber<TSubscriber>(ISilverbackBuilder, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddScopedSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, Boolean) SilverbackBuilderAddSubscriberExtensions.AddScopedSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddScopedSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, Boolean) SilverbackBuilderAddSubscriberExtensions.AddScopedSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber(ISilverbackBuilder, Type, Boolean) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber(ISilverbackBuilder, Type, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, Boolean) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, Boolean) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber(ISilverbackBuilder, Type, Func<IServiceProvider, Object>, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, Boolean) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, Func<IServiceProvider, TSubscriber>, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber(ISilverbackBuilder, Type, Object, Boolean) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber(ISilverbackBuilder, Type, Object, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, TSubscriber, Boolean) SilverbackBuilderAddSubscriberExtensions.AddSingletonSubscriber<TSubscriber>(ISilverbackBuilder, TSubscriber, TypeSubscriptionOptions) SilverbackBuilderAddSubscriberExtensions.AddSubscribers<TSubscriber>(ISilverbackBuilder, Boolean) SilverbackBuilderAddSubscriberExtensions.AddSubscribers<TSubscriber>(ISilverbackBuilder, TypeSubscriptionOptions) SilverbackBuilderWithLogLevelsExtensions.WithLogLevels(ISilverbackBuilder, Action<ILogLevelConfigurator>) SilverbackBuilderHandleMessageOfTypeExtensions.HandleMessagesOfType<TMessage>(ISilverbackBuilder) SilverbackBuilderHandleMessageOfTypeExtensions.HandleMessagesOfType(ISilverbackBuilder, Type) SilverbackBuilderUseDbContextExtensions.UseDbContext<TDbContext>(ISilverbackBuilder) SilverbackBuilderAddMqttEndpointsExtensions.AddMqttEndpoints(ISilverbackBuilder, Action<IMqttEndpointsConfigurationBuilder>) SilverbackBuilderUseMockedKafkaExtensions.UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) SilverbackBuilderAddKafkaEndpointsExtensions.AddKafkaEndpoints(ISilverbackBuilder, Action<IKafkaEndpointsConfigurationBuilder>) SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions.PublishOutboundMessagesToInternalBus(ISilverbackBuilder) SilverbackBuilderWithCustomHeaderNameExtensions.WithCustomHeaderName(ISilverbackBuilder, String, String) SilverbackBuilderAddBrokerBehaviorExtensions.AddTransientBrokerBehavior(ISilverbackBuilder, Type) SilverbackBuilderAddBrokerBehaviorExtensions.AddTransientBrokerBehavior<TBehavior>(ISilverbackBuilder) SilverbackBuilderAddBrokerBehaviorExtensions.AddTransientBrokerBehavior(ISilverbackBuilder, Func<IServiceProvider, IBrokerBehavior>) SilverbackBuilderAddBrokerBehaviorExtensions.AddSingletonBrokerBehavior(ISilverbackBuilder, Type) SilverbackBuilderAddBrokerBehaviorExtensions.AddSingletonBrokerBehavior<TBehavior>(ISilverbackBuilder) SilverbackBuilderAddBrokerBehaviorExtensions.AddSingletonBrokerBehavior(ISilverbackBuilder, Func<IServiceProvider, IBrokerBehavior>) SilverbackBuilderAddBrokerBehaviorExtensions.AddSingletonBrokerBehavior(ISilverbackBuilder, IBrokerBehavior) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddTransientBrokerCallbackHandler(ISilverbackBuilder, Type) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddTransientBrokerCallbackHandler<THandler>(ISilverbackBuilder) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddTransientBrokerCallbackHandler(ISilverbackBuilder, Func<IServiceProvider, IBrokerCallback>) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddScopedBrokerCallbackHandler(ISilverbackBuilder, Type) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddScopedBrokerCallbackHandler<THandler>(ISilverbackBuilder) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddScopedBrokerCallbackHandler(ISilverbackBuilder, Func<IServiceProvider, IBrokerCallback>) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddSingletonBrokerCallbackHandler(ISilverbackBuilder, Type) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddSingletonBrokerCallbackHandler<THandler>(ISilverbackBuilder) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddSingletonBrokerCallbackHandler(ISilverbackBuilder, Func<IServiceProvider, IBrokerCallback>) SilverbackBuilderAddBrokerCallbackHandlerExtensions.AddSingletonBrokerCallbackHandler(ISilverbackBuilder, IBrokerCallback) SilverbackBuilderAddEndpointsConfiguratorExtensions.AddEndpointsConfigurator<TConfigurator>(ISilverbackBuilder) SilverbackBuilderAddEndpointsConfiguratorExtensions.AddEndpointsConfigurator(ISilverbackBuilder, Type) SilverbackBuilderAddEndpointsConfiguratorExtensions.AddEndpointsConfigurator(ISilverbackBuilder, Func<IServiceProvider, IEndpointsConfigurator>) SilverbackBuilderAddEndpointsExtensions.AddEndpoints(ISilverbackBuilder, Action<IEndpointsConfigurationBuilder>) SilverbackBuilderAddOutboundRouterExtensions.AddTransientOutboundRouter(ISilverbackBuilder, Type) SilverbackBuilderAddOutboundRouterExtensions.AddTransientOutboundRouter<TRouter>(ISilverbackBuilder) SilverbackBuilderAddOutboundRouterExtensions.AddTransientOutboundRouter(ISilverbackBuilder, Func<IServiceProvider, IOutboundRouter>) SilverbackBuilderAddOutboundRouterExtensions.AddScopedOutboundRouter(ISilverbackBuilder, Type) SilverbackBuilderAddOutboundRouterExtensions.AddScopedOutboundRouter<TRouter>(ISilverbackBuilder) SilverbackBuilderAddOutboundRouterExtensions.AddScopedOutboundRouter(ISilverbackBuilder, Func<IServiceProvider, IOutboundRouter>) SilverbackBuilderAddOutboundRouterExtensions.AddSingletonOutboundRouter(ISilverbackBuilder, Type) SilverbackBuilderAddOutboundRouterExtensions.AddSingletonOutboundRouter<TRouter>(ISilverbackBuilder) SilverbackBuilderAddOutboundRouterExtensions.AddSingletonOutboundRouter(ISilverbackBuilder, Func<IServiceProvider, IOutboundRouter>) SilverbackBuilderAddOutboundRouterExtensions.AddSingletonOutboundRouter(ISilverbackBuilder, IOutboundRouter) SilverbackBuilderAddSequenceReaderExtensions.AddTransientSequenceReader(ISilverbackBuilder, Type) SilverbackBuilderAddSequenceReaderExtensions.AddTransientSequenceReader<TReader>(ISilverbackBuilder) SilverbackBuilderAddSequenceReaderExtensions.AddTransientSequenceReader(ISilverbackBuilder, Func<IServiceProvider, ISequenceReader>) SilverbackBuilderAddSequenceReaderExtensions.AddSingletonSequenceReader(ISilverbackBuilder, Type) SilverbackBuilderAddSequenceReaderExtensions.AddSingletonSequenceReader<TReader>(ISilverbackBuilder) SilverbackBuilderAddSequenceReaderExtensions.AddSingletonSequenceReader(ISilverbackBuilder, Func<IServiceProvider, ISequenceReader>) SilverbackBuilderAddSequenceReaderExtensions.AddSingletonSequenceReader(ISilverbackBuilder, ISequenceReader) SilverbackBuilderAddSequenceWriterExtensions.AddTransientSequenceWriter(ISilverbackBuilder, Type) SilverbackBuilderAddSequenceWriterExtensions.AddTransientSequenceWriter<TWriter>(ISilverbackBuilder) SilverbackBuilderAddSequenceWriterExtensions.AddTransientSequenceWriter(ISilverbackBuilder, Func<IServiceProvider, ISequenceWriter>) SilverbackBuilderAddSequenceWriterExtensions.AddSingletonSequenceWriter(ISilverbackBuilder, Type) SilverbackBuilderAddSequenceWriterExtensions.AddSingletonSequenceWriter<TWriter>(ISilverbackBuilder) SilverbackBuilderAddSequenceWriterExtensions.AddSingletonSequenceWriter(ISilverbackBuilder, Func<IServiceProvider, ISequenceWriter>) SilverbackBuilderAddSequenceWriterExtensions.AddSingletonSequenceWriter(ISilverbackBuilder, ISequenceWriter) SilverbackBuilderWithConnectionToExtensions.WithConnectionToMessageBroker(ISilverbackBuilder, Action<IBrokerOptionsBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.IValidatableEndpointSettings.html": {
    "href": "api/Silverback.Messaging.Configuration.IValidatableEndpointSettings.html",
    "title": "Interface IValidatableEndpointSettings | Silverback",
    "keywords": "Interface IValidatableEndpointSettings Declares the Validate method that is used to check the provided settings. Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public interface IValidatableEndpointSettings Methods | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration void Validate()"
  },
  "api/Silverback.Messaging.Configuration.JsonMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.JsonMessageSerializerBuilder.html",
    "title": "Class JsonMessageSerializerBuilder | Silverback",
    "keywords": "Class JsonMessageSerializerBuilder Builds the JsonMessageSerializer or JsonMessageSerializer<TMessage> . Inheritance System.Object JsonMessageSerializerBuilder Implements IJsonMessageSerializerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public class JsonMessageSerializerBuilder : IJsonMessageSerializerBuilder Methods | Improve this doc View source Build() Builds the IMessageSerializer instance. Declaration public IMessageSerializer Build() Returns Type Description IMessageSerializer The IMessageSerializer . | Improve this doc View source UseFixedType(Type) Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration public IJsonMessageSerializerBuilder UseFixedType(Type messageType) Parameters Type Name Description System.Type messageType The type of the message to serialize or deserialize. Returns Type Description IJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseFixedType<TMessage>() Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration public IJsonMessageSerializerBuilder UseFixedType<TMessage>() Returns Type Description IJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the message to serialize or deserialize. | Improve this doc View source WithOptions(JsonSerializerOptions) Specifies the System.Text.Json.JsonSerializerOptions . Declaration public IJsonMessageSerializerBuilder WithOptions(JsonSerializerOptions options) Parameters Type Name Description System.Text.Json.JsonSerializerOptions options The System.Text.Json.JsonSerializerOptions . Returns Type Description IJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Implements IJsonMessageSerializerBuilder"
  },
  "api/Silverback.Messaging.Configuration.Kafka.ConfluentClientConfigProxy.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.ConfluentClientConfigProxy.html",
    "title": "Class ConfluentClientConfigProxy | Silverback",
    "keywords": "Class ConfluentClientConfigProxy Wraps the Confluent.Kafka.ClientConfig . Inheritance System.Object ConfluentClientConfigProxy ConfluentConsumerConfigProxy ConfluentProducerConfigProxy KafkaClientConfig Implements IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public abstract class ConfluentClientConfigProxy : IValidatableEndpointSettings Constructors | Improve this doc View source ConfluentClientConfigProxy(ClientConfig) Initializes a new instance of the ConfluentClientConfigProxy class. Declaration protected ConfluentClientConfigProxy(ClientConfig confluentConfig) Parameters Type Name Description Confluent.Kafka.ClientConfig confluentConfig The Confluent.Kafka.ClientConfig to wrap. Properties | Improve this doc View source Acks This field indicates the number of acknowledgements the leader broker must receive from ISR brokers before responding to the request: Zero=Broker does not send any response/ack to client, One=The leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. All=Broker will block until message is committed by all in sync replicas (ISRs). If there are less than min.insync.replicas (broker configuration) in the ISR set the produce request will fail. Declaration public Acks? Acks { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.Acks > | Improve this doc View source ApiVersionFallbackMs Dictates how long the broker.version.fallback fallback is used in the case the ApiVersionRequest fails. NOTE : The ApiVersionRequest is only issued when a new connection to the broker is made (such as after an upgrade). default: 0 importance: medium Declaration public int? ApiVersionFallbackMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source ApiVersionRequest Request broker's supported API versions to adjust functionality to available protocol features. If set to false, or the ApiVersionRequest fails, the fallback version broker.version.fallback will be used. NOTE : Depends on broker version >=0.10.0. If the request is not supported by (an older) broker the broker.version.fallback fallback is used. default: true importance: high Declaration public bool? ApiVersionRequest { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source ApiVersionRequestTimeoutMs Timeout for broker API version requests. default: 10000 importance: low Declaration public int? ApiVersionRequestTimeoutMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source BootstrapServers Initial list of brokers as a CSV list of broker host or host:port. The application may also use rd_kafka_brokers_add() to add brokers during runtime. default: '' importance: high Declaration public string BootstrapServers { get; set; } Property Value Type Description System.String | Improve this doc View source BrokerAddressFamily Allowed broker IP address families: any, v4, v6 default: any importance: low Declaration public BrokerAddressFamily? BrokerAddressFamily { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.BrokerAddressFamily > | Improve this doc View source BrokerAddressTtl How long to cache the broker address resolving results (milliseconds). default: 1000 importance: low Declaration public int? BrokerAddressTtl { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source BrokerVersionFallback Older broker versions (before 0.10.0) provide no way for a client to query for supported protocol features (ApiVersionRequest, see api.version.request ) making it impossible for the client to know what features it may use. As a workaround a user may set this property to the expected broker version and the client will automatically adjust its feature set accordingly if the ApiVersionRequest fails (or is disabled). The fallback broker version will be used for api.version.fallback.ms . Valid values are: 0.9.0, 0.8.2, 0.8.1, 0.8.0. Any other value >= 0.10, such as 0.10.2.1, enables ApiVersionRequests. default: 0.10.0 importance: medium Declaration public string BrokerVersionFallback { get; set; } Property Value Type Description System.String | Improve this doc View source CancellationDelayMaxMs The maximum length of time (in milliseconds) before a cancellation request is acted on. Low values may result in measurably higher CPU usage. default: 100 range: 1 <= dotnet.cancellation.delay.max.ms <= 10000 importance: low Declaration public int CancellationDelayMaxMs { set; } Property Value Type Description System.Int32 | Improve this doc View source ClientId Client identifier. default: rdkafka importance: low Declaration public string ClientId { get; set; } Property Value Type Description System.String | Improve this doc View source ClientRack A rack identifier for this client. This can be any string value which indicates where this client is physically located. It corresponds with the broker config broker.rack . default: '' importance: low Declaration public string ClientRack { get; set; } Property Value Type Description System.String | Improve this doc View source ConfluentConfig Gets the Confluent.Kafka.ClientConfig instance being wrapped. Declaration protected ClientConfig ConfluentConfig { get; } Property Value Type Description Confluent.Kafka.ClientConfig | Improve this doc View source ConnectionsMaxIdleMs Close broker connections after the specified time of inactivity. Disable with 0. If this property is left at its default value some heuristics are performed to determine a suitable default value, this is currently limited to identifying brokers on Azure (see librdkafka issue #3109 for more info). default: 0 importance: medium Declaration public int? ConnectionsMaxIdleMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source Debug A comma-separated list of debug contexts to enable. Detailed Producer debugging: broker,topic,msg. Consumer: consumer,cgrp,topic,fetch default: '' importance: medium Declaration public string Debug { get; set; } Property Value Type Description System.String | Improve this doc View source EnableRandomSeed If enabled librdkafka will initialize the PRNG with srand(current_time.milliseconds) on the first invocation of rd_kafka_new() (required only if rand_r() is not available on your platform). If disabled the application must call srand() prior to calling rd_kafka_new(). default: true importance: low Declaration public bool? EnableRandomSeed { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source EnableSaslOauthbearerUnsecureJwt Enable the builtin unsecure JWT OAUTHBEARER token handler if no oauthbearer_refresh_cb has been set. This builtin handler should only be used for development or testing, and not in production. default: false importance: low Declaration public bool? EnableSaslOauthbearerUnsecureJwt { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source EnableSslCertificateVerification Enable OpenSSL's builtin broker (server) certificate verification. This verification can be extended by the application by implementing a certificate_verify_cb. default: true importance: low Declaration public bool? EnableSslCertificateVerification { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source InternalTerminationSignal Signal that librdkafka will use to quickly terminate on rd_kafka_destroy(). If this signal is not set then there will be a delay before rd_kafka_wait_destroyed() returns true as internal threads are timing out their system calls. If this signal is set however the delay will be minimal. The application should mask this signal as an internal signal handler is installed. default: 0 importance: low Declaration public int? InternalTerminationSignal { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source LogConnectionClose Log broker disconnects. It might be useful to turn this off when interacting with 0.9 brokers with an aggressive connection.max.idle.ms value. default: true importance: low Declaration public bool? LogConnectionClose { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source LogQueue Disable spontaneous log_cb from internal librdkafka threads, instead enqueue log messages on queue set with rd_kafka_set_log_queue() and serve log callbacks or events through the standard poll APIs. NOTE : Log messages will linger in a temporary queue until the log queue has been set. default: false importance: low Declaration public bool? LogQueue { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source LogThreadName Print internal thread name in log messages (useful for debugging librdkafka internals) default: true importance: low Declaration public bool? LogThreadName { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source MaxInFlight Maximum number of in-flight requests per broker connection. This is a generic property applied to all broker communication, however it is primarily relevant to produce requests. In particular, note that other mechanisms limit the number of outstanding consumer fetch request per broker to one. default: 1000000 importance: low Declaration public int? MaxInFlight { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source MessageCopyMaxBytes Maximum size for message to be copied to buffer. Messages larger than this will be passed by reference (zero-copy) at the expense of larger iovecs. default: 65535 importance: low Declaration public int? MessageCopyMaxBytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source MessageMaxBytes Maximum Kafka protocol request message size. Due to differing framing overhead between protocol versions the producer is unable to reliably enforce a strict max message limit at produce time and may exceed the maximum size by one message in protocol ProduceRequests, the broker will enforce the the topic's max.message.bytes limit (see Apache Kafka documentation). default: 1000000 importance: medium Declaration public int? MessageMaxBytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source MetadataMaxAgeMs Metadata cache max age. Defaults to topic.metadata.refresh.interval.ms * 3 default: 900000 importance: low Declaration public int? MetadataMaxAgeMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source PluginLibraryPaths List of plugin libraries to load (; separated). The library search path is platform dependent (see dlopen(3) for Unix and LoadLibrary() for Windows). If no filename extension is specified the platform-specific extension (such as .dll or .so) will be appended automatically. default: '' importance: low Declaration public string PluginLibraryPaths { get; set; } Property Value Type Description System.String | Improve this doc View source ReceiveMessageMaxBytes Maximum Kafka protocol response message size. This serves as a safety precaution to avoid memory exhaustion in case of protocol hickups. This value must be at least fetch.max.bytes + 512 to allow for protocol overhead; the value is adjusted automatically unless the configuration property is explicitly set. default: 100000000 importance: medium Declaration public int? ReceiveMessageMaxBytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source ReconnectBackoffMaxMs The maximum time to wait before reconnecting to a broker after the connection has been closed. default: 10000 importance: medium Declaration public int? ReconnectBackoffMaxMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source ReconnectBackoffMs The initial time to wait before reconnecting to a broker after the connection has been closed. The time is increased exponentially until reconnect.backoff.max.ms is reached. -25% to +50% jitter is applied to each reconnect backoff. A value of 0 disables the backoff and reconnects immediately. default: 100 importance: medium Declaration public int? ReconnectBackoffMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source SaslKerberosKeytab Path to Kerberos keytab file. This configuration property is only used as a variable in sasl.kerberos.kinit.cmd as ... -t &quot;%{sasl.kerberos.keytab}&quot; . default: '' importance: low Declaration public string SaslKerberosKeytab { get; set; } Property Value Type Description System.String | Improve this doc View source SaslKerberosKinitCmd Shell command to refresh or acquire the client's Kerberos ticket. This command is executed on client creation and every sasl.kerberos.min.time.before.relogin (0=disable). %{config.prop.name} is replaced by corresponding config object value. default: kinit -R -t \"%{sasl.kerberos.keytab}\" -k %{sasl.kerberos.principal} || kinit -t \"%{sasl.kerberos.keytab}\" -k %{sasl.kerberos.principal} importance: low Declaration public string SaslKerberosKinitCmd { get; set; } Property Value Type Description System.String | Improve this doc View source SaslKerberosMinTimeBeforeRelogin Minimum time in milliseconds between key refresh attempts. Disable automatic key refresh by setting this property to 0. default: 60000 importance: low Declaration public int? SaslKerberosMinTimeBeforeRelogin { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source SaslKerberosPrincipal This client's Kerberos principal name. (Not supported on Windows, will use the logon user's principal). default: kafkaclient importance: low Declaration public string SaslKerberosPrincipal { get; set; } Property Value Type Description System.String | Improve this doc View source SaslKerberosServiceName Kerberos principal name that Kafka runs as, not including /hostname@REALM default: kafka importance: low Declaration public string SaslKerberosServiceName { get; set; } Property Value Type Description System.String | Improve this doc View source SaslMechanism SASL mechanism to use for authentication. Supported: GSSAPI, PLAIN, SCRAM-SHA-256, SCRAM-SHA-512. NOTE : Despite the name, you may not configure more than one mechanism. Declaration public SaslMechanism? SaslMechanism { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.SaslMechanism > | Improve this doc View source SaslOauthbearerConfig SASL/OAUTHBEARER configuration. The format is implementation-dependent and must be parsed accordingly. The default unsecured token implementation (see https://tools.ietf.org/html/rfc7515#appendix-A.5 ) recognizes space-separated name=value pairs with valid names including principalClaimName, principal, scopeClaimName, scope, and lifeSeconds. The default value for principalClaimName is \"sub\", the default value for scopeClaimName is \"scope\", and the default value for lifeSeconds is 3600. The scope value is CSV format with the default value being no/empty scope. For example: principalClaimName=azp principal=admin scopeClaimName=roles scope=role1,role2 lifeSeconds=600 . In addition, SASL extensions can be communicated to the broker via extension_NAME=value . For example: principal=admin extension_traceId=123 default: '' importance: low Declaration public string SaslOauthbearerConfig { get; set; } Property Value Type Description System.String | Improve this doc View source SaslPassword SASL password for use with the PLAIN and SASL-SCRAM-.. mechanism default: '' importance: high Declaration public string SaslPassword { get; set; } Property Value Type Description System.String | Improve this doc View source SaslUsername SASL username for use with the PLAIN and SASL-SCRAM-.. mechanisms default: '' importance: high Declaration public string SaslUsername { get; set; } Property Value Type Description System.String | Improve this doc View source SecurityProtocol Protocol used to communicate with brokers. default: plaintext importance: high Declaration public SecurityProtocol? SecurityProtocol { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.SecurityProtocol > | Improve this doc View source SocketKeepaliveEnable Enable TCP keep-alives (SO_KEEPALIVE) on broker sockets default: false importance: low Declaration public bool? SocketKeepaliveEnable { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source SocketMaxFails Disconnect from broker when this number of send failures (e.g., timed out requests) is reached. Disable with 0. WARNING: It is highly recommended to leave this setting at its default value of 1 to avoid the client and broker to become desynchronized in case of request timeouts. NOTE: The connection is automatically re-established. default: 1 importance: low Declaration public int? SocketMaxFails { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source SocketNagleDisable Disable the Nagle algorithm (TCP_NODELAY) on broker sockets. default: false importance: low Declaration public bool? SocketNagleDisable { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source SocketReceiveBufferBytes Broker socket receive buffer size. System default is used if 0. default: 0 importance: low Declaration public int? SocketReceiveBufferBytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source SocketSendBufferBytes Broker socket send buffer size. System default is used if 0. default: 0 importance: low Declaration public int? SocketSendBufferBytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source SocketTimeoutMs Default timeout for network requests. Producer: ProduceRequests will use the lesser value of socket.timeout.ms and remaining message.timeout.ms for the first message in the batch. Consumer: FetchRequests will use fetch.wait.max.ms + socket.timeout.ms . Admin: Admin requests will use socket.timeout.ms or explicitly set rd_kafka_AdminOptions_set_operation_timeout() value. default: 60000 importance: low Declaration public int? SocketTimeoutMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source SslCaCertificateStores Comma-separated list of Windows Certificate stores to load CA certificates from. Certificates will be loaded in the same order as stores are specified. If no certificates can be loaded from any of the specified stores an error is logged and the OpenSSL library's default CA location is used instead. Store names are typically one or more of: MY, Root, Trust, CA. default: Root importance: low Declaration public string SslCaCertificateStores { get; set; } Property Value Type Description System.String | Improve this doc View source SslCaLocation File or directory path to CA certificate(s) for verifying the broker's key. Defaults: On Windows the system's CA certificates are automatically looked up in the Windows Root certificate store. On Mac OSX this configuration defaults to probe . It is recommended to install openssl using Homebrew, to provide CA certificates. On Linux install the distribution's ca-certificates package. If OpenSSL is statically linked or ssl.ca.location is set to probe a list of standard paths will be probed and the first one found will be used as the default CA certificate location path. If OpenSSL is dynamically linked the OpenSSL library's default path will be used (see OPENSSLDIR in openssl version -a ). default: '' importance: low Declaration public string SslCaLocation { get; set; } Property Value Type Description System.String | Improve this doc View source SslCertificateLocation Path to client's public key (PEM) used for authentication. default: '' importance: low Declaration public string SslCertificateLocation { get; set; } Property Value Type Description System.String | Improve this doc View source SslCertificatePem Client's public key string (PEM format) used for authentication. default: '' importance: low Declaration public string SslCertificatePem { get; set; } Property Value Type Description System.String | Improve this doc View source SslCipherSuites A cipher suite is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. See manual page for ciphers(1) and `SSL_CTX_set_cipher_list(3). default: '' importance: low Declaration public string SslCipherSuites { get; set; } Property Value Type Description System.String | Improve this doc View source SslCrlLocation Path to CRL for verifying broker's certificate validity. default: '' importance: low Declaration public string SslCrlLocation { get; set; } Property Value Type Description System.String | Improve this doc View source SslCurvesList The supported-curves extension in the TLS ClientHello message specifies the curves (standard/named, or 'explicit' GF(2^k) or GF(p)) the client is willing to have the server use. See manual page for SSL_CTX_set1_curves_list(3) . OpenSSL >= 1.0.2 required. default: '' importance: low Declaration public string SslCurvesList { get; set; } Property Value Type Description System.String | Improve this doc View source SslEndpointIdentificationAlgorithm Endpoint identification algorithm to validate broker hostname using broker certificate. https - Server (broker) hostname verification as specified in RFC2818. none - No endpoint verification. OpenSSL >= 1.0.2 required. default: none importance: low Declaration public SslEndpointIdentificationAlgorithm? SslEndpointIdentificationAlgorithm { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.SslEndpointIdentificationAlgorithm > | Improve this doc View source SslEngineId OpenSSL engine id is the name used for loading engine. default: dynamic importance: low Declaration public string SslEngineId { get; set; } Property Value Type Description System.String | Improve this doc View source SslEngineLocation Path to OpenSSL engine library. OpenSSL >= 1.1.0 required. default: '' importance: low Declaration public string SslEngineLocation { get; set; } Property Value Type Description System.String | Improve this doc View source SslKeyLocation Path to client's private key (PEM) used for authentication. default: '' importance: low Declaration public string SslKeyLocation { get; set; } Property Value Type Description System.String | Improve this doc View source SslKeyPassword Private key passphrase (for use with ssl.key.location and set_ssl_cert() ) default: '' importance: low Declaration public string SslKeyPassword { get; set; } Property Value Type Description System.String | Improve this doc View source SslKeyPem Client's private key string (PEM format) used for authentication. default: '' importance: low Declaration public string SslKeyPem { get; set; } Property Value Type Description System.String | Improve this doc View source SslKeystoreLocation Path to client's keystore (PKCS#12) used for authentication. default: '' importance: low Declaration public string SslKeystoreLocation { get; set; } Property Value Type Description System.String | Improve this doc View source SslKeystorePassword Client's keystore (PKCS#12) password. default: '' importance: low Declaration public string SslKeystorePassword { get; set; } Property Value Type Description System.String | Improve this doc View source SslSigalgsList The client uses the TLS ClientHello signature_algorithms extension to indicate to the server which signature/hash algorithm pairs may be used in digital signatures. See manual page for SSL_CTX_set1_sigalgs_list(3) . OpenSSL >= 1.0.2 required. default: '' importance: low Declaration public string SslSigalgsList { get; set; } Property Value Type Description System.String | Improve this doc View source StatisticsIntervalMs librdkafka statistics emit interval. The application also needs to register a stats callback using rd_kafka_conf_set_stats_cb() . The granularity is 1000ms. A value of 0 disables statistics. default: 0 importance: high Declaration public int? StatisticsIntervalMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source TopicBlacklist Topic blacklist, a comma-separated list of regular expressions for matching topic names that should be ignored in broker metadata information as if the topics did not exist. default: '' importance: low Declaration public string TopicBlacklist { get; set; } Property Value Type Description System.String | Improve this doc View source TopicMetadataPropagationMaxMs Apache Kafka topic creation is asynchronous and it takes some time for a new topic to propagate throughout the cluster to all brokers. If a client requests topic metadata after manual topic creation but before the topic has been fully propagated to the broker the client is requesting metadata from, the topic will seem to be non-existent and the client will mark the topic as such, failing queued produced messages with ERR__UNKNOWN_TOPIC . This setting delays marking a topic as non-existent until the configured propagation max time has passed. The maximum propagation time is calculated from the time the topic is first referenced in the client, e.g., on produce(). default: 30000 importance: low Declaration public int? TopicMetadataPropagationMaxMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source TopicMetadataRefreshFastIntervalMs When a topic loses its leader a new metadata request will be enqueued with this initial interval, exponentially increasing until the topic metadata has been refreshed. This is used to recover quickly from transitioning leader brokers. default: 250 importance: low Declaration public int? TopicMetadataRefreshFastIntervalMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source TopicMetadataRefreshIntervalMs Period of time in milliseconds at which topic and broker metadata is refreshed in order to proactively discover any new brokers, topics, partitions or partition leader changes. Use -1 to disable the intervalled refresh (not recommended). If there are no locally referenced topics (no topic objects created, no messages produced, no subscription or no assignment) then only the broker list will be refreshed every interval but no more often than every 10s. default: 300000 importance: low Declaration public int? TopicMetadataRefreshIntervalMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source TopicMetadataRefreshSparse Sparse metadata requests (consumes less network bandwidth) default: true importance: low Declaration public bool? TopicMetadataRefreshSparse { get; set; } Property Value Type Description System.Nullable < System.Boolean > Methods | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public abstract void Validate() Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Configuration.Kafka.ConfluentConsumerConfigProxy.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.ConfluentConsumerConfigProxy.html",
    "title": "Class ConfluentConsumerConfigProxy | Silverback",
    "keywords": "Class ConfluentConsumerConfigProxy Wraps the Confluent.Kafka.ConsumerConfig . Inheritance System.Object ConfluentClientConfigProxy ConfluentConsumerConfigProxy KafkaConsumerConfig Implements IValidatableEndpointSettings Inherited Members ConfluentClientConfigProxy.SaslMechanism ConfluentClientConfigProxy.Acks ConfluentClientConfigProxy.ClientId ConfluentClientConfigProxy.BootstrapServers ConfluentClientConfigProxy.MessageMaxBytes ConfluentClientConfigProxy.MessageCopyMaxBytes ConfluentClientConfigProxy.ReceiveMessageMaxBytes ConfluentClientConfigProxy.MaxInFlight ConfluentClientConfigProxy.TopicMetadataRefreshIntervalMs ConfluentClientConfigProxy.MetadataMaxAgeMs ConfluentClientConfigProxy.TopicMetadataRefreshFastIntervalMs ConfluentClientConfigProxy.TopicMetadataRefreshSparse ConfluentClientConfigProxy.TopicMetadataPropagationMaxMs ConfluentClientConfigProxy.TopicBlacklist ConfluentClientConfigProxy.Debug ConfluentClientConfigProxy.SocketTimeoutMs ConfluentClientConfigProxy.SocketSendBufferBytes ConfluentClientConfigProxy.SocketReceiveBufferBytes ConfluentClientConfigProxy.SocketKeepaliveEnable ConfluentClientConfigProxy.SocketNagleDisable ConfluentClientConfigProxy.SocketMaxFails ConfluentClientConfigProxy.BrokerAddressTtl ConfluentClientConfigProxy.BrokerAddressFamily ConfluentClientConfigProxy.ConnectionsMaxIdleMs ConfluentClientConfigProxy.ReconnectBackoffMs ConfluentClientConfigProxy.ReconnectBackoffMaxMs ConfluentClientConfigProxy.StatisticsIntervalMs ConfluentClientConfigProxy.LogQueue ConfluentClientConfigProxy.LogThreadName ConfluentClientConfigProxy.EnableRandomSeed ConfluentClientConfigProxy.LogConnectionClose ConfluentClientConfigProxy.InternalTerminationSignal ConfluentClientConfigProxy.ApiVersionRequest ConfluentClientConfigProxy.ApiVersionRequestTimeoutMs ConfluentClientConfigProxy.ApiVersionFallbackMs ConfluentClientConfigProxy.BrokerVersionFallback ConfluentClientConfigProxy.SecurityProtocol ConfluentClientConfigProxy.SslCipherSuites ConfluentClientConfigProxy.SslCurvesList ConfluentClientConfigProxy.SslSigalgsList ConfluentClientConfigProxy.SslKeyLocation ConfluentClientConfigProxy.SslKeyPassword ConfluentClientConfigProxy.SslKeyPem ConfluentClientConfigProxy.SslCertificateLocation ConfluentClientConfigProxy.SslCertificatePem ConfluentClientConfigProxy.SslCaLocation ConfluentClientConfigProxy.SslCaCertificateStores ConfluentClientConfigProxy.SslCrlLocation ConfluentClientConfigProxy.SslKeystoreLocation ConfluentClientConfigProxy.SslKeystorePassword ConfluentClientConfigProxy.SslEngineLocation ConfluentClientConfigProxy.SslEngineId ConfluentClientConfigProxy.EnableSslCertificateVerification ConfluentClientConfigProxy.SslEndpointIdentificationAlgorithm ConfluentClientConfigProxy.SaslKerberosServiceName ConfluentClientConfigProxy.SaslKerberosPrincipal ConfluentClientConfigProxy.SaslKerberosKinitCmd ConfluentClientConfigProxy.SaslKerberosKeytab ConfluentClientConfigProxy.SaslKerberosMinTimeBeforeRelogin ConfluentClientConfigProxy.SaslUsername ConfluentClientConfigProxy.SaslPassword ConfluentClientConfigProxy.SaslOauthbearerConfig ConfluentClientConfigProxy.EnableSaslOauthbearerUnsecureJwt ConfluentClientConfigProxy.PluginLibraryPaths ConfluentClientConfigProxy.ClientRack ConfluentClientConfigProxy.CancellationDelayMaxMs ConfluentClientConfigProxy.Validate() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public abstract class ConfluentConsumerConfigProxy : ConfluentClientConfigProxy, IValidatableEndpointSettings Constructors | Improve this doc View source ConfluentConsumerConfigProxy(ClientConfig) Initializes a new instance of the ConfluentConsumerConfigProxy class. Declaration protected ConfluentConsumerConfigProxy(ClientConfig clientConfig = null) Parameters Type Name Description Confluent.Kafka.ClientConfig clientConfig The Confluent.Kafka.ClientConfig to be used to initialize the Confluent.Kafka.ConsumerConfig . Properties | Improve this doc View source AllowAutoCreateTopics Allow automatic topic creation on the broker when subscribing to or assigning non-existent topics. The broker must also be configured with auto.create.topics.enable=true for this configuraiton to take effect. Note: The default value (false) is different from the Java consumer (true). Requires broker version >= 0.11.0.0, for older broker versions only the broker configuration applies. default: false importance: low Declaration public bool? AllowAutoCreateTopics { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source AutoCommitIntervalMs The frequency in milliseconds that the consumer offsets are committed (written) to offset storage. (0 = disable). This setting is used by the high-level consumer. default: 5000 importance: medium Declaration public int? AutoCommitIntervalMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source AutoOffsetReset Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error (ERR__AUTO_OFFSET_RESET) which is retrieved by consuming messages and checking 'message->err'. default: largest importance: high Declaration public AutoOffsetReset? AutoOffsetReset { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.AutoOffsetReset > | Improve this doc View source CheckCrcs Verify CRC32 of consumed messages, ensuring no on-the-wire or on-disk corruption to the messages occurred. This check comes at slightly increased CPU usage. default: false importance: medium Declaration public bool? CheckCrcs { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source ConfluentConfig Gets the Confluent.Kafka.ClientConfig instance being wrapped. Declaration protected ConsumerConfig ConfluentConfig { get; } Property Value Type Description Confluent.Kafka.ConsumerConfig | Improve this doc View source ConsumeResultFields A comma separated list of fields that may be optionally set in Confluent.Kafka.ConsumeResult<TKey, TValue> objects returned by the Confluent.Kafka.Consumer`2.Consume(System.TimeSpan) method. Disabling fields that you do not require will improve throughput and reduce memory consumption. Allowed values: headers, timestamp, topic, all, none default: all importance: low Declaration public string ConsumeResultFields { set; } Property Value Type Description System.String | Improve this doc View source CoordinatorQueryIntervalMs How often to query for the current client group coordinator. If the currently assigned coordinator is down the configured query interval will be divided by ten to more quickly recover in case of coordinator reassignment. default: 600000 importance: low Declaration public int? CoordinatorQueryIntervalMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source EnableAutoCommit Automatically and periodically commit offsets in the background. Note: setting this to false does not prevent the consumer from fetching previously committed start offsets. To circumvent this behaviour set specific start offsets per partition in the call to assign(). default: true importance: high Declaration public bool? EnableAutoCommit { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source EnableAutoOffsetStore Automatically store offset of last message provided to application. The offset store is an in-memory store of the next offset to (auto-)commit for each partition. default: true importance: high Declaration public bool? EnableAutoOffsetStore { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source EnablePartitionEof Emit RD_KAFKA_RESP_ERR__PARTITION_EOF event whenever the consumer reaches the end of a partition. default: false importance: low Declaration public bool? EnablePartitionEof { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source FetchErrorBackoffMs How long to postpone the next fetch request for a topic+partition in case of a fetch error. default: 500 importance: medium Declaration public int? FetchErrorBackoffMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source FetchMaxBytes Maximum amount of data the broker shall return for a Fetch request. Messages are fetched in batches by the consumer and if the first message batch in the first non-empty partition of the Fetch request is larger than this value, then the message batch will still be returned to ensure the consumer can make progress. The maximum message batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (broker topic config). fetch.max.bytes is automatically adjusted upwards to be at least message.max.bytes (consumer config). default: 52428800 importance: medium Declaration public int? FetchMaxBytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source FetchMinBytes Minimum number of bytes the broker responds with. If fetch.wait.max.ms expires the accumulated data will be sent to the client regardless of this setting. default: 1 importance: low Declaration public int? FetchMinBytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source FetchWaitMaxMs Maximum time the broker may wait to fill the Fetch response with fetch.min.bytes of messages. default: 500 importance: low Declaration public int? FetchWaitMaxMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source GroupId Client group id string. All clients sharing the same group.id belong to the same group. default: '' importance: high Declaration public string GroupId { get; set; } Property Value Type Description System.String | Improve this doc View source GroupInstanceId Enable static group membership. Static group members are able to leave and rejoin a group within the configured session.timeout.ms without prompting a group rebalance. This should be used in combination with a larger session.timeout.ms to avoid group rebalances caused by transient unavailability (e.g. process restarts). Requires broker version >= 2.3.0. default: '' importance: medium Declaration public string GroupInstanceId { get; set; } Property Value Type Description System.String | Improve this doc View source GroupProtocolType Group protocol type. NOTE: Currently, the only supported group protocol type is consumer . default: consumer importance: low Declaration public string GroupProtocolType { get; set; } Property Value Type Description System.String | Improve this doc View source HeartbeatIntervalMs Group session keepalive heartbeat interval. default: 3000 importance: low Declaration public int? HeartbeatIntervalMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source IsolationLevel Controls how to read messages written transactionally: read_committed - only return transactional messages which have been committed. read_uncommitted - return all messages, even transactional messages which have been aborted. default: read_committed importance: high Declaration public IsolationLevel? IsolationLevel { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.IsolationLevel > | Improve this doc View source MaxPartitionFetchBytes Initial maximum number of bytes per topic+partition to request when fetching messages from the broker. If the client encounters a message larger than this value it will gradually try to increase it until the entire message can be fetched. default: 1048576 importance: medium Declaration public int? MaxPartitionFetchBytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source MaxPollIntervalMs Maximum allowed time between calls to consume messages (e.g., rd_kafka_consumer_poll()) for high-level consumers. If this interval is exceeded the consumer is considered failed and the group will rebalance in order to reassign the partitions to another consumer group member. Warning: Offset commits may be not possible at this point. Note: It is recommended to set enable.auto.offset.store=false for long-time processing applications and then explicitly store offsets (using offsets_store()) after message processing, to make sure offsets are not auto-committed prior to processing has finished. The interval is checked two times per second. See KIP-62 for more information. default: 300000 importance: high Declaration public int? MaxPollIntervalMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source PartitionAssignmentStrategy The name of one or more partition assignment strategies. The elected group leader will use a strategy supported by all members of the group to assign partitions to group members. If there is more than one eligible strategy, preference is determined by the order of this list (strategies earlier in the list have higher priority). Cooperative and non-cooperative (eager) strategies must not be mixed. Available strategies: range, roundrobin, cooperative-sticky. default: range,roundrobin importance: medium Declaration public PartitionAssignmentStrategy? PartitionAssignmentStrategy { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.PartitionAssignmentStrategy > | Improve this doc View source QueuedMaxMessagesKbytes Maximum number of kilobytes of queued pre-fetched messages in the local consumer queue. If using the high-level consumer this setting applies to the single consumer queue, regardless of the number of partitions. When using the legacy simple consumer or when separate partition queues are used this setting applies per partition. This value may be overshot by fetch.message.max.bytes. This property has higher priority than queued.min.messages. default: 65536 importance: medium Declaration public int? QueuedMaxMessagesKbytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source QueuedMinMessages Minimum number of messages per topic+partition librdkafka tries to maintain in the local consumer queue. default: 100000 importance: medium Declaration public int? QueuedMinMessages { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source SessionTimeoutMs Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms) to indicate its liveness to the broker. If no hearts are received by the broker for a group member within the session timeout, the broker will remove the consumer from the group and trigger a rebalance. The allowed range is configured with the broker configuration properties group.min.session.timeout.ms and group.max.session.timeout.ms . Also see max.poll.interval.ms . default: 45000 importance: high Declaration public int? SessionTimeoutMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Configuration.Kafka.ConfluentProducerConfigProxy.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.ConfluentProducerConfigProxy.html",
    "title": "Class ConfluentProducerConfigProxy | Silverback",
    "keywords": "Class ConfluentProducerConfigProxy Wraps the Confluent.Kafka.ProducerConfig . Inheritance System.Object ConfluentClientConfigProxy ConfluentProducerConfigProxy KafkaProducerConfig Implements IValidatableEndpointSettings Inherited Members ConfluentClientConfigProxy.SaslMechanism ConfluentClientConfigProxy.Acks ConfluentClientConfigProxy.ClientId ConfluentClientConfigProxy.BootstrapServers ConfluentClientConfigProxy.MessageMaxBytes ConfluentClientConfigProxy.MessageCopyMaxBytes ConfluentClientConfigProxy.ReceiveMessageMaxBytes ConfluentClientConfigProxy.MaxInFlight ConfluentClientConfigProxy.TopicMetadataRefreshIntervalMs ConfluentClientConfigProxy.MetadataMaxAgeMs ConfluentClientConfigProxy.TopicMetadataRefreshFastIntervalMs ConfluentClientConfigProxy.TopicMetadataRefreshSparse ConfluentClientConfigProxy.TopicMetadataPropagationMaxMs ConfluentClientConfigProxy.TopicBlacklist ConfluentClientConfigProxy.Debug ConfluentClientConfigProxy.SocketTimeoutMs ConfluentClientConfigProxy.SocketSendBufferBytes ConfluentClientConfigProxy.SocketReceiveBufferBytes ConfluentClientConfigProxy.SocketKeepaliveEnable ConfluentClientConfigProxy.SocketNagleDisable ConfluentClientConfigProxy.SocketMaxFails ConfluentClientConfigProxy.BrokerAddressTtl ConfluentClientConfigProxy.BrokerAddressFamily ConfluentClientConfigProxy.ConnectionsMaxIdleMs ConfluentClientConfigProxy.ReconnectBackoffMs ConfluentClientConfigProxy.ReconnectBackoffMaxMs ConfluentClientConfigProxy.StatisticsIntervalMs ConfluentClientConfigProxy.LogQueue ConfluentClientConfigProxy.LogThreadName ConfluentClientConfigProxy.EnableRandomSeed ConfluentClientConfigProxy.LogConnectionClose ConfluentClientConfigProxy.InternalTerminationSignal ConfluentClientConfigProxy.ApiVersionRequest ConfluentClientConfigProxy.ApiVersionRequestTimeoutMs ConfluentClientConfigProxy.ApiVersionFallbackMs ConfluentClientConfigProxy.BrokerVersionFallback ConfluentClientConfigProxy.SecurityProtocol ConfluentClientConfigProxy.SslCipherSuites ConfluentClientConfigProxy.SslCurvesList ConfluentClientConfigProxy.SslSigalgsList ConfluentClientConfigProxy.SslKeyLocation ConfluentClientConfigProxy.SslKeyPassword ConfluentClientConfigProxy.SslKeyPem ConfluentClientConfigProxy.SslCertificateLocation ConfluentClientConfigProxy.SslCertificatePem ConfluentClientConfigProxy.SslCaLocation ConfluentClientConfigProxy.SslCaCertificateStores ConfluentClientConfigProxy.SslCrlLocation ConfluentClientConfigProxy.SslKeystoreLocation ConfluentClientConfigProxy.SslKeystorePassword ConfluentClientConfigProxy.SslEngineLocation ConfluentClientConfigProxy.SslEngineId ConfluentClientConfigProxy.EnableSslCertificateVerification ConfluentClientConfigProxy.SslEndpointIdentificationAlgorithm ConfluentClientConfigProxy.SaslKerberosServiceName ConfluentClientConfigProxy.SaslKerberosPrincipal ConfluentClientConfigProxy.SaslKerberosKinitCmd ConfluentClientConfigProxy.SaslKerberosKeytab ConfluentClientConfigProxy.SaslKerberosMinTimeBeforeRelogin ConfluentClientConfigProxy.SaslUsername ConfluentClientConfigProxy.SaslPassword ConfluentClientConfigProxy.SaslOauthbearerConfig ConfluentClientConfigProxy.EnableSaslOauthbearerUnsecureJwt ConfluentClientConfigProxy.PluginLibraryPaths ConfluentClientConfigProxy.ClientRack ConfluentClientConfigProxy.CancellationDelayMaxMs ConfluentClientConfigProxy.Validate() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public abstract class ConfluentProducerConfigProxy : ConfluentClientConfigProxy, IValidatableEndpointSettings Constructors | Improve this doc View source ConfluentProducerConfigProxy(ClientConfig) Initializes a new instance of the ConfluentProducerConfigProxy class. Declaration protected ConfluentProducerConfigProxy(ClientConfig clientConfig = null) Parameters Type Name Description Confluent.Kafka.ClientConfig clientConfig The Confluent.Kafka.ClientConfig to be used to initialize the Confluent.Kafka.ProducerConfig . Properties | Improve this doc View source BatchNumMessages Maximum number of messages batched in one MessageSet. The total MessageSet size is also limited by batch.size and message.max.bytes. default: 10000 importance: medium Declaration public int? BatchNumMessages { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source BatchSize Maximum size (in bytes) of all messages batched in one MessageSet, including protocol framing overhead. This limit is applied after the first message has been added to the batch, regardless of the first message's size, this is to ensure that messages that exceed batch.size are produced. The total MessageSet size is also limited by batch.num.messages and message.max.bytes. default: 1000000 importance: medium Declaration public int? BatchSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source CompressionLevel Compression level parameter for algorithm selected by configuration property compression.codec . Higher values will result in better compression at the cost of more CPU usage. Usable range is algorithm-dependent: [0-9] for gzip; [0-12] for lz4; only 0 for snappy; -1 = codec-dependent default compression level. default: -1 importance: medium Declaration public int? CompressionLevel { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source CompressionType compression codec to use for compressing message sets. This is the default value for all topics, may be overridden by the topic configuration property compression.codec . default: none importance: medium Declaration public CompressionType? CompressionType { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.CompressionType > | Improve this doc View source ConfluentConfig Gets the Confluent.Kafka.ClientConfig instance being wrapped. Declaration protected ProducerConfig ConfluentConfig { get; } Property Value Type Description Confluent.Kafka.ProducerConfig | Improve this doc View source DeliveryReportFields A comma separated list of fields that may be optionally set in delivery reports. Disabling delivery report fields that you do not require will improve maximum throughput and reduce memory usage. Allowed values: key, value, timestamp, headers, status, all, none. default: all importance: low Declaration public string DeliveryReportFields { get; set; } Property Value Type Description System.String Remarks Silverback overrides this value by default setting it to \"key,status\" as an optimization, since the other fields aren't used. | Improve this doc View source EnableBackgroundPoll Specifies whether or not the producer should start a background poll thread to receive delivery reports and event notifications. Generally, this should be set to true. If set to false, you will need to call the Poll function manually. default: true importance: low Declaration public bool? EnableBackgroundPoll { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source EnableDeliveryReports Specifies whether to enable notification of delivery reports. Typically you should set this parameter to true. Set it to false for \"fire and forget\" semantics and a small boost in performance. default: true importance: low Declaration public bool? EnableDeliveryReports { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source EnableGaplessGuarantee EXPERIMENTAL : subject to change or removal. When set to true , any error that could result in a gap in the produced message series when a batch of messages fails, will raise a fatal error (ERR__GAPLESS_GUARANTEE) and stop the producer. Messages failing due to message.timeout.ms are not covered by this guarantee. Requires enable.idempotence=true . default: false importance: low Declaration public bool? EnableGaplessGuarantee { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source EnableIdempotence When set to true , the producer will ensure that messages are successfully produced exactly once and in the original produce order. The following configuration properties are adjusted automatically (if not modified by the user) when idempotence is enabled: max.in.flight.requests.per.connection=5 (must be less than or equal to 5), retries=INT32_MAX (must be greater than 0), acks=all , queuing.strategy=fifo . Producer instantation will fail if user-supplied configuration is incompatible. default: false importance: high Declaration public bool? EnableIdempotence { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source LingerMs Delay in milliseconds to wait for messages in the producer queue to accumulate before constructing message batches (MessageSets) to transmit to brokers. A higher value allows larger and more effective (less overhead, improved compression) batches of messages to accumulate at the expense of increased message delivery latency. default: 5 importance: high Declaration public double? LingerMs { get; set; } Property Value Type Description System.Nullable < System.Double > | Improve this doc View source MessageSendMaxRetries How many times to retry sending a failing Message. Note: retrying may cause reordering unless enable.idempotence is set to true. default: 2147483647 importance: high Declaration public int? MessageSendMaxRetries { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source MessageTimeoutMs Local message timeout. This value is only enforced locally and limits the time a produced message waits for successful delivery. A time of 0 is infinite. This is the maximum time librdkafka may use to deliver a message (including retries). Delivery error occurs when either the retry count or the message timeout are exceeded. The message timeout is automatically adjusted to transaction.timeout.ms if transactional.id is configured. default: 300000 importance: high Declaration public int? MessageTimeoutMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source Partitioner Partitioner: random - random distribution, consistent - CRC32 hash of key (Empty and NULL keys are mapped to single partition), consistent_random - CRC32 hash of key (Empty and NULL keys are randomly partitioned), murmur2 - Java Producer compatible Murmur2 hash of key (NULL keys are mapped to single partition), murmur2_random - Java Producer compatible Murmur2 hash of key (NULL keys are randomly partitioned. This is functionally equivalent to the default partitioner in the Java Producer.), fnv1a - FNV-1a hash of key (NULL keys are mapped to single partition), fnv1a_random - FNV-1a hash of key (NULL keys are randomly partitioned). default: consistent_random importance: high Declaration public Partitioner? Partitioner { get; set; } Property Value Type Description System.Nullable < Confluent.Kafka.Partitioner > | Improve this doc View source QueueBufferingBackpressureThreshold The threshold of outstanding not yet transmitted broker requests needed to backpressure the producer's message accumulator. If the number of not yet transmitted requests equals or exceeds this number, produce request creation that would have otherwise been triggered (for example, in accordance with linger.ms) will be delayed. A lower number yields larger and more effective batches. A higher value can improve latency when using compression on slow machines. default: 1 importance: low Declaration public int? QueueBufferingBackpressureThreshold { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source QueueBufferingMaxKbytes Maximum total message size sum allowed on the producer queue. This queue is shared by all topics and partitions. This property has higher priority than queue.buffering.max.messages. default: 1048576 importance: high Declaration public int? QueueBufferingMaxKbytes { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source QueueBufferingMaxMessages Maximum number of messages allowed on the producer queue. This queue is shared by all topics and partitions. default: 100000 importance: high Declaration public int? QueueBufferingMaxMessages { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source RequestTimeoutMs The ack timeout of the producer request in milliseconds. This value is only enforced by the broker and relies on request.required.acks being != 0. default: 30000 importance: medium Declaration public int? RequestTimeoutMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source RetryBackoffMs The backoff time in milliseconds before retrying a protocol request. default: 100 importance: medium Declaration public int? RetryBackoffMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source StickyPartitioningLingerMs Delay in milliseconds to wait to assign new sticky partitions for each topic. By default, set to double the time of linger.ms. To disable sticky behavior, set to 0. This behavior affects messages with the key NULL in all cases, and messages with key lengths of zero when the consistent_random partitioner is in use. These messages would otherwise be assigned randomly. A higher value allows for more effective batching of these messages. default: 10 importance: low Declaration public int? StickyPartitioningLingerMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source TransactionalId Enables the transactional producer. The transactional.id is used to identify the same transactional producer instance across process restarts. It allows the producer to guarantee that transactions corresponding to earlier instances of the same producer have been finalized prior to starting any new transactions, and that any zombie instances are fenced off. If no transactional.id is provided, then the producer is limited to idempotent delivery (if enable.idempotence is set). Requires broker version >= 0.11.0. default: '' importance: high Declaration public string TransactionalId { get; set; } Property Value Type Description System.String | Improve this doc View source TransactionTimeoutMs The maximum amount of time in milliseconds that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction. If this value is larger than the transaction.max.timeout.ms setting in the broker, the init_transactions() call will fail with ERR_INVALID_TRANSACTION_TIMEOUT. The transaction timeout automatically adjusts message.timeout.ms and socket.timeout.ms , unless explicitly configured in which case they must not exceed the transaction timeout ( socket.timeout.ms must be at least 100ms lower than transaction.timeout.ms ). This is also the default timeout value if no timeout (-1) is supplied to the transactional API methods. default: 60000 importance: medium Declaration public int? TransactionTimeoutMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Configuration.Kafka.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.html",
    "title": "Namespace Silverback.Messaging.Configuration.Kafka | Silverback",
    "keywords": "Namespace Silverback.Messaging.Configuration.Kafka Classes ConfluentClientConfigProxy Wraps the Confluent.Kafka.ClientConfig . ConfluentConsumerConfigProxy Wraps the Confluent.Kafka.ConsumerConfig . ConfluentProducerConfigProxy Wraps the Confluent.Kafka.ProducerConfig . KafkaClientConfig Wraps the Confluent.Kafka.ConsumerConfig and contains the properties shared between the KafkaProducerConfig and KafkaConsumerConfig . KafkaConsumerConfig Extends the Confluent.Kafka.ConsumerConfig adding the Silverback specific settings. KafkaConsumerEndpointBuilder Builds the KafkaConsumerEndpoint . KafkaProducerConfig Extends the Confluent.Kafka.ProducerConfig adding the Silverback specific settings. KafkaProducerEndpointBuilder Builds the KafkaProducerEndpoint . Interfaces IKafkaConsumerEndpointBuilder Builds the KafkaConsumerEndpoint . IKafkaEndpointsConfigurationBuilder Exposes the methods to configure the connection to Kafka and add the inbound and outbound endpoints. IKafkaProducerEndpointBuilder Builds the KafkaProducerEndpoint . IMockedKafkaOptions Stores the mocked Kafka configuration. IMockedKafkaOptionsBuilder Exposes the methods to configure the mocked Kafka."
  },
  "api/Silverback.Messaging.Configuration.Kafka.IKafkaConsumerEndpointBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.IKafkaConsumerEndpointBuilder.html",
    "title": "Interface IKafkaConsumerEndpointBuilder | Silverback",
    "keywords": "Interface IKafkaConsumerEndpointBuilder Builds the KafkaConsumerEndpoint . Inherited Members IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.MessageType IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.DeserializeUsing(IMessageSerializer) IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.Decrypt(EncryptionSettings) IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.OnError(IErrorPolicy) IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.OnError(Action<IErrorPolicyBuilder>) IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.EnsureExactlyOnce(IExactlyOnceStrategy) IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder>) IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.EnableBatchProcessing(Int32, Nullable<TimeSpan>) IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.WithSequenceTimeout(TimeSpan) IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.ThrowIfUnhandled() IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.IgnoreUnhandledMessages() IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.HandleTombstoneMessages() IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.SkipNullMessages() IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>.UseLegacyNullMessageHandling() IEndpointBuilder<IKafkaConsumerEndpointBuilder>.WithName(String) IEndpointBuilder<IKafkaConsumerEndpointBuilder>.UseSerializer(IMessageSerializer) IEndpointBuilder<IKafkaConsumerEndpointBuilder>.WithEncryption(EncryptionSettings) IEndpointBuilder<IKafkaConsumerEndpointBuilder>.ValidateMessage(Boolean) IEndpointBuilder<IKafkaConsumerEndpointBuilder>.DisableMessageValidation() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaConsumerEndpointBuilder : IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>, IEndpointBuilder<IKafkaConsumerEndpointBuilder> Methods | Improve this doc View source Configure(Action<KafkaConsumerConfig>) Configures the Kafka client properties. Declaration IKafkaConsumerEndpointBuilder Configure(Action<KafkaConsumerConfig> configAction) Parameters Type Name Description System.Action < KafkaConsumerConfig > configAction An System.Action<T> that takes the IKafkaConsumerEndpointBuilder and configures it. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(TopicPartition[]) Specifies the topics and partitions to be consumed. Declaration IKafkaConsumerEndpointBuilder ConsumeFrom(params TopicPartition[] topicPartitions) Parameters Type Name Description Confluent.Kafka.TopicPartition [] topicPartitions The topics and partitions to be consumed. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(TopicPartitionOffset[]) Specifies the topics and partitions to be consumed. Declaration IKafkaConsumerEndpointBuilder ConsumeFrom(params TopicPartitionOffset[] topicPartitions) Parameters Type Name Description Confluent.Kafka.TopicPartitionOffset [] topicPartitions The topics and partitions to be consumed and the starting offset. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>>) Specifies the name of the topic to be consumed and a function that returns the partitions to be assigned. Declaration IKafkaConsumerEndpointBuilder ConsumeFrom(string topicName, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>> topicPartitionsResolver) Parameters Type Name Description System.String topicName The name of the topic. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartition >> topicPartitionsResolver A function that receives all available Confluent.Kafka.TopicPartition for the topic and returns the collection of Confluent.Kafka.TopicPartition to be assigned. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>>) Specifies the name of the topic to be consumed and a function that returns the partitions to be assigned. Declaration IKafkaConsumerEndpointBuilder ConsumeFrom(string topicName, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>> topicPartitionsResolver) Parameters Type Name Description System.String topicName The name of the topic. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> topicPartitionsResolver A function that receives all available Confluent.Kafka.TopicPartition for the topic and returns the collection of Confluent.Kafka.TopicPartitionOffset to be assigned. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String[]) Specifies the name of the topics to be consumed. Declaration IKafkaConsumerEndpointBuilder ConsumeFrom(params string[] topicNames) Parameters Type Name Description System.String [] topicNames The name of the topics. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String[], Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>>) Specifies the name of the topic to be consumed and a function that returns the partitions to be assigned. Declaration IKafkaConsumerEndpointBuilder ConsumeFrom(string[] topicNames, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>> topicPartitionsResolver) Parameters Type Name Description System.String [] topicNames The name of the topics. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartition >> topicPartitionsResolver A function that receives all available Confluent.Kafka.TopicPartition for the topics and returns the collection of Confluent.Kafka.TopicPartition to be assigned. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String[], Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>>) Specifies the name of the topic to be consumed and a function that returns the partitions to be assigned. Declaration IKafkaConsumerEndpointBuilder ConsumeFrom(string[] topicNames, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>> topicPartitionsResolver) Parameters Type Name Description System.String [] topicNames The name of the topics. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> topicPartitionsResolver A function that receives all available Confluent.Kafka.TopicPartition for the topics and returns the collection of Confluent.Kafka.TopicPartitionOffset to be assigned. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source LimitBackpressure(Int32) Sets the maximum number of messages to be consumed and enqueued waiting to be processed. The limit will be applied per partition when processing the partitions independently (default). The default limit is 1. Declaration IKafkaConsumerEndpointBuilder LimitBackpressure(int backpressureLimit) Parameters Type Name Description System.Int32 backpressureLimit The maximum number of messages to be enqueued. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source LimitParallelism(Int32) Sets the maximum number of incoming message that can be processed concurrently. Up to a message per each subscribed partition can be processed in parallel. The default limit is 10. Declaration IKafkaConsumerEndpointBuilder LimitParallelism(int maxDegreeOfParallelism) Parameters Type Name Description System.Int32 maxDegreeOfParallelism The maximum number of incoming message that can be processed concurrently. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProcessAllPartitionsTogether() Specifies that all partitions must be processed together. This means that a single stream will published for the messages from all the partitions and the sequences ( ChunkSequence , BatchSequence , ...) can span across the partitions. Declaration IKafkaConsumerEndpointBuilder ProcessAllPartitionsTogether() Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProcessPartitionsIndependently() Specifies that the partitions must be processed independently. This means that a stream will published per each partition and the sequences ( ChunkSequence , BatchSequence , ...) cannot span across the partitions. This option is enabled by default. Use ProcessAllPartitionsTogether() to disable it. Declaration IKafkaConsumerEndpointBuilder ProcessPartitionsIndependently() Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. Extension Methods ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ConsumerEndpointBuilderDeserializeAvroExtensions.DeserializeAvro<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.Kafka.IKafkaEndpointsConfigurationBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.IKafkaEndpointsConfigurationBuilder.html",
    "title": "Interface IKafkaEndpointsConfigurationBuilder | Silverback",
    "keywords": "Interface IKafkaEndpointsConfigurationBuilder Exposes the methods to configure the connection to Kafka and add the inbound and outbound endpoints. Inherited Members IEndpointsConfigurationBuilder.ServiceProvider Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaEndpointsConfigurationBuilder : IEndpointsConfigurationBuilder Methods | Improve this doc View source AddInbound(Action<IKafkaConsumerEndpointBuilder>, Int32) Adds an inbound endpoint and instantiates a KafkaConsumer to consume from a Kafka topic. Declaration IKafkaEndpointsConfigurationBuilder AddInbound(Action<IKafkaConsumerEndpointBuilder> endpointBuilderAction, int consumersCount = 1) Parameters Type Name Description System.Action < IKafkaConsumerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IKafkaConsumerEndpointBuilder and configures it. System.Int32 consumersCount The number of consumers to be instantiated. The default is 1. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. Remarks Multiple calls to this methods will cause multiple consumers to be instantiated, which means multiple connections being issues and more resources being used. The KafkaConsumerEndpoint allows to define multiple topics to be consumed, to efficiently instantiate a single consumer for all of them. | Improve this doc View source AddInbound(Type, Action<IKafkaConsumerEndpointBuilder>, Int32) Adds an inbound endpoint and instantiates a KafkaConsumer to consume from a Kafka topic. Declaration IKafkaEndpointsConfigurationBuilder AddInbound(Type messageType, Action<IKafkaConsumerEndpointBuilder> endpointBuilderAction, int consumersCount = 1) Parameters Type Name Description System.Type messageType The type of the messages that will be consumed from this endpoint. Specifying the message type will usually automatically switch to the typed message serializer and deserialize this specific type, regardless of the message headers. System.Action < IKafkaConsumerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IKafkaConsumerEndpointBuilder and configures it. System.Int32 consumersCount The number of consumers to be instantiated. The default is 1. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. Remarks Multiple calls to this methods will cause multiple consumers to be instantiated, which means multiple connections being issues and more resources being used. The KafkaConsumerEndpoint allows to define multiple topics to be consumed, to efficiently instantiate a single consumer for all of them. | Improve this doc View source AddInbound<TMessage>(Action<IKafkaConsumerEndpointBuilder>, Int32) Adds an inbound endpoint and instantiates a KafkaConsumer to consume from a Kafka topic. Declaration IKafkaEndpointsConfigurationBuilder AddInbound<TMessage>(Action<IKafkaConsumerEndpointBuilder> endpointBuilderAction, int consumersCount = 1) Parameters Type Name Description System.Action < IKafkaConsumerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IKafkaConsumerEndpointBuilder and configures it. System.Int32 consumersCount The number of consumers to be instantiated. The default is 1. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages that will be consumed from this endpoint. Specifying the message type will usually automatically switch to the typed message serializer and deserialize this specific type, regardless of the message headers. Remarks Multiple calls to this methods will cause multiple consumers to be instantiated, which means multiple connections being issues and more resources being used. The KafkaConsumerEndpoint allows to define multiple topics to be consumed, to efficiently instantiate a single consumer for all of them. | Improve this doc View source AddOutbound(Type, DictionaryOutboundRouter<Object, KafkaProducerEndpoint>.RouterFunction, IReadOnlyDictionary<String, Action<IKafkaProducerEndpointBuilder>>, Boolean) Adds an outbound endpoint to produce the specified message type to a Kafka topic. Declaration IKafkaEndpointsConfigurationBuilder AddOutbound(Type messageType, DictionaryOutboundRouter<object, KafkaProducerEndpoint>.RouterFunction routerFunction, IReadOnlyDictionary<string, Action<IKafkaProducerEndpointBuilder>> endpointBuilderActions, bool preloadProducers = true) Parameters Type Name Description System.Type messageType The type of the messages to be published to this endpoint. DictionaryOutboundRouter.RouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IKafkaProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(Type, DictionaryOutboundRouter<Object, KafkaProducerEndpoint>.SingleEndpointRouterFunction, IReadOnlyDictionary<String, Action<IKafkaProducerEndpointBuilder>>, Boolean) Adds an outbound endpoint to produce the specified message type to a Kafka topic. Declaration IKafkaEndpointsConfigurationBuilder AddOutbound(Type messageType, DictionaryOutboundRouter<object, KafkaProducerEndpoint>.SingleEndpointRouterFunction routerFunction, IReadOnlyDictionary<string, Action<IKafkaProducerEndpointBuilder>> endpointBuilderActions, bool preloadProducers = true) Parameters Type Name Description System.Type messageType The type of the messages to be published to this endpoint. DictionaryOutboundRouter.SingleEndpointRouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IKafkaProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(Type, Action<IKafkaProducerEndpointBuilder>, Boolean) Adds an outbound endpoint to produce the specified message type to a Kafka topic. Declaration IKafkaEndpointsConfigurationBuilder AddOutbound(Type messageType, Action<IKafkaProducerEndpointBuilder> endpointBuilderAction, bool preloadProducers = true) Parameters Type Name Description System.Type messageType The type of the messages to be published to this endpoint. System.Action < IKafkaProducerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IKafkaProducerEndpointBuilder and configures it. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound<TMessage>(DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.RouterFunction, IReadOnlyDictionary<String, Action<IKafkaProducerEndpointBuilder>>, Boolean) Adds an outbound endpoint to produce the specified message type to a Kafka topic. Declaration IKafkaEndpointsConfigurationBuilder AddOutbound<TMessage>(DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.RouterFunction routerFunction, IReadOnlyDictionary<string, Action<IKafkaProducerEndpointBuilder>> endpointBuilderActions, bool preloadProducers = true) Parameters Type Name Description DictionaryOutboundRouter.RouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IKafkaProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.SingleEndpointRouterFunction, IReadOnlyDictionary<String, Action<IKafkaProducerEndpointBuilder>>, Boolean) Adds an outbound endpoint to produce the specified message type to a Kafka topic. Declaration IKafkaEndpointsConfigurationBuilder AddOutbound<TMessage>(DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.SingleEndpointRouterFunction routerFunction, IReadOnlyDictionary<string, Action<IKafkaProducerEndpointBuilder>> endpointBuilderActions, bool preloadProducers = true) Parameters Type Name Description DictionaryOutboundRouter.SingleEndpointRouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IKafkaProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(Action<IKafkaProducerEndpointBuilder>, Boolean) Adds an outbound endpoint to produce the specified message type to a Kafka topic. Declaration IKafkaEndpointsConfigurationBuilder AddOutbound<TMessage>(Action<IKafkaProducerEndpointBuilder> endpointBuilderAction, bool preloadProducers = true) Parameters Type Name Description System.Action < IKafkaProducerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IKafkaProducerEndpointBuilder and configures it. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source Configure(Action<KafkaClientConfig>) Configures the Kafka client properties that are shared between the producers and consumers. Declaration IKafkaEndpointsConfigurationBuilder Configure(Action<KafkaClientConfig> configAction) Parameters Type Name Description System.Action < KafkaClientConfig > configAction An System.Action<T> that takes the KafkaClientConfig and configures it. Returns Type Description IKafkaEndpointsConfigurationBuilder The IKafkaEndpointsConfigurationBuilder so that additional calls can be chained. Extension Methods EndpointsConfigurationBuilderAddMqttEndpointsExtensions.AddMqttEndpoints(IEndpointsConfigurationBuilder, Action<IMqttEndpointsConfigurationBuilder>) EndpointsConfigurationBuilderAddKafkaEndpointsExtensions.AddKafkaEndpoints(IEndpointsConfigurationBuilder, Action<IKafkaEndpointsConfigurationBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.Kafka.IKafkaProducerEndpointBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.IKafkaProducerEndpointBuilder.html",
    "title": "Interface IKafkaProducerEndpointBuilder | Silverback",
    "keywords": "Interface IKafkaProducerEndpointBuilder Builds the KafkaProducerEndpoint . Inherited Members IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.SerializeUsing(IMessageSerializer) IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.Encrypt(EncryptionSettings) IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.UseStrategy(IProduceStrategy) IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.ProduceDirectly() IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.ProduceToOutbox() IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.EnableChunking(Int32, Boolean) IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.AddHeader(String, Object) IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.AddHeader<TMessage>(String, Object) IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.AddHeader<TMessage>(String, Func<IOutboundEnvelope<TMessage>, Object>) IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>.WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) IEndpointBuilder<IKafkaProducerEndpointBuilder>.WithName(String) IEndpointBuilder<IKafkaProducerEndpointBuilder>.UseSerializer(IMessageSerializer) IEndpointBuilder<IKafkaProducerEndpointBuilder>.WithEncryption(EncryptionSettings) IEndpointBuilder<IKafkaProducerEndpointBuilder>.ValidateMessage(Boolean) IEndpointBuilder<IKafkaProducerEndpointBuilder>.DisableMessageValidation() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaProducerEndpointBuilder : IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>, IEndpointBuilder<IKafkaProducerEndpointBuilder> Methods | Improve this doc View source Configure(Action<KafkaProducerConfig>) Configures the Kafka client properties. Declaration IKafkaProducerEndpointBuilder Configure(Action<KafkaProducerConfig> configAction) Parameters Type Name Description System.Action < KafkaProducerConfig > configAction An System.Action<T> that takes the KafkaProducerConfig and configures it. Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(Func<IOutboundEnvelope, IServiceProvider, String>, Func<IOutboundEnvelope, IServiceProvider, Int32>) Specifies the name of the topic and optionally the target partition. Declaration IKafkaProducerEndpointBuilder ProduceTo(Func<IOutboundEnvelope, IServiceProvider, string> topicNameFunction, Func<IOutboundEnvelope, IServiceProvider, int> partitionFunction = null) Parameters Type Name Description System.Func < IOutboundEnvelope , System.IServiceProvider , System.String > topicNameFunction The function returning the topic name for the message being produced. System.Func < IOutboundEnvelope , System.IServiceProvider , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(Func<IOutboundEnvelope, String>, Func<IOutboundEnvelope, Int32>) Specifies the name of the topic and optionally the target partition. Declaration IKafkaProducerEndpointBuilder ProduceTo(Func<IOutboundEnvelope, string> topicNameFunction, Func<IOutboundEnvelope, int> partitionFunction = null) Parameters Type Name Description System.Func < IOutboundEnvelope , System.String > topicNameFunction The function returning the topic name for the message being produced. System.Func < IOutboundEnvelope , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String, Func<IOutboundEnvelope, String[]>, Func<IOutboundEnvelope, Int32>) Specifies the name of the topic and optionally the target partition. Declaration IKafkaProducerEndpointBuilder ProduceTo(string topicNameFormatString, Func<IOutboundEnvelope, string[]> topicNameArgumentsFunction, Func<IOutboundEnvelope, int> partitionFunction = null) Parameters Type Name Description System.String topicNameFormatString The endpoint name format string that will be combined with the arguments returned by the topicNameArgumentsFunction using a string.Format . System.Func < IOutboundEnvelope , System.String []> topicNameArgumentsFunction The function returning the arguments to be used to format the string. System.Func < IOutboundEnvelope , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String, Nullable<Int32>) Specifies the name of the topic and optionally the target partition. Declaration IKafkaProducerEndpointBuilder ProduceTo(string topicName, int? partition = null) Parameters Type Name Description System.String topicName The name of the topic. System.Nullable < System.Int32 > partition The optional partition index. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, IServiceProvider, String>, Func<IOutboundEnvelope<TMessage>, IServiceProvider, Int32>) Specifies the name of the topic and optionally the target partition. Declaration IKafkaProducerEndpointBuilder ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, IServiceProvider, string> topicNameFunction, Func<IOutboundEnvelope<TMessage>, IServiceProvider, int> partitionFunction = null) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.IServiceProvider , System.String > topicNameFunction The function returning the topic name for the message being produced. System.Func < IOutboundEnvelope <TMessage>, System.IServiceProvider , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, String>, Func<IOutboundEnvelope<TMessage>, Int32>) Specifies the name of the topic and optionally the target partition. Declaration IKafkaProducerEndpointBuilder ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, string> topicNameFunction, Func<IOutboundEnvelope<TMessage>, int> partitionFunction = null) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.String > topicNameFunction The function returning the topic name for the message being produced. System.Func < IOutboundEnvelope <TMessage>, System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source ProduceTo<TMessage>(String, Func<IOutboundEnvelope<TMessage>, String[]>, Func<IOutboundEnvelope<TMessage>, Int32>) Specifies the name of the topic and optionally the target partition. Declaration IKafkaProducerEndpointBuilder ProduceTo<TMessage>(string topicNameFormatString, Func<IOutboundEnvelope<TMessage>, string[]> topicNameArgumentsFunction, Func<IOutboundEnvelope<TMessage>, int> partitionFunction = null) where TMessage : class Parameters Type Name Description System.String topicNameFormatString The endpoint name format string that will be combined with the arguments returned by the topicNameArgumentsFunction using a string.Format . System.Func < IOutboundEnvelope <TMessage>, System.String []> topicNameArgumentsFunction The function returning the arguments to be used to format the string. System.Func < IOutboundEnvelope <TMessage>, System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source UseEndpointNameResolver<TResolver>() Specifies the type of the IKafkaProducerEndpointNameResolver to be used to resolve the actual endpoint name and partition. Declaration IKafkaProducerEndpointBuilder UseEndpointNameResolver<TResolver>() where TResolver : IKafkaProducerEndpointNameResolver Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TResolver The type of the IKafkaProducerEndpointNameResolver to be used. | Improve this doc View source WithKafkaKey<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) Uses the specified value provider function to set the kafka key for each produced message. Declaration IKafkaProducerEndpointBuilder WithKafkaKey<TMessage>(Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The value provider function. Returns Type Description IKafkaProducerEndpointBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched. Extension Methods ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsAvroExtensions.SerializeAsAvro<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.Kafka.IMockedKafkaOptions.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.IMockedKafkaOptions.html",
    "title": "Interface IMockedKafkaOptions | Silverback",
    "keywords": "Interface IMockedKafkaOptions Stores the mocked Kafka configuration. Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public interface IMockedKafkaOptions Properties | Improve this doc View source DefaultPartitionsCount Gets or sets the default number of partitions to be created per each topic. The default is 5. Declaration int DefaultPartitionsCount { get; set; } Property Value Type Description System.Int32 | Improve this doc View source OverriddenAutoCommitIntervalMs Gets or sets the value to be used instead of the default 5 seconds or the configured\"ConfluentConsumerConfigProxy.AutoCommitIntervalMs\" /> for the inbound topics. Set it to null to disable the feature. The default is 50 milliseconds. Declaration int? OverriddenAutoCommitIntervalMs { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source PartitionsAssignmentDelay Gets or sets the delay to be applied before and assigning the partitions. Declaration TimeSpan PartitionsAssignmentDelay { get; set; } Property Value Type Description System.TimeSpan"
  },
  "api/Silverback.Messaging.Configuration.Kafka.IMockedKafkaOptionsBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.IMockedKafkaOptionsBuilder.html",
    "title": "Interface IMockedKafkaOptionsBuilder | Silverback",
    "keywords": "Interface IMockedKafkaOptionsBuilder Exposes the methods to configure the mocked Kafka. Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public interface IMockedKafkaOptionsBuilder Methods | Improve this doc View source DelayPartitionsAssignment(TimeSpan) Specifies the delay to be applied before assigning the partitions. Declaration IMockedKafkaOptionsBuilder DelayPartitionsAssignment(TimeSpan delay) Parameters Type Name Description System.TimeSpan delay The delay to be applied before assigning the partitions. Returns Type Description IMockedKafkaOptionsBuilder The IMockedKafkaOptionsBuilder so that additional calls can be chained. | Improve this doc View source OverrideAutoCommitIntervalMs(Nullable<Int32>) Specifies the value to be used instead of the default 5 seconds or the configured AutoCommitIntervalMs for the inbound topics. Set it to null to disable the feature. The default is 10 milliseconds. Declaration IMockedKafkaOptionsBuilder OverrideAutoCommitIntervalMs(int? intervalMs) Parameters Type Name Description System.Nullable < System.Int32 > intervalMs The desired auto commit interval in milliseconds. Returns Type Description IMockedKafkaOptionsBuilder The IMockedKafkaOptionsBuilder so that additional calls can be chained. Remarks This is necessary to speed up the tests, since the WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) method waits until the offsets are committed. | Improve this doc View source WithDefaultPartitionsCount(Int32) Specifies the default number of partitions to be created per each topic. The default is 5. Declaration IMockedKafkaOptionsBuilder WithDefaultPartitionsCount(int partitionsCount) Parameters Type Name Description System.Int32 partitionsCount The number of partitions. Returns Type Description IMockedKafkaOptionsBuilder The IMockedKafkaOptionsBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.Kafka.KafkaClientConfig.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.KafkaClientConfig.html",
    "title": "Class KafkaClientConfig | Silverback",
    "keywords": "Class KafkaClientConfig Wraps the Confluent.Kafka.ConsumerConfig and contains the properties shared between the KafkaProducerConfig and KafkaConsumerConfig . Inheritance System.Object ConfluentClientConfigProxy KafkaClientConfig Implements IValidatableEndpointSettings Inherited Members ConfluentClientConfigProxy.SaslMechanism ConfluentClientConfigProxy.Acks ConfluentClientConfigProxy.ClientId ConfluentClientConfigProxy.BootstrapServers ConfluentClientConfigProxy.MessageMaxBytes ConfluentClientConfigProxy.MessageCopyMaxBytes ConfluentClientConfigProxy.ReceiveMessageMaxBytes ConfluentClientConfigProxy.MaxInFlight ConfluentClientConfigProxy.TopicMetadataRefreshIntervalMs ConfluentClientConfigProxy.MetadataMaxAgeMs ConfluentClientConfigProxy.TopicMetadataRefreshFastIntervalMs ConfluentClientConfigProxy.TopicMetadataRefreshSparse ConfluentClientConfigProxy.TopicMetadataPropagationMaxMs ConfluentClientConfigProxy.TopicBlacklist ConfluentClientConfigProxy.Debug ConfluentClientConfigProxy.SocketTimeoutMs ConfluentClientConfigProxy.SocketSendBufferBytes ConfluentClientConfigProxy.SocketReceiveBufferBytes ConfluentClientConfigProxy.SocketKeepaliveEnable ConfluentClientConfigProxy.SocketNagleDisable ConfluentClientConfigProxy.SocketMaxFails ConfluentClientConfigProxy.BrokerAddressTtl ConfluentClientConfigProxy.BrokerAddressFamily ConfluentClientConfigProxy.ConnectionsMaxIdleMs ConfluentClientConfigProxy.ReconnectBackoffMs ConfluentClientConfigProxy.ReconnectBackoffMaxMs ConfluentClientConfigProxy.StatisticsIntervalMs ConfluentClientConfigProxy.LogQueue ConfluentClientConfigProxy.LogThreadName ConfluentClientConfigProxy.EnableRandomSeed ConfluentClientConfigProxy.LogConnectionClose ConfluentClientConfigProxy.InternalTerminationSignal ConfluentClientConfigProxy.ApiVersionRequest ConfluentClientConfigProxy.ApiVersionRequestTimeoutMs ConfluentClientConfigProxy.ApiVersionFallbackMs ConfluentClientConfigProxy.BrokerVersionFallback ConfluentClientConfigProxy.SecurityProtocol ConfluentClientConfigProxy.SslCipherSuites ConfluentClientConfigProxy.SslCurvesList ConfluentClientConfigProxy.SslSigalgsList ConfluentClientConfigProxy.SslKeyLocation ConfluentClientConfigProxy.SslKeyPassword ConfluentClientConfigProxy.SslKeyPem ConfluentClientConfigProxy.SslCertificateLocation ConfluentClientConfigProxy.SslCertificatePem ConfluentClientConfigProxy.SslCaLocation ConfluentClientConfigProxy.SslCaCertificateStores ConfluentClientConfigProxy.SslCrlLocation ConfluentClientConfigProxy.SslKeystoreLocation ConfluentClientConfigProxy.SslKeystorePassword ConfluentClientConfigProxy.SslEngineLocation ConfluentClientConfigProxy.SslEngineId ConfluentClientConfigProxy.EnableSslCertificateVerification ConfluentClientConfigProxy.SslEndpointIdentificationAlgorithm ConfluentClientConfigProxy.SaslKerberosServiceName ConfluentClientConfigProxy.SaslKerberosPrincipal ConfluentClientConfigProxy.SaslKerberosKinitCmd ConfluentClientConfigProxy.SaslKerberosKeytab ConfluentClientConfigProxy.SaslKerberosMinTimeBeforeRelogin ConfluentClientConfigProxy.SaslUsername ConfluentClientConfigProxy.SaslPassword ConfluentClientConfigProxy.SaslOauthbearerConfig ConfluentClientConfigProxy.EnableSaslOauthbearerUnsecureJwt ConfluentClientConfigProxy.PluginLibraryPaths ConfluentClientConfigProxy.ClientRack ConfluentClientConfigProxy.CancellationDelayMaxMs ConfluentClientConfigProxy.ConfluentConfig System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public sealed class KafkaClientConfig : ConfluentClientConfigProxy, IValidatableEndpointSettings Constructors | Improve this doc View source KafkaClientConfig() Initializes a new instance of the KafkaClientConfig class. Declaration public KafkaClientConfig() Methods | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public override void Validate() Overrides ConfluentClientConfigProxy.Validate() Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Configuration.Kafka.KafkaConsumerConfig.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.KafkaConsumerConfig.html",
    "title": "Class KafkaConsumerConfig | Silverback",
    "keywords": "Class KafkaConsumerConfig Extends the Confluent.Kafka.ConsumerConfig adding the Silverback specific settings. Inheritance System.Object ConfluentClientConfigProxy ConfluentConsumerConfigProxy KafkaConsumerConfig Implements IValidatableEndpointSettings System.IEquatable < KafkaConsumerConfig > Inherited Members ConfluentConsumerConfigProxy.ConsumeResultFields ConfluentConsumerConfigProxy.AutoOffsetReset ConfluentConsumerConfigProxy.GroupId ConfluentConsumerConfigProxy.GroupInstanceId ConfluentConsumerConfigProxy.PartitionAssignmentStrategy ConfluentConsumerConfigProxy.SessionTimeoutMs ConfluentConsumerConfigProxy.HeartbeatIntervalMs ConfluentConsumerConfigProxy.GroupProtocolType ConfluentConsumerConfigProxy.CoordinatorQueryIntervalMs ConfluentConsumerConfigProxy.MaxPollIntervalMs ConfluentConsumerConfigProxy.EnableAutoCommit ConfluentConsumerConfigProxy.AutoCommitIntervalMs ConfluentConsumerConfigProxy.EnableAutoOffsetStore ConfluentConsumerConfigProxy.QueuedMinMessages ConfluentConsumerConfigProxy.QueuedMaxMessagesKbytes ConfluentConsumerConfigProxy.FetchWaitMaxMs ConfluentConsumerConfigProxy.MaxPartitionFetchBytes ConfluentConsumerConfigProxy.FetchMaxBytes ConfluentConsumerConfigProxy.FetchMinBytes ConfluentConsumerConfigProxy.FetchErrorBackoffMs ConfluentConsumerConfigProxy.IsolationLevel ConfluentConsumerConfigProxy.EnablePartitionEof ConfluentConsumerConfigProxy.CheckCrcs ConfluentConsumerConfigProxy.AllowAutoCreateTopics ConfluentConsumerConfigProxy.ConfluentConfig ConfluentClientConfigProxy.SaslMechanism ConfluentClientConfigProxy.Acks ConfluentClientConfigProxy.ClientId ConfluentClientConfigProxy.BootstrapServers ConfluentClientConfigProxy.MessageMaxBytes ConfluentClientConfigProxy.MessageCopyMaxBytes ConfluentClientConfigProxy.ReceiveMessageMaxBytes ConfluentClientConfigProxy.MaxInFlight ConfluentClientConfigProxy.TopicMetadataRefreshIntervalMs ConfluentClientConfigProxy.MetadataMaxAgeMs ConfluentClientConfigProxy.TopicMetadataRefreshFastIntervalMs ConfluentClientConfigProxy.TopicMetadataRefreshSparse ConfluentClientConfigProxy.TopicMetadataPropagationMaxMs ConfluentClientConfigProxy.TopicBlacklist ConfluentClientConfigProxy.Debug ConfluentClientConfigProxy.SocketTimeoutMs ConfluentClientConfigProxy.SocketSendBufferBytes ConfluentClientConfigProxy.SocketReceiveBufferBytes ConfluentClientConfigProxy.SocketKeepaliveEnable ConfluentClientConfigProxy.SocketNagleDisable ConfluentClientConfigProxy.SocketMaxFails ConfluentClientConfigProxy.BrokerAddressTtl ConfluentClientConfigProxy.BrokerAddressFamily ConfluentClientConfigProxy.ConnectionsMaxIdleMs ConfluentClientConfigProxy.ReconnectBackoffMs ConfluentClientConfigProxy.ReconnectBackoffMaxMs ConfluentClientConfigProxy.StatisticsIntervalMs ConfluentClientConfigProxy.LogQueue ConfluentClientConfigProxy.LogThreadName ConfluentClientConfigProxy.EnableRandomSeed ConfluentClientConfigProxy.LogConnectionClose ConfluentClientConfigProxy.InternalTerminationSignal ConfluentClientConfigProxy.ApiVersionRequest ConfluentClientConfigProxy.ApiVersionRequestTimeoutMs ConfluentClientConfigProxy.ApiVersionFallbackMs ConfluentClientConfigProxy.BrokerVersionFallback ConfluentClientConfigProxy.SecurityProtocol ConfluentClientConfigProxy.SslCipherSuites ConfluentClientConfigProxy.SslCurvesList ConfluentClientConfigProxy.SslSigalgsList ConfluentClientConfigProxy.SslKeyLocation ConfluentClientConfigProxy.SslKeyPassword ConfluentClientConfigProxy.SslKeyPem ConfluentClientConfigProxy.SslCertificateLocation ConfluentClientConfigProxy.SslCertificatePem ConfluentClientConfigProxy.SslCaLocation ConfluentClientConfigProxy.SslCaCertificateStores ConfluentClientConfigProxy.SslCrlLocation ConfluentClientConfigProxy.SslKeystoreLocation ConfluentClientConfigProxy.SslKeystorePassword ConfluentClientConfigProxy.SslEngineLocation ConfluentClientConfigProxy.SslEngineId ConfluentClientConfigProxy.EnableSslCertificateVerification ConfluentClientConfigProxy.SslEndpointIdentificationAlgorithm ConfluentClientConfigProxy.SaslKerberosServiceName ConfluentClientConfigProxy.SaslKerberosPrincipal ConfluentClientConfigProxy.SaslKerberosKinitCmd ConfluentClientConfigProxy.SaslKerberosKeytab ConfluentClientConfigProxy.SaslKerberosMinTimeBeforeRelogin ConfluentClientConfigProxy.SaslUsername ConfluentClientConfigProxy.SaslPassword ConfluentClientConfigProxy.SaslOauthbearerConfig ConfluentClientConfigProxy.EnableSaslOauthbearerUnsecureJwt ConfluentClientConfigProxy.PluginLibraryPaths ConfluentClientConfigProxy.ClientRack ConfluentClientConfigProxy.CancellationDelayMaxMs System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public sealed class KafkaConsumerConfig : ConfluentConsumerConfigProxy, IValidatableEndpointSettings, IEquatable<KafkaConsumerConfig> Constructors | Improve this doc View source KafkaConsumerConfig(KafkaClientConfig) Initializes a new instance of the KafkaConsumerConfig class. Declaration public KafkaConsumerConfig(KafkaClientConfig clientConfig = null) Parameters Type Name Description KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . Properties | Improve this doc View source CommitOffsetEach Defines the number of message to be processed before committing the offset to the server. The most reliable level is 1 but it reduces throughput. Declaration public int CommitOffsetEach { get; set; } Property Value Type Description System.Int32 | Improve this doc View source EnableAutoRecovery Specifies whether the consumer has to be automatically recycled when a Confluent.Kafka.KafkaException is thrown while polling/consuming or an issues is detected (e.g. a poll timeout is reported). The default is true . Declaration public bool EnableAutoRecovery { get; set; } Property Value Type Description System.Boolean | Improve this doc View source IsAutoCommitEnabled Gets a value indicating whether autocommit is enabled according to the explicit configuration and Kafka defaults. Declaration public bool IsAutoCommitEnabled { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source Equals(KafkaConsumerConfig) Declaration public bool Equals(KafkaConsumerConfig other) Parameters Type Name Description KafkaConsumerConfig other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public override void Validate() Overrides ConfluentClientConfigProxy.Validate() Implements IValidatableEndpointSettings System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Configuration.Kafka.KafkaConsumerEndpointBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.KafkaConsumerEndpointBuilder.html",
    "title": "Class KafkaConsumerEndpointBuilder | Silverback",
    "keywords": "Class KafkaConsumerEndpointBuilder Builds the KafkaConsumerEndpoint . Inheritance System.Object EndpointBuilder < KafkaConsumerEndpoint , IKafkaConsumerEndpointBuilder > ConsumerEndpointBuilder < KafkaConsumerEndpoint , IKafkaConsumerEndpointBuilder > KafkaConsumerEndpointBuilder Implements IKafkaConsumerEndpointBuilder IConsumerEndpointBuilder < IKafkaConsumerEndpointBuilder > IEndpointBuilder < IKafkaConsumerEndpointBuilder > Inherited Members ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.MessageType ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.DeserializeUsing(IMessageSerializer) ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.Decrypt(EncryptionSettings) ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.OnError(IErrorPolicy) ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.OnError(Action<IErrorPolicyBuilder>) ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.EnsureExactlyOnce(IExactlyOnceStrategy) ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder>) ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.EnableBatchProcessing(Int32, Nullable<TimeSpan>) ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.WithSequenceTimeout(TimeSpan) ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.ThrowIfUnhandled() ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.IgnoreUnhandledMessages() ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.HandleTombstoneMessages() ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.SkipNullMessages() ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.UseLegacyNullMessageHandling() ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.Build() EndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.EndpointsConfigurationBuilder EndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.This EndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.WithName(String) EndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.UseSerializer(IMessageSerializer) EndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.WithEncryption(EncryptionSettings) EndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.ValidateMessage(Boolean) EndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.DisableMessageValidation() EndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>.CreateEndpoint() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaConsumerEndpointBuilder : ConsumerEndpointBuilder<KafkaConsumerEndpoint, IKafkaConsumerEndpointBuilder>, IKafkaConsumerEndpointBuilder, IConsumerEndpointBuilder<IKafkaConsumerEndpointBuilder>, IEndpointBuilder<IKafkaConsumerEndpointBuilder> Constructors | Improve this doc View source KafkaConsumerEndpointBuilder(KafkaClientConfig, Type, IEndpointsConfigurationBuilder) Initializes a new instance of the KafkaConsumerEndpointBuilder class. Declaration public KafkaConsumerEndpointBuilder(KafkaClientConfig clientConfig = null, Type messageType = null, IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . System.Type messageType Gets the type of the message being consumed. IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source This Gets this instance. Declaration protected override IKafkaConsumerEndpointBuilder This { get; } Property Value Type Description IKafkaConsumerEndpointBuilder Overrides Silverback.Messaging.Configuration.EndpointBuilder<Silverback.Messaging.KafkaConsumerEndpoint, Silverback.Messaging.Configuration.Kafka.IKafkaConsumerEndpointBuilder>.This Remarks This is necessary to work around casting in the base classes. Methods | Improve this doc View source Configure(Action<KafkaConsumerConfig>) Configures the Kafka client properties. Declaration public IKafkaConsumerEndpointBuilder Configure(Action<KafkaConsumerConfig> configAction) Parameters Type Name Description System.Action < KafkaConsumerConfig > configAction An System.Action<T> that takes the IKafkaConsumerEndpointBuilder and configures it. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(TopicPartition[]) Specifies the topics and partitions to be consumed. Declaration public IKafkaConsumerEndpointBuilder ConsumeFrom(params TopicPartition[] topicPartitions) Parameters Type Name Description Confluent.Kafka.TopicPartition [] topicPartitions The topics and partitions to be consumed. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(TopicPartitionOffset[]) Specifies the topics and partitions to be consumed. Declaration public IKafkaConsumerEndpointBuilder ConsumeFrom(params TopicPartitionOffset[] topicPartitions) Parameters Type Name Description Confluent.Kafka.TopicPartitionOffset [] topicPartitions The topics and partitions to be consumed and the starting offset. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>>) Specifies the name of the topic to be consumed and a function that returns the partitions to be assigned. Declaration public IKafkaConsumerEndpointBuilder ConsumeFrom(string topicName, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>> topicPartitionsResolver) Parameters Type Name Description System.String topicName The name of the topic. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartition >> topicPartitionsResolver A function that receives all available Confluent.Kafka.TopicPartition for the topic and returns the collection of Confluent.Kafka.TopicPartition to be assigned. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>>) Specifies the name of the topic to be consumed and a function that returns the partitions to be assigned. Declaration public IKafkaConsumerEndpointBuilder ConsumeFrom(string topicName, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>> topicPartitionsResolver) Parameters Type Name Description System.String topicName The name of the topic. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> topicPartitionsResolver A function that receives all available Confluent.Kafka.TopicPartition for the topic and returns the collection of Confluent.Kafka.TopicPartitionOffset to be assigned. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String[]) Specifies the name of the topics to be consumed. Declaration public IKafkaConsumerEndpointBuilder ConsumeFrom(params string[] topicNames) Parameters Type Name Description System.String [] topicNames The name of the topics. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String[], Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>>) Specifies the name of the topic to be consumed and a function that returns the partitions to be assigned. Declaration public IKafkaConsumerEndpointBuilder ConsumeFrom(string[] topicNames, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>> topicPartitionsResolver) Parameters Type Name Description System.String [] topicNames The name of the topics. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartition >> topicPartitionsResolver A function that receives all available Confluent.Kafka.TopicPartition for the topics and returns the collection of Confluent.Kafka.TopicPartition to be assigned. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String[], Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>>) Specifies the name of the topic to be consumed and a function that returns the partitions to be assigned. Declaration public IKafkaConsumerEndpointBuilder ConsumeFrom(string[] topicNames, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>> topicPartitionsResolver) Parameters Type Name Description System.String [] topicNames The name of the topics. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> topicPartitionsResolver A function that receives all available Confluent.Kafka.TopicPartition for the topics and returns the collection of Confluent.Kafka.TopicPartitionOffset to be assigned. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source CreateEndpoint() Creates the endpoint to be configured according to the options stored in the builder. Declaration protected override KafkaConsumerEndpoint CreateEndpoint() Returns Type Description KafkaConsumerEndpoint The endpoint. Overrides Silverback.Messaging.Configuration.EndpointBuilder<Silverback.Messaging.KafkaConsumerEndpoint, Silverback.Messaging.Configuration.Kafka.IKafkaConsumerEndpointBuilder>.CreateEndpoint() | Improve this doc View source LimitBackpressure(Int32) Sets the maximum number of messages to be consumed and enqueued waiting to be processed. The limit will be applied per partition when processing the partitions independently (default). The default limit is 1. Declaration public IKafkaConsumerEndpointBuilder LimitBackpressure(int backpressureLimit) Parameters Type Name Description System.Int32 backpressureLimit The maximum number of messages to be enqueued. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source LimitParallelism(Int32) Sets the maximum number of incoming message that can be processed concurrently. Up to a message per each subscribed partition can be processed in parallel. The default limit is 10. Declaration public IKafkaConsumerEndpointBuilder LimitParallelism(int maxDegreeOfParallelism) Parameters Type Name Description System.Int32 maxDegreeOfParallelism The maximum number of incoming message that can be processed concurrently. Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProcessAllPartitionsTogether() Specifies that all partitions must be processed together. This means that a single stream will published for the messages from all the partitions and the sequences ( ChunkSequence , BatchSequence , ...) can span across the partitions. Declaration public IKafkaConsumerEndpointBuilder ProcessAllPartitionsTogether() Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProcessPartitionsIndependently() Specifies that the partitions must be processed independently. This means that a stream will published per each partition and the sequences ( ChunkSequence , BatchSequence , ...) cannot span across the partitions. This option is enabled by default. Use ProcessAllPartitionsTogether() to disable it. Declaration public IKafkaConsumerEndpointBuilder ProcessPartitionsIndependently() Returns Type Description IKafkaConsumerEndpointBuilder The IKafkaConsumerEndpointBuilder so that additional calls can be chained. Implements IKafkaConsumerEndpointBuilder IConsumerEndpointBuilder<TBuilder> IEndpointBuilder<TBuilder> Extension Methods ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ConsumerEndpointBuilderDeserializeAvroExtensions.DeserializeAvro<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.Kafka.KafkaProducerConfig.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.KafkaProducerConfig.html",
    "title": "Class KafkaProducerConfig | Silverback",
    "keywords": "Class KafkaProducerConfig Extends the Confluent.Kafka.ProducerConfig adding the Silverback specific settings. Inheritance System.Object ConfluentClientConfigProxy ConfluentProducerConfigProxy KafkaProducerConfig Implements IValidatableEndpointSettings System.IEquatable < KafkaProducerConfig > Inherited Members ConfluentProducerConfigProxy.EnableBackgroundPoll ConfluentProducerConfigProxy.EnableDeliveryReports ConfluentProducerConfigProxy.DeliveryReportFields ConfluentProducerConfigProxy.RequestTimeoutMs ConfluentProducerConfigProxy.MessageTimeoutMs ConfluentProducerConfigProxy.Partitioner ConfluentProducerConfigProxy.CompressionLevel ConfluentProducerConfigProxy.TransactionalId ConfluentProducerConfigProxy.TransactionTimeoutMs ConfluentProducerConfigProxy.EnableIdempotence ConfluentProducerConfigProxy.EnableGaplessGuarantee ConfluentProducerConfigProxy.QueueBufferingMaxMessages ConfluentProducerConfigProxy.QueueBufferingMaxKbytes ConfluentProducerConfigProxy.LingerMs ConfluentProducerConfigProxy.MessageSendMaxRetries ConfluentProducerConfigProxy.RetryBackoffMs ConfluentProducerConfigProxy.QueueBufferingBackpressureThreshold ConfluentProducerConfigProxy.CompressionType ConfluentProducerConfigProxy.BatchNumMessages ConfluentProducerConfigProxy.BatchSize ConfluentProducerConfigProxy.StickyPartitioningLingerMs ConfluentProducerConfigProxy.ConfluentConfig ConfluentClientConfigProxy.SaslMechanism ConfluentClientConfigProxy.Acks ConfluentClientConfigProxy.ClientId ConfluentClientConfigProxy.BootstrapServers ConfluentClientConfigProxy.MessageMaxBytes ConfluentClientConfigProxy.MessageCopyMaxBytes ConfluentClientConfigProxy.ReceiveMessageMaxBytes ConfluentClientConfigProxy.MaxInFlight ConfluentClientConfigProxy.TopicMetadataRefreshIntervalMs ConfluentClientConfigProxy.MetadataMaxAgeMs ConfluentClientConfigProxy.TopicMetadataRefreshFastIntervalMs ConfluentClientConfigProxy.TopicMetadataRefreshSparse ConfluentClientConfigProxy.TopicMetadataPropagationMaxMs ConfluentClientConfigProxy.TopicBlacklist ConfluentClientConfigProxy.Debug ConfluentClientConfigProxy.SocketTimeoutMs ConfluentClientConfigProxy.SocketSendBufferBytes ConfluentClientConfigProxy.SocketReceiveBufferBytes ConfluentClientConfigProxy.SocketKeepaliveEnable ConfluentClientConfigProxy.SocketNagleDisable ConfluentClientConfigProxy.SocketMaxFails ConfluentClientConfigProxy.BrokerAddressTtl ConfluentClientConfigProxy.BrokerAddressFamily ConfluentClientConfigProxy.ConnectionsMaxIdleMs ConfluentClientConfigProxy.ReconnectBackoffMs ConfluentClientConfigProxy.ReconnectBackoffMaxMs ConfluentClientConfigProxy.StatisticsIntervalMs ConfluentClientConfigProxy.LogQueue ConfluentClientConfigProxy.LogThreadName ConfluentClientConfigProxy.EnableRandomSeed ConfluentClientConfigProxy.LogConnectionClose ConfluentClientConfigProxy.InternalTerminationSignal ConfluentClientConfigProxy.ApiVersionRequest ConfluentClientConfigProxy.ApiVersionRequestTimeoutMs ConfluentClientConfigProxy.ApiVersionFallbackMs ConfluentClientConfigProxy.BrokerVersionFallback ConfluentClientConfigProxy.SecurityProtocol ConfluentClientConfigProxy.SslCipherSuites ConfluentClientConfigProxy.SslCurvesList ConfluentClientConfigProxy.SslSigalgsList ConfluentClientConfigProxy.SslKeyLocation ConfluentClientConfigProxy.SslKeyPassword ConfluentClientConfigProxy.SslKeyPem ConfluentClientConfigProxy.SslCertificateLocation ConfluentClientConfigProxy.SslCertificatePem ConfluentClientConfigProxy.SslCaLocation ConfluentClientConfigProxy.SslCaCertificateStores ConfluentClientConfigProxy.SslCrlLocation ConfluentClientConfigProxy.SslKeystoreLocation ConfluentClientConfigProxy.SslKeystorePassword ConfluentClientConfigProxy.SslEngineLocation ConfluentClientConfigProxy.SslEngineId ConfluentClientConfigProxy.EnableSslCertificateVerification ConfluentClientConfigProxy.SslEndpointIdentificationAlgorithm ConfluentClientConfigProxy.SaslKerberosServiceName ConfluentClientConfigProxy.SaslKerberosPrincipal ConfluentClientConfigProxy.SaslKerberosKinitCmd ConfluentClientConfigProxy.SaslKerberosKeytab ConfluentClientConfigProxy.SaslKerberosMinTimeBeforeRelogin ConfluentClientConfigProxy.SaslUsername ConfluentClientConfigProxy.SaslPassword ConfluentClientConfigProxy.SaslOauthbearerConfig ConfluentClientConfigProxy.EnableSaslOauthbearerUnsecureJwt ConfluentClientConfigProxy.PluginLibraryPaths ConfluentClientConfigProxy.ClientRack ConfluentClientConfigProxy.CancellationDelayMaxMs System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public sealed class KafkaProducerConfig : ConfluentProducerConfigProxy, IValidatableEndpointSettings, IEquatable<KafkaProducerConfig> Constructors | Improve this doc View source KafkaProducerConfig(KafkaClientConfig) Initializes a new instance of the KafkaProducerConfig class. Declaration public KafkaProducerConfig(KafkaClientConfig clientConfig = null) Parameters Type Name Description KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . Properties | Improve this doc View source AreDeliveryReportsEnabled Gets a value indicating whether delivery reports are enabled according to the explicit configuration and Kafka defaults. Declaration public bool AreDeliveryReportsEnabled { get; } Property Value Type Description System.Boolean | Improve this doc View source DisposeOnException Specifies whether the producer has to be disposed and recreated if a Confluent.Kafka.KafkaException is thrown. The default is true . Declaration public bool DisposeOnException { get; set; } Property Value Type Description System.Boolean | Improve this doc View source FlushTimeout Specifies the flush operation timeout. The default is 30 seconds. Declaration public TimeSpan FlushTimeout { get; set; } Property Value Type Description System.TimeSpan | Improve this doc View source ThrowIfNotAcknowledged Specifies whether an exception must be thrown by the producer if the persistence is not acknowledge by the broker. The default is true . Declaration public bool ThrowIfNotAcknowledged { get; set; } Property Value Type Description System.Boolean Methods | Improve this doc View source Equals(KafkaProducerConfig) Declaration public bool Equals(KafkaProducerConfig other) Parameters Type Name Description KafkaProducerConfig other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public override void Validate() Overrides ConfluentClientConfigProxy.Validate() Implements IValidatableEndpointSettings System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Configuration.Kafka.KafkaProducerEndpointBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Kafka.KafkaProducerEndpointBuilder.html",
    "title": "Class KafkaProducerEndpointBuilder | Silverback",
    "keywords": "Class KafkaProducerEndpointBuilder Builds the KafkaProducerEndpoint . Inheritance System.Object EndpointBuilder < KafkaProducerEndpoint , IKafkaProducerEndpointBuilder > ProducerEndpointBuilder < KafkaProducerEndpoint , IKafkaProducerEndpointBuilder > KafkaProducerEndpointBuilder Implements IKafkaProducerEndpointBuilder IProducerEndpointBuilder < IKafkaProducerEndpointBuilder > IEndpointBuilder < IKafkaProducerEndpointBuilder > Inherited Members ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.SerializeUsing(IMessageSerializer) ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.Encrypt(EncryptionSettings) ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.UseStrategy(IProduceStrategy) ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.ProduceDirectly() ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.ProduceToOutbox() ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.EnableChunking(Int32, Boolean) ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.AddHeader(String, Object) ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.AddHeader<TMessage>(String, Object) ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.AddHeader<TMessage>(String, Func<IOutboundEnvelope<TMessage>, Object>) ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.Build() EndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.EndpointsConfigurationBuilder EndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.This EndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.WithName(String) EndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.UseSerializer(IMessageSerializer) EndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.WithEncryption(EncryptionSettings) EndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.ValidateMessage(Boolean) EndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.DisableMessageValidation() EndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>.CreateEndpoint() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Kafka Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaProducerEndpointBuilder : ProducerEndpointBuilder<KafkaProducerEndpoint, IKafkaProducerEndpointBuilder>, IKafkaProducerEndpointBuilder, IProducerEndpointBuilder<IKafkaProducerEndpointBuilder>, IEndpointBuilder<IKafkaProducerEndpointBuilder> Constructors | Improve this doc View source KafkaProducerEndpointBuilder(KafkaClientConfig, IEndpointsConfigurationBuilder) Initializes a new instance of the KafkaProducerEndpointBuilder class. Declaration public KafkaProducerEndpointBuilder(KafkaClientConfig clientConfig = null, IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source This Gets this instance. Declaration protected override IKafkaProducerEndpointBuilder This { get; } Property Value Type Description IKafkaProducerEndpointBuilder Overrides Silverback.Messaging.Configuration.EndpointBuilder<Silverback.Messaging.KafkaProducerEndpoint, Silverback.Messaging.Configuration.Kafka.IKafkaProducerEndpointBuilder>.This Remarks This is necessary to work around casting in the base classes. Methods | Improve this doc View source Configure(Action<KafkaProducerConfig>) Configures the Kafka client properties. Declaration public IKafkaProducerEndpointBuilder Configure(Action<KafkaProducerConfig> configAction) Parameters Type Name Description System.Action < KafkaProducerConfig > configAction An System.Action<T> that takes the KafkaProducerConfig and configures it. Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source CreateEndpoint() Creates the endpoint to be configured according to the options stored in the builder. Declaration protected override KafkaProducerEndpoint CreateEndpoint() Returns Type Description KafkaProducerEndpoint The endpoint. Overrides Silverback.Messaging.Configuration.EndpointBuilder<Silverback.Messaging.KafkaProducerEndpoint, Silverback.Messaging.Configuration.Kafka.IKafkaProducerEndpointBuilder>.CreateEndpoint() | Improve this doc View source ProduceTo(Func<IOutboundEnvelope, IServiceProvider, String>, Func<IOutboundEnvelope, IServiceProvider, Int32>) Specifies the name of the topic and optionally the target partition. Declaration public IKafkaProducerEndpointBuilder ProduceTo(Func<IOutboundEnvelope, IServiceProvider, string> topicNameFunction, Func<IOutboundEnvelope, IServiceProvider, int> partitionFunction = null) Parameters Type Name Description System.Func < IOutboundEnvelope , System.IServiceProvider , System.String > topicNameFunction The function returning the topic name for the message being produced. System.Func < IOutboundEnvelope , System.IServiceProvider , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(Func<IOutboundEnvelope, String>, Func<IOutboundEnvelope, Int32>) Specifies the name of the topic and optionally the target partition. Declaration public IKafkaProducerEndpointBuilder ProduceTo(Func<IOutboundEnvelope, string> topicNameFunction, Func<IOutboundEnvelope, int> partitionFunction = null) Parameters Type Name Description System.Func < IOutboundEnvelope , System.String > topicNameFunction The function returning the topic name for the message being produced. System.Func < IOutboundEnvelope , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String, Func<IOutboundEnvelope, String[]>, Func<IOutboundEnvelope, Int32>) Specifies the name of the topic and optionally the target partition. Declaration public IKafkaProducerEndpointBuilder ProduceTo(string topicNameFormatString, Func<IOutboundEnvelope, string[]> topicNameArgumentsFunction, Func<IOutboundEnvelope, int> partitionFunction = null) Parameters Type Name Description System.String topicNameFormatString The endpoint name format string that will be combined with the arguments returned by the topicNameArgumentsFunction using a string.Format . System.Func < IOutboundEnvelope , System.String []> topicNameArgumentsFunction The function returning the arguments to be used to format the string. System.Func < IOutboundEnvelope , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String, Nullable<Int32>) Specifies the name of the topic and optionally the target partition. Declaration public IKafkaProducerEndpointBuilder ProduceTo(string topicName, int? partition = null) Parameters Type Name Description System.String topicName The name of the topic. System.Nullable < System.Int32 > partition The optional partition index. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, IServiceProvider, String>, Func<IOutboundEnvelope<TMessage>, IServiceProvider, Int32>) Specifies the name of the topic and optionally the target partition. Declaration public IKafkaProducerEndpointBuilder ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, IServiceProvider, string> topicNameFunction, Func<IOutboundEnvelope<TMessage>, IServiceProvider, int> partitionFunction = null) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.IServiceProvider , System.String > topicNameFunction The function returning the topic name for the message being produced. System.Func < IOutboundEnvelope <TMessage>, System.IServiceProvider , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, String>, Func<IOutboundEnvelope<TMessage>, Int32>) Specifies the name of the topic and optionally the target partition. Declaration public IKafkaProducerEndpointBuilder ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, string> topicNameFunction, Func<IOutboundEnvelope<TMessage>, int> partitionFunction = null) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.String > topicNameFunction The function returning the topic name for the message being produced. System.Func < IOutboundEnvelope <TMessage>, System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source ProduceTo<TMessage>(String, Func<IOutboundEnvelope<TMessage>, String[]>, Func<IOutboundEnvelope<TMessage>, Int32>) Specifies the name of the topic and optionally the target partition. Declaration public IKafkaProducerEndpointBuilder ProduceTo<TMessage>(string topicNameFormatString, Func<IOutboundEnvelope<TMessage>, string[]> topicNameArgumentsFunction, Func<IOutboundEnvelope<TMessage>, int> partitionFunction = null) where TMessage : class Parameters Type Name Description System.String topicNameFormatString The endpoint name format string that will be combined with the arguments returned by the topicNameArgumentsFunction using a string.Format . System.Func < IOutboundEnvelope <TMessage>, System.String []> topicNameArgumentsFunction The function returning the arguments to be used to format the string. System.Func < IOutboundEnvelope <TMessage>, System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source UseEndpointNameResolver<TResolver>() Specifies the type of the IKafkaProducerEndpointNameResolver to be used to resolve the actual endpoint name and partition. Declaration public IKafkaProducerEndpointBuilder UseEndpointNameResolver<TResolver>() where TResolver : IKafkaProducerEndpointNameResolver Returns Type Description IKafkaProducerEndpointBuilder The IKafkaProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TResolver The type of the IKafkaProducerEndpointNameResolver to be used. | Improve this doc View source WithKafkaKey<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) Uses the specified value provider function to set the kafka key for each produced message. Declaration public IKafkaProducerEndpointBuilder WithKafkaKey<TMessage>(Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The value provider function. Returns Type Description IKafkaProducerEndpointBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched. Implements IKafkaProducerEndpointBuilder IProducerEndpointBuilder<TBuilder> IEndpointBuilder<TBuilder> Extension Methods ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsAvroExtensions.SerializeAsAvro<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.KafkaBrokerOptionsConfigurator.html": {
    "href": "api/Silverback.Messaging.Configuration.KafkaBrokerOptionsConfigurator.html",
    "title": "Class KafkaBrokerOptionsConfigurator | Silverback",
    "keywords": "Class KafkaBrokerOptionsConfigurator This class will be located via assembly scanning and invoked when a KafkaBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Inheritance System.Object KafkaBrokerOptionsConfigurator Implements IBrokerOptionsConfigurator < KafkaBroker > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaBrokerOptionsConfigurator : IBrokerOptionsConfigurator<KafkaBroker> Methods | Improve this doc View source Configure(IBrokerOptionsBuilder) Called while registering the broker to configure the broker-specific services and options (e.g. behaviors). Declaration public void Configure(IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Implements IBrokerOptionsConfigurator<TBroker>"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.html",
    "title": "Namespace Silverback.Messaging.Configuration.Mqtt | Silverback",
    "keywords": "Namespace Silverback.Messaging.Configuration.Mqtt Classes MqttBrokerOptionsConfigurator This class will be located via assembly scanning and invoked when a MqttBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection . MqttClientConfig The configuration used to connect with the MQTT broker. This is actually a wrapper around the MQTTnet.Client.Options.MqttClientOptions from the MQTTnet library. MqttClientConfigBuilder Builds the MqttClientConfig . MqttConsumerEndpointBuilder Builds the MqttConsumerEndpoint . MqttLastWillMessageBuilder Builds the last will and testament (LWT) message related part of the MqttClientConfig . MqttProducerEndpointBuilder Builds the MqttProducerEndpoint . Interfaces IMockedMqttOptions Stores the mocked MQTT configuration. IMockedMqttOptionsBuilder Exposes the methods to configure the mocked MQTT. IMqttClientConfigBuilder Builds the MqttClientConfig . IMqttConsumerEndpointBuilder Builds the MqttConsumerEndpoint . IMqttEndpointsConfigurationBuilder Exposes the methods to configure the connection to Mqtt and add the inbound and outbound endpoints. IMqttLastWillMessageBuilder Builds the last will and testament (LWT) message related part of the MqttClientConfig . IMqttProducerEndpointBuilder Builds the MqttProducerEndpoint ."
  },
  "api/Silverback.Messaging.Configuration.Mqtt.IMockedMqttOptions.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.IMockedMqttOptions.html",
    "title": "Interface IMockedMqttOptions | Silverback",
    "keywords": "Interface IMockedMqttOptions Stores the mocked MQTT configuration. Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IMockedMqttOptions Properties | Improve this doc View source ConnectionDelay Gets or sets the delay to be applied before establishing a connection. Declaration TimeSpan ConnectionDelay { get; set; } Property Value Type Description System.TimeSpan"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.IMockedMqttOptionsBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.IMockedMqttOptionsBuilder.html",
    "title": "Interface IMockedMqttOptionsBuilder | Silverback",
    "keywords": "Interface IMockedMqttOptionsBuilder Exposes the methods to configure the mocked MQTT. Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IMockedMqttOptionsBuilder Methods | Improve this doc View source DelayConnection(TimeSpan) Specifies the delay to be applied before establishing a connection. Declaration IMockedMqttOptionsBuilder DelayConnection(TimeSpan delay) Parameters Type Name Description System.TimeSpan delay The delay to be applied before establishing a connection. Returns Type Description IMockedMqttOptionsBuilder The IMockedMqttOptionsBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.Mqtt.IMqttClientConfigBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.IMqttClientConfigBuilder.html",
    "title": "Interface IMqttClientConfigBuilder | Silverback",
    "keywords": "Interface IMqttClientConfigBuilder Builds the MqttClientConfig . Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public interface IMqttClientConfigBuilder Methods | Improve this doc View source AddUserProperty(String, String) Adds a user property to be sent with the CONNECT packet. It can be used to send connection related properties from the client to the server. Declaration IMqttClientConfigBuilder AddUserProperty(string name, string value) Parameters Type Name Description System.String name The property name. System.String value The property value. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source ConnectViaTcp(Action<MqttClientTcpOptions>) Specifies the TCP connection settings. Declaration IMqttClientConfigBuilder ConnectViaTcp(Action<MqttClientTcpOptions> optionsAction) Parameters Type Name Description System.Action < MQTTnet.Client.Options.MqttClientTcpOptions > optionsAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientTcpOptions and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source ConnectViaTcp(String, Nullable<Int32>) Specifies the TCP connection settings. Declaration IMqttClientConfigBuilder ConnectViaTcp(string server, int? port = null) Parameters Type Name Description System.String server The server address. System.Nullable < System.Int32 > port The server port. If not specified the default port 1883 will be used. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source ConnectViaWebSocket(Action<MqttClientWebSocketOptions>) Specifies the WebSocket connection settings. Declaration IMqttClientConfigBuilder ConnectViaWebSocket(Action<MqttClientWebSocketOptions> optionsAction) Parameters Type Name Description System.Action < MQTTnet.Client.Options.MqttClientWebSocketOptions > optionsAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientWebSocketOptions and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source ConnectViaWebSocket(String, MqttClientOptionsBuilderWebSocketParameters) Specifies the WebSocket connection settings. Declaration IMqttClientConfigBuilder ConnectViaWebSocket(string uri, MqttClientOptionsBuilderWebSocketParameters parameters = null) Parameters Type Name Description System.String uri The server URI. MQTTnet.Client.Options.MqttClientOptionsBuilderWebSocketParameters parameters The optional MQTTnet.Client.Options.MqttClientOptionsBuilderWebSocketParameters . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source ConnectViaWebSocket(String, Action<MqttClientOptionsBuilderWebSocketParameters>) Specifies the WebSocket connection settings. Declaration IMqttClientConfigBuilder ConnectViaWebSocket(string uri, Action<MqttClientOptionsBuilderWebSocketParameters> parametersAction) Parameters Type Name Description System.String uri The server URI. System.Action < MQTTnet.Client.Options.MqttClientOptionsBuilderWebSocketParameters > parametersAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientOptionsBuilderWebSocketParameters and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source DisableKeepAlive() Disables the the keep alive mechanism. No ping packet will be sent. Declaration IMqttClientConfigBuilder DisableKeepAlive() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source DisableProblemInformation() Specifies that the reason string or user properties can be sent with CONNACK or DISCONNECT packets only. Declaration IMqttClientConfigBuilder DisableProblemInformation() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source DisableResponseInformation() Specifies that the server should not return the response information in the CONNACK packet. This is usually the default. Declaration IMqttClientConfigBuilder DisableResponseInformation() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source DisableTls() Disables TLS. The network traffic will not be encrypted. Declaration IMqttClientConfigBuilder DisableTls() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source EnableTls() Specifies that TLS has to be used to encrypt the network traffic. Declaration IMqttClientConfigBuilder EnableTls() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source EnableTls(MqttClientOptionsBuilderTlsParameters) Specifies that TLS has to be used to encrypt the network traffic. Declaration IMqttClientConfigBuilder EnableTls(MqttClientOptionsBuilderTlsParameters parameters) Parameters Type Name Description MQTTnet.Client.Options.MqttClientOptionsBuilderTlsParameters parameters The MQTTnet.Client.Options.MqttClientOptionsBuilderTlsParameters . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source EnableTls(Action<MqttClientOptionsBuilderTlsParameters>) Specifies that TLS has to be used to encrypt the network traffic. Declaration IMqttClientConfigBuilder EnableTls(Action<MqttClientOptionsBuilderTlsParameters> parametersAction) Parameters Type Name Description System.Action < MQTTnet.Client.Options.MqttClientOptionsBuilderTlsParameters > parametersAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientOptionsBuilderTlsParameters and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source LimitPacketSize(Int64) Sets the maximum packet size in byte the client will process. The default is no limit. Declaration IMqttClientConfigBuilder LimitPacketSize(long maximumPacketSize) Parameters Type Name Description System.Int64 maximumPacketSize The maximum packet size. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source LimitTopicAlias(Int32) Sets the maximum number of topic aliases the server can send in the PUBLISH packet. The default is 0, meaning that no alias can be sent. Declaration IMqttClientConfigBuilder LimitTopicAlias(int topicAliasMaximum) Parameters Type Name Description System.Int32 topicAliasMaximum The maximum number of topic aliases. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source LimitUnacknowledgedPublications(Int32) Sets the maximum number of QoS 1 and QoS 2 publications that can be received and processed concurrently. The default value is null , that means 65'535 . Declaration IMqttClientConfigBuilder LimitUnacknowledgedPublications(int receiveMaximum) Parameters Type Name Description System.Int32 receiveMaximum The maximum number of concurrent publications. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. Remarks There is no mechanism to limit the QoS 0 publications that the Server might try to send. | Improve this doc View source RequestCleanSession() Specifies that a clean non-persistent session has to be created for this client. This is the default, use RequestPersistentSession() to switch to a persistent session. Declaration IMqttClientConfigBuilder RequestCleanSession() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source RequestPersistentSession() Specifies that a persistent session has to be created for this client. Declaration IMqttClientConfigBuilder RequestPersistentSession() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source RequestProblemInformation() Specifies that the reason string or user properties can be sent with any packet. This is usually the default. Declaration IMqttClientConfigBuilder RequestProblemInformation() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source RequestResponseInformation() Specifies that the server should return the response information in the CONNACK packet. Declaration IMqttClientConfigBuilder RequestResponseInformation() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source SendKeepAlive(TimeSpan) Sets the maximum period that can elapse without a packet being sent to the message broker. When this period is elapsed a ping packet will be sent to keep the connection alive. The default is 15 seconds. Declaration IMqttClientConfigBuilder SendKeepAlive(TimeSpan interval) Parameters Type Name Description System.TimeSpan interval The maximum period that can elapse without a packet being sent. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source SendLastWillMessage(Action<IMqttLastWillMessageBuilder>) Specifies the last will and testament (LWT) message to be sent when the client disconnects ungracefully. Declaration IMqttClientConfigBuilder SendLastWillMessage(Action<IMqttLastWillMessageBuilder> lastWillBuilderAction) Parameters Type Name Description System.Action < IMqttLastWillMessageBuilder > lastWillBuilderAction An System.Action<T> that takes the IMqttLastWillMessageBuilder and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseExtendedAuthenticationExchangeHandler(IMqttExtendedAuthenticationExchangeHandler) Sets the handler to be used to handle the custom authentication data exchange. Declaration IMqttClientConfigBuilder UseExtendedAuthenticationExchangeHandler(IMqttExtendedAuthenticationExchangeHandler handler) Parameters Type Name Description MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler handler The MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler instance to be used. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseExtendedAuthenticationExchangeHandler(Type) Sets the handler to be used to handle the custom authentication data exchange. Declaration IMqttClientConfigBuilder UseExtendedAuthenticationExchangeHandler(Type handlerType) Parameters Type Name Description System.Type handlerType The type of the MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler to be used. The instance will be resolved via System.IServiceProvider . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseExtendedAuthenticationExchangeHandler<THandler>() Sets the handler to be used to handle the custom authentication data exchange. Declaration IMqttClientConfigBuilder UseExtendedAuthenticationExchangeHandler<THandler>() where THandler : IMqttExtendedAuthenticationExchangeHandler Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. Type Parameters Name Description THandler The type of the MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler to be used. The instance will be resolved via System.IServiceProvider . | Improve this doc View source UseProtocolVersion(MqttProtocolVersion) Specifies the MQTT protocol version. The default is MQTTnet.Formatter.MqttProtocolVersion.V500 . Declaration IMqttClientConfigBuilder UseProtocolVersion(MqttProtocolVersion value) Parameters Type Name Description MQTTnet.Formatter.MqttProtocolVersion value The MQTTnet.Formatter.MqttProtocolVersion . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseProxy(Action<MqttClientWebSocketProxyOptions>) Specifies the WebSocket connection settings. Declaration IMqttClientConfigBuilder UseProxy(Action<MqttClientWebSocketProxyOptions> optionsAction) Parameters Type Name Description System.Action < MQTTnet.Client.Options.MqttClientWebSocketProxyOptions > optionsAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientWebSocketProxyOptions and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseProxy(String, String, String, String, Boolean, String[]) Specifies the WebSocket proxy to be used. Declaration IMqttClientConfigBuilder UseProxy(string address, string username = null, string password = null, string domain = null, bool bypassOnLocal = false, string[] bypassList = null) Parameters Type Name Description System.String address The proxy address. System.String username The user name to be used to authenticate against the proxy. System.String password The password to be used to authenticate against the proxy. System.String domain The user domain. System.Boolean bypassOnLocal A boolean value indicating whether the proxy must be bypassed for local addresses. System.String [] bypassList The bypass list. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithAuthentication(String, Byte[]) Specifies the authentication method to be used and the associated data. Declaration IMqttClientConfigBuilder WithAuthentication(string method, byte[] data) Parameters Type Name Description System.String method The authentication method. System.Byte [] data The authentication data. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithClientId(String) Sets the client identifier. The default is Guid.NewGuid().ToString() . Declaration IMqttClientConfigBuilder WithClientId(string value) Parameters Type Name Description System.String value The client identifier. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithCommunicationTimeout(TimeSpan) Sets the communication timeout. The default is 10 seconds. Declaration IMqttClientConfigBuilder WithCommunicationTimeout(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The System.TimeSpan representing the timeout. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithCredentials(IMqttClientCredentials) Sets the credential to be used to authenticate with the message broker. Declaration IMqttClientConfigBuilder WithCredentials(IMqttClientCredentials credentials) Parameters Type Name Description MQTTnet.Client.Options.IMqttClientCredentials credentials The MQTTnet.Client.Options.IMqttClientCredentials . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithCredentials(String, Byte[]) Sets the credential to be used to authenticate with the message broker. Declaration IMqttClientConfigBuilder WithCredentials(string username, byte[] password = null) Parameters Type Name Description System.String username The user name. System.Byte [] password The user password. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithCredentials(String, String) Sets the credential to be used to authenticate with the message broker. Declaration IMqttClientConfigBuilder WithCredentials(string username, string password = null) Parameters Type Name Description System.String username The user name. System.String password The user password. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithSessionExpiration(TimeSpan) Sets the session expiry interval. When set to 0 the session will expire when the connection is closed, while System.TimeSpan.MaxValue indicates that the session will never expire. The default is 0. Declaration IMqttClientConfigBuilder WithSessionExpiration(TimeSpan sessionExpiryInterval) Parameters Type Name Description System.TimeSpan sessionExpiryInterval The System.TimeSpan representing the session expiry interval. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.Mqtt.IMqttConsumerEndpointBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.IMqttConsumerEndpointBuilder.html",
    "title": "Interface IMqttConsumerEndpointBuilder | Silverback",
    "keywords": "Interface IMqttConsumerEndpointBuilder Builds the MqttConsumerEndpoint . Inherited Members IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.MessageType IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.DeserializeUsing(IMessageSerializer) IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.Decrypt(EncryptionSettings) IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.OnError(IErrorPolicy) IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.OnError(Action<IErrorPolicyBuilder>) IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.EnsureExactlyOnce(IExactlyOnceStrategy) IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder>) IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.EnableBatchProcessing(Int32, Nullable<TimeSpan>) IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.WithSequenceTimeout(TimeSpan) IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.ThrowIfUnhandled() IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.IgnoreUnhandledMessages() IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.HandleTombstoneMessages() IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.SkipNullMessages() IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>.UseLegacyNullMessageHandling() IEndpointBuilder<IMqttConsumerEndpointBuilder>.WithName(String) IEndpointBuilder<IMqttConsumerEndpointBuilder>.UseSerializer(IMessageSerializer) IEndpointBuilder<IMqttConsumerEndpointBuilder>.WithEncryption(EncryptionSettings) IEndpointBuilder<IMqttConsumerEndpointBuilder>.ValidateMessage(Boolean) IEndpointBuilder<IMqttConsumerEndpointBuilder>.DisableMessageValidation() Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public interface IMqttConsumerEndpointBuilder : IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>, IEndpointBuilder<IMqttConsumerEndpointBuilder> Methods | Improve this doc View source Configure(Action<IMqttClientConfigBuilder>) Configures the MQTT client properties. Declaration IMqttConsumerEndpointBuilder Configure(Action<IMqttClientConfigBuilder> configBuilderAction) Parameters Type Name Description System.Action < IMqttClientConfigBuilder > configBuilderAction An System.Action<T> that takes the IMqttClientConfigBuilder and configures it. Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source Configure(Action<MqttClientConfig>) Configures the MQTT client properties. Declaration IMqttConsumerEndpointBuilder Configure(Action<MqttClientConfig> configAction) Parameters Type Name Description System.Action < MqttClientConfig > configAction An System.Action<T> that takes the MqttClientConfig and configures it. Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String[]) Specifies the name of the topics or the topic filter strings. Declaration IMqttConsumerEndpointBuilder ConsumeFrom(params string[] topics) Parameters Type Name Description System.String [] topics The name of the topics or the topic filter string. Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithAtLeastOnceQoS() Specifies that the topics have to be subscribed with the at least once quality of service level. Declaration IMqttConsumerEndpointBuilder WithAtLeastOnceQoS() Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithAtMostOnceQoS() Specifies that the topics have to be subscribed with the at most once quality of service level. Declaration IMqttConsumerEndpointBuilder WithAtMostOnceQoS() Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithExactlyOnceQoS() Specifies that the topics have to be subscribed with the exactly once quality of service level. Declaration IMqttConsumerEndpointBuilder WithExactlyOnceQoS() Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithQualityOfServiceLevel(MqttQualityOfServiceLevel) Specifies the desired quality of service level. Declaration IMqttConsumerEndpointBuilder WithQualityOfServiceLevel(MqttQualityOfServiceLevel qosLevel) Parameters Type Name Description MQTTnet.Protocol.MqttQualityOfServiceLevel qosLevel The MQTTnet.Protocol.MqttQualityOfServiceLevel . Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. Extension Methods ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ConsumerEndpointBuilderDeserializeAvroExtensions.DeserializeAvro<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.IMqttEndpointsConfigurationBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.IMqttEndpointsConfigurationBuilder.html",
    "title": "Interface IMqttEndpointsConfigurationBuilder | Silverback",
    "keywords": "Interface IMqttEndpointsConfigurationBuilder Exposes the methods to configure the connection to Mqtt and add the inbound and outbound endpoints. Inherited Members IEndpointsConfigurationBuilder.ServiceProvider Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public interface IMqttEndpointsConfigurationBuilder : IEndpointsConfigurationBuilder Methods | Improve this doc View source AddInbound(Action<IMqttConsumerEndpointBuilder>) Adds an inbound endpoint and instantiates a MqttConsumer to consume from a Mqtt topic. Declaration IMqttEndpointsConfigurationBuilder AddInbound(Action<IMqttConsumerEndpointBuilder> endpointBuilderAction) Parameters Type Name Description System.Action < IMqttConsumerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IMqttConsumerEndpointBuilder and configures it. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. Remarks Multiple calls to this methods will cause multiple consumers to be instantiated, which means multiple connections being issues and more resources being used. The MqttConsumerEndpoint allows to define multiple topics to be consumed, to efficiently instantiate a single consumer for all of them. | Improve this doc View source AddInbound(Type, Action<IMqttConsumerEndpointBuilder>) Adds an inbound endpoint and instantiates a MqttConsumer to consume from a Mqtt topic. Declaration IMqttEndpointsConfigurationBuilder AddInbound(Type messageType, Action<IMqttConsumerEndpointBuilder> endpointBuilderAction) Parameters Type Name Description System.Type messageType The type of the messages that will be consumed from this endpoint. Specifying the message type will usually automatically switch to the typed message serializer and deserialize this specific type, regardless of the message headers. System.Action < IMqttConsumerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IMqttConsumerEndpointBuilder and configures it. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. Remarks Multiple calls to this methods will cause multiple consumers to be instantiated, which means multiple connections being issues and more resources being used. The MqttConsumerEndpoint allows to define multiple topics to be consumed, to efficiently instantiate a single consumer for all of them. | Improve this doc View source AddInbound<TMessage>(Action<IMqttConsumerEndpointBuilder>) Adds an inbound endpoint and instantiates a MqttConsumer to consume from a Mqtt topic. Declaration IMqttEndpointsConfigurationBuilder AddInbound<TMessage>(Action<IMqttConsumerEndpointBuilder> endpointBuilderAction) Parameters Type Name Description System.Action < IMqttConsumerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IMqttConsumerEndpointBuilder and configures it. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages that will be consumed from this endpoint. Specifying the message type will usually automatically switch to the typed message serializer and deserialize this specific type, regardless of the message headers. Remarks Multiple calls to this methods will cause multiple consumers to be instantiated, which means multiple connections being issues and more resources being used. The MqttConsumerEndpoint allows to define multiple topics to be consumed, to efficiently instantiate a single consumer for all of them. | Improve this doc View source AddOutbound(Type, DictionaryOutboundRouter<Object, MqttProducerEndpoint>.RouterFunction, IReadOnlyDictionary<String, Action<IMqttProducerEndpointBuilder>>, Boolean) Adds an outbound endpoint to produce the specified message type to a Mqtt topic. Declaration IMqttEndpointsConfigurationBuilder AddOutbound(Type messageType, DictionaryOutboundRouter<object, MqttProducerEndpoint>.RouterFunction routerFunction, IReadOnlyDictionary<string, Action<IMqttProducerEndpointBuilder>> endpointBuilderActions, bool preloadProducers = true) Parameters Type Name Description System.Type messageType The type of the messages to be published to this endpoint. DictionaryOutboundRouter.RouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IMqttProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(Type, DictionaryOutboundRouter<Object, MqttProducerEndpoint>.SingleEndpointRouterFunction, IReadOnlyDictionary<String, Action<IMqttProducerEndpointBuilder>>, Boolean) Adds an outbound endpoint to produce the specified message type to a Mqtt topic. Declaration IMqttEndpointsConfigurationBuilder AddOutbound(Type messageType, DictionaryOutboundRouter<object, MqttProducerEndpoint>.SingleEndpointRouterFunction routerFunction, IReadOnlyDictionary<string, Action<IMqttProducerEndpointBuilder>> endpointBuilderActions, bool preloadProducers = true) Parameters Type Name Description System.Type messageType The type of the messages to be published to this endpoint. DictionaryOutboundRouter.SingleEndpointRouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IMqttProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound(Type, Action<IMqttProducerEndpointBuilder>, Boolean) Adds an outbound endpoint to produce the specified message type to a Mqtt topic. Declaration IMqttEndpointsConfigurationBuilder AddOutbound(Type messageType, Action<IMqttProducerEndpointBuilder> endpointBuilderAction, bool preloadProducers = true) Parameters Type Name Description System.Type messageType The type of the messages to be published to this endpoint. System.Action < IMqttProducerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IMqttProducerEndpointBuilder and configures it. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source AddOutbound<TMessage>(DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.RouterFunction, IReadOnlyDictionary<String, Action<IMqttProducerEndpointBuilder>>, Boolean) Adds an outbound endpoint to produce the specified message type to a Mqtt topic. Declaration IMqttEndpointsConfigurationBuilder AddOutbound<TMessage>(DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.RouterFunction routerFunction, IReadOnlyDictionary<string, Action<IMqttProducerEndpointBuilder>> endpointBuilderActions, bool preloadProducers = true) Parameters Type Name Description DictionaryOutboundRouter.RouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IMqttProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.SingleEndpointRouterFunction, IReadOnlyDictionary<String, Action<IMqttProducerEndpointBuilder>>, Boolean) Adds an outbound endpoint to produce the specified message type to a Mqtt topic. Declaration IMqttEndpointsConfigurationBuilder AddOutbound<TMessage>(DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.SingleEndpointRouterFunction routerFunction, IReadOnlyDictionary<string, Action<IMqttProducerEndpointBuilder>> endpointBuilderActions, bool preloadProducers = true) Parameters Type Name Description DictionaryOutboundRouter.SingleEndpointRouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IMqttProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source AddOutbound<TMessage>(Action<IMqttProducerEndpointBuilder>, Boolean) Adds an outbound endpoint to produce the specified message type to a Mqtt topic. Declaration IMqttEndpointsConfigurationBuilder AddOutbound<TMessage>(Action<IMqttProducerEndpointBuilder> endpointBuilderAction, bool preloadProducers = true) Parameters Type Name Description System.Action < IMqttProducerEndpointBuilder > endpointBuilderAction An System.Action<T> that takes the IMqttProducerEndpointBuilder and configures it. System.Boolean preloadProducers Specifies whether the producers must be immediately instantiated and connected. When false the IProducer will be created only when the first message is about to be produced. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be published to this endpoint. | Improve this doc View source Configure(Action<IMqttClientConfigBuilder>) Configures the MQTT client properties that are shared between the producers and consumers. Declaration IMqttEndpointsConfigurationBuilder Configure(Action<IMqttClientConfigBuilder> configBuilderAction) Parameters Type Name Description System.Action < IMqttClientConfigBuilder > configBuilderAction An System.Action<T> that takes the IMqttClientConfigBuilder and configures it. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. | Improve this doc View source Configure(Action<MqttClientConfig>) Configures the MQTT client properties that are shared between the producers and consumers. Declaration IMqttEndpointsConfigurationBuilder Configure(Action<MqttClientConfig> configAction) Parameters Type Name Description System.Action < MqttClientConfig > configAction An System.Action<T> that takes the MqttClientConfig and configures it. Returns Type Description IMqttEndpointsConfigurationBuilder The IMqttEndpointsConfigurationBuilder so that additional calls can be chained. Extension Methods EndpointsConfigurationBuilderAddMqttEndpointsExtensions.AddMqttEndpoints(IEndpointsConfigurationBuilder, Action<IMqttEndpointsConfigurationBuilder>) EndpointsConfigurationBuilderAddKafkaEndpointsExtensions.AddKafkaEndpoints(IEndpointsConfigurationBuilder, Action<IKafkaEndpointsConfigurationBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.IMqttLastWillMessageBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.IMqttLastWillMessageBuilder.html",
    "title": "Interface IMqttLastWillMessageBuilder | Silverback",
    "keywords": "Interface IMqttLastWillMessageBuilder Builds the last will and testament (LWT) message related part of the MqttClientConfig . Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public interface IMqttLastWillMessageBuilder Methods | Improve this doc View source Message(Object) Specifies the LWT message to be published. Declaration IMqttLastWillMessageBuilder Message(object message) Parameters Type Name Description System.Object message The actual LWT message to be published. Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String) Specifies the name of the topic to produce the LWT message to. Declaration IMqttLastWillMessageBuilder ProduceTo(string topicName) Parameters Type Name Description System.String topicName The name of the topic. Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source Retain() Specifies that the LWT message will be sent with the retain flag, causing it to be persisted on the broker. Declaration IMqttLastWillMessageBuilder Retain() Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source SerializeAsJson(Action<IJsonMessageSerializerBuilder>) Sets the serializer to an instance of JsonMessageSerializer (or JsonMessageSerializer<TMessage> ) to serialize the produced messages as JSON. Declaration IMqttLastWillMessageBuilder SerializeAsJson(Action<IJsonMessageSerializerBuilder> serializerBuilderAction = null) Parameters Type Name Description System.Action < IJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IJsonMessageSerializerBuilder and configures it. Returns Type Description IMqttLastWillMessageBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source SerializeUsing(IMessageSerializer) Specifies the IMessageSerializer to be used to serialize the LWT message. Declaration IMqttLastWillMessageBuilder SerializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description IMqttLastWillMessageBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithAtLeastOnceQoS() Specifies that the LWT message has to be sent with the at least once quality of service level. Declaration IMqttLastWillMessageBuilder WithAtLeastOnceQoS() Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source WithAtMostOnceQoS() Specifies that the LWT message has to be sent with the at most once quality of service level. Declaration IMqttLastWillMessageBuilder WithAtMostOnceQoS() Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source WithDelay(TimeSpan) Specifies the LWT message delay. Declaration IMqttLastWillMessageBuilder WithDelay(TimeSpan delay) Parameters Type Name Description System.TimeSpan delay The System.TimeSpan representing the delay. Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source WithExactlyOnceQoS() Specifies that the LWT message has to be sent with the exactly once quality of service level. Declaration IMqttLastWillMessageBuilder WithExactlyOnceQoS() Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source WithQualityOfServiceLevel(MqttQualityOfServiceLevel) Specifies the desired quality of service level. Declaration IMqttLastWillMessageBuilder WithQualityOfServiceLevel(MqttQualityOfServiceLevel qosLevel) Parameters Type Name Description MQTTnet.Protocol.MqttQualityOfServiceLevel qosLevel The MQTTnet.Protocol.MqttQualityOfServiceLevel . Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.Mqtt.IMqttProducerEndpointBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.IMqttProducerEndpointBuilder.html",
    "title": "Interface IMqttProducerEndpointBuilder | Silverback",
    "keywords": "Interface IMqttProducerEndpointBuilder Builds the MqttProducerEndpoint . Inherited Members IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.SerializeUsing(IMessageSerializer) IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.Encrypt(EncryptionSettings) IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.UseStrategy(IProduceStrategy) IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.ProduceDirectly() IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.ProduceToOutbox() IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.EnableChunking(Int32, Boolean) IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.AddHeader(String, Object) IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.AddHeader<TMessage>(String, Object) IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.AddHeader<TMessage>(String, Func<IOutboundEnvelope<TMessage>, Object>) IProducerEndpointBuilder<IMqttProducerEndpointBuilder>.WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) IEndpointBuilder<IMqttProducerEndpointBuilder>.WithName(String) IEndpointBuilder<IMqttProducerEndpointBuilder>.UseSerializer(IMessageSerializer) IEndpointBuilder<IMqttProducerEndpointBuilder>.WithEncryption(EncryptionSettings) IEndpointBuilder<IMqttProducerEndpointBuilder>.ValidateMessage(Boolean) IEndpointBuilder<IMqttProducerEndpointBuilder>.DisableMessageValidation() Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public interface IMqttProducerEndpointBuilder : IProducerEndpointBuilder<IMqttProducerEndpointBuilder>, IEndpointBuilder<IMqttProducerEndpointBuilder> Methods | Improve this doc View source Configure(Action<IMqttClientConfigBuilder>) Configures the MQTT client properties. Declaration IMqttProducerEndpointBuilder Configure(Action<IMqttClientConfigBuilder> configBuilderAction) Parameters Type Name Description System.Action < IMqttClientConfigBuilder > configBuilderAction An System.Action<T> that takes the IMqttClientConfigBuilder and configures it. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source Configure(Action<MqttClientConfig>) Configures the MQTT client properties. Declaration IMqttProducerEndpointBuilder Configure(Action<MqttClientConfig> configAction) Parameters Type Name Description System.Action < MqttClientConfig > configAction An System.Action<T> that takes the MqttClientConfig and configures it. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(Func<IOutboundEnvelope, IServiceProvider, String>) Specifies the name of the topic and optionally the target partition. Declaration IMqttProducerEndpointBuilder ProduceTo(Func<IOutboundEnvelope, IServiceProvider, string> topicNameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.IServiceProvider , System.String > topicNameFunction The function returning the topic name for the message being produced. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(Func<IOutboundEnvelope, String>) Specifies the name of the topic and optionally the target partition. Declaration IMqttProducerEndpointBuilder ProduceTo(Func<IOutboundEnvelope, string> topicNameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.String > topicNameFunction The function returning the topic name for the message being produced. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String) Specifies the name of the topic. Declaration IMqttProducerEndpointBuilder ProduceTo(string topicName) Parameters Type Name Description System.String topicName The name of the topic. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String, Func<IOutboundEnvelope, String[]>) Specifies the name of the topic and optionally the target partition. Declaration IMqttProducerEndpointBuilder ProduceTo(string topicNameFormatString, Func<IOutboundEnvelope, string[]> topicNameArgumentsFunction) Parameters Type Name Description System.String topicNameFormatString The endpoint name format string that will be combined with the arguments returned by the topicNameArgumentsFunction using a string.Format . System.Func < IOutboundEnvelope , System.String []> topicNameArgumentsFunction The function returning the arguments to be used to format the string. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, IServiceProvider, String>) Specifies the name of the topic and optionally the target partition. Declaration IMqttProducerEndpointBuilder ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, IServiceProvider, string> topicNameFunction) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.IServiceProvider , System.String > topicNameFunction The function returning the topic name for the message being produced. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, String>) Specifies the name of the topic and optionally the target partition. Declaration IMqttProducerEndpointBuilder ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, string> topicNameFunction) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.String > topicNameFunction The function returning the topic name for the message being produced. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source ProduceTo<TMessage>(String, Func<IOutboundEnvelope<TMessage>, String[]>) Specifies the name of the topic and optionally the target partition. Declaration IMqttProducerEndpointBuilder ProduceTo<TMessage>(string topicNameFormatString, Func<IOutboundEnvelope<TMessage>, string[]> topicNameArgumentsFunction) where TMessage : class Parameters Type Name Description System.String topicNameFormatString The endpoint name format string that will be combined with the arguments returned by the topicNameArgumentsFunction using a string.Format . System.Func < IOutboundEnvelope <TMessage>, System.String []> topicNameArgumentsFunction The function returning the arguments to be used to format the string. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source Retain() Specifies that the messages have to be sent with the retain flag, causing them to be persisted on the broker. Declaration IMqttProducerEndpointBuilder Retain() Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source UseEndpointNameResolver<TResolver>() Specifies the type of the IProducerEndpointNameResolver to be used to resolve the actual endpoint name and partition. Declaration IMqttProducerEndpointBuilder UseEndpointNameResolver<TResolver>() where TResolver : IProducerEndpointNameResolver Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TResolver The type of the IProducerEndpointNameResolver to be used. | Improve this doc View source WithAtLeastOnceQoS() Specifies that the messages have to be sent with the at least once quality of service level. Declaration IMqttProducerEndpointBuilder WithAtLeastOnceQoS() Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithAtMostOnceQoS() Specifies that the messages have to be sent with the at most once quality of service level. Declaration IMqttProducerEndpointBuilder WithAtMostOnceQoS() Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithExactlyOnceQoS() Specifies that the messages have to be sent with the exactly once quality of service level. Declaration IMqttProducerEndpointBuilder WithExactlyOnceQoS() Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithMessageExpiration(TimeSpan) Sets the message expiry interval. This interval defines the period of time that the broker stores the PUBLISH message for any matching subscribers that are not currently connected. When no message expiry interval is set, the broker must store the message for matching subscribers indefinitely. Declaration IMqttProducerEndpointBuilder WithMessageExpiration(TimeSpan messageExpiryInterval) Parameters Type Name Description System.TimeSpan messageExpiryInterval The System.TimeSpan representing the message expiry interval. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithQualityOfServiceLevel(MqttQualityOfServiceLevel) Specifies the desired quality of service level. Declaration IMqttProducerEndpointBuilder WithQualityOfServiceLevel(MqttQualityOfServiceLevel qosLevel) Parameters Type Name Description MQTTnet.Protocol.MqttQualityOfServiceLevel qosLevel The MQTTnet.Protocol.MqttQualityOfServiceLevel . Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Extension Methods ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsAvroExtensions.SerializeAsAvro<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.MqttBrokerOptionsConfigurator.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.MqttBrokerOptionsConfigurator.html",
    "title": "Class MqttBrokerOptionsConfigurator | Silverback",
    "keywords": "Class MqttBrokerOptionsConfigurator This class will be located via assembly scanning and invoked when a MqttBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Inheritance System.Object MqttBrokerOptionsConfigurator Implements IBrokerOptionsConfigurator < MqttBroker > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public class MqttBrokerOptionsConfigurator : IBrokerOptionsConfigurator<MqttBroker> Methods | Improve this doc View source Configure(IBrokerOptionsBuilder) Called while registering the broker to configure the broker-specific services and options (e.g. behaviors). Declaration public void Configure(IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Implements IBrokerOptionsConfigurator<TBroker>"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.MqttClientConfig.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.MqttClientConfig.html",
    "title": "Class MqttClientConfig | Silverback",
    "keywords": "Class MqttClientConfig The configuration used to connect with the MQTT broker. This is actually a wrapper around the MQTTnet.Client.Options.MqttClientOptions from the MQTTnet library. Inheritance System.Object MqttClientConfig Implements System.IEquatable < MqttClientConfig > IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public sealed class MqttClientConfig : IEquatable<MqttClientConfig>, IValidatableEndpointSettings Constructors | Improve this doc View source MqttClientConfig(MqttClientOptions) Initializes a new instance of the MqttClientConfig class. Declaration public MqttClientConfig(MqttClientOptions clientOptions = null) Parameters Type Name Description MQTTnet.Client.Options.MqttClientOptions clientOptions The MQTTnet.Client.Options.MqttClientOptions to be wrapped. Properties | Improve this doc View source AuthenticationData Gets or sets the authentication data to be used for the custom authentication. Declaration public byte[] AuthenticationData { get; set; } Property Value Type Description System.Byte [] | Improve this doc View source AuthenticationMethod Gets or sets the custom authentication method. Declaration public string AuthenticationMethod { get; set; } Property Value Type Description System.String | Improve this doc View source ChannelOptions Gets or sets the channel options (either MQTTnet.Client.Options.MqttClientTcpOptions or MQTTnet.Client.Options.MqttClientWebSocketOptions ). Declaration public IMqttClientChannelOptions ChannelOptions { get; set; } Property Value Type Description MQTTnet.Client.Options.IMqttClientChannelOptions | Improve this doc View source CleanSession Gets or sets a value indicating whether a clean non-persistent session has to be created for this client. The default is true . Declaration public bool CleanSession { get; set; } Property Value Type Description System.Boolean | Improve this doc View source ClientId Gets or sets the client identifier. The default is Guid.NewGuid().ToString() . Declaration public string ClientId { get; set; } Property Value Type Description System.String | Improve this doc View source CommunicationTimeout Gets or sets the communication timeout. The default is 10 seconds. Declaration public TimeSpan CommunicationTimeout { get; set; } Property Value Type Description System.TimeSpan | Improve this doc View source Credentials Gets or sets the credential to be used to authenticate with the message broker. Declaration public IMqttClientCredentials Credentials { get; set; } Property Value Type Description MQTTnet.Client.Options.IMqttClientCredentials | Improve this doc View source ExtendedAuthenticationExchangeHandler Gets or sets the handler to be used to handle the custom authentication data exchange. Declaration public IMqttExtendedAuthenticationExchangeHandler ExtendedAuthenticationExchangeHandler { get; set; } Property Value Type Description MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler | Improve this doc View source KeepAlivePeriod Gets or sets the maximum period that can elapse without a packet being sent to the message broker. When this period is elapsed a ping packet will be sent to keep the connection alive. The default is 15 seconds. Declaration public TimeSpan KeepAlivePeriod { get; set; } Property Value Type Description System.TimeSpan | Improve this doc View source MaximumPacketSize Gets or sets the maximum packet size in byte the client will process. The default is no limit. Declaration public uint? MaximumPacketSize { get; set; } Property Value Type Description System.Nullable < System.UInt32 > | Improve this doc View source ProtocolVersion Gets or sets the MQTT protocol version. The default is MQTTnet.Formatter.MqttProtocolVersion.V500 . Declaration public MqttProtocolVersion ProtocolVersion { get; set; } Property Value Type Description MQTTnet.Formatter.MqttProtocolVersion | Improve this doc View source ReceiveMaximum Gets or sets the maximum number of QoS 1 and QoS 2 publications that can be received and processed concurrently. The default value is null , that means 65'535 . Declaration public ushort? ReceiveMaximum { get; set; } Property Value Type Description System.Nullable < System.UInt16 > Remarks There is no mechanism to limit the QoS 0 publications that the Server might try to send. | Improve this doc View source RequestProblemInformation Gets or sets a value indicating whether the reason string or user properties can be sent with any packet. The default is usually true . Declaration public bool? RequestProblemInformation { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source RequestResponseInformation Gets or sets a value indicating whether the server should return the response information in the CONNACK packet. The default is usually false . Declaration public bool? RequestResponseInformation { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source SessionExpiryInterval Gets or sets the session expiry interval in seconds. When set to 0 the session will expire when the connection is closed, while System.UInt32.MaxValue indicates that the session will never expire. The default is 0. Declaration public uint? SessionExpiryInterval { get; set; } Property Value Type Description System.Nullable < System.UInt32 > | Improve this doc View source TopicAliasMaximum Gets or sets the maximum number of topic aliases the server can send in the PUBLISH packet. The default is 0, meaning that no alias can be sent. Declaration public ushort? TopicAliasMaximum { get; set; } Property Value Type Description System.Nullable < System.UInt16 > | Improve this doc View source UserProperties Gets the list of user properties to be sent with the CONNECT packet. They can be used to send connection related properties from the client to the server. Declaration public IList<MqttUserProperty> UserProperties { get; } Property Value Type Description System.Collections.Generic.IList < MQTTnet.Packets.MqttUserProperty > | Improve this doc View source WillDelayInterval Gets or sets the number of seconds to wait before sending the last will message. If the client reconnects between this interval the message will not be sent. Declaration public uint? WillDelayInterval { get; set; } Property Value Type Description System.Nullable < System.UInt32 > | Improve this doc View source WillMessage Gets or sets the last will message to be sent when the client disconnects ungracefully. Declaration public MqttApplicationMessage WillMessage { get; set; } Property Value Type Description MQTTnet.MqttApplicationMessage Methods | Improve this doc View source Equals(MqttClientConfig) Declaration public bool Equals(MqttClientConfig other) Parameters Type Name Description MqttClientConfig other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public void Validate() Implements System.IEquatable<T> IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.MqttClientConfigBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.MqttClientConfigBuilder.html",
    "title": "Class MqttClientConfigBuilder | Silverback",
    "keywords": "Class MqttClientConfigBuilder Builds the MqttClientConfig . Inheritance System.Object MqttClientConfigBuilder Implements IMqttClientConfigBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public class MqttClientConfigBuilder : IMqttClientConfigBuilder Constructors | Improve this doc View source MqttClientConfigBuilder(MqttClientConfig, IServiceProvider) Initializes a new instance of the MqttClientConfigBuilder class. Declaration public MqttClientConfigBuilder(MqttClientConfig baseConfig, IServiceProvider serviceProvider = null) Parameters Type Name Description MqttClientConfig baseConfig The MqttClientConfig to be used to initialize the builder. System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required types (e.g. the MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler ). | Improve this doc View source MqttClientConfigBuilder(IServiceProvider) Initializes a new instance of the MqttClientConfigBuilder class. Declaration public MqttClientConfigBuilder(IServiceProvider serviceProvider = null) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required types (e.g. the MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler ). Methods | Improve this doc View source AddUserProperty(String, String) Adds a user property to be sent with the CONNECT packet. It can be used to send connection related properties from the client to the server. Declaration public IMqttClientConfigBuilder AddUserProperty(string name, string value) Parameters Type Name Description System.String name The property name. System.String value The property value. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source Build() Builds the MqttClientConfig instance. Declaration public MqttClientConfig Build() Returns Type Description MqttClientConfig The MqttClientConfig . | Improve this doc View source ConnectViaTcp(Action<MqttClientTcpOptions>) Specifies the TCP connection settings. Declaration public IMqttClientConfigBuilder ConnectViaTcp(Action<MqttClientTcpOptions> optionsAction) Parameters Type Name Description System.Action < MQTTnet.Client.Options.MqttClientTcpOptions > optionsAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientTcpOptions and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source ConnectViaTcp(String, Nullable<Int32>) Specifies the TCP connection settings. Declaration public IMqttClientConfigBuilder ConnectViaTcp(string server, int? port = null) Parameters Type Name Description System.String server The server address. System.Nullable < System.Int32 > port The server port. If not specified the default port 1883 will be used. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source ConnectViaWebSocket(Action<MqttClientWebSocketOptions>) Specifies the WebSocket connection settings. Declaration public IMqttClientConfigBuilder ConnectViaWebSocket(Action<MqttClientWebSocketOptions> optionsAction) Parameters Type Name Description System.Action < MQTTnet.Client.Options.MqttClientWebSocketOptions > optionsAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientWebSocketOptions and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source ConnectViaWebSocket(String, MqttClientOptionsBuilderWebSocketParameters) Specifies the WebSocket connection settings. Declaration public IMqttClientConfigBuilder ConnectViaWebSocket(string uri, MqttClientOptionsBuilderWebSocketParameters parameters = null) Parameters Type Name Description System.String uri The server URI. MQTTnet.Client.Options.MqttClientOptionsBuilderWebSocketParameters parameters The optional MQTTnet.Client.Options.MqttClientOptionsBuilderWebSocketParameters . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source ConnectViaWebSocket(String, Action<MqttClientOptionsBuilderWebSocketParameters>) Specifies the WebSocket connection settings. Declaration public IMqttClientConfigBuilder ConnectViaWebSocket(string uri, Action<MqttClientOptionsBuilderWebSocketParameters> parametersAction) Parameters Type Name Description System.String uri The server URI. System.Action < MQTTnet.Client.Options.MqttClientOptionsBuilderWebSocketParameters > parametersAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientOptionsBuilderWebSocketParameters and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source DisableKeepAlive() Disables the the keep alive mechanism. No ping packet will be sent. Declaration public IMqttClientConfigBuilder DisableKeepAlive() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source DisableProblemInformation() Specifies that the reason string or user properties can be sent with CONNACK or DISCONNECT packets only. Declaration public IMqttClientConfigBuilder DisableProblemInformation() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source DisableResponseInformation() Specifies that the server should not return the response information in the CONNACK packet. This is usually the default. Declaration public IMqttClientConfigBuilder DisableResponseInformation() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source DisableTls() Disables TLS. The network traffic will not be encrypted. Declaration public IMqttClientConfigBuilder DisableTls() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source EnableTls() Specifies that TLS has to be used to encrypt the network traffic. Declaration public IMqttClientConfigBuilder EnableTls() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source EnableTls(MqttClientOptionsBuilderTlsParameters) Specifies that TLS has to be used to encrypt the network traffic. Declaration public IMqttClientConfigBuilder EnableTls(MqttClientOptionsBuilderTlsParameters parameters) Parameters Type Name Description MQTTnet.Client.Options.MqttClientOptionsBuilderTlsParameters parameters The MQTTnet.Client.Options.MqttClientOptionsBuilderTlsParameters . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source EnableTls(Action<MqttClientOptionsBuilderTlsParameters>) Specifies that TLS has to be used to encrypt the network traffic. Declaration public IMqttClientConfigBuilder EnableTls(Action<MqttClientOptionsBuilderTlsParameters> parametersAction) Parameters Type Name Description System.Action < MQTTnet.Client.Options.MqttClientOptionsBuilderTlsParameters > parametersAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientOptionsBuilderTlsParameters and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source LimitPacketSize(Int64) Sets the maximum packet size in byte the client will process. The default is no limit. Declaration public IMqttClientConfigBuilder LimitPacketSize(long maximumPacketSize) Parameters Type Name Description System.Int64 maximumPacketSize The maximum packet size. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source LimitTopicAlias(Int32) Sets the maximum number of topic aliases the server can send in the PUBLISH packet. The default is 0, meaning that no alias can be sent. Declaration public IMqttClientConfigBuilder LimitTopicAlias(int topicAliasMaximum) Parameters Type Name Description System.Int32 topicAliasMaximum The maximum number of topic aliases. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source LimitUnacknowledgedPublications(Int32) Sets the maximum number of QoS 1 and QoS 2 publications that can be received and processed concurrently. The default value is null , that means 65'535 . Declaration public IMqttClientConfigBuilder LimitUnacknowledgedPublications(int receiveMaximum) Parameters Type Name Description System.Int32 receiveMaximum The maximum number of concurrent publications. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. Remarks There is no mechanism to limit the QoS 0 publications that the Server might try to send. | Improve this doc View source RequestCleanSession() Specifies that a clean non-persistent session has to be created for this client. This is the default, use RequestPersistentSession() to switch to a persistent session. Declaration public IMqttClientConfigBuilder RequestCleanSession() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source RequestPersistentSession() Specifies that a persistent session has to be created for this client. Declaration public IMqttClientConfigBuilder RequestPersistentSession() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source RequestProblemInformation() Specifies that the reason string or user properties can be sent with any packet. This is usually the default. Declaration public IMqttClientConfigBuilder RequestProblemInformation() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source RequestResponseInformation() Specifies that the server should return the response information in the CONNACK packet. Declaration public IMqttClientConfigBuilder RequestResponseInformation() Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source SendKeepAlive(TimeSpan) Sets the maximum period that can elapse without a packet being sent to the message broker. When this period is elapsed a ping packet will be sent to keep the connection alive. The default is 15 seconds. Declaration public IMqttClientConfigBuilder SendKeepAlive(TimeSpan interval) Parameters Type Name Description System.TimeSpan interval The maximum period that can elapse without a packet being sent. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source SendLastWillMessage(Action<IMqttLastWillMessageBuilder>) Specifies the last will and testament (LWT) message to be sent when the client disconnects ungracefully. Declaration public IMqttClientConfigBuilder SendLastWillMessage(Action<IMqttLastWillMessageBuilder> lastWillBuilderAction) Parameters Type Name Description System.Action < IMqttLastWillMessageBuilder > lastWillBuilderAction An System.Action<T> that takes the IMqttLastWillMessageBuilder and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseExtendedAuthenticationExchangeHandler(IMqttExtendedAuthenticationExchangeHandler) Sets the handler to be used to handle the custom authentication data exchange. Declaration public IMqttClientConfigBuilder UseExtendedAuthenticationExchangeHandler(IMqttExtendedAuthenticationExchangeHandler handler) Parameters Type Name Description MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler handler The MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler instance to be used. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseExtendedAuthenticationExchangeHandler(Type) Sets the handler to be used to handle the custom authentication data exchange. Declaration public IMqttClientConfigBuilder UseExtendedAuthenticationExchangeHandler(Type handlerType) Parameters Type Name Description System.Type handlerType The type of the MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler to be used. The instance will be resolved via System.IServiceProvider . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseExtendedAuthenticationExchangeHandler<THandler>() Sets the handler to be used to handle the custom authentication data exchange. Declaration public IMqttClientConfigBuilder UseExtendedAuthenticationExchangeHandler<THandler>() where THandler : IMqttExtendedAuthenticationExchangeHandler Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. Type Parameters Name Description THandler The type of the MQTTnet.Client.ExtendedAuthenticationExchange.IMqttExtendedAuthenticationExchangeHandler to be used. The instance will be resolved via System.IServiceProvider . | Improve this doc View source UseProtocolVersion(MqttProtocolVersion) Specifies the MQTT protocol version. The default is MQTTnet.Formatter.MqttProtocolVersion.V500 . Declaration public IMqttClientConfigBuilder UseProtocolVersion(MqttProtocolVersion value) Parameters Type Name Description MQTTnet.Formatter.MqttProtocolVersion value The MQTTnet.Formatter.MqttProtocolVersion . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseProxy(Action<MqttClientWebSocketProxyOptions>) Specifies the WebSocket connection settings. Declaration public IMqttClientConfigBuilder UseProxy(Action<MqttClientWebSocketProxyOptions> optionsAction) Parameters Type Name Description System.Action < MQTTnet.Client.Options.MqttClientWebSocketProxyOptions > optionsAction An System.Action<T> that takes the MQTTnet.Client.Options.MqttClientWebSocketProxyOptions and configures it. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source UseProxy(String, String, String, String, Boolean, String[]) Specifies the WebSocket proxy to be used. Declaration public IMqttClientConfigBuilder UseProxy(string address, string username = null, string password = null, string domain = null, bool bypassOnLocal = false, string[] bypassList = null) Parameters Type Name Description System.String address The proxy address. System.String username The user name to be used to authenticate against the proxy. System.String password The password to be used to authenticate against the proxy. System.String domain The user domain. System.Boolean bypassOnLocal A boolean value indicating whether the proxy must be bypassed for local addresses. System.String [] bypassList The bypass list. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithAuthentication(String, Byte[]) Specifies the authentication method to be used and the associated data. Declaration public IMqttClientConfigBuilder WithAuthentication(string method, byte[] data) Parameters Type Name Description System.String method The authentication method. System.Byte [] data The authentication data. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithClientId(String) Sets the client identifier. The default is Guid.NewGuid().ToString() . Declaration public IMqttClientConfigBuilder WithClientId(string value) Parameters Type Name Description System.String value The client identifier. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithCommunicationTimeout(TimeSpan) Sets the communication timeout. The default is 10 seconds. Declaration public IMqttClientConfigBuilder WithCommunicationTimeout(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The System.TimeSpan representing the timeout. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithCredentials(IMqttClientCredentials) Sets the credential to be used to authenticate with the message broker. Declaration public IMqttClientConfigBuilder WithCredentials(IMqttClientCredentials credentials) Parameters Type Name Description MQTTnet.Client.Options.IMqttClientCredentials credentials The MQTTnet.Client.Options.IMqttClientCredentials . Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithCredentials(String, Byte[]) Sets the credential to be used to authenticate with the message broker. Declaration public IMqttClientConfigBuilder WithCredentials(string username, byte[] password = null) Parameters Type Name Description System.String username The user name. System.Byte [] password The user password. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithCredentials(String, String) Sets the credential to be used to authenticate with the message broker. Declaration public IMqttClientConfigBuilder WithCredentials(string username, string password = null) Parameters Type Name Description System.String username The user name. System.String password The user password. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. | Improve this doc View source WithSessionExpiration(TimeSpan) Sets the session expiry interval. When set to 0 the session will expire when the connection is closed, while System.TimeSpan.MaxValue indicates that the session will never expire. The default is 0. Declaration public IMqttClientConfigBuilder WithSessionExpiration(TimeSpan sessionExpiryInterval) Parameters Type Name Description System.TimeSpan sessionExpiryInterval The System.TimeSpan representing the session expiry interval. Returns Type Description IMqttClientConfigBuilder The IMqttClientConfigBuilder so that additional calls can be chained. Implements IMqttClientConfigBuilder"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.MqttConsumerEndpointBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.MqttConsumerEndpointBuilder.html",
    "title": "Class MqttConsumerEndpointBuilder | Silverback",
    "keywords": "Class MqttConsumerEndpointBuilder Builds the MqttConsumerEndpoint . Inheritance System.Object EndpointBuilder < MqttConsumerEndpoint , IMqttConsumerEndpointBuilder > ConsumerEndpointBuilder < MqttConsumerEndpoint , IMqttConsumerEndpointBuilder > MqttConsumerEndpointBuilder Implements IMqttConsumerEndpointBuilder IConsumerEndpointBuilder < IMqttConsumerEndpointBuilder > IEndpointBuilder < IMqttConsumerEndpointBuilder > Inherited Members ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.MessageType ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.DeserializeUsing(IMessageSerializer) ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.Decrypt(EncryptionSettings) ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.OnError(IErrorPolicy) ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.OnError(Action<IErrorPolicyBuilder>) ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.EnsureExactlyOnce(IExactlyOnceStrategy) ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.EnsureExactlyOnce(Action<IExactlyOnceStrategyBuilder>) ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.EnableBatchProcessing(Int32, Nullable<TimeSpan>) ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.WithSequenceTimeout(TimeSpan) ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.ThrowIfUnhandled() ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.IgnoreUnhandledMessages() ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.HandleTombstoneMessages() ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.SkipNullMessages() ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.UseLegacyNullMessageHandling() ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.Build() EndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.EndpointsConfigurationBuilder EndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.This EndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.WithName(String) EndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.UseSerializer(IMessageSerializer) EndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.WithEncryption(EncryptionSettings) EndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.ValidateMessage(Boolean) EndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.DisableMessageValidation() EndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>.CreateEndpoint() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public class MqttConsumerEndpointBuilder : ConsumerEndpointBuilder<MqttConsumerEndpoint, IMqttConsumerEndpointBuilder>, IMqttConsumerEndpointBuilder, IConsumerEndpointBuilder<IMqttConsumerEndpointBuilder>, IEndpointBuilder<IMqttConsumerEndpointBuilder> Constructors | Improve this doc View source MqttConsumerEndpointBuilder(MqttClientConfig, Type, IEndpointsConfigurationBuilder) Initializes a new instance of the MqttConsumerEndpointBuilder class. Declaration public MqttConsumerEndpointBuilder(MqttClientConfig clientConfig, Type messageType = null, IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description MqttClientConfig clientConfig The MqttClientConfig . System.Type messageType Gets the type of the message being consumed. IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source This Gets this instance. Declaration protected override IMqttConsumerEndpointBuilder This { get; } Property Value Type Description IMqttConsumerEndpointBuilder Overrides Silverback.Messaging.Configuration.EndpointBuilder<Silverback.Messaging.MqttConsumerEndpoint, Silverback.Messaging.Configuration.Mqtt.IMqttConsumerEndpointBuilder>.This Remarks This is necessary to work around casting in the base classes. Methods | Improve this doc View source Configure(Action<IMqttClientConfigBuilder>) Configures the MQTT client properties. Declaration public IMqttConsumerEndpointBuilder Configure(Action<IMqttClientConfigBuilder> configBuilderAction) Parameters Type Name Description System.Action < IMqttClientConfigBuilder > configBuilderAction An System.Action<T> that takes the IMqttClientConfigBuilder and configures it. Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source Configure(Action<MqttClientConfig>) Configures the MQTT client properties. Declaration public IMqttConsumerEndpointBuilder Configure(Action<MqttClientConfig> configAction) Parameters Type Name Description System.Action < MqttClientConfig > configAction An System.Action<T> that takes the MqttClientConfig and configures it. Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ConsumeFrom(String[]) Specifies the name of the topics or the topic filter strings. Declaration public IMqttConsumerEndpointBuilder ConsumeFrom(params string[] topics) Parameters Type Name Description System.String [] topics The name of the topics or the topic filter string. Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source CreateEndpoint() Creates the endpoint to be configured according to the options stored in the builder. Declaration protected override MqttConsumerEndpoint CreateEndpoint() Returns Type Description MqttConsumerEndpoint The endpoint. Overrides Silverback.Messaging.Configuration.EndpointBuilder<Silverback.Messaging.MqttConsumerEndpoint, Silverback.Messaging.Configuration.Mqtt.IMqttConsumerEndpointBuilder>.CreateEndpoint() | Improve this doc View source WithAtLeastOnceQoS() Specifies that the topics have to be subscribed with the at least once quality of service level. Declaration public IMqttConsumerEndpointBuilder WithAtLeastOnceQoS() Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithAtMostOnceQoS() Specifies that the topics have to be subscribed with the at most once quality of service level. Declaration public IMqttConsumerEndpointBuilder WithAtMostOnceQoS() Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithExactlyOnceQoS() Specifies that the topics have to be subscribed with the exactly once quality of service level. Declaration public IMqttConsumerEndpointBuilder WithExactlyOnceQoS() Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithQualityOfServiceLevel(MqttQualityOfServiceLevel) Specifies the desired quality of service level. Declaration public IMqttConsumerEndpointBuilder WithQualityOfServiceLevel(MqttQualityOfServiceLevel qosLevel) Parameters Type Name Description MQTTnet.Protocol.MqttQualityOfServiceLevel qosLevel The MQTTnet.Protocol.MqttQualityOfServiceLevel . Returns Type Description IMqttConsumerEndpointBuilder The IMqttConsumerEndpointBuilder so that additional calls can be chained. Implements IMqttConsumerEndpointBuilder IConsumerEndpointBuilder<TBuilder> IEndpointBuilder<TBuilder> Extension Methods ConsumerEndpointBuilderDeserializeJsonUsingNewtonsoftExtensions.DeserializeJsonUsingNewtonsoft<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ConsumerEndpointBuilderDeserializeAvroExtensions.DeserializeAvro<TBuilder>(IConsumerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.MqttLastWillMessageBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.MqttLastWillMessageBuilder.html",
    "title": "Class MqttLastWillMessageBuilder | Silverback",
    "keywords": "Class MqttLastWillMessageBuilder Builds the last will and testament (LWT) message related part of the MqttClientConfig . Inheritance System.Object MqttLastWillMessageBuilder Implements IMqttLastWillMessageBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public class MqttLastWillMessageBuilder : IMqttLastWillMessageBuilder Properties | Improve this doc View source Delay Gets the desired delay in seconds. Declaration public uint? Delay { get; } Property Value Type Description System.Nullable < System.UInt32 > Methods | Improve this doc View source Build() Builds the MQTTnet.MqttApplicationMessage instance. Declaration public MqttApplicationMessage Build() Returns Type Description MQTTnet.MqttApplicationMessage The MQTTnet.MqttApplicationMessage . | Improve this doc View source Message(Object) Specifies the LWT message to be published. Declaration public IMqttLastWillMessageBuilder Message(object message) Parameters Type Name Description System.Object message The actual LWT message to be published. Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String) Specifies the name of the topic to produce the LWT message to. Declaration public IMqttLastWillMessageBuilder ProduceTo(string topicName) Parameters Type Name Description System.String topicName The name of the topic. Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source Retain() Specifies that the LWT message will be sent with the retain flag, causing it to be persisted on the broker. Declaration public IMqttLastWillMessageBuilder Retain() Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source SerializeAsJson(Action<IJsonMessageSerializerBuilder>) Sets the serializer to an instance of JsonMessageSerializer (or JsonMessageSerializer<TMessage> ) to serialize the produced messages as JSON. Declaration public IMqttLastWillMessageBuilder SerializeAsJson(Action<IJsonMessageSerializerBuilder> serializerBuilderAction = null) Parameters Type Name Description System.Action < IJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IJsonMessageSerializerBuilder and configures it. Returns Type Description IMqttLastWillMessageBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source SerializeUsing(IMessageSerializer) Specifies the IMessageSerializer to be used to serialize the LWT message. Declaration public IMqttLastWillMessageBuilder SerializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description IMqttLastWillMessageBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithAtLeastOnceQoS() Specifies that the LWT message has to be sent with the at least once quality of service level. Declaration public IMqttLastWillMessageBuilder WithAtLeastOnceQoS() Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source WithAtMostOnceQoS() Specifies that the LWT message has to be sent with the at most once quality of service level. Declaration public IMqttLastWillMessageBuilder WithAtMostOnceQoS() Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source WithDelay(TimeSpan) Specifies the LWT message delay. Declaration public IMqttLastWillMessageBuilder WithDelay(TimeSpan delay) Parameters Type Name Description System.TimeSpan delay The System.TimeSpan representing the delay. Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source WithExactlyOnceQoS() Specifies that the LWT message has to be sent with the exactly once quality of service level. Declaration public IMqttLastWillMessageBuilder WithExactlyOnceQoS() Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. | Improve this doc View source WithQualityOfServiceLevel(MqttQualityOfServiceLevel) Specifies the desired quality of service level. Declaration public IMqttLastWillMessageBuilder WithQualityOfServiceLevel(MqttQualityOfServiceLevel qosLevel) Parameters Type Name Description MQTTnet.Protocol.MqttQualityOfServiceLevel qosLevel The MQTTnet.Protocol.MqttQualityOfServiceLevel . Returns Type Description IMqttLastWillMessageBuilder The IMqttLastWillMessageBuilder so that additional calls can be chained. Implements IMqttLastWillMessageBuilder"
  },
  "api/Silverback.Messaging.Configuration.Mqtt.MqttProducerEndpointBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.Mqtt.MqttProducerEndpointBuilder.html",
    "title": "Class MqttProducerEndpointBuilder | Silverback",
    "keywords": "Class MqttProducerEndpointBuilder Builds the MqttProducerEndpoint . Inheritance System.Object EndpointBuilder < MqttProducerEndpoint , IMqttProducerEndpointBuilder > ProducerEndpointBuilder < MqttProducerEndpoint , IMqttProducerEndpointBuilder > MqttProducerEndpointBuilder Implements IMqttProducerEndpointBuilder IProducerEndpointBuilder < IMqttProducerEndpointBuilder > IEndpointBuilder < IMqttProducerEndpointBuilder > Inherited Members ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.SerializeUsing(IMessageSerializer) ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.Encrypt(EncryptionSettings) ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.UseStrategy(IProduceStrategy) ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.ProduceDirectly() ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.ProduceToOutbox() ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.EnableChunking(Int32, Boolean) ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.AddHeader(String, Object) ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.AddHeader<TMessage>(String, Object) ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.AddHeader<TMessage>(String, Func<IOutboundEnvelope<TMessage>, Object>) ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.Build() EndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.EndpointsConfigurationBuilder EndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.This EndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.WithName(String) EndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.UseSerializer(IMessageSerializer) EndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.WithEncryption(EncryptionSettings) EndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.ValidateMessage(Boolean) EndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.DisableMessageValidation() EndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>.CreateEndpoint() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Mqtt Assembly : Silverback.Integration.MQTT.dll Syntax public class MqttProducerEndpointBuilder : ProducerEndpointBuilder<MqttProducerEndpoint, IMqttProducerEndpointBuilder>, IMqttProducerEndpointBuilder, IProducerEndpointBuilder<IMqttProducerEndpointBuilder>, IEndpointBuilder<IMqttProducerEndpointBuilder> Constructors | Improve this doc View source MqttProducerEndpointBuilder(MqttClientConfig, IEndpointsConfigurationBuilder) Initializes a new instance of the MqttProducerEndpointBuilder class. Declaration public MqttProducerEndpointBuilder(MqttClientConfig clientConfig, IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description MqttClientConfig clientConfig The MqttClientConfig . IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Properties | Improve this doc View source This Gets this instance. Declaration protected override IMqttProducerEndpointBuilder This { get; } Property Value Type Description IMqttProducerEndpointBuilder Overrides Silverback.Messaging.Configuration.EndpointBuilder<Silverback.Messaging.MqttProducerEndpoint, Silverback.Messaging.Configuration.Mqtt.IMqttProducerEndpointBuilder>.This Remarks This is necessary to work around casting in the base classes. Methods | Improve this doc View source Configure(Action<IMqttClientConfigBuilder>) Configures the MQTT client properties. Declaration public IMqttProducerEndpointBuilder Configure(Action<IMqttClientConfigBuilder> configBuilderAction) Parameters Type Name Description System.Action < IMqttClientConfigBuilder > configBuilderAction An System.Action<T> that takes the IMqttClientConfigBuilder and configures it. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source Configure(Action<MqttClientConfig>) Configures the MQTT client properties. Declaration public IMqttProducerEndpointBuilder Configure(Action<MqttClientConfig> configAction) Parameters Type Name Description System.Action < MqttClientConfig > configAction An System.Action<T> that takes the MqttClientConfig and configures it. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source CreateEndpoint() Creates the endpoint to be configured according to the options stored in the builder. Declaration protected override MqttProducerEndpoint CreateEndpoint() Returns Type Description MqttProducerEndpoint The endpoint. Overrides Silverback.Messaging.Configuration.EndpointBuilder<Silverback.Messaging.MqttProducerEndpoint, Silverback.Messaging.Configuration.Mqtt.IMqttProducerEndpointBuilder>.CreateEndpoint() | Improve this doc View source ProduceTo(Func<IOutboundEnvelope, IServiceProvider, String>) Specifies the name of the topic and optionally the target partition. Declaration public IMqttProducerEndpointBuilder ProduceTo(Func<IOutboundEnvelope, IServiceProvider, string> topicNameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.IServiceProvider , System.String > topicNameFunction The function returning the topic name for the message being produced. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(Func<IOutboundEnvelope, String>) Specifies the name of the topic and optionally the target partition. Declaration public IMqttProducerEndpointBuilder ProduceTo(Func<IOutboundEnvelope, string> topicNameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.String > topicNameFunction The function returning the topic name for the message being produced. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String) Specifies the name of the topic. Declaration public IMqttProducerEndpointBuilder ProduceTo(string topicName) Parameters Type Name Description System.String topicName The name of the topic. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo(String, Func<IOutboundEnvelope, String[]>) Specifies the name of the topic and optionally the target partition. Declaration public IMqttProducerEndpointBuilder ProduceTo(string topicNameFormatString, Func<IOutboundEnvelope, string[]> topicNameArgumentsFunction) Parameters Type Name Description System.String topicNameFormatString The endpoint name format string that will be combined with the arguments returned by the topicNameArgumentsFunction using a string.Format . System.Func < IOutboundEnvelope , System.String []> topicNameArgumentsFunction The function returning the arguments to be used to format the string. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, IServiceProvider, String>) Specifies the name of the topic and optionally the target partition. Declaration public IMqttProducerEndpointBuilder ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, IServiceProvider, string> topicNameFunction) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.IServiceProvider , System.String > topicNameFunction The function returning the topic name for the message being produced. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, String>) Specifies the name of the topic and optionally the target partition. Declaration public IMqttProducerEndpointBuilder ProduceTo<TMessage>(Func<IOutboundEnvelope<TMessage>, string> topicNameFunction) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.String > topicNameFunction The function returning the topic name for the message being produced. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source ProduceTo<TMessage>(String, Func<IOutboundEnvelope<TMessage>, String[]>) Specifies the name of the topic and optionally the target partition. Declaration public IMqttProducerEndpointBuilder ProduceTo<TMessage>(string topicNameFormatString, Func<IOutboundEnvelope<TMessage>, string[]> topicNameArgumentsFunction) where TMessage : class Parameters Type Name Description System.String topicNameFormatString The endpoint name format string that will be combined with the arguments returned by the topicNameArgumentsFunction using a string.Format . System.Func < IOutboundEnvelope <TMessage>, System.String []> topicNameArgumentsFunction The function returning the arguments to be used to format the string. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages being produced. | Improve this doc View source Retain() Specifies that the messages have to be sent with the retain flag, causing them to be persisted on the broker. Declaration public IMqttProducerEndpointBuilder Retain() Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source UseEndpointNameResolver<TResolver>() Specifies the type of the IProducerEndpointNameResolver to be used to resolve the actual endpoint name and partition. Declaration public IMqttProducerEndpointBuilder UseEndpointNameResolver<TResolver>() where TResolver : IProducerEndpointNameResolver Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Type Parameters Name Description TResolver The type of the IProducerEndpointNameResolver to be used. | Improve this doc View source WithAtLeastOnceQoS() Specifies that the messages have to be sent with the at least once quality of service level. Declaration public IMqttProducerEndpointBuilder WithAtLeastOnceQoS() Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithAtMostOnceQoS() Specifies that the messages have to be sent with the at most once quality of service level. Declaration public IMqttProducerEndpointBuilder WithAtMostOnceQoS() Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithExactlyOnceQoS() Specifies that the messages have to be sent with the exactly once quality of service level. Declaration public IMqttProducerEndpointBuilder WithExactlyOnceQoS() Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithMessageExpiration(TimeSpan) Sets the message expiry interval. This interval defines the period of time that the broker stores the PUBLISH message for any matching subscribers that are not currently connected. When no message expiry interval is set, the broker must store the message for matching subscribers indefinitely. Declaration public IMqttProducerEndpointBuilder WithMessageExpiration(TimeSpan messageExpiryInterval) Parameters Type Name Description System.TimeSpan messageExpiryInterval The System.TimeSpan representing the message expiry interval. Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. | Improve this doc View source WithQualityOfServiceLevel(MqttQualityOfServiceLevel) Specifies the desired quality of service level. Declaration public IMqttProducerEndpointBuilder WithQualityOfServiceLevel(MqttQualityOfServiceLevel qosLevel) Parameters Type Name Description MQTTnet.Protocol.MqttQualityOfServiceLevel qosLevel The MQTTnet.Protocol.MqttQualityOfServiceLevel . Returns Type Description IMqttProducerEndpointBuilder The IMqttProducerEndpointBuilder so that additional calls can be chained. Implements IMqttProducerEndpointBuilder IProducerEndpointBuilder<TBuilder> IEndpointBuilder<TBuilder> Extension Methods ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsAvroExtensions.SerializeAsAvro<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.NewtonsoftJsonMessageSerializerBuilder.html": {
    "href": "api/Silverback.Messaging.Configuration.NewtonsoftJsonMessageSerializerBuilder.html",
    "title": "Class NewtonsoftJsonMessageSerializerBuilder | Silverback",
    "keywords": "Class NewtonsoftJsonMessageSerializerBuilder Builds the NewtonsoftJsonMessageSerializer or NewtonsoftJsonMessageSerializer<TMessage> . Inheritance System.Object NewtonsoftJsonMessageSerializerBuilder Implements INewtonsoftJsonMessageSerializerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Newtonsoft.dll Syntax public class NewtonsoftJsonMessageSerializerBuilder : INewtonsoftJsonMessageSerializerBuilder Methods | Improve this doc View source Build() Builds the IMessageSerializer instance. Declaration public IMessageSerializer Build() Returns Type Description IMessageSerializer The IMessageSerializer . | Improve this doc View source Configure(Action<JsonSerializerSettings>) Configures the Newtonsoft.Json.JsonSerializerSettings . Declaration public INewtonsoftJsonMessageSerializerBuilder Configure(Action<JsonSerializerSettings> configureAction) Parameters Type Name Description System.Action < Newtonsoft.Json.JsonSerializerSettings > configureAction An System.Action<T> that takes the Newtonsoft.Json.JsonSerializerSettings and configures it. Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseFixedType(Type) Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration public INewtonsoftJsonMessageSerializerBuilder UseFixedType(Type messageType) Parameters Type Name Description System.Type messageType The type of the message to serialize or deserialize. Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. | Improve this doc View source UseFixedType<TMessage>() Specifies a fixed message type. This will prevent the message type header to be written when serializing and the header will be ignored when deserializing. Declaration public INewtonsoftJsonMessageSerializerBuilder UseFixedType<TMessage>() Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the message to serialize or deserialize. | Improve this doc View source WithEncoding(MessageEncoding) Specifies the encoding to be used. Declaration public INewtonsoftJsonMessageSerializerBuilder WithEncoding(MessageEncoding encoding) Parameters Type Name Description MessageEncoding encoding The MessageEncoding . Returns Type Description INewtonsoftJsonMessageSerializerBuilder The JsonMessageSerializerBuilder so that additional calls can be chained. Implements INewtonsoftJsonMessageSerializerBuilder"
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilder-2.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilder-2.html",
    "title": "Class ProducerEndpointBuilder<TEndpoint, TBuilder> | Silverback",
    "keywords": "Class ProducerEndpointBuilder<TEndpoint, TBuilder> The base class for the builders of the types inheriting from ConsumerEndpoint . Inheritance System.Object EndpointBuilder <TEndpoint, TBuilder> ProducerEndpointBuilder<TEndpoint, TBuilder> KafkaProducerEndpointBuilder MqttProducerEndpointBuilder Implements IProducerEndpointBuilder <TBuilder> IEndpointBuilder <TBuilder> Inherited Members EndpointBuilder<TEndpoint, TBuilder>.EndpointsConfigurationBuilder EndpointBuilder<TEndpoint, TBuilder>.This EndpointBuilder<TEndpoint, TBuilder>.WithName(String) EndpointBuilder<TEndpoint, TBuilder>.UseSerializer(IMessageSerializer) EndpointBuilder<TEndpoint, TBuilder>.WithEncryption(EncryptionSettings) EndpointBuilder<TEndpoint, TBuilder>.ValidateMessage(Boolean) EndpointBuilder<TEndpoint, TBuilder>.DisableMessageValidation() EndpointBuilder<TEndpoint, TBuilder>.Build() EndpointBuilder<TEndpoint, TBuilder>.CreateEndpoint() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public abstract class ProducerEndpointBuilder<TEndpoint, TBuilder> : EndpointBuilder<TEndpoint, TBuilder>, IProducerEndpointBuilder<TBuilder>, IEndpointBuilder<TBuilder> where TEndpoint : ProducerEndpoint where TBuilder : IProducerEndpointBuilder<TBuilder> Type Parameters Name Description TEndpoint The type of the endpoint being built. TBuilder The actual builder type. Constructors | Improve this doc View source ProducerEndpointBuilder(IEndpointsConfigurationBuilder) Initializes a new instance of the ProducerEndpointBuilder<TEndpoint, TBuilder> class. Declaration protected ProducerEndpointBuilder(IEndpointsConfigurationBuilder endpointsConfigurationBuilder = null) Parameters Type Name Description IEndpointsConfigurationBuilder endpointsConfigurationBuilder The optional reference to the IEndpointsConfigurationBuilder that instantiated the builder. Methods | Improve this doc View source AddHeader(String, Object) Adds the specified header to all produced messages. Declaration public TBuilder AddHeader(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source AddHeader<TMessage>(String, Func<IOutboundEnvelope<TMessage>, Object>) Adds the specified header to all produced messages of the specified type, using a value provider function to determine the header value for each message. Declaration public TBuilder AddHeader<TMessage>(string name, Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.String name The header name. System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The value provider function. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched with this header. | Improve this doc View source AddHeader<TMessage>(String, Object) Adds the specified header to all produced messages of the specified type. Declaration public TBuilder AddHeader<TMessage>(string name, object value) where TMessage : class Parameters Type Name Description System.String name The header name. System.Object value The header value. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched with this header. | Improve this doc View source Build() Builds the endpoint instance. Declaration public override TEndpoint Build() Returns Type Description TEndpoint The endpoint. Overrides Silverback.Messaging.Configuration.EndpointBuilder<TEndpoint, TBuilder>.Build() | Improve this doc View source EnableChunking(Int32, Boolean) Enables chunking, splitting the larger messages into smaller chunks. Declaration public TBuilder EnableChunking(int chunkSize, bool alwaysAddHeaders = true) Parameters Type Name Description System.Int32 chunkSize The maximum chunk size in bytes. System.Boolean alwaysAddHeaders A value indicating whether the x-chunk-index and related headers have to be added to the produced message in any case, even if its size doesn't exceed the single chunk size. The default is true . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source Encrypt(EncryptionSettings) Specifies the EncryptionSettings to be used to encrypt the messages. Declaration public TBuilder Encrypt(EncryptionSettings encryptionSettings) Parameters Type Name Description EncryptionSettings encryptionSettings The EncryptionSettings . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ProduceDirectly() Specifies that the Silverback.Messaging.Outbound.DefaultProduceStrategy has to be used, producing directly to the message broker. Declaration public TBuilder ProduceDirectly() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source ProduceToOutbox() Specifies that the OutboxProduceStrategy has to be used, storing the messages into the transactional outbox table. The operation is therefore included in the database transaction applying the message side effects to the local database. The IOutboxWorker takes care of asynchronously sending the messages to the message broker. Declaration public TBuilder ProduceToOutbox() Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source SerializeUsing(IMessageSerializer) Specifies the IMessageSerializer to be used to serialize the messages. Declaration public TBuilder SerializeUsing(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source UseStrategy(IProduceStrategy) Specifies the strategy to be used to produce the messages. Declaration public TBuilder UseStrategy(IProduceStrategy strategy) Parameters Type Name Description IProduceStrategy strategy The IProduceStrategy . Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. | Improve this doc View source WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, Object>) Uses the specified value provider function to set the message id header for each produced message. Declaration public TBuilder WithMessageId<TMessage>(Func<IOutboundEnvelope<TMessage>, object> valueProvider) where TMessage : class Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The value provider function. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be enriched with this header. Implements IProducerEndpointBuilder<TBuilder> IEndpointBuilder<TBuilder> Extension Methods ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsAvroExtensions.SerializeAsAvro<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>) ProducerEndpointBuilderEncryptUsingExtensions.EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], Byte[]) ProducerEndpointBuilderEncryptUsingExtensions.EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], String, Byte[]) ProducerEndpointBuilderProduceBinaryFilesExtensions.ProduceBinaryFiles<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) ProducerEndpointBuilderSerializeAsJsonExtensions.SerializeAsJson<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>)"
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderEncryptUsingExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderEncryptUsingExtensions.html",
    "title": "Class ProducerEndpointBuilderEncryptUsingExtensions | Silverback",
    "keywords": "Class ProducerEndpointBuilderEncryptUsingExtensions Adds the EncryptUsingAes method to the ProducerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ProducerEndpointBuilderEncryptUsingExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ProducerEndpointBuilderEncryptUsingExtensions Methods | Improve this doc View source EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], Byte[]) Specifies that the AES algorithm has to be used to encrypt the messages. Declaration public static TBuilder EncryptUsingAes<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, byte[] key, byte[] initializationVector = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Byte [] key The secret key for the symmetric algorithm. System.Byte [] initializationVector The optional initialization vector (IV) for the symmetric algorithm. If null a different IV will be generated for each message and prepended to the actual message payload. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type. | Improve this doc View source EncryptUsingAes<TBuilder>(IProducerEndpointBuilder<TBuilder>, Byte[], String, Byte[]) Specifies that the AES algorithm has to be used to encrypt the messages. Declaration public static TBuilder EncryptUsingAes<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, byte[] key, string keyIdentifier, byte[] initializationVector = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Byte [] key The secret key for the symmetric algorithm. System.String keyIdentifier The key identifier to be sent in the header (see EncryptionKeyId ). When rotating keys, it will be used on the consumer side to determine the correct key to be used to decrypt the message. System.Byte [] initializationVector The optional initialization vector (IV) for the symmetric algorithm. If null a different IV will be generated for each message and prepended to the actual message payload. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderProduceBinaryFilesExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderProduceBinaryFilesExtensions.html",
    "title": "Class ProducerEndpointBuilderProduceBinaryFilesExtensions | Silverback",
    "keywords": "Class ProducerEndpointBuilderProduceBinaryFilesExtensions Adds the ProduceBinaryFiles method to the ProducerEndpointBuilder<TEndpoint, TBuilder> . Inheritance System.Object ProducerEndpointBuilderProduceBinaryFilesExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ProducerEndpointBuilderProduceBinaryFilesExtensions Methods | Improve this doc View source ProduceBinaryFiles<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IBinaryFileMessageSerializerBuilder>) Sets the serializer to an instance of BinaryFileMessageSerializer (or BinaryFileMessageSerializer<TModel> ) to produce the BinaryFileMessage . By default this serializer forwards the message type in an header to let the consumer know which type has to be deserialized. This approach allows to mix messages of different types in the same endpoint and it's ideal when both the producer and the consumer are using Silverback but might not be optimal for interoperability. This behavior can be changed using the builder action and specifying the model to be used. Declaration public static TBuilder ProduceBinaryFiles<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, Action<IBinaryFileMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IBinaryFileMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IBinaryFileMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type. Remarks This replaces the IMessageSerializer and the endpoint will only be able to deal with binary files."
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsAvroExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsAvroExtensions.html",
    "title": "Class ProducerEndpointBuilderSerializeAsAvroExtensions | Silverback",
    "keywords": "Class ProducerEndpointBuilderSerializeAsAvroExtensions Adds the SerializeAsAvro method to the ProducerEndpoint . Inheritance System.Object ProducerEndpointBuilderSerializeAsAvroExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Kafka.SchemaRegistry.dll Syntax public static class ProducerEndpointBuilderSerializeAsAvroExtensions Methods | Improve this doc View source SerializeAsAvro<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IAvroMessageSerializerBuilder>) Sets the serializer to an instance of AvroMessageSerializer<TMessage> to serialize the produced messages as Avro. Declaration public static TBuilder SerializeAsAvro<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, Action<IAvroMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IAvroMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IAvroMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsJsonExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsJsonExtensions.html",
    "title": "Class ProducerEndpointBuilderSerializeAsJsonExtensions | Silverback",
    "keywords": "Class ProducerEndpointBuilderSerializeAsJsonExtensions Adds the SerializeAsJson method to the ProducerEndpoint . Inheritance System.Object ProducerEndpointBuilderSerializeAsJsonExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class ProducerEndpointBuilderSerializeAsJsonExtensions Methods | Improve this doc View source SerializeAsJson<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<IJsonMessageSerializerBuilder>) Sets the serializer to an instance of JsonMessageSerializer (or JsonMessageSerializer<TMessage> ) to serialize the produced messages as JSON. By default this serializer forwards the message type in an header to let the consumer know which type has to be deserialized. This approach allows to mix messages of different types in the same endpoint and it's ideal when both the producer and the consumer are using Silverback but might not be optimal for interoperability. This behavior can be changed using the builder action and specifying a fixed message type. Declaration public static TBuilder SerializeAsJson<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, Action<IJsonMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < IJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the IJsonMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions.html",
    "title": "Class ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions | Silverback",
    "keywords": "Class ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions Adds the SerializeAsJsonUsingNewtonsoft method to the ProducerEndpoint . Inheritance System.Object ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.Newtonsoft.dll Syntax public static class ProducerEndpointBuilderSerializeAsJsonUsingNewtonsoftExtensions Methods | Improve this doc View source SerializeAsJsonUsingNewtonsoft<TBuilder>(IProducerEndpointBuilder<TBuilder>, Action<INewtonsoftJsonMessageSerializerBuilder>) Sets the serializer to an instance of NewtonsoftJsonMessageSerializer (or NewtonsoftJsonMessageSerializer<TMessage> ) to serialize the produced messages as JSON. By default this serializer forwards the message type in an header to let the consumer know which type has to be deserialized. This approach allows to mix messages of different types in the same endpoint and it's ideal when both the producer and the consumer are using Silverback but might not be optimal for interoperability. This behavior can be changed using the builder action and specifying a fixed message type. Declaration public static TBuilder SerializeAsJsonUsingNewtonsoft<TBuilder>(this IProducerEndpointBuilder<TBuilder> endpointBuilder, Action<INewtonsoftJsonMessageSerializerBuilder> serializerBuilderAction = null) where TBuilder : IProducerEndpointBuilder<TBuilder> Parameters Type Name Description IProducerEndpointBuilder <TBuilder> endpointBuilder The endpoint builder. System.Action < INewtonsoftJsonMessageSerializerBuilder > serializerBuilderAction An optional System.Action<T> that takes the INewtonsoftJsonMessageSerializerBuilder and configures it. Returns Type Description TBuilder The endpoint builder so that additional calls can be chained. Type Parameters Name Description TBuilder The actual builder type."
  },
  "api/Silverback.Messaging.Configuration.Rabbit.html": {
    "href": "api/Silverback.Messaging.Configuration.Rabbit.html",
    "title": "Namespace Silverback.Messaging.Configuration.Rabbit | Silverback",
    "keywords": "Namespace Silverback.Messaging.Configuration.Rabbit Classes RabbitConnectionConfig The configuration used to connect with the RabbitMQ broker. RabbitEndpointConfig The base class for the RabbitExchangeConfig and RabbitQueueConfig . RabbitExchangeConfig The RabbitMQ exchange configuration. RabbitQueueConfig The RabbitMQ queue configuration. RabbitSslOption The RabbitMQ SSL options configuration."
  },
  "api/Silverback.Messaging.Configuration.Rabbit.RabbitConnectionConfig.html": {
    "href": "api/Silverback.Messaging.Configuration.Rabbit.RabbitConnectionConfig.html",
    "title": "Class RabbitConnectionConfig | Silverback",
    "keywords": "Class RabbitConnectionConfig The configuration used to connect with the RabbitMQ broker. Inheritance System.Object RabbitConnectionConfig Implements System.IEquatable < RabbitConnectionConfig > IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Rabbit Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitConnectionConfig : IEquatable<RabbitConnectionConfig>, IValidatableEndpointSettings Properties | Improve this doc View source AmqpUriSslProtocols Gets or sets the AMQP URI SSL protocols. Declaration public SslProtocols? AmqpUriSslProtocols { get; set; } Property Value Type Description System.Nullable < System.Security.Authentication.SslProtocols > | Improve this doc View source AutomaticRecoveryEnabled Gets or sets a value indicating whether the automatic connection recovery is enabled. The default is true . Declaration public bool? AutomaticRecoveryEnabled { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source ClientProperties Gets or sets the dictionary of client properties to be sent to the server. Declaration public IDictionary<string, object> ClientProperties { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > | Improve this doc View source ClientProvidedName Gets or sets the default client provided name to be used for connections. Declaration public string ClientProvidedName { get; set; } Property Value Type Description System.String | Improve this doc View source ContinuationTimeout Gets or sets the amount of time the protocol operations (e.g. queue.declare ) are allowed to take before timing out. Declaration public TimeSpan? ContinuationTimeout { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source HandshakeContinuationTimeout Gets or sets the amount of time protocol handshake operations are allowed to take before timing out. Declaration public TimeSpan? HandshakeContinuationTimeout { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source HostName Gets or sets the name of th e host to connect to. Declaration public string HostName { get; set; } Property Value Type Description System.String | Improve this doc View source NetworkRecoveryInterval Gets or sets the amount of time the client will wait for before re-trying to recover the connection. Declaration public TimeSpan? NetworkRecoveryInterval { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source Password Gets or sets the password to use when authenticating to the server. Declaration public string Password { get; set; } Property Value Type Description System.String | Improve this doc View source Port Gets or sets the port to connect on. Declaration public int? Port { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source RequestedChannelMax Gets or sets the maximum channel number to ask for. Declaration public ushort? RequestedChannelMax { get; set; } Property Value Type Description System.Nullable < System.UInt16 > | Improve this doc View source RequestedConnectionTimeout Gets or sets the timeout setting for the connection attempts. Declaration public TimeSpan? RequestedConnectionTimeout { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source RequestedFrameMax Gets or sets the frame-max parameter to ask for (in bytes). Declaration public uint? RequestedFrameMax { get; set; } Property Value Type Description System.Nullable < System.UInt32 > | Improve this doc View source RequestedHeartbeat Gets or sets the heartbeat timeout to use when negotiating with the server. Declaration public TimeSpan? RequestedHeartbeat { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source SocketReadTimeout Gets or sets the timeout setting for the socket read operations. Declaration public TimeSpan? SocketReadTimeout { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source SocketWriteTimeout Gets or sets the timeout setting for the socket write operations. Declaration public TimeSpan? SocketWriteTimeout { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source Ssl Gets or sets the SSL options setting. Declaration public RabbitSslOption Ssl { get; set; } Property Value Type Description RabbitSslOption | Improve this doc View source TopologyRecoveryEnabled Gets or sets a value indicating whether the automatic connection recovery must recover recover also topology (exchanges, queues, bindings, etc). Defaults to true. Declaration public bool? TopologyRecoveryEnabled { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source UseBackgroundThreadsForIO Gets or sets a value indicating whether a background thread will be used for the I/O loop. Declaration public bool? UseBackgroundThreadsForIO { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this doc View source UserName Gets or sets the username to use when authenticating to the server. Declaration public string UserName { get; set; } Property Value Type Description System.String | Improve this doc View source VirtualHost Gets or sets the virtual host to access during this connection. Declaration public string VirtualHost { get; set; } Property Value Type Description System.String Methods | Improve this doc View source Equals(RabbitConnectionConfig) Declaration public bool Equals(RabbitConnectionConfig other) Parameters Type Name Description RabbitConnectionConfig other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public void Validate() Implements System.IEquatable<T> IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Configuration.Rabbit.RabbitEndpointConfig.html": {
    "href": "api/Silverback.Messaging.Configuration.Rabbit.RabbitEndpointConfig.html",
    "title": "Class RabbitEndpointConfig | Silverback",
    "keywords": "Class RabbitEndpointConfig The base class for the RabbitExchangeConfig and RabbitQueueConfig . Inheritance System.Object RabbitEndpointConfig RabbitExchangeConfig RabbitQueueConfig Implements IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Rabbit Assembly : Silverback.Integration.RabbitMQ.dll Syntax public abstract class RabbitEndpointConfig : IValidatableEndpointSettings Properties | Improve this doc View source Arguments Gets or sets the optional arguments dictionary. The arguments are used by plugins and broker-specific features to configure values such as message TTL, queue length limit, etc. Declaration public Dictionary<string, object> Arguments { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Object > | Improve this doc View source IsAutoDeleteEnabled Gets or sets a value indicating whether the queue or the exchange will be automatically deleted when the last consumer unsubscribes. Declaration public bool IsAutoDeleteEnabled { get; set; } Property Value Type Description System.Boolean | Improve this doc View source IsDurable Gets or sets a value indicating whether the queue or the exchange will survive a broker restart. Declaration public bool IsDurable { get; set; } Property Value Type Description System.Boolean Methods | Improve this doc View source BaseEquals(RabbitEndpointConfig) Determines whether the specified RabbitEndpointConfig is equal to the current RabbitEndpointConfig . Declaration protected virtual bool BaseEquals(RabbitEndpointConfig other) Parameters Type Name Description RabbitEndpointConfig other The object to compare with the current object. Returns Type Description System.Boolean Returns a value indicating whether the other object is equal to the current object. | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public virtual void Validate() Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Configuration.Rabbit.RabbitExchangeConfig.html": {
    "href": "api/Silverback.Messaging.Configuration.Rabbit.RabbitExchangeConfig.html",
    "title": "Class RabbitExchangeConfig | Silverback",
    "keywords": "Class RabbitExchangeConfig The RabbitMQ exchange configuration. Inheritance System.Object RabbitEndpointConfig RabbitExchangeConfig Implements IValidatableEndpointSettings System.IEquatable < RabbitExchangeConfig > Inherited Members RabbitEndpointConfig.IsDurable RabbitEndpointConfig.IsAutoDeleteEnabled RabbitEndpointConfig.Arguments RabbitEndpointConfig.BaseEquals(RabbitEndpointConfig) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Rabbit Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitExchangeConfig : RabbitEndpointConfig, IValidatableEndpointSettings, IEquatable<RabbitExchangeConfig> Properties | Improve this doc View source ExchangeType Gets or sets the exchange type. It should match with one of the constants declared in the RabbitMQ.Client.ExchangeType static class. Declaration public string ExchangeType { get; set; } Property Value Type Description System.String Methods | Improve this doc View source Equals(RabbitExchangeConfig) Declaration public bool Equals(RabbitExchangeConfig other) Parameters Type Name Description RabbitExchangeConfig other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public override void Validate() Overrides RabbitEndpointConfig.Validate() Implements IValidatableEndpointSettings System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Configuration.Rabbit.RabbitQueueConfig.html": {
    "href": "api/Silverback.Messaging.Configuration.Rabbit.RabbitQueueConfig.html",
    "title": "Class RabbitQueueConfig | Silverback",
    "keywords": "Class RabbitQueueConfig The RabbitMQ queue configuration. Inheritance System.Object RabbitEndpointConfig RabbitQueueConfig Implements IValidatableEndpointSettings System.IEquatable < RabbitQueueConfig > Inherited Members RabbitEndpointConfig.IsDurable RabbitEndpointConfig.IsAutoDeleteEnabled RabbitEndpointConfig.Arguments RabbitEndpointConfig.Validate() RabbitEndpointConfig.BaseEquals(RabbitEndpointConfig) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Rabbit Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitQueueConfig : RabbitEndpointConfig, IValidatableEndpointSettings, IEquatable<RabbitQueueConfig> Properties | Improve this doc View source IsExclusive Gets or sets a value indicating whether the queue is used by only one connection and will be deleted when that connection closes. Declaration public bool IsExclusive { get; set; } Property Value Type Description System.Boolean Methods | Improve this doc View source Equals(RabbitQueueConfig) Declaration public bool Equals(RabbitQueueConfig other) Parameters Type Name Description RabbitQueueConfig other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IValidatableEndpointSettings System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Configuration.Rabbit.RabbitSslOption.html": {
    "href": "api/Silverback.Messaging.Configuration.Rabbit.RabbitSslOption.html",
    "title": "Class RabbitSslOption | Silverback",
    "keywords": "Class RabbitSslOption The RabbitMQ SSL options configuration. Inheritance System.Object RabbitSslOption Implements System.IEquatable < RabbitSslOption > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration.Rabbit Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitSslOption : IEquatable<RabbitSslOption> Properties | Improve this doc View source AcceptablePolicyErrors Gets or sets the SSL policy errors that are deemed acceptable. Declaration public SslPolicyErrors? AcceptablePolicyErrors { get; set; } Property Value Type Description System.Nullable < System.Net.Security.SslPolicyErrors > | Improve this doc View source CertPassphrase Gets or sets the path to client certificate. Declaration public string CertPassphrase { get; set; } Property Value Type Description System.String | Improve this doc View source CertPath Gets or sets the path to client certificate. Declaration public string CertPath { get; set; } Property Value Type Description System.String | Improve this doc View source CheckCertificateRevocation Gets or sets a value indicating whether the peer certificate should be checked for revocation. The default is false . Declaration public bool? CheckCertificateRevocation { get; set; } Property Value Type Description System.Nullable < System.Boolean > Remarks Uses the built-in .NET mechanics for checking a certificate against CRLs. | Improve this doc View source Enabled Gets or sets a value indicating whether SSL should indeed be used. Declaration public bool Enabled { get; set; } Property Value Type Description System.Boolean | Improve this doc View source ServerName Gets or sets the Canonical Name of the server. This MUST match the CN on the certificate otherwise the SSL connection will fail. Declaration public string ServerName { get; set; } Property Value Type Description System.String | Improve this doc View source Version Gets or sets the SSL protocol version. Declaration public SslProtocols Version { get; set; } Property Value Type Description System.Security.Authentication.SslProtocols Methods | Improve this doc View source Equals(RabbitSslOption) Declaration public bool Equals(RabbitSslOption other) Parameters Type Name Description RabbitSslOption other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Configuration.RabbitBrokerOptionsConfigurator.html": {
    "href": "api/Silverback.Messaging.Configuration.RabbitBrokerOptionsConfigurator.html",
    "title": "Class RabbitBrokerOptionsConfigurator | Silverback",
    "keywords": "Class RabbitBrokerOptionsConfigurator This class will be located via assembly scanning and invoked when a RabbitBroker is added to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Inheritance System.Object RabbitBrokerOptionsConfigurator Implements IBrokerOptionsConfigurator < RabbitBroker > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.RabbitMQ.dll Syntax public class RabbitBrokerOptionsConfigurator : IBrokerOptionsConfigurator<RabbitBroker> Methods | Improve this doc View source Configure(IBrokerOptionsBuilder) Called while registering the broker to configure the broker-specific services and options (e.g. behaviors). Declaration public void Configure(IBrokerOptionsBuilder brokerOptionsBuilder) Parameters Type Name Description IBrokerOptionsBuilder brokerOptionsBuilder The IBrokerOptionsBuilder that references the Microsoft.Extensions.DependencyInjection.IServiceCollection to add the services to. Implements IBrokerOptionsConfigurator<TBroker>"
  },
  "api/Silverback.Messaging.Configuration.SilverbackBuilderHandleMessageOfTypeExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.SilverbackBuilderHandleMessageOfTypeExtensions.html",
    "title": "Class SilverbackBuilderHandleMessageOfTypeExtensions | Silverback",
    "keywords": "Class SilverbackBuilderHandleMessageOfTypeExtensions Adds the HandleMessageOfType methods to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderHandleMessageOfTypeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Core.dll Syntax public static class SilverbackBuilderHandleMessageOfTypeExtensions Methods | Improve this doc View source HandleMessagesOfType(ISilverbackBuilder, Type) Configures the specified type to be recognized as a message to enable features like automatic republishing. Declaration public static ISilverbackBuilder HandleMessagesOfType(this ISilverbackBuilder silverbackBuilder, Type messageType) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. System.Type messageType The (base) message type. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. | Improve this doc View source HandleMessagesOfType<TMessage>(ISilverbackBuilder) Configures the type TMessage to be recognized as a message to enable features like automatic republishing. Declaration public static ISilverbackBuilder HandleMessagesOfType<TMessage>(this ISilverbackBuilder silverbackBuilder) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder that references the IBusOptions to be configured. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained. Type Parameters Name Description TMessage The (base) message type."
  },
  "api/Silverback.Messaging.Configuration.SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions.html",
    "title": "Class SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions | Silverback",
    "keywords": "Class SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions Adds the PublishOutboundMessagesToInternalBus method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderPublishOutboundMessagesToInternalBusExtensions Methods | Improve this doc View source PublishOutboundMessagesToInternalBus(ISilverbackBuilder) Enables the legacy behavior where the messages to be routed through an outbound connector are also being published to the internal bus, to be locally subscribed. This is now disabled by default. Declaration public static ISilverbackBuilder PublishOutboundMessagesToInternalBus(this ISilverbackBuilder silverbackBuilder) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder . Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.Configuration.SilverbackBuilderWithCustomHeaderNameExtensions.html": {
    "href": "api/Silverback.Messaging.Configuration.SilverbackBuilderWithCustomHeaderNameExtensions.html",
    "title": "Class SilverbackBuilderWithCustomHeaderNameExtensions | Silverback",
    "keywords": "Class SilverbackBuilderWithCustomHeaderNameExtensions Adds the WithCustomHeaderName method to the ISilverbackBuilder . Inheritance System.Object SilverbackBuilderWithCustomHeaderNameExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Configuration Assembly : Silverback.Integration.dll Syntax public static class SilverbackBuilderWithCustomHeaderNameExtensions Methods | Improve this doc View source WithCustomHeaderName(ISilverbackBuilder, String, String) Adds a new header mapping. Declaration public static ISilverbackBuilder WithCustomHeaderName(this ISilverbackBuilder silverbackBuilder, string defaultHeaderName, string customHeaderName) Parameters Type Name Description ISilverbackBuilder silverbackBuilder The ISilverbackBuilder . System.String defaultHeaderName The default header name. System.String customHeaderName The custom header name to be used instead of the default. Returns Type Description ISilverbackBuilder The ISilverbackBuilder so that additional calls can be chained."
  },
  "api/Silverback.Messaging.ConsumerEndpoint.html": {
    "href": "api/Silverback.Messaging.ConsumerEndpoint.html",
    "title": "Class ConsumerEndpoint | Silverback",
    "keywords": "Class ConsumerEndpoint Represents a message broker endpoint to consume from (such as a Kafka topic or RabbitMQ queue or exchange). Inheritance System.Object Endpoint ConsumerEndpoint KafkaConsumerEndpoint MqttConsumerEndpoint RabbitConsumerEndpoint Implements IConsumerEndpoint IEndpoint Inherited Members Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode Endpoint.BaseEquals(Endpoint) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public abstract class ConsumerEndpoint : Endpoint, IConsumerEndpoint, IEndpoint Constructors | Improve this doc View source ConsumerEndpoint(String) Initializes a new instance of the ConsumerEndpoint class. Declaration protected ConsumerEndpoint(string name) Parameters Type Name Description System.String name The endpoint name. Properties | Improve this doc View source Batch Gets or sets the batch settings. Can be used to enable and setup batch processing. Declaration public BatchSettings Batch { get; set; } Property Value Type Description BatchSettings | Improve this doc View source ErrorPolicy Gets or sets the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration public IErrorPolicy ErrorPolicy { get; set; } Property Value Type Description IErrorPolicy | Improve this doc View source ExactlyOnceStrategy Gets or sets the strategy to be used to guarantee that each message is consumed only once. Declaration public IExactlyOnceStrategy ExactlyOnceStrategy { get; set; } Property Value Type Description IExactlyOnceStrategy | Improve this doc View source NullMessageHandlingStrategy Gets or sets a value indicating how to handle the null messages. The default value is Tombstone . Declaration public NullMessageHandlingStrategy NullMessageHandlingStrategy { get; set; } Property Value Type Description NullMessageHandlingStrategy | Improve this doc View source Sequence Gets or sets the sequence settings. A sequence is a set of related messages, like the chunks belonging to the same message or the messages in a dataset. Declaration public SequenceSettings Sequence { get; set; } Property Value Type Description SequenceSettings | Improve this doc View source ThrowIfUnhandled Gets or sets a value indicating whether an exception must be thrown if no subscriber is handling the received message. The default is true . Declaration public bool ThrowIfUnhandled { get; set; } Property Value Type Description System.Boolean Methods | Improve this doc View source GetUniqueConsumerGroupName() Gets a unique name for the consumer group (e.g. Kafka's consumer group id). This value (joint with the endpoint name) will be used for example to ensure the exactly-once delivery. Declaration public abstract string GetUniqueConsumerGroupName() Returns Type Description System.String Returns the unique name for the consumer group. Remarks It's not enough to use the endpoint name, since the same topic could be consumed by multiple consumer groups within the same process and/or using the same database to store the information needed to ensure the exactly-once delivery. | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides Endpoint.Validate() Implements IConsumerEndpoint IEndpoint"
  },
  "api/Silverback.Messaging.Diagnostics.ActivityConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Diagnostics.ActivityConsumerBehavior.html",
    "title": "Class ActivityConsumerBehavior | Silverback",
    "keywords": "Class ActivityConsumerBehavior Starts an System.Diagnostics.Activity with the tracing information from the message headers. Inheritance System.Object ActivityConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public class ActivityConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ActivityConsumerBehavior(IActivityEnricherFactory) Initializes a new instance of the ActivityConsumerBehavior class. Declaration public ActivityConsumerBehavior(IActivityEnricherFactory activityEnricherFactory) Parameters Type Name Description IActivityEnricherFactory activityEnricherFactory The IActivityEnricherFactory to resolve the ActivityEnricher. Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Diagnostics.ActivityProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Diagnostics.ActivityProducerBehavior.html",
    "title": "Class ActivityProducerBehavior | Silverback",
    "keywords": "Class ActivityProducerBehavior Starts an System.Diagnostics.Activity and adds the tracing information to the message headers. Inheritance System.Object ActivityProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public class ActivityProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ActivityProducerBehavior(IActivityEnricherFactory) Initializes a new instance of the ActivityProducerBehavior class. Declaration public ActivityProducerBehavior(IActivityEnricherFactory activityEnricherFactory) Parameters Type Name Description IActivityEnricherFactory activityEnricherFactory The Factory to create the activity enrichers. Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Diagnostics.ActivityTagNames.html": {
    "href": "api/Silverback.Messaging.Diagnostics.ActivityTagNames.html",
    "title": "Class ActivityTagNames | Silverback",
    "keywords": "Class ActivityTagNames Contains the name of tags added to the System.Diagnostics.Activity . Inheritance System.Object ActivityTagNames Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public static class ActivityTagNames Fields | Improve this doc View source MessageDestination The name of the tag that contains the destination of the message (i.e. the name of the endpoint). Declaration public const string MessageDestination = \"messaging.destination\" Field Value Type Description System.String | Improve this doc View source MessageId The name of the tag whose value identifies the message. Declaration public const string MessageId = \"messaging.message_id\" Field Value Type Description System.String Remarks For Kafka the tag value will be in the form topic[partition]@offset. | Improve this doc View source SequenceActivity The name of the tag that references the activity created for the sequence where this message has been added. Declaration public const string SequenceActivity = \"messaging.sequence.activity\" Field Value Type Description System.String"
  },
  "api/Silverback.Messaging.Diagnostics.ConsumerPipelineFatalException.html": {
    "href": "api/Silverback.Messaging.Diagnostics.ConsumerPipelineFatalException.html",
    "title": "Class ConsumerPipelineFatalException | Silverback",
    "keywords": "Class ConsumerPipelineFatalException The exception that is rethrown by the FatalExceptionLoggerConsumerBehavior when a fatal exception occurs down the consumer pipeline. Inheritance System.Object System.Exception SilverbackException ConsumerPipelineFatalException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax [Serializable] public class ConsumerPipelineFatalException : SilverbackException, ISerializable Constructors | Improve this doc View source ConsumerPipelineFatalException() Initializes a new instance of the ConsumerPipelineFatalException class. Declaration public ConsumerPipelineFatalException() | Improve this doc View source ConsumerPipelineFatalException(SerializationInfo, StreamingContext) Initializes a new instance of the ConsumerPipelineFatalException class with the serialized data. Declaration protected ConsumerPipelineFatalException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source ConsumerPipelineFatalException(String) Initializes a new instance of the ConsumerPipelineFatalException class with the specified message. Declaration public ConsumerPipelineFatalException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source ConsumerPipelineFatalException(String, Exception) Initializes a new instance of the ConsumerPipelineFatalException class with the specified message and inner exception. Declaration public ConsumerPipelineFatalException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Diagnostics.FatalExceptionLoggerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Diagnostics.FatalExceptionLoggerConsumerBehavior.html",
    "title": "Class FatalExceptionLoggerConsumerBehavior | Silverback",
    "keywords": "Class FatalExceptionLoggerConsumerBehavior Logs the unhandled exceptions thrown while processing the message. These exceptions are fatal since they will usually cause the consumer to stop. Inheritance System.Object FatalExceptionLoggerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public class FatalExceptionLoggerConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source FatalExceptionLoggerConsumerBehavior(IInboundLogger<FatalExceptionLoggerConsumerBehavior>) Initializes a new instance of the FatalExceptionLoggerConsumerBehavior class. Declaration public FatalExceptionLoggerConsumerBehavior(IInboundLogger<FatalExceptionLoggerConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < FatalExceptionLoggerConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Diagnostics.html": {
    "href": "api/Silverback.Messaging.Diagnostics.html",
    "title": "Namespace Silverback.Messaging.Diagnostics | Silverback",
    "keywords": "Namespace Silverback.Messaging.Diagnostics Classes ActivityConsumerBehavior Starts an System.Diagnostics.Activity with the tracing information from the message headers. ActivityProducerBehavior Starts an System.Diagnostics.Activity and adds the tracing information to the message headers. ActivityTagNames Contains the name of tags added to the System.Diagnostics.Activity . ConsumerPipelineFatalException The exception that is rethrown by the FatalExceptionLoggerConsumerBehavior when a fatal exception occurs down the consumer pipeline. FatalExceptionLoggerConsumerBehavior Logs the unhandled exceptions thrown while processing the message. These exceptions are fatal since they will usually cause the consumer to stop. Interfaces IActivityEnricherFactory Provides the IBrokerActivityEnricher according to the specified endpoint. IBrokerActivityEnricher Provides enrichment for activities produced by the ActivityProducerBehavior and ActivityConsumerBehavior . IBrokerActivityEnricher<TEndpoint> Provides enrichment for activities produced by the ActivityProducerBehavior and ActivityConsumerBehavior for the specified endpoint type."
  },
  "api/Silverback.Messaging.Diagnostics.IActivityEnricherFactory.html": {
    "href": "api/Silverback.Messaging.Diagnostics.IActivityEnricherFactory.html",
    "title": "Interface IActivityEnricherFactory | Silverback",
    "keywords": "Interface IActivityEnricherFactory Provides the IBrokerActivityEnricher according to the specified endpoint. Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IActivityEnricherFactory Methods | Improve this doc View source GetActivityEnricher(IEndpoint) Returns the IBrokerActivityEnricher for the specified endpoint. Declaration IBrokerActivityEnricher GetActivityEnricher(IEndpoint endpoint) Parameters Type Name Description IEndpoint endpoint The endpoint. Returns Type Description IBrokerActivityEnricher The IBrokerActivityEnricher that matches the specified endpoint type."
  },
  "api/Silverback.Messaging.Diagnostics.IBrokerActivityEnricher.html": {
    "href": "api/Silverback.Messaging.Diagnostics.IBrokerActivityEnricher.html",
    "title": "Interface IBrokerActivityEnricher | Silverback",
    "keywords": "Interface IBrokerActivityEnricher Provides enrichment for activities produced by the ActivityProducerBehavior and ActivityConsumerBehavior . Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IBrokerActivityEnricher Methods | Improve this doc View source EnrichInboundActivity(Activity, ConsumerPipelineContext) Enriches Activities created by the ActivityConsumerBehavior . Declaration void EnrichInboundActivity(Activity activity, ConsumerPipelineContext consumerContext) Parameters Type Name Description System.Diagnostics.Activity activity The System.Diagnostics.Activity to be enriched. ConsumerPipelineContext consumerContext The ConsumerPipelineContext . | Improve this doc View source EnrichOutboundActivity(Activity, ProducerPipelineContext) Enriches Activities created by the ActivityProducerBehavior . Declaration void EnrichOutboundActivity(Activity activity, ProducerPipelineContext producerContext) Parameters Type Name Description System.Diagnostics.Activity activity The System.Diagnostics.Activity to be enriched. ProducerPipelineContext producerContext The ProducerPipelineContext ."
  },
  "api/Silverback.Messaging.Diagnostics.IBrokerActivityEnricher-1.html": {
    "href": "api/Silverback.Messaging.Diagnostics.IBrokerActivityEnricher-1.html",
    "title": "Interface IBrokerActivityEnricher<TEndpoint> | Silverback",
    "keywords": "Interface IBrokerActivityEnricher<TEndpoint> Provides enrichment for activities produced by the ActivityProducerBehavior and ActivityConsumerBehavior for the specified endpoint type. Inherited Members IBrokerActivityEnricher.EnrichOutboundActivity(Activity, ProducerPipelineContext) IBrokerActivityEnricher.EnrichInboundActivity(Activity, ConsumerPipelineContext) Namespace : Silverback.Messaging.Diagnostics Assembly : Silverback.Integration.dll Syntax public interface IBrokerActivityEnricher<TEndpoint> : IBrokerActivityEnricher where TEndpoint : Endpoint Type Parameters Name Description TEndpoint The type of the endpoint that this enricher can be used for."
  },
  "api/Silverback.Messaging.Encryption.DecryptorConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Encryption.DecryptorConsumerBehavior.html",
    "title": "Class DecryptorConsumerBehavior | Silverback",
    "keywords": "Class DecryptorConsumerBehavior Decrypts the message according to the EncryptionSettings . Inheritance System.Object DecryptorConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class DecryptorConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source DecryptorConsumerBehavior(ISilverbackCryptoStreamFactory) Initializes a new instance of the DecryptorConsumerBehavior class. Declaration public DecryptorConsumerBehavior(ISilverbackCryptoStreamFactory streamFactory) Parameters Type Name Description ISilverbackCryptoStreamFactory streamFactory The ISilverbackCryptoStreamFactory . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Encryption.EncryptionSettings.html": {
    "href": "api/Silverback.Messaging.Encryption.EncryptionSettings.html",
    "title": "Class EncryptionSettings | Silverback",
    "keywords": "Class EncryptionSettings The base class for SymmetricEncryptionSettingsBase and other future encryption types. Inheritance System.Object EncryptionSettings SymmetricEncryptionSettingsBase Implements IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public abstract class EncryptionSettings : IValidatableEndpointSettings Methods | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public abstract void Validate() Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Encryption.EncryptorProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Encryption.EncryptorProducerBehavior.html",
    "title": "Class EncryptorProducerBehavior | Silverback",
    "keywords": "Class EncryptorProducerBehavior Encrypts the message according to the EncryptionSettings . Inheritance System.Object EncryptorProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class EncryptorProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source EncryptorProducerBehavior(ISilverbackCryptoStreamFactory) Initializes a new instance of the EncryptorProducerBehavior class. Declaration public EncryptorProducerBehavior(ISilverbackCryptoStreamFactory streamFactory) Parameters Type Name Description ISilverbackCryptoStreamFactory streamFactory The ISilverbackCryptoStreamFactory . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Encryption.html": {
    "href": "api/Silverback.Messaging.Encryption.html",
    "title": "Namespace Silverback.Messaging.Encryption | Silverback",
    "keywords": "Namespace Silverback.Messaging.Encryption Classes DecryptorConsumerBehavior Decrypts the message according to the EncryptionSettings . EncryptionSettings The base class for SymmetricEncryptionSettingsBase and other future encryption types. EncryptorProducerBehavior Encrypts the message according to the EncryptionSettings . SilverbackCryptoStream The base class for the System.IO.Stream implementations used to encrypt and decrypt the integration messages. SilverbackCryptoStreamFactory The factory used to create the SilverbackCryptoStream implementation according to the EncryptionSettings . SymmetricDecryptionSettings The decryption settings used to decrypt the messages. SymmetricDecryptStream The implementation of SilverbackCryptoStream based on a System.Security.Cryptography.SymmetricAlgorithm used to decrypt the messages. SymmetricEncryptionSettings The encryption settings used to encrypt the messages. SymmetricEncryptionSettingsBase The base class for symmetric encryption settings used to encrypt or decrypt the messages being sent through the message broker. SymmetricEncryptStream The implementation of SilverbackCryptoStream based on a System.Security.Cryptography.SymmetricAlgorithm used to encrypt the messages. Interfaces ISilverbackCryptoStreamFactory The factory used to create the SilverbackCryptoStream implementation according to the EncryptionSettings ."
  },
  "api/Silverback.Messaging.Encryption.ISilverbackCryptoStreamFactory.html": {
    "href": "api/Silverback.Messaging.Encryption.ISilverbackCryptoStreamFactory.html",
    "title": "Interface ISilverbackCryptoStreamFactory | Silverback",
    "keywords": "Interface ISilverbackCryptoStreamFactory The factory used to create the SilverbackCryptoStream implementation according to the EncryptionSettings . Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public interface ISilverbackCryptoStreamFactory Methods | Improve this doc View source GetDecryptStream(Stream, EncryptionSettings, String) Gets a SilverbackCryptoStream compatible with the specified settings. Declaration SilverbackCryptoStream GetDecryptStream(Stream stream, EncryptionSettings settings, string keyIdentifier = null) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the encrypted message from. EncryptionSettings settings The EncryptionSettings specifying the cryptographic algorithm settings. System.String keyIdentifier The encryption key identifier that was submitted as header. Returns Type Description SilverbackCryptoStream A SilverbackCryptoStream compatible with the specified settings. | Improve this doc View source GetEncryptStream(Stream, EncryptionSettings) Gets a SilverbackCryptoStream compatible with the specified settings. Declaration SilverbackCryptoStream GetEncryptStream(Stream stream, EncryptionSettings settings) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the clear-text message from. EncryptionSettings settings The EncryptionSettings specifying the cryptographic algorithm settings. Returns Type Description SilverbackCryptoStream A SilverbackCryptoStream compatible with the specified settings."
  },
  "api/Silverback.Messaging.Encryption.SilverbackCryptoStream.html": {
    "href": "api/Silverback.Messaging.Encryption.SilverbackCryptoStream.html",
    "title": "Class SilverbackCryptoStream | Silverback",
    "keywords": "Class SilverbackCryptoStream The base class for the System.IO.Stream implementations used to encrypt and decrypt the integration messages. Inheritance System.Object System.MarshalByRefObject System.IO.Stream SilverbackCryptoStream SymmetricDecryptStream SymmetricEncryptStream Implements System.IAsyncDisposable System.IDisposable Inherited Members System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.Dispose(System.Boolean) System.IO.Stream.DisposeAsync() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public abstract class SilverbackCryptoStream : Stream, IAsyncDisposable, IDisposable Properties | Improve this doc View source CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead | Improve this doc View source CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek | Improve this doc View source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite | Improve this doc View source CryptoStream Gets the underlying CryptoStream . Declaration protected abstract CryptoStream CryptoStream { get; } Property Value Type Description System.Security.Cryptography.CryptoStream | Improve this doc View source Length Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length | Improve this doc View source Position Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods | Improve this doc View source Close() Declaration public override void Close() Overrides System.IO.Stream.Close() | Improve this doc View source Flush() Declaration public override void Flush() Overrides System.IO.Stream.Flush() | Improve this doc View source FlushAsync(CancellationToken) Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides System.IO.Stream.FlushAsync(System.Threading.CancellationToken) | Improve this doc View source Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Returns Type Description System.Int32 Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) | Improve this doc View source ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 > Overrides System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) | Improve this doc View source Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset System.IO.SeekOrigin origin Returns Type Description System.Int64 Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) | Improve this doc View source SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value Overrides System.IO.Stream.SetLength(System.Int64) | Improve this doc View source Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) | Improve this doc View source WriteAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) Implements System.IAsyncDisposable System.IDisposable"
  },
  "api/Silverback.Messaging.Encryption.SilverbackCryptoStreamFactory.html": {
    "href": "api/Silverback.Messaging.Encryption.SilverbackCryptoStreamFactory.html",
    "title": "Class SilverbackCryptoStreamFactory | Silverback",
    "keywords": "Class SilverbackCryptoStreamFactory The factory used to create the SilverbackCryptoStream implementation according to the EncryptionSettings . Inheritance System.Object SilverbackCryptoStreamFactory Implements ISilverbackCryptoStreamFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SilverbackCryptoStreamFactory : ISilverbackCryptoStreamFactory Methods | Improve this doc View source GetDecryptStream(Stream, EncryptionSettings, String) Gets a SilverbackCryptoStream compatible with the specified settings. Declaration public SilverbackCryptoStream GetDecryptStream(Stream stream, EncryptionSettings settings, string keyIdentifier = null) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the encrypted message from. EncryptionSettings settings The EncryptionSettings specifying the cryptographic algorithm settings. System.String keyIdentifier The encryption key identifier that was submitted as header. Returns Type Description SilverbackCryptoStream A SilverbackCryptoStream compatible with the specified settings. | Improve this doc View source GetEncryptStream(Stream, EncryptionSettings) Gets a SilverbackCryptoStream compatible with the specified settings. Declaration public SilverbackCryptoStream GetEncryptStream(Stream stream, EncryptionSettings settings) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the clear-text message from. EncryptionSettings settings The EncryptionSettings specifying the cryptographic algorithm settings. Returns Type Description SilverbackCryptoStream A SilverbackCryptoStream compatible with the specified settings. Implements ISilverbackCryptoStreamFactory"
  },
  "api/Silverback.Messaging.Encryption.SymmetricDecryptionSettings.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricDecryptionSettings.html",
    "title": "Class SymmetricDecryptionSettings | Silverback",
    "keywords": "Class SymmetricDecryptionSettings The decryption settings used to decrypt the messages. Inheritance System.Object EncryptionSettings SymmetricEncryptionSettingsBase SymmetricDecryptionSettings Implements IValidatableEndpointSettings Inherited Members SymmetricEncryptionSettingsBase.AlgorithmName SymmetricEncryptionSettingsBase.BlockSize SymmetricEncryptionSettingsBase.FeedbackSize SymmetricEncryptionSettingsBase.InitializationVector SymmetricEncryptionSettingsBase.Key SymmetricEncryptionSettingsBase.CipherMode SymmetricEncryptionSettingsBase.PaddingMode System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SymmetricDecryptionSettings : SymmetricEncryptionSettingsBase, IValidatableEndpointSettings Properties | Improve this doc View source KeyProvider Gets or sets the function to be used to retrieve the decryption key. Declaration public Func<string, byte[]> KeyProvider { get; set; } Property Value Type Description System.Func < System.String , System.Byte []> Methods | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public override void Validate() Overrides SymmetricEncryptionSettingsBase.Validate() Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Encryption.SymmetricDecryptStream.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricDecryptStream.html",
    "title": "Class SymmetricDecryptStream | Silverback",
    "keywords": "Class SymmetricDecryptStream The implementation of SilverbackCryptoStream based on a System.Security.Cryptography.SymmetricAlgorithm used to decrypt the messages. Inheritance System.Object System.MarshalByRefObject System.IO.Stream SilverbackCryptoStream SymmetricDecryptStream Implements System.IAsyncDisposable System.IDisposable Inherited Members SilverbackCryptoStream.CanRead SilverbackCryptoStream.CanSeek SilverbackCryptoStream.CanWrite SilverbackCryptoStream.Length SilverbackCryptoStream.Position SilverbackCryptoStream.Flush() SilverbackCryptoStream.FlushAsync(CancellationToken) SilverbackCryptoStream.Read(Byte[], Int32, Int32) SilverbackCryptoStream.ReadAsync(Byte[], Int32, Int32, CancellationToken) SilverbackCryptoStream.Seek(Int64, SeekOrigin) SilverbackCryptoStream.SetLength(Int64) SilverbackCryptoStream.Write(Byte[], Int32, Int32) SilverbackCryptoStream.WriteAsync(Byte[], Int32, Int32, CancellationToken) SilverbackCryptoStream.Close() System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.DisposeAsync() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SymmetricDecryptStream : SilverbackCryptoStream, IAsyncDisposable, IDisposable Constructors | Improve this doc View source SymmetricDecryptStream(Stream, SymmetricDecryptionSettings, String) Initializes a new instance of the SymmetricDecryptStream class. Declaration public SymmetricDecryptStream(Stream stream, SymmetricDecryptionSettings settings, string keyIdentifier = null) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the encrypted message from. SymmetricDecryptionSettings settings The SymmetricDecryptionSettings specifying the cryptographic algorithm settings. System.String keyIdentifier The key identifier to retrieve the encryption key. Properties | Improve this doc View source CryptoStream Gets the underlying CryptoStream . Declaration protected override CryptoStream CryptoStream { get; } Property Value Type Description System.Security.Cryptography.CryptoStream Overrides SilverbackCryptoStream.CryptoStream Methods | Improve this doc View source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.Stream.Dispose(System.Boolean) Implements System.IAsyncDisposable System.IDisposable"
  },
  "api/Silverback.Messaging.Encryption.SymmetricEncryptionSettings.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricEncryptionSettings.html",
    "title": "Class SymmetricEncryptionSettings | Silverback",
    "keywords": "Class SymmetricEncryptionSettings The encryption settings used to encrypt the messages. Inheritance System.Object EncryptionSettings SymmetricEncryptionSettingsBase SymmetricEncryptionSettings Implements IValidatableEndpointSettings Inherited Members SymmetricEncryptionSettingsBase.AlgorithmName SymmetricEncryptionSettingsBase.BlockSize SymmetricEncryptionSettingsBase.FeedbackSize SymmetricEncryptionSettingsBase.InitializationVector SymmetricEncryptionSettingsBase.Key SymmetricEncryptionSettingsBase.CipherMode SymmetricEncryptionSettingsBase.PaddingMode SymmetricEncryptionSettingsBase.Validate() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SymmetricEncryptionSettings : SymmetricEncryptionSettingsBase, IValidatableEndpointSettings Properties | Improve this doc View source KeyIdentifier Gets or sets the key identifier to be sent in the header (see EncryptionKeyId ). It will be used on the consumer side to determine the correct key to be used to decrypt the message. Declaration public string KeyIdentifier { get; set; } Property Value Type Description System.String Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Encryption.SymmetricEncryptionSettingsBase.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricEncryptionSettingsBase.html",
    "title": "Class SymmetricEncryptionSettingsBase | Silverback",
    "keywords": "Class SymmetricEncryptionSettingsBase The base class for symmetric encryption settings used to encrypt or decrypt the messages being sent through the message broker. Inheritance System.Object EncryptionSettings SymmetricEncryptionSettingsBase SymmetricDecryptionSettings SymmetricEncryptionSettings Implements IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public abstract class SymmetricEncryptionSettingsBase : EncryptionSettings, IValidatableEndpointSettings Properties | Improve this doc View source AlgorithmName Gets or sets the name of the specific implementation of the System.Security.Cryptography.SymmetricAlgorithm class to use to encrypt or decrypt the messages. Declaration public string AlgorithmName { get; set; } Property Value Type Description System.String | Improve this doc View source BlockSize Gets or sets the block size, in bits, of the cryptographic operation. If null , the default value for the specified algorithm will be used. Declaration public int? BlockSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source CipherMode Gets or sets the mode for operation of the symmetric algorithm. If null , the default value for the specified algorithm will be used. Declaration public CipherMode? CipherMode { get; set; } Property Value Type Description System.Nullable < System.Security.Cryptography.CipherMode > | Improve this doc View source FeedbackSize Gets or sets the feedback size, in bits, of the cryptographic operation for the Cipher Feedback (CFB) and Output Feedback (OFB) cipher modes. If null , the default value for the specified algorithm will be used. Declaration public int? FeedbackSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source InitializationVector Gets or sets the optional initialization vector (IV) for the symmetric algorithm. Important: If null no fixed IV is provided and the producer will automatically generate a random one for each message that will also be prepended to the actual encrypted message to be available to the consumer. Declaration public byte[] InitializationVector { get; set; } Property Value Type Description System.Byte [] | Improve this doc View source Key Gets or sets the secret key for the symmetric algorithm. Declaration public byte[] Key { get; set; } Property Value Type Description System.Byte [] | Improve this doc View source PaddingMode Gets or sets the padding mode used in the symmetric algorithm. If null , the default value for the specified algorithm will be used. Declaration public PaddingMode? PaddingMode { get; set; } Property Value Type Description System.Nullable < System.Security.Cryptography.PaddingMode > Methods | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public override void Validate() Overrides EncryptionSettings.Validate() Implements IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Encryption.SymmetricEncryptStream.html": {
    "href": "api/Silverback.Messaging.Encryption.SymmetricEncryptStream.html",
    "title": "Class SymmetricEncryptStream | Silverback",
    "keywords": "Class SymmetricEncryptStream The implementation of SilverbackCryptoStream based on a System.Security.Cryptography.SymmetricAlgorithm used to encrypt the messages. Inheritance System.Object System.MarshalByRefObject System.IO.Stream SilverbackCryptoStream SymmetricEncryptStream Implements System.IAsyncDisposable System.IDisposable Inherited Members SilverbackCryptoStream.CanRead SilverbackCryptoStream.CanSeek SilverbackCryptoStream.CanWrite SilverbackCryptoStream.Length SilverbackCryptoStream.Position SilverbackCryptoStream.Flush() SilverbackCryptoStream.FlushAsync(CancellationToken) SilverbackCryptoStream.Seek(Int64, SeekOrigin) SilverbackCryptoStream.SetLength(Int64) SilverbackCryptoStream.Write(Byte[], Int32, Int32) SilverbackCryptoStream.WriteAsync(Byte[], Int32, Int32, CancellationToken) SilverbackCryptoStream.Close() System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.DisposeAsync() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Encryption Assembly : Silverback.Integration.dll Syntax public class SymmetricEncryptStream : SilverbackCryptoStream, IAsyncDisposable, IDisposable Constructors | Improve this doc View source SymmetricEncryptStream(Stream, SymmetricEncryptionSettings) Initializes a new instance of the SymmetricEncryptStream class. Declaration public SymmetricEncryptStream(Stream stream, SymmetricEncryptionSettings settings) Parameters Type Name Description System.IO.Stream stream The inner System.IO.Stream to read the clear-text message from. SymmetricEncryptionSettings settings The SymmetricEncryptionSettings specifying the cryptographic algorithm settings. Properties | Improve this doc View source CryptoStream Gets the underlying CryptoStream . Declaration protected override CryptoStream CryptoStream { get; } Property Value Type Description System.Security.Cryptography.CryptoStream Overrides SilverbackCryptoStream.CryptoStream Methods | Improve this doc View source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.Stream.Dispose(System.Boolean) | Improve this doc View source Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Returns Type Description System.Int32 Overrides SilverbackCryptoStream.Read(Byte[], Int32, Int32) | Improve this doc View source ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 > Overrides SilverbackCryptoStream.ReadAsync(Byte[], Int32, Int32, CancellationToken) Implements System.IAsyncDisposable System.IDisposable"
  },
  "api/Silverback.Messaging.Endpoint.html": {
    "href": "api/Silverback.Messaging.Endpoint.html",
    "title": "Class Endpoint | Silverback",
    "keywords": "Class Endpoint Represents a message broker endpoint to connect to (such as a Kafka topic or RabbitMQ queue or exchange). Inheritance System.Object Endpoint ConsumerEndpoint ProducerEndpoint Implements IEndpoint Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public abstract class Endpoint : IEndpoint Constructors | Improve this doc View source Endpoint(String) Initializes a new instance of the Endpoint class. Declaration protected Endpoint(string name) Parameters Type Name Description System.String name The endpoint name. Properties | Improve this doc View source DefaultSerializer Gets the default serializer (a JsonMessageSerializer with default settings). Declaration public static IMessageSerializer DefaultSerializer { get; } Property Value Type Description IMessageSerializer | Improve this doc View source DisplayName Gets the name to be displayed in the human-targeted output (e.g. logs, health checks result, etc.). Declaration public string DisplayName { get; } Property Value Type Description System.String | Improve this doc View source Encryption Gets or sets the encryption settings. This optional settings enables the end-to-end message encryption. When enabled the messages are transparently encrypted by the producer and decrypted by the consumer. Set it to null (default) to disable this feature. Declaration public EncryptionSettings Encryption { get; set; } Property Value Type Description EncryptionSettings | Improve this doc View source FriendlyName Gets or sets an optional friendly name to be used to identify the endpoint. This name can be used to filter or retrieve the endpoints and will also be included in the DisplayName , to be shown in the human-targeted output (e.g. logs, health checks result, etc.). Declaration public string FriendlyName { get; set; } Property Value Type Description System.String | Improve this doc View source MessageValidationMode Gets or sets the message validation mode. This option can be used to determines if validation has to be performed and if should throw an exception. Declaration public MessageValidationMode MessageValidationMode { get; set; } Property Value Type Description MessageValidationMode | Improve this doc View source Name Gets a string identifying the endpoint (the topic, queue or exchange name). Declaration public string Name { get; protected set; } Property Value Type Description System.String | Improve this doc View source Serializer Gets or sets the IMessageSerializer to be used to serialize or deserialize the messages being produced or consumed. Declaration public IMessageSerializer Serializer { get; set; } Property Value Type Description IMessageSerializer Methods | Improve this doc View source BaseEquals(Endpoint) Determines whether the specified Endpoint is equal to the current Endpoint . Declaration protected virtual bool BaseEquals(Endpoint other) Parameters Type Name Description Endpoint other The object to compare with the current object. Returns Type Description System.Boolean Returns a value indicating whether the other object is equal to the current object. | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public virtual void Validate() Implements IEndpoint"
  },
  "api/Silverback.Messaging.EndpointConfigurationException.html": {
    "href": "api/Silverback.Messaging.EndpointConfigurationException.html",
    "title": "Class EndpointConfigurationException | Silverback",
    "keywords": "Class EndpointConfigurationException The exception that is thrown when the endpoint configuration is not valid. Inheritance System.Object System.Exception SilverbackException EndpointConfigurationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax [Serializable] public class EndpointConfigurationException : SilverbackException, ISerializable Constructors | Improve this doc View source EndpointConfigurationException() Initializes a new instance of the EndpointConfigurationException class. Declaration public EndpointConfigurationException() | Improve this doc View source EndpointConfigurationException(SerializationInfo, StreamingContext) Initializes a new instance of the EndpointConfigurationException class with the serialized data. Declaration protected EndpointConfigurationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source EndpointConfigurationException(String) Initializes a new instance of the EndpointConfigurationException class with the specified message. Declaration public EndpointConfigurationException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source EndpointConfigurationException(String, Exception) Initializes a new instance of the EndpointConfigurationException class with the specified message and inner exception. Declaration public EndpointConfigurationException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Headers.CustomHeadersMapperConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Headers.CustomHeadersMapperConsumerBehavior.html",
    "title": "Class CustomHeadersMapperConsumerBehavior | Silverback",
    "keywords": "Class CustomHeadersMapperConsumerBehavior Applies the custom header name mappings. Inheritance System.Object CustomHeadersMapperConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public class CustomHeadersMapperConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source CustomHeadersMapperConsumerBehavior(ICustomHeadersMappings) Initializes a new instance of the CustomHeadersMapperConsumerBehavior class. Declaration public CustomHeadersMapperConsumerBehavior(ICustomHeadersMappings mappings) Parameters Type Name Description ICustomHeadersMappings mappings The ICustomHeadersMappings containing the mappings to be applied. Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Headers.CustomHeadersMapperProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Headers.CustomHeadersMapperProducerBehavior.html",
    "title": "Class CustomHeadersMapperProducerBehavior | Silverback",
    "keywords": "Class CustomHeadersMapperProducerBehavior Applies the custom header name mappings. Inheritance System.Object CustomHeadersMapperProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public class CustomHeadersMapperProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source CustomHeadersMapperProducerBehavior(ICustomHeadersMappings) Initializes a new instance of the CustomHeadersMapperProducerBehavior class. Declaration public CustomHeadersMapperProducerBehavior(ICustomHeadersMappings mappings) Parameters Type Name Description ICustomHeadersMappings mappings The ICustomHeadersMappings containing the mappings to be applied. Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Headers.HeadersReaderConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Headers.HeadersReaderConsumerBehavior.html",
    "title": "Class HeadersReaderConsumerBehavior | Silverback",
    "keywords": "Class HeadersReaderConsumerBehavior Maps the headers with the properties decorated with the HeaderAttribute . Inheritance System.Object HeadersReaderConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public class HeadersReaderConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Headers.HeadersWriterProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Headers.HeadersWriterProducerBehavior.html",
    "title": "Class HeadersWriterProducerBehavior | Silverback",
    "keywords": "Class HeadersWriterProducerBehavior Maps the properties decorated with the HeaderAttribute to the message headers. Inheritance System.Object HeadersWriterProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public class HeadersWriterProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Headers.html": {
    "href": "api/Silverback.Messaging.Headers.html",
    "title": "Namespace Silverback.Messaging.Headers | Silverback",
    "keywords": "Namespace Silverback.Messaging.Headers Classes CustomHeadersMapperConsumerBehavior Applies the custom header name mappings. CustomHeadersMapperProducerBehavior Applies the custom header name mappings. HeadersReaderConsumerBehavior Maps the headers with the properties decorated with the HeaderAttribute . HeadersWriterProducerBehavior Maps the properties decorated with the HeaderAttribute to the message headers. Interfaces ICustomHeadersMappings Can be used to override the default header names."
  },
  "api/Silverback.Messaging.Headers.ICustomHeadersMappings.html": {
    "href": "api/Silverback.Messaging.Headers.ICustomHeadersMappings.html",
    "title": "Interface ICustomHeadersMappings | Silverback",
    "keywords": "Interface ICustomHeadersMappings Can be used to override the default header names. Namespace : Silverback.Messaging.Headers Assembly : Silverback.Integration.dll Syntax public interface ICustomHeadersMappings Properties | Improve this doc View source Count Gets the number of mappings that have been configured. Declaration int Count { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source Add(String, String) Adds a new mapping. Declaration void Add(string defaultHeaderName, string customHeaderName) Parameters Type Name Description System.String defaultHeaderName The default header name. System.String customHeaderName The custom header name to be used instead of the default. | Improve this doc View source Apply(IEnumerable<MessageHeader>) Applies the configured mappings to the specified collection of MessageHeader . Declaration void Apply(IEnumerable<MessageHeader> headers) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The collection of MessageHeader to be mapped. | Improve this doc View source Revert(IEnumerable<MessageHeader>) Reverts the headers in the specified collection of MessageHeader to the default header names. Declaration void Revert(IEnumerable<MessageHeader> headers) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The collection of MessageHeader to be mapped."
  },
  "api/Silverback.Messaging.HealthChecks.ConsumersHealthCheck.html": {
    "href": "api/Silverback.Messaging.HealthChecks.ConsumersHealthCheck.html",
    "title": "Class ConsumersHealthCheck | Silverback",
    "keywords": "Class ConsumersHealthCheck Verifies whether all consumers are connected. Inheritance System.Object ConsumersHealthCheck Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.HealthChecks.dll Syntax public class ConsumersHealthCheck : IHealthCheck Constructors | Improve this doc View source ConsumersHealthCheck(IConsumersHealthCheckService, ConsumerStatus, TimeSpan, Func<IConsumerEndpoint, Boolean>) Initializes a new instance of the ConsumersHealthCheck class. Declaration public ConsumersHealthCheck(IConsumersHealthCheckService service, ConsumerStatus minHealthyStatus, TimeSpan gracePeriod, Func<IConsumerEndpoint, bool> endpointsFilter) Parameters Type Name Description IConsumersHealthCheckService service The IConsumersHealthCheckService implementation to be used to check the consumers. ConsumerStatus minHealthyStatus The minimum ConsumerStatus a consumer must have to be considered healthy. System.TimeSpan gracePeriod The grace period to observe after each status change before a consumer is considered unhealthy. System.Func < IConsumerEndpoint , System.Boolean > endpointsFilter An optional filter to be applied to the endpoints to be tested. Methods | Improve this doc View source CheckHealthAsync(HealthCheckContext, CancellationToken) Declaration public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult > Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck"
  },
  "api/Silverback.Messaging.HealthChecks.ConsumersHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.ConsumersHealthCheckService.html",
    "title": "Class ConsumersHealthCheckService | Silverback",
    "keywords": "Class ConsumersHealthCheckService Checks that all the consumers are connected. Inheritance System.Object ConsumersHealthCheckService Implements IConsumersHealthCheckService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class ConsumersHealthCheckService : IConsumersHealthCheckService Constructors | Improve this doc View source ConsumersHealthCheckService(IBrokerCollection, IHostApplicationLifetime) Initializes a new instance of the ConsumersHealthCheckService class. Declaration public ConsumersHealthCheckService(IBrokerCollection brokerCollection, IHostApplicationLifetime applicationLifetime) Parameters Type Name Description IBrokerCollection brokerCollection The collection containing the available brokers. Microsoft.Extensions.Hosting.IHostApplicationLifetime applicationLifetime The Microsoft.Extensions.Hosting.IHostApplicationLifetime used to track the application shutdown. Methods | Improve this doc View source GetDisconnectedConsumersAsync(ConsumerStatus, TimeSpan, Func<IConsumerEndpoint, Boolean>) Checks the status of all the consumers and returns a collection containing the consumer instances that don't appear to be fully connected (Status >= Ready ). Declaration public Task<IReadOnlyCollection<IConsumer>> GetDisconnectedConsumersAsync(ConsumerStatus minStatus, TimeSpan gracePeriod, Func<IConsumerEndpoint, bool> endpointsFilter) Parameters Type Name Description ConsumerStatus minStatus The minimum ConsumerStatus a consumer must have to be considered fully connected. System.TimeSpan gracePeriod The grace period to observe after each status change before a consumer is considered unhealthy. System.Func < IConsumerEndpoint , System.Boolean > endpointsFilter An optional filter to be applied to the endpoints to be tested. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < IConsumer >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the consumers that aren't fully connected. Implements IConsumersHealthCheckService"
  },
  "api/Silverback.Messaging.HealthChecks.EndpointCheckResult.html": {
    "href": "api/Silverback.Messaging.HealthChecks.EndpointCheckResult.html",
    "title": "Class EndpointCheckResult | Silverback",
    "keywords": "Class EndpointCheckResult Encapsulates the result of a check performed against an IEndpoint . Inheritance System.Object EndpointCheckResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class EndpointCheckResult Constructors | Improve this doc View source EndpointCheckResult(String, Boolean, String) Initializes a new instance of the EndpointCheckResult class. Declaration public EndpointCheckResult(string endpointName, bool isSuccessful, string errorMessage = null) Parameters Type Name Description System.String endpointName The name of the checked endpoint. System.Boolean isSuccessful A value indicating whether the check was successful. System.String errorMessage The error message, if not successful. Properties | Improve this doc View source EndpointName Gets the name of the checked endpoint. Declaration public string EndpointName { get; } Property Value Type Description System.String | Improve this doc View source ErrorMessage Gets the error message, if not successful. Declaration public string ErrorMessage { get; } Property Value Type Description System.String | Improve this doc View source IsSuccessful Gets a value indicating whether the check was successful. Declaration public bool IsSuccessful { get; } Property Value Type Description System.Boolean"
  },
  "api/Silverback.Messaging.HealthChecks.html": {
    "href": "api/Silverback.Messaging.HealthChecks.html",
    "title": "Namespace Silverback.Messaging.HealthChecks | Silverback",
    "keywords": "Namespace Silverback.Messaging.HealthChecks Classes ConsumersHealthCheck Verifies whether all consumers are connected. ConsumersHealthCheckService Checks that all the consumers are connected. EndpointCheckResult Encapsulates the result of a check performed against an IEndpoint . OutboundEndpointsHealthCheck Sends a ping message to all the outbound endpoints to verify that they can all be produced to. OutboundEndpointsHealthCheckService Checks that all outbound endpoints are reachable. OutboundQueueHealthCheckService Checks that the outbound queue is being processed at a sustainable pace. OutboxQueueHealthCheck Monitors the outbox, verifying that the messages are being processed. PingMessage The message that is periodically produced by the OutboundEndpointsHealthCheckService to verify that the endpoints are reachable. Interfaces IConsumersHealthCheckService Checks that all the consumers are connected. IOutboundEndpointsHealthCheckService Checks that all outbound endpoints are reachable. IOutboundQueueHealthCheckService Checks that the outbound queue is being processed at a sustainable pace."
  },
  "api/Silverback.Messaging.HealthChecks.IConsumersHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.IConsumersHealthCheckService.html",
    "title": "Interface IConsumersHealthCheckService | Silverback",
    "keywords": "Interface IConsumersHealthCheckService Checks that all the consumers are connected. Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public interface IConsumersHealthCheckService Methods | Improve this doc View source GetDisconnectedConsumersAsync(ConsumerStatus, TimeSpan, Func<IConsumerEndpoint, Boolean>) Checks the status of all the consumers and returns a collection containing the consumer instances that don't appear to be fully connected (Status >= Ready ). Declaration Task<IReadOnlyCollection<IConsumer>> GetDisconnectedConsumersAsync(ConsumerStatus minStatus, TimeSpan gracePeriod, Func<IConsumerEndpoint, bool> endpointsFilter) Parameters Type Name Description ConsumerStatus minStatus The minimum ConsumerStatus a consumer must have to be considered fully connected. System.TimeSpan gracePeriod The grace period to observe after each status change before a consumer is considered unhealthy. System.Func < IConsumerEndpoint , System.Boolean > endpointsFilter An optional filter to be applied to the endpoints to be tested. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < IConsumer >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the consumers that aren't fully connected."
  },
  "api/Silverback.Messaging.HealthChecks.IOutboundEndpointsHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.IOutboundEndpointsHealthCheckService.html",
    "title": "Interface IOutboundEndpointsHealthCheckService | Silverback",
    "keywords": "Interface IOutboundEndpointsHealthCheckService Checks that all outbound endpoints are reachable. Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public interface IOutboundEndpointsHealthCheckService Methods | Improve this doc View source PingAllEndpointsAsync() Produces a PingMessage to all configured outbound endpoints. Declaration Task<IReadOnlyCollection<EndpointCheckResult>> PingAllEndpointsAsync() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < EndpointCheckResult >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains an EndpointCheckResult for each endpoint."
  },
  "api/Silverback.Messaging.HealthChecks.IOutboundQueueHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.IOutboundQueueHealthCheckService.html",
    "title": "Interface IOutboundQueueHealthCheckService | Silverback",
    "keywords": "Interface IOutboundQueueHealthCheckService Checks that the outbound queue is being processed at a sustainable pace. Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public interface IOutboundQueueHealthCheckService Methods | Improve this doc View source CheckIsHealthyAsync(Nullable<TimeSpan>, Nullable<Int32>) Checks the age of the messages stored in the transactional outbox and optionally the queue length. Declaration Task<bool> CheckIsHealthyAsync(TimeSpan? maxAge = null, int? maxQueueLength = null) Parameters Type Name Description System.Nullable < System.TimeSpan > maxAge The maximum message age, the check will fail when a message exceeds this age. The default is 30 seconds. System.Nullable < System.Int32 > maxQueueLength The maximum amount of messages in the queue. The default is null, meaning unrestricted. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean value indicating whether the check is successful."
  },
  "api/Silverback.Messaging.HealthChecks.OutboundEndpointsHealthCheck.html": {
    "href": "api/Silverback.Messaging.HealthChecks.OutboundEndpointsHealthCheck.html",
    "title": "Class OutboundEndpointsHealthCheck | Silverback",
    "keywords": "Class OutboundEndpointsHealthCheck Sends a ping message to all the outbound endpoints to verify that they can all be produced to. Inheritance System.Object OutboundEndpointsHealthCheck Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.HealthChecks.dll Syntax public class OutboundEndpointsHealthCheck : IHealthCheck Constructors | Improve this doc View source OutboundEndpointsHealthCheck(IOutboundEndpointsHealthCheckService) Initializes a new instance of the OutboundEndpointsHealthCheck class. Declaration public OutboundEndpointsHealthCheck(IOutboundEndpointsHealthCheckService service) Parameters Type Name Description IOutboundEndpointsHealthCheckService service The IOutboundEndpointsHealthCheckService implementation to be used to ping the services. Methods | Improve this doc View source CheckHealthAsync(HealthCheckContext, CancellationToken) Declaration public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult > Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck"
  },
  "api/Silverback.Messaging.HealthChecks.OutboundEndpointsHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.OutboundEndpointsHealthCheckService.html",
    "title": "Class OutboundEndpointsHealthCheckService | Silverback",
    "keywords": "Class OutboundEndpointsHealthCheckService Checks that all outbound endpoints are reachable. Inheritance System.Object OutboundEndpointsHealthCheckService Implements IOutboundEndpointsHealthCheckService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class OutboundEndpointsHealthCheckService : IOutboundEndpointsHealthCheckService Constructors | Improve this doc View source OutboundEndpointsHealthCheckService(IOutboundRoutingConfiguration, IBrokerCollection, IServiceProvider) Initializes a new instance of the OutboundEndpointsHealthCheckService class. Declaration public OutboundEndpointsHealthCheckService(IOutboundRoutingConfiguration outboundRoutingConfiguration, IBrokerCollection brokerCollection, IServiceProvider serviceProvider) Parameters Type Name Description IOutboundRoutingConfiguration outboundRoutingConfiguration The IOutboundRoutingConfiguration to be used to retrieve the list of outbound endpoints. IBrokerCollection brokerCollection The collection containing the available brokers. System.IServiceProvider serviceProvider The System.IServiceProvider . Methods | Improve this doc View source PingAllEndpointsAsync() Produces a PingMessage to all configured outbound endpoints. Declaration public async Task<IReadOnlyCollection<EndpointCheckResult>> PingAllEndpointsAsync() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < EndpointCheckResult >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains an EndpointCheckResult for each endpoint. Implements IOutboundEndpointsHealthCheckService"
  },
  "api/Silverback.Messaging.HealthChecks.OutboundQueueHealthCheckService.html": {
    "href": "api/Silverback.Messaging.HealthChecks.OutboundQueueHealthCheckService.html",
    "title": "Class OutboundQueueHealthCheckService | Silverback",
    "keywords": "Class OutboundQueueHealthCheckService Checks that the outbound queue is being processed at a sustainable pace. Inheritance System.Object OutboundQueueHealthCheckService Implements IOutboundQueueHealthCheckService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class OutboundQueueHealthCheckService : IOutboundQueueHealthCheckService Constructors | Improve this doc View source OutboundQueueHealthCheckService(IOutboxReader) Initializes a new instance of the OutboundQueueHealthCheckService class. Declaration public OutboundQueueHealthCheckService(IOutboxReader queueReader) Parameters Type Name Description IOutboxReader queueReader The IOutboxReader . Methods | Improve this doc View source CheckIsHealthyAsync(Nullable<TimeSpan>, Nullable<Int32>) Checks the age of the messages stored in the transactional outbox and optionally the queue length. Declaration public async Task<bool> CheckIsHealthyAsync(TimeSpan? maxAge = null, int? maxQueueLength = null) Parameters Type Name Description System.Nullable < System.TimeSpan > maxAge The maximum message age, the check will fail when a message exceeds this age. The default is 30 seconds. System.Nullable < System.Int32 > maxQueueLength The maximum amount of messages in the queue. The default is null, meaning unrestricted. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean value indicating whether the check is successful. Implements IOutboundQueueHealthCheckService"
  },
  "api/Silverback.Messaging.HealthChecks.OutboxQueueHealthCheck.html": {
    "href": "api/Silverback.Messaging.HealthChecks.OutboxQueueHealthCheck.html",
    "title": "Class OutboxQueueHealthCheck | Silverback",
    "keywords": "Class OutboxQueueHealthCheck Monitors the outbox, verifying that the messages are being processed. Inheritance System.Object OutboxQueueHealthCheck Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.HealthChecks.dll Syntax public class OutboxQueueHealthCheck : IHealthCheck Constructors | Improve this doc View source OutboxQueueHealthCheck(IOutboundQueueHealthCheckService) Initializes a new instance of the OutboxQueueHealthCheck class. Declaration public OutboxQueueHealthCheck(IOutboundQueueHealthCheckService service) Parameters Type Name Description IOutboundQueueHealthCheckService service The IOutboundQueueHealthCheckService implementation to be used to monitor the outbound queue. Properties | Improve this doc View source MaxMessageAge Gets or sets the maximum message age, the check will fail when a message exceeds this age (default is 30 seconds). Declaration public static TimeSpan MaxMessageAge { get; set; } Property Value Type Description System.TimeSpan | Improve this doc View source MaxQueueLength Gets or sets the maximum amount of messages in the queue. The default is null , meaning unrestricted. Declaration public static int? MaxQueueLength { get; set; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this doc View source CheckHealthAsync(HealthCheckContext, CancellationToken) Declaration public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult > Implements Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck"
  },
  "api/Silverback.Messaging.HealthChecks.PingMessage.html": {
    "href": "api/Silverback.Messaging.HealthChecks.PingMessage.html",
    "title": "Class PingMessage | Silverback",
    "keywords": "Class PingMessage The message that is periodically produced by the OutboundEndpointsHealthCheckService to verify that the endpoints are reachable. Inheritance System.Object PingMessage Implements IMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.HealthChecks Assembly : Silverback.Integration.dll Syntax public class PingMessage : IMessage Properties | Improve this doc View source TimeStamp Gets or sets the datetime at which the message has been produced. Declaration public DateTime TimeStamp { get; set; } Property Value Type Description System.DateTime Methods | Improve this doc View source New() Creates a new instance of the PingMessage . Declaration public static PingMessage New() Returns Type Description PingMessage The new PingMessage . Implements IMessage"
  },
  "api/Silverback.Messaging.html": {
    "href": "api/Silverback.Messaging.html",
    "title": "Namespace Silverback.Messaging | Silverback",
    "keywords": "Namespace Silverback.Messaging Classes ConsumerEndpoint Represents a message broker endpoint to consume from (such as a Kafka topic or RabbitMQ queue or exchange). Endpoint Represents a message broker endpoint to connect to (such as a Kafka topic or RabbitMQ queue or exchange). EndpointConfigurationException The exception that is thrown when the endpoint configuration is not valid. KafkaConsumerEndpoint Represents a topic to consume from. KafkaProducerEndpoint Represents a topic to produce to. MqttConsumerEndpoint Represents a topic to consume from. MqttProducerEndpoint Represents a topic to produce to. ProducerEndpoint Represents a message broker endpoint to produce to (such as a Kafka topic or RabbitMQ queue or exchange). RabbitConsumerEndpoint Represents a queue or exchange to consume from. RabbitExchangeConsumerEndpoint Represents an exchange to consume from. RabbitExchangeProducerEndpoint Represents an exchange to produce to. RabbitProducerEndpoint Represents a queue or exchange to produce to. RabbitQueueConsumerEndpoint Represents a queue to consume from. RabbitQueueProducerEndpoint Represents a queue to produce to. Interfaces IConsumerEndpoint Represents a message broker endpoint to consume from (such as a Kafka topic or RabbitMQ queue or exchange). IEndpoint Represents a message broker endpoint to connect to (such as a Kafka topic or RabbitMQ queue or exchange). IProducerEndpoint Represents a message broker endpoint to produce to (such as a Kafka topic or RabbitMQ queue or exchange). IRawMessageTransformer The base class for all services that transform the inbound or outbound raw binary."
  },
  "api/Silverback.Messaging.IConsumerEndpoint.html": {
    "href": "api/Silverback.Messaging.IConsumerEndpoint.html",
    "title": "Interface IConsumerEndpoint | Silverback",
    "keywords": "Interface IConsumerEndpoint Represents a message broker endpoint to consume from (such as a Kafka topic or RabbitMQ queue or exchange). Inherited Members IEndpoint.Name IEndpoint.DisplayName IEndpoint.Serializer IEndpoint.Encryption IEndpoint.FriendlyName IEndpoint.MessageValidationMode IEndpoint.Validate() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public interface IConsumerEndpoint : IEndpoint Properties | Improve this doc View source Batch Gets the batch settings. Can be used to enable and setup batch processing. Declaration BatchSettings Batch { get; } Property Value Type Description BatchSettings | Improve this doc View source ErrorPolicy Gets the error policy to be applied when an exception occurs during the processing of the consumed messages. Declaration IErrorPolicy ErrorPolicy { get; } Property Value Type Description IErrorPolicy | Improve this doc View source ExactlyOnceStrategy Gets the strategy to be used to guarantee that each message is consumed only once. Declaration IExactlyOnceStrategy ExactlyOnceStrategy { get; } Property Value Type Description IExactlyOnceStrategy | Improve this doc View source NullMessageHandlingStrategy Gets a value indicating how to handle the null messages. The default value is Tombstone . Declaration NullMessageHandlingStrategy NullMessageHandlingStrategy { get; } Property Value Type Description NullMessageHandlingStrategy | Improve this doc View source Sequence Gets the sequence settings. A sequence is a set of related messages, like the chunks belonging to the same message or the messages in a dataset. Declaration SequenceSettings Sequence { get; } Property Value Type Description SequenceSettings | Improve this doc View source ThrowIfUnhandled Gets a value indicating whether an exception must be thrown if no subscriber is handling the received message. The default is true . Declaration bool ThrowIfUnhandled { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source GetUniqueConsumerGroupName() Gets a unique name for the consumer group (e.g. Kafka's consumer group id). This value (joint with the endpoint name) will be used for example to ensure the exactly-once delivery. Declaration string GetUniqueConsumerGroupName() Returns Type Description System.String Returns the unique name for the consumer group. Remarks It's not enough to use the endpoint name, since the same topic could be consumed by multiple consumer groups within the same process and/or using the same database to store the information needed to ensure the exactly-once delivery."
  },
  "api/Silverback.Messaging.IEndpoint.html": {
    "href": "api/Silverback.Messaging.IEndpoint.html",
    "title": "Interface IEndpoint | Silverback",
    "keywords": "Interface IEndpoint Represents a message broker endpoint to connect to (such as a Kafka topic or RabbitMQ queue or exchange). Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public interface IEndpoint Properties | Improve this doc View source DisplayName Gets the name to be displayed in the human-targeted output (e.g. logs, health checks result, etc.). Declaration string DisplayName { get; } Property Value Type Description System.String | Improve this doc View source Encryption Gets the encryption settings. This optional settings enables the end-to-end message encryption. When enabled the messages are transparently encrypted by the producer and decrypted by the consumer. Set it to null (default) to disable this feature. Declaration EncryptionSettings Encryption { get; } Property Value Type Description EncryptionSettings | Improve this doc View source FriendlyName Gets an optional friendly name to be used to identify the endpoint. This name can be used to filter or retrieve the endpoints and will also be included in the DisplayName , to be shown in the human-targeted output (e.g. logs, health checks result, etc.). Declaration string FriendlyName { get; } Property Value Type Description System.String | Improve this doc View source MessageValidationMode Gets the message validation mode. This option can be used to specify if the messages have to be validated and whether an exception must be thrown if the message is not valid. Declaration MessageValidationMode MessageValidationMode { get; } Property Value Type Description MessageValidationMode | Improve this doc View source Name Gets a string identifying the endpoint (the topic, queue or exchange name). Declaration string Name { get; } Property Value Type Description System.String | Improve this doc View source Serializer Gets the IMessageSerializer to be used to serialize or deserialize the messages being produced or consumed. Declaration IMessageSerializer Serializer { get; } Property Value Type Description IMessageSerializer Methods | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration void Validate()"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyBase.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyBase.html",
    "title": "Class ErrorPolicyBase | Silverback",
    "keywords": "Class ErrorPolicyBase Builds the error policy. Inheritance System.Object ErrorPolicyBase RetryableErrorPolicyBase SkipMessageErrorPolicy StopConsumerErrorPolicy Implements IErrorPolicy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public abstract class ErrorPolicyBase : IErrorPolicy Properties | Improve this doc View source ApplyRule Gets the custom apply rule function. Declaration public Func<IRawInboundEnvelope, Exception, bool> ApplyRule { get; } Property Value Type Description System.Func < IRawInboundEnvelope , System.Exception , System.Boolean > | Improve this doc View source ExcludedExceptions Gets the collection of exception types this policy doesn't have to be applied to. Declaration public ICollection<Type> ExcludedExceptions { get; } Property Value Type Description System.Collections.Generic.ICollection < System.Type > | Improve this doc View source IncludedExceptions Gets the collection of exception types this policy have to be applied to. Declaration public ICollection<Type> IncludedExceptions { get; } Property Value Type Description System.Collections.Generic.ICollection < System.Type > | Improve this doc View source MaxFailedAttemptsCount Gets the number of times this policy should be applied to the same message in case of multiple failed attempts. Declaration public int? MaxFailedAttemptsCount { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this doc View source MessageToPublishFactory Gets the factory that builds the message to be published after the policy is applied. Declaration public Func<IRawInboundEnvelope, Exception, object> MessageToPublishFactory { get; } Property Value Type Description System.Func < IRawInboundEnvelope , System.Exception , System.Object > Methods | Improve this doc View source ApplyTo(Type) Restricts the application of this policy to the specified exception type only. It is possible to combine multiple calls to ApplyTo and Exclude . Declaration public ErrorPolicyBase ApplyTo(Type exceptionType) Parameters Type Name Description System.Type exceptionType The type of the exception to be handled. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. | Improve this doc View source ApplyTo<T>() Restricts the application of this policy to the specified exception type only. It is possible to combine multiple calls to ApplyTo and Exclude . Declaration public ErrorPolicyBase ApplyTo<T>() where T : Exception Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. Type Parameters Name Description T The type of the exception to be handled. | Improve this doc View source ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) Specifies a predicate to be used to determine whether the policy has to be applied according to the current message and exception. Declaration public ErrorPolicyBase ApplyWhen(Func<IRawInboundEnvelope, Exception, bool> applyRule) Parameters Type Name Description System.Func < IRawInboundEnvelope , System.Exception , System.Boolean > applyRule The predicate. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. | Improve this doc View source Build(IServiceProvider) Returns the actual error policy implementation, built using the provided System.IServiceProvider . Declaration public IErrorPolicyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the error policy. Returns Type Description IErrorPolicyImplementation An instance of IErrorPolicyImplementation that can be used to handle the processing error. | Improve this doc View source BuildCore(IServiceProvider) Returns the actual error policy implementation, built using the provided System.IServiceProvider . Declaration protected abstract ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the error policy. Returns Type Description ErrorPolicyImplementation An instance of IErrorPolicyImplementation that can be used to handle the processing error. | Improve this doc View source Exclude(Type) Restricts the application of this policy to all exceptions but the specified type. It is possible to combine multiple calls to ApplyTo and Exclude . Declaration public ErrorPolicyBase Exclude(Type exceptionType) Parameters Type Name Description System.Type exceptionType The type of the exception to be ignored. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. | Improve this doc View source Exclude<T>() Restricts the application of this policy to all exceptions but the specified type. It is possible to combine multiple calls to ApplyTo and Exclude . Declaration public ErrorPolicyBase Exclude<T>() where T : Exception Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. Type Parameters Name Description T The type of the exception to be ignored. | Improve this doc View source Publish(Func<IRawInboundEnvelope, Exception, Object>) Specify a factory to create a message to be published to the internal bus when this policy is applied. Useful to execute some custom code. Declaration public ErrorPolicyBase Publish(Func<IRawInboundEnvelope, Exception, object> factory) Parameters Type Name Description System.Func < IRawInboundEnvelope , System.Exception , System.Object > factory The factory returning the message to be published. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. | Improve this doc View source Publish(Func<IRawInboundEnvelope, Object>) Specify a factory to create a message to be published to the internal bus when this policy is applied. Useful to execute some custom code. Declaration public ErrorPolicyBase Publish(Func<IRawInboundEnvelope, object> factory) Parameters Type Name Description System.Func < IRawInboundEnvelope , System.Object > factory The factory returning the message to be published. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyChain.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyChain.html",
    "title": "Class ErrorPolicyChain | Silverback",
    "keywords": "Class ErrorPolicyChain A chain of error policies to be sequentially applied. Inheritance System.Object ErrorPolicyChain Implements IErrorPolicy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class ErrorPolicyChain : IErrorPolicy Constructors | Improve this doc View source ErrorPolicyChain(ErrorPolicyBase[]) Initializes a new instance of the ErrorPolicyChain class. Declaration public ErrorPolicyChain(params ErrorPolicyBase[] policies) Parameters Type Name Description ErrorPolicyBase [] policies The policies to be chained. | Improve this doc View source ErrorPolicyChain(IEnumerable<ErrorPolicyBase>) Initializes a new instance of the ErrorPolicyChain class. Declaration public ErrorPolicyChain(IEnumerable<ErrorPolicyBase> policies) Parameters Type Name Description System.Collections.Generic.IEnumerable < ErrorPolicyBase > policies The policies to be chained. Methods | Improve this doc View source Build(IServiceProvider) Returns the actual error policy implementation, built using the provided System.IServiceProvider . Declaration public IErrorPolicyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the error policy. Returns Type Description IErrorPolicyImplementation An instance of IErrorPolicyImplementation that can be used to handle the processing error. Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyImplementation.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.ErrorPolicyImplementation.html",
    "title": "Class ErrorPolicyImplementation | Silverback",
    "keywords": "Class ErrorPolicyImplementation An error policy is used to handle errors that may occur while processing the inbound messages. Inheritance System.Object ErrorPolicyImplementation Implements IErrorPolicyImplementation Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public abstract class ErrorPolicyImplementation : IErrorPolicyImplementation Constructors | Improve this doc View source ErrorPolicyImplementation(Nullable<Int32>, ICollection<Type>, ICollection<Type>, Func<IRawInboundEnvelope, Exception, Boolean>, Func<IRawInboundEnvelope, Exception, Object>, IServiceProvider, IInboundLogger<ErrorPolicyBase>) Initializes a new instance of the ErrorPolicyImplementation class. Declaration protected ErrorPolicyImplementation(int? maxFailedAttempts, ICollection<Type> excludedExceptions, ICollection<Type> includedExceptions, Func<IRawInboundEnvelope, Exception, bool> applyRule, Func<IRawInboundEnvelope, Exception, object> messageToPublishFactory, IServiceProvider serviceProvider, IInboundLogger<ErrorPolicyBase> logger) Parameters Type Name Description System.Nullable < System.Int32 > maxFailedAttempts The number of times this policy should be applied to the same message in case of multiple failed attempts. System.Collections.Generic.ICollection < System.Type > excludedExceptions The collection of exception types this policy doesn't have to be applied to. System.Collections.Generic.ICollection < System.Type > includedExceptions The collection of exception types this policy have to be applied to. System.Func < IRawInboundEnvelope , System.Exception , System.Boolean > applyRule The custom apply rule function. System.Func < IRawInboundEnvelope , System.Exception , System.Object > messageToPublishFactory The factory that builds the message to be published after the policy is applied. System.IServiceProvider serviceProvider The System.IServiceProvider . IInboundLogger < ErrorPolicyBase > logger The IInboundLogger<TCategoryName> . Methods | Improve this doc View source ApplyPolicyAsync(ConsumerPipelineContext, Exception) Executes the current policy. Declaration protected abstract Task<bool> ApplyPolicyAsync(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context The ConsumerPipelineContext related to the message that failed to be processed. System.Exception exception The exception that was thrown during the processing. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the action that the consumer should perform (e.g. skip the message or stop consuming). | Improve this doc View source CanHandle(ConsumerPipelineContext, Exception) Returns a boolean value indicating whether the policy can handle the specified envelopes and the specified exception. Declaration public virtual bool CanHandle(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context The ConsumerPipelineContext related to the message that failed to be processed. System.Exception exception The exception that was thrown during the processing. Returns Type Description System.Boolean A value indicating whether the specified envelopes and exception can be handled. | Improve this doc View source HandleErrorAsync(ConsumerPipelineContext, Exception) Performs the necessary actions to handle the error (including invoking the IConsumerTransactionManager ). Declaration public async Task<bool> HandleErrorAsync(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context The ConsumerPipelineContext related to the message that failed to be processed. System.Exception exception The exception that was thrown during the processing. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean flag indicating whether the error was handled. If false is returned the exception will be rethrown and the consumer will stop. Implements IErrorPolicyImplementation"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.html",
    "title": "Namespace Silverback.Messaging.Inbound.ErrorHandling | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound.ErrorHandling Classes ErrorPolicyBase Builds the error policy. ErrorPolicyChain A chain of error policies to be sequentially applied. ErrorPolicyImplementation An error policy is used to handle errors that may occur while processing the inbound messages. MoveMessageErrorPolicy This policy moves the message that failed to be processed to the configured endpoint. RetryableErrorPolicyBase Builds an error policy that can be applied multiple times to the same message (e.g. RetryErrorPolicy or MoveMessageErrorPolicy ). RetryErrorPolicy This policy retries to process the message that previously failed to be to processed. An optional delay can be specified. SkipMessageErrorPolicy This policy skips the message that failed to be processed. StopConsumerErrorPolicy This is the default policy and it stops the consumer when an exception is thrown during the message processing. Interfaces IErrorPolicy An error policy is used to handle errors that may occur while processing the inbound messages. IErrorPolicyImplementation An error policy is used to handle errors that may occur while processing the inbound messages."
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.IErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.IErrorPolicy.html",
    "title": "Interface IErrorPolicy | Silverback",
    "keywords": "Interface IErrorPolicy An error policy is used to handle errors that may occur while processing the inbound messages. Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public interface IErrorPolicy Methods | Improve this doc View source Build(IServiceProvider) Returns the actual error policy implementation, built using the provided System.IServiceProvider . Declaration IErrorPolicyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the error policy. Returns Type Description IErrorPolicyImplementation An instance of IErrorPolicyImplementation that can be used to handle the processing error."
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.IErrorPolicyImplementation.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.IErrorPolicyImplementation.html",
    "title": "Interface IErrorPolicyImplementation | Silverback",
    "keywords": "Interface IErrorPolicyImplementation An error policy is used to handle errors that may occur while processing the inbound messages. Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public interface IErrorPolicyImplementation Methods | Improve this doc View source CanHandle(ConsumerPipelineContext, Exception) Returns a boolean value indicating whether the policy can handle the specified envelopes and the specified exception. Declaration bool CanHandle(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context The ConsumerPipelineContext related to the message that failed to be processed. System.Exception exception The exception that was thrown during the processing. Returns Type Description System.Boolean A value indicating whether the specified envelopes and exception can be handled. | Improve this doc View source HandleErrorAsync(ConsumerPipelineContext, Exception) Performs the necessary actions to handle the error (including invoking the IConsumerTransactionManager ). Declaration Task<bool> HandleErrorAsync(ConsumerPipelineContext context, Exception exception) Parameters Type Name Description ConsumerPipelineContext context The ConsumerPipelineContext related to the message that failed to be processed. System.Exception exception The exception that was thrown during the processing. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a boolean flag indicating whether the error was handled. If false is returned the exception will be rethrown and the consumer will stop."
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.MoveMessageErrorPolicy.html",
    "title": "Class MoveMessageErrorPolicy | Silverback",
    "keywords": "Class MoveMessageErrorPolicy This policy moves the message that failed to be processed to the configured endpoint. Inheritance System.Object ErrorPolicyBase RetryableErrorPolicyBase MoveMessageErrorPolicy Implements IErrorPolicy Inherited Members RetryableErrorPolicyBase.MaxFailedAttempts(Nullable<Int32>) ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Exception, Object>) ErrorPolicyBase.Build(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class MoveMessageErrorPolicy : RetryableErrorPolicyBase, IErrorPolicy Remarks This policy can be used also to move the message at the end of the current topic to retry it later on. The number of retries can be limited using MaxFailedAttempts(Nullable<Int32>) . Constructors | Improve this doc View source MoveMessageErrorPolicy(IProducerEndpoint) Initializes a new instance of the MoveMessageErrorPolicy class. Declaration public MoveMessageErrorPolicy(IProducerEndpoint endpoint) Parameters Type Name Description IProducerEndpoint endpoint The endpoint to move the message to. Methods | Improve this doc View source BuildCore(IServiceProvider) Returns the actual error policy implementation, built using the provided System.IServiceProvider . Declaration protected override ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the error policy. Returns Type Description ErrorPolicyImplementation An instance of IErrorPolicyImplementation that can be used to handle the processing error. Overrides ErrorPolicyBase.BuildCore(IServiceProvider) | Improve this doc View source Transform(Action<IOutboundEnvelope, Exception>) Defines an System.Action<T> to be called to modify (or completely rewrite) the message being moved. Declaration public MoveMessageErrorPolicy Transform(Action<IOutboundEnvelope, Exception> transformationAction) Parameters Type Name Description System.Action < IOutboundEnvelope , System.Exception > transformationAction The System.Action<T> to be called to modify the message. This function can be used to modify or replace the message body and its headers. Returns Type Description MoveMessageErrorPolicy The MoveMessageErrorPolicy so that additional calls can be chained. Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.RetryableErrorPolicyBase.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.RetryableErrorPolicyBase.html",
    "title": "Class RetryableErrorPolicyBase | Silverback",
    "keywords": "Class RetryableErrorPolicyBase Builds an error policy that can be applied multiple times to the same message (e.g. RetryErrorPolicy or MoveMessageErrorPolicy ). Inheritance System.Object ErrorPolicyBase RetryableErrorPolicyBase MoveMessageErrorPolicy RetryErrorPolicy Implements IErrorPolicy Inherited Members ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Exception, Object>) ErrorPolicyBase.Build(IServiceProvider) ErrorPolicyBase.BuildCore(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public abstract class RetryableErrorPolicyBase : ErrorPolicyBase, IErrorPolicy Methods | Improve this doc View source MaxFailedAttempts(Nullable<Int32>) Specifies how many times this rule can be applied to the same message. If multiple policies are chained in an ErrorPolicyChain then the next policy will be triggered after the allotted amount of retries. Declaration public ErrorPolicyBase MaxFailedAttempts(int? maxFailedAttempts) Parameters Type Name Description System.Nullable < System.Int32 > maxFailedAttempts The number of retries. Returns Type Description ErrorPolicyBase The ErrorPolicyBase so that additional calls can be chained. Remarks The number of attempts at processing the message are stored locally, in memory and not persisted anywhere. A restart or a Kafka rebalance would cause them to reset. The messages are uniquely identified according to their IBrokerMessageIdentifier , if the message broker is providing a unique value like the Kafka offset. Otherwise the message id header value is used ( MessageId ). The mechanism will not work if no unique identifier is provided (e.g. MQTT) and no id header is sent with the message. Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.RetryErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.RetryErrorPolicy.html",
    "title": "Class RetryErrorPolicy | Silverback",
    "keywords": "Class RetryErrorPolicy This policy retries to process the message that previously failed to be to processed. An optional delay can be specified. Inheritance System.Object ErrorPolicyBase RetryableErrorPolicyBase RetryErrorPolicy Implements IErrorPolicy Inherited Members RetryableErrorPolicyBase.MaxFailedAttempts(Nullable<Int32>) ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Exception, Object>) ErrorPolicyBase.Build(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class RetryErrorPolicy : RetryableErrorPolicyBase, IErrorPolicy Constructors | Improve this doc View source RetryErrorPolicy(Nullable<TimeSpan>, Nullable<TimeSpan>) Initializes a new instance of the RetryErrorPolicy class. Declaration public RetryErrorPolicy(TimeSpan? initialDelay = null, TimeSpan? delayIncrement = null) Parameters Type Name Description System.Nullable < System.TimeSpan > initialDelay The optional delay to be applied to the first retry. System.Nullable < System.TimeSpan > delayIncrement The optional increment to the delay to be applied at each retry. Methods | Improve this doc View source BuildCore(IServiceProvider) Returns the actual error policy implementation, built using the provided System.IServiceProvider . Declaration protected override ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the error policy. Returns Type Description ErrorPolicyImplementation An instance of IErrorPolicyImplementation that can be used to handle the processing error. Overrides ErrorPolicyBase.BuildCore(IServiceProvider) Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.SkipMessageErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.SkipMessageErrorPolicy.html",
    "title": "Class SkipMessageErrorPolicy | Silverback",
    "keywords": "Class SkipMessageErrorPolicy This policy skips the message that failed to be processed. Inheritance System.Object ErrorPolicyBase SkipMessageErrorPolicy Implements IErrorPolicy Inherited Members ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Exception, Object>) ErrorPolicyBase.Build(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class SkipMessageErrorPolicy : ErrorPolicyBase, IErrorPolicy Methods | Improve this doc View source BuildCore(IServiceProvider) Returns the actual error policy implementation, built using the provided System.IServiceProvider . Declaration protected override ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the error policy. Returns Type Description ErrorPolicyImplementation An instance of IErrorPolicyImplementation that can be used to handle the processing error. Overrides ErrorPolicyBase.BuildCore(IServiceProvider) Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ErrorHandling.StopConsumerErrorPolicy.html": {
    "href": "api/Silverback.Messaging.Inbound.ErrorHandling.StopConsumerErrorPolicy.html",
    "title": "Class StopConsumerErrorPolicy | Silverback",
    "keywords": "Class StopConsumerErrorPolicy This is the default policy and it stops the consumer when an exception is thrown during the message processing. Inheritance System.Object ErrorPolicyBase StopConsumerErrorPolicy Implements IErrorPolicy Inherited Members ErrorPolicyBase.MaxFailedAttemptsCount ErrorPolicyBase.ExcludedExceptions ErrorPolicyBase.IncludedExceptions ErrorPolicyBase.ApplyRule ErrorPolicyBase.MessageToPublishFactory ErrorPolicyBase.ApplyTo<T>() ErrorPolicyBase.ApplyTo(Type) ErrorPolicyBase.Exclude<T>() ErrorPolicyBase.Exclude(Type) ErrorPolicyBase.ApplyWhen(Func<IRawInboundEnvelope, Exception, Boolean>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Object>) ErrorPolicyBase.Publish(Func<IRawInboundEnvelope, Exception, Object>) ErrorPolicyBase.Build(IServiceProvider) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ErrorHandling Assembly : Silverback.Integration.dll Syntax public class StopConsumerErrorPolicy : ErrorPolicyBase, IErrorPolicy Methods | Improve this doc View source BuildCore(IServiceProvider) Returns the actual error policy implementation, built using the provided System.IServiceProvider . Declaration protected override ErrorPolicyImplementation BuildCore(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the error policy. Returns Type Description ErrorPolicyImplementation An instance of IErrorPolicyImplementation that can be used to handle the processing error. Overrides ErrorPolicyBase.BuildCore(IServiceProvider) Implements IErrorPolicy"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.ExactlyOnceGuardConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.ExactlyOnceGuardConsumerBehavior.html",
    "title": "Class ExactlyOnceGuardConsumerBehavior | Silverback",
    "keywords": "Class ExactlyOnceGuardConsumerBehavior Uses the configured implementation of IExactlyOnceStrategy to ensure that the message is processed only once. Inheritance System.Object ExactlyOnceGuardConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public class ExactlyOnceGuardConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ExactlyOnceGuardConsumerBehavior(IInboundLogger<ExactlyOnceGuardConsumerBehavior>) Initializes a new instance of the ExactlyOnceGuardConsumerBehavior class. Declaration public ExactlyOnceGuardConsumerBehavior(IInboundLogger<ExactlyOnceGuardConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < ExactlyOnceGuardConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.html",
    "title": "Namespace Silverback.Messaging.Inbound.ExactlyOnce | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound.ExactlyOnce Classes ExactlyOnceGuardConsumerBehavior Uses the configured implementation of IExactlyOnceStrategy to ensure that the message is processed only once. LogExactlyOnceStrategy Uses an IInboundLog to keep track of the processed message identifiers and guarantee that each message is processed only once. OffsetStoreExactlyOnceStrategy Uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Interfaces IExactlyOnceStrategy The strategy used to guarantee that each message is consumed only once. IExactlyOnceStrategyImplementation The strategy used to guarantee that each message is consumed only once."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.IExactlyOnceStrategy.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.IExactlyOnceStrategy.html",
    "title": "Interface IExactlyOnceStrategy | Silverback",
    "keywords": "Interface IExactlyOnceStrategy The strategy used to guarantee that each message is consumed only once. Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public interface IExactlyOnceStrategy Methods | Improve this doc View source Build(IServiceProvider) Returns the actual strategy implementation, built using the provided System.IServiceProvider . Declaration IExactlyOnceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the strategy. Returns Type Description IExactlyOnceStrategyImplementation An instance of IExactlyOnceStrategyImplementation that can be used to produce the messages."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.IExactlyOnceStrategyImplementation.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.IExactlyOnceStrategyImplementation.html",
    "title": "Interface IExactlyOnceStrategyImplementation | Silverback",
    "keywords": "Interface IExactlyOnceStrategyImplementation The strategy used to guarantee that each message is consumed only once. Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public interface IExactlyOnceStrategyImplementation Methods | Improve this doc View source CheckIsAlreadyProcessedAsync(ConsumerPipelineContext) Checks whether the message contained in the specified envelope was already processed and must therefore be skipped. If the message is new, this method implicitly writes its reference to the store and enlists it into the consumer transaction. Declaration Task<bool> CheckIsAlreadyProcessedAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the consumer behaviors pipeline. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the message was already processed."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.LogExactlyOnceStrategy.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.LogExactlyOnceStrategy.html",
    "title": "Class LogExactlyOnceStrategy | Silverback",
    "keywords": "Class LogExactlyOnceStrategy Uses an IInboundLog to keep track of the processed message identifiers and guarantee that each message is processed only once. Inheritance System.Object LogExactlyOnceStrategy Implements IExactlyOnceStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public class LogExactlyOnceStrategy : IExactlyOnceStrategy Methods | Improve this doc View source Build(IServiceProvider) Returns the actual strategy implementation, built using the provided System.IServiceProvider . Declaration public IExactlyOnceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the strategy. Returns Type Description IExactlyOnceStrategyImplementation An instance of IExactlyOnceStrategyImplementation that can be used to produce the messages. Implements IExactlyOnceStrategy"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.OffsetStoreExactlyOnceStrategy.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.OffsetStoreExactlyOnceStrategy.html",
    "title": "Class OffsetStoreExactlyOnceStrategy | Silverback",
    "keywords": "Class OffsetStoreExactlyOnceStrategy Uses an IOffsetStore to keep track of the latest processed offsets and guarantee that each message is processed only once. Inheritance System.Object OffsetStoreExactlyOnceStrategy Implements IExactlyOnceStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce Assembly : Silverback.Integration.dll Syntax public class OffsetStoreExactlyOnceStrategy : IExactlyOnceStrategy Methods | Improve this doc View source Build(IServiceProvider) Returns the actual strategy implementation, built using the provided System.IServiceProvider . Declaration public IExactlyOnceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the strategy. Returns Type Description IExactlyOnceStrategyImplementation An instance of IExactlyOnceStrategyImplementation that can be used to produce the messages. Implements IExactlyOnceStrategy"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.DbInboundLog.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.DbInboundLog.html",
    "title": "Class DbInboundLog | Silverback",
    "keywords": "Class DbInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. An IDbContext is used to store the log into the database. Inheritance System.Object RepositoryBase < InboundLogEntry > DbInboundLog Implements IInboundLog ITransactional Inherited Members RepositoryBase<InboundLogEntry>.DbContext RepositoryBase<InboundLogEntry>.DbSet System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public class DbInboundLog : RepositoryBase<InboundLogEntry>, IInboundLog, ITransactional Constructors | Improve this doc View source DbInboundLog(IDbContext) Initializes a new instance of the DbInboundLog class. Declaration public DbInboundLog(IDbContext dbContext) Parameters Type Name Description IDbContext dbContext The IDbContext to use as storage. Methods | Improve this doc View source AddAsync(IRawInboundEnvelope) Add the message contained in the specified envelope to the log. Declaration public Task AddAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message to be added. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitAsync() Called when the message has been successfully processed to commit the transaction. Declaration public async Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExistsAsync(IRawInboundEnvelope) Returns a boolean value indicating whether this very same message has already been logged for the same consumer group. Declaration public Task<bool> ExistsAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message to be checked. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the message was found in the log. | Improve this doc View source GetLengthAsync() Returns the total number of messages in the log. Declaration public Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the result of the asynchronous operation. The task result contains the log length. | Improve this doc View source RollbackAsync() Called when an exception occurs during the message processing to rollback the transaction. Declaration public Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IInboundLog ITransactional"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.DbOffsetStore.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.DbOffsetStore.html",
    "title": "Class DbOffsetStore | Silverback",
    "keywords": "Class DbOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. An IDbContext is used to store the offsets into the database. Inheritance System.Object RepositoryBase < StoredOffset > DbOffsetStore Implements IOffsetStore ITransactional Inherited Members RepositoryBase<StoredOffset>.DbContext RepositoryBase<StoredOffset>.DbSet System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public sealed class DbOffsetStore : RepositoryBase<StoredOffset>, IOffsetStore, ITransactional Constructors | Improve this doc View source DbOffsetStore(IDbContext) Initializes a new instance of the DbOffsetStore class. Declaration public DbOffsetStore(IDbContext dbContext) Parameters Type Name Description IDbContext dbContext The IDbContext to use as storage. Methods | Improve this doc View source CommitAsync() Called when the message has been successfully processed to commit the transaction. Declaration public async Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source GetLatestValueAsync(String, IConsumerEndpoint) Returns the latest recorded offset value for the specified offset key and endpoint. Declaration public async Task<IBrokerMessageOffset> GetLatestValueAsync(string offsetKey, IConsumerEndpoint endpoint) Parameters Type Name Description System.String offsetKey The key of the offset to be retrieved. The offset key uniquely identifies the queue, topic or partition. IConsumerEndpoint endpoint The endpoint for which the recorded offset has to be be returned. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageOffset > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the latest offset. | Improve this doc View source RollbackAsync() Called when an exception occurs during the message processing to rollback the transaction. Declaration public Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source StoreAsync(IBrokerMessageOffset, IConsumerEndpoint) Stores the offset of the processed message. Declaration public async Task StoreAsync(IBrokerMessageOffset offset, IConsumerEndpoint endpoint) Parameters Type Name Description IBrokerMessageOffset offset The offset to be stored. IConsumerEndpoint endpoint The endpoint the offset belongs to. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IOffsetStore ITransactional"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.html",
    "title": "Namespace Silverback.Messaging.Inbound.ExactlyOnce.Repositories | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound.ExactlyOnce.Repositories Classes DbInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. An IDbContext is used to store the log into the database. DbOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. An IDbContext is used to store the offsets into the database. InMemoryInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. The log is simply persisted in memory. InMemoryOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. The log is simply persisted in memory. Interfaces IInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. IOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.IInboundLog.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.IInboundLog.html",
    "title": "Interface IInboundLog | Silverback",
    "keywords": "Interface IInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. Inherited Members ITransactional.CommitAsync() ITransactional.RollbackAsync() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public interface IInboundLog : ITransactional Methods | Improve this doc View source AddAsync(IRawInboundEnvelope) Add the message contained in the specified envelope to the log. Declaration Task AddAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message to be added. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExistsAsync(IRawInboundEnvelope) Returns a boolean value indicating whether this very same message has already been logged for the same consumer group. Declaration Task<bool> ExistsAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message to be checked. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the message was found in the log. | Improve this doc View source GetLengthAsync() Returns the total number of messages in the log. Declaration Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the result of the asynchronous operation. The task result contains the log length."
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.InMemoryInboundLog.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.InMemoryInboundLog.html",
    "title": "Class InMemoryInboundLog | Silverback",
    "keywords": "Class InMemoryInboundLog Used by the LogExactlyOnceStrategy to keep track of each processed message and guarantee that each one is processed only once. The log is simply persisted in memory. Inheritance System.Object TransactionalList < InboundLogEntry > InMemoryInboundLog Implements IInboundLog ITransactional Inherited Members TransactionalList<InboundLogEntry>.CommittedItemsCount TransactionalList<InboundLogEntry>.Items TransactionalList<InboundLogEntry>.UncommittedItems TransactionalList<InboundLogEntry>.CommitAsync() TransactionalList<InboundLogEntry>.RollbackAsync() TransactionalList<InboundLogEntry>.AddAsync(InboundLogEntry) TransactionalList<InboundLogEntry>.RemoveAsync(InboundLogEntry) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public class InMemoryInboundLog : TransactionalList<InboundLogEntry>, IInboundLog, ITransactional Constructors | Improve this doc View source InMemoryInboundLog(TransactionalListSharedItems<InboundLogEntry>) Initializes a new instance of the InMemoryInboundLog class. Declaration public InMemoryInboundLog(TransactionalListSharedItems<InboundLogEntry> sharedItems) Parameters Type Name Description TransactionalListSharedItems < InboundLogEntry > sharedItems The log entries shared between the instances of this repository. Methods | Improve this doc View source AddAsync(IRawInboundEnvelope) Add the message contained in the specified envelope to the log. Declaration public Task AddAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message to be added. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExistsAsync(IRawInboundEnvelope) Returns a boolean value indicating whether this very same message has already been logged for the same consumer group. Declaration public Task<bool> ExistsAsync(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The envelope containing the message to be checked. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the message was found in the log. | Improve this doc View source GetLengthAsync() Returns the total number of messages in the log. Declaration public Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the result of the asynchronous operation. The task result contains the log length. Implements IInboundLog ITransactional"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.InMemoryOffsetStore.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.InMemoryOffsetStore.html",
    "title": "Class InMemoryOffsetStore | Silverback",
    "keywords": "Class InMemoryOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. The log is simply persisted in memory. Inheritance System.Object TransactionalDictionary < System.String , IBrokerMessageOffset > InMemoryOffsetStore Implements IOffsetStore ITransactional Inherited Members TransactionalDictionary<String, IBrokerMessageOffset>.CommittedItemsCount TransactionalDictionary<String, IBrokerMessageOffset>.Items TransactionalDictionary<String, IBrokerMessageOffset>.UncommittedItems TransactionalDictionary<String, IBrokerMessageOffset>.CommitAsync() TransactionalDictionary<String, IBrokerMessageOffset>.RollbackAsync() TransactionalDictionary<String, IBrokerMessageOffset>.AddOrReplaceAsync(String, IBrokerMessageOffset) TransactionalDictionary<String, IBrokerMessageOffset>.RemoveAsync(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public class InMemoryOffsetStore : TransactionalDictionary<string, IBrokerMessageOffset>, IOffsetStore, ITransactional Constructors | Improve this doc View source InMemoryOffsetStore(TransactionalDictionarySharedItems<String, IBrokerMessageOffset>) Initializes a new instance of the InMemoryOffsetStore class. Declaration public InMemoryOffsetStore(TransactionalDictionarySharedItems<string, IBrokerMessageOffset> sharedItems) Parameters Type Name Description TransactionalDictionarySharedItems < System.String , IBrokerMessageOffset > sharedItems The offsets shared between the instances of this repository. Methods | Improve this doc View source GetLatestValueAsync(String, IConsumerEndpoint) Returns the latest recorded offset value for the specified offset key and endpoint. Declaration public Task<IBrokerMessageOffset> GetLatestValueAsync(string offsetKey, IConsumerEndpoint endpoint) Parameters Type Name Description System.String offsetKey The key of the offset to be retrieved. The offset key uniquely identifies the queue, topic or partition. IConsumerEndpoint endpoint The endpoint for which the recorded offset has to be be returned. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageOffset > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the latest offset. | Improve this doc View source StoreAsync(IBrokerMessageOffset, IConsumerEndpoint) Stores the offset of the processed message. Declaration public Task StoreAsync(IBrokerMessageOffset offset, IConsumerEndpoint endpoint) Parameters Type Name Description IBrokerMessageOffset offset The offset to be stored. IConsumerEndpoint endpoint The endpoint the offset belongs to. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IOffsetStore ITransactional"
  },
  "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.IOffsetStore.html": {
    "href": "api/Silverback.Messaging.Inbound.ExactlyOnce.Repositories.IOffsetStore.html",
    "title": "Interface IOffsetStore | Silverback",
    "keywords": "Interface IOffsetStore Used by the OffsetStoreExactlyOnceStrategy to keep track of the last processed offsets and guarantee that each message is processed only once. Inherited Members ITransactional.CommitAsync() ITransactional.RollbackAsync() Namespace : Silverback.Messaging.Inbound.ExactlyOnce.Repositories Assembly : Silverback.Integration.dll Syntax public interface IOffsetStore : ITransactional Methods | Improve this doc View source GetLatestValueAsync(String, IConsumerEndpoint) Returns the latest recorded offset value for the specified offset key and endpoint. Declaration Task<IBrokerMessageOffset> GetLatestValueAsync(string offsetKey, IConsumerEndpoint endpoint) Parameters Type Name Description System.String offsetKey The key of the offset to be retrieved. The offset key uniquely identifies the queue, topic or partition. IConsumerEndpoint endpoint The endpoint for which the recorded offset has to be be returned. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageOffset > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the latest offset. | Improve this doc View source StoreAsync(IBrokerMessageOffset, IConsumerEndpoint) Stores the offset of the processed message. Declaration Task StoreAsync(IBrokerMessageOffset offset, IConsumerEndpoint endpoint) Parameters Type Name Description IBrokerMessageOffset offset The offset to be stored. IConsumerEndpoint endpoint The endpoint the offset belongs to. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Inbound.html": {
    "href": "api/Silverback.Messaging.Inbound.html",
    "title": "Namespace Silverback.Messaging.Inbound | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound Classes PublisherConsumerBehavior Publishes the consumed messages to the internal bus."
  },
  "api/Silverback.Messaging.Inbound.PublisherConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Inbound.PublisherConsumerBehavior.html",
    "title": "Class PublisherConsumerBehavior | Silverback",
    "keywords": "Class PublisherConsumerBehavior Publishes the consumed messages to the internal bus. Inheritance System.Object PublisherConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound Assembly : Silverback.Integration.dll Syntax public sealed class PublisherConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source PublisherConsumerBehavior(IInboundLogger<PublisherConsumerBehavior>) Initializes a new instance of the PublisherConsumerBehavior class. Declaration public PublisherConsumerBehavior(IInboundLogger<PublisherConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < PublisherConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Inbound.Transaction.ConsumerTransactionManager.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.ConsumerTransactionManager.html",
    "title": "Class ConsumerTransactionManager | Silverback",
    "keywords": "Class ConsumerTransactionManager Handles the consumer transaction. It commits or rolls back both the consumer and the enlisted transactional services (see ITransactional ). Inheritance System.Object ConsumerTransactionManager Implements IConsumerTransactionManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.Transaction Assembly : Silverback.Integration.dll Syntax public sealed class ConsumerTransactionManager : IConsumerTransactionManager Constructors | Improve this doc View source ConsumerTransactionManager(ConsumerPipelineContext, IInboundLogger<ConsumerTransactionManager>) Initializes a new instance of the ConsumerTransactionManager class. Declaration public ConsumerTransactionManager(ConsumerPipelineContext context, IInboundLogger<ConsumerTransactionManager> logger) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . IInboundLogger < ConsumerTransactionManager > logger The ISilverbackLogger . Properties | Improve this doc View source IsCompleted Gets a value indicating whether the transaction has completed. Declaration public bool IsCompleted { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source CommitAsync() Commits the transaction. Declaration public async Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Enlist(ITransactional) Adds the specified service to the transaction participants to be called upon commit or rollback. Declaration public void Enlist(ITransactional transactionalService) Parameters Type Name Description ITransactional transactionalService The service to be enlisted. | Improve this doc View source RollbackAsync(Exception, Boolean, Boolean, Boolean) Aborts the transaction and causes the uncommitted changes to be rolled back. Declaration public async Task<bool> RollbackAsync(Exception exception, bool commitConsumer = false, bool throwIfAlreadyCommitted = true, bool stopConsuming = true) Parameters Type Name Description System.Exception exception The exception that caused the rollback. System.Boolean commitConsumer A value indicating whether the consumer have to be committed anyway. This depends on the error policy being applied. System.Boolean throwIfAlreadyCommitted A value indicating whether an exception must be thrown if the transaction was already committed. System.Boolean stopConsuming A value indicating whether the consumer must be stopped. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the rollback was performed. Implements IConsumerTransactionManager"
  },
  "api/Silverback.Messaging.Inbound.Transaction.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.html",
    "title": "Namespace Silverback.Messaging.Inbound.Transaction | Silverback",
    "keywords": "Namespace Silverback.Messaging.Inbound.Transaction Classes ConsumerTransactionManager Handles the consumer transaction. It commits or rolls back both the consumer and the enlisted transactional services (see ITransactional ). TransactionHandlerConsumerBehavior Handles the consumer transaction and applies the error policies. Interfaces IConsumerTransactionManager Handles the consumer transaction. It commits or rolls back both the consumer and the enlisted transactional services (see ITransactional ). ITransactional Declares the CommitAsync and RollbackAsync methods, allowing the service to be enlisted into the consumer transaction (see ConsumerTransactionManager )."
  },
  "api/Silverback.Messaging.Inbound.Transaction.IConsumerTransactionManager.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.IConsumerTransactionManager.html",
    "title": "Interface IConsumerTransactionManager | Silverback",
    "keywords": "Interface IConsumerTransactionManager Handles the consumer transaction. It commits or rolls back both the consumer and the enlisted transactional services (see ITransactional ). Namespace : Silverback.Messaging.Inbound.Transaction Assembly : Silverback.Integration.dll Syntax public interface IConsumerTransactionManager Properties | Improve this doc View source IsCompleted Gets a value indicating whether the transaction has completed. Declaration bool IsCompleted { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source CommitAsync() Commits the transaction. Declaration Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source Enlist(ITransactional) Adds the specified service to the transaction participants to be called upon commit or rollback. Declaration void Enlist(ITransactional transactionalService) Parameters Type Name Description ITransactional transactionalService The service to be enlisted. | Improve this doc View source RollbackAsync(Exception, Boolean, Boolean, Boolean) Aborts the transaction and causes the uncommitted changes to be rolled back. Declaration Task<bool> RollbackAsync(Exception exception, bool commitConsumer = false, bool throwIfAlreadyCommitted = true, bool stopConsuming = true) Parameters Type Name Description System.Exception exception The exception that caused the rollback. System.Boolean commitConsumer A value indicating whether the consumer have to be committed anyway. This depends on the error policy being applied. System.Boolean throwIfAlreadyCommitted A value indicating whether an exception must be thrown if the transaction was already committed. System.Boolean stopConsuming A value indicating whether the consumer must be stopped. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the rollback was performed."
  },
  "api/Silverback.Messaging.Inbound.Transaction.ITransactional.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.ITransactional.html",
    "title": "Interface ITransactional | Silverback",
    "keywords": "Interface ITransactional Declares the CommitAsync and RollbackAsync methods, allowing the service to be enlisted into the consumer transaction (see ConsumerTransactionManager ). Namespace : Silverback.Messaging.Inbound.Transaction Assembly : Silverback.Integration.dll Syntax public interface ITransactional Methods | Improve this doc View source CommitAsync() Called when the message has been successfully processed to commit the transaction. Declaration Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync() Called when an exception occurs during the message processing to rollback the transaction. Declaration Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Inbound.Transaction.TransactionHandlerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Inbound.Transaction.TransactionHandlerConsumerBehavior.html",
    "title": "Class TransactionHandlerConsumerBehavior | Silverback",
    "keywords": "Class TransactionHandlerConsumerBehavior Handles the consumer transaction and applies the error policies. Inheritance System.Object TransactionHandlerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Inbound.Transaction Assembly : Silverback.Integration.dll Syntax public class TransactionHandlerConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source TransactionHandlerConsumerBehavior(IInboundLogger<TransactionHandlerConsumerBehavior>) Initializes a new instance of the TransactionHandlerConsumerBehavior class. Declaration public TransactionHandlerConsumerBehavior(IInboundLogger<TransactionHandlerConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < TransactionHandlerConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.IProducerEndpoint.html": {
    "href": "api/Silverback.Messaging.IProducerEndpoint.html",
    "title": "Interface IProducerEndpoint | Silverback",
    "keywords": "Interface IProducerEndpoint Represents a message broker endpoint to produce to (such as a Kafka topic or RabbitMQ queue or exchange). Inherited Members IEndpoint.Name IEndpoint.DisplayName IEndpoint.Serializer IEndpoint.Encryption IEndpoint.FriendlyName IEndpoint.MessageValidationMode IEndpoint.Validate() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public interface IProducerEndpoint : IEndpoint Properties | Improve this doc View source Chunk Gets the message chunking settings. This option can be used to split large messages into smaller chunks. Declaration ChunkSettings Chunk { get; } Property Value Type Description ChunkSettings | Improve this doc View source MessageEnrichers Gets the collection of IOutboundMessageEnricher to be used to enrich the outbound message. Declaration IReadOnlyCollection<IOutboundMessageEnricher> MessageEnrichers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundMessageEnricher > | Improve this doc View source Strategy Gets the strategy to be used to produce the messages. If no strategy is specified, the messages will be sent to the message broker directly. Declaration IProduceStrategy Strategy { get; } Property Value Type Description IProduceStrategy Methods | Improve this doc View source GetActualName(IOutboundEnvelope, IServiceProvider) Gets the actual target endpoint name for the message being produced. Declaration string GetActualName(IOutboundEnvelope envelope, IServiceProvider serviceProvider) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message being produced. System.IServiceProvider serviceProvider The System.IServiceProvider in the current scope. Returns Type Description System.String The actual name of the endpoint to be produced to."
  },
  "api/Silverback.Messaging.IRawMessageTransformer.html": {
    "href": "api/Silverback.Messaging.IRawMessageTransformer.html",
    "title": "Interface IRawMessageTransformer | Silverback",
    "keywords": "Interface IRawMessageTransformer The base class for all services that transform the inbound or outbound raw binary. Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public interface IRawMessageTransformer Methods | Improve this doc View source TransformAsync(Stream, MessageHeaderCollection) Transforms the specified message. Declaration Task<Stream> TransformAsync(Stream message, MessageHeaderCollection headers) Parameters Type Name Description System.IO.Stream message The System.IO.Stream containing the message to be transformed. MessageHeaderCollection headers The headers collections (can be modified by the transformer). Returns Type Description System.Threading.Tasks.Task < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with transformed message."
  },
  "api/Silverback.Messaging.KafkaConsumerEndpoint.html": {
    "href": "api/Silverback.Messaging.KafkaConsumerEndpoint.html",
    "title": "Class KafkaConsumerEndpoint | Silverback",
    "keywords": "Class KafkaConsumerEndpoint Represents a topic to consume from. Inheritance System.Object Endpoint ConsumerEndpoint KafkaConsumerEndpoint Implements IConsumerEndpoint IEndpoint System.IEquatable < KafkaConsumerEndpoint > Inherited Members ConsumerEndpoint.ErrorPolicy ConsumerEndpoint.ExactlyOnceStrategy ConsumerEndpoint.Batch ConsumerEndpoint.Sequence ConsumerEndpoint.NullMessageHandlingStrategy ConsumerEndpoint.ThrowIfUnhandled Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode Endpoint.BaseEquals(Endpoint) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.Kafka.dll Syntax public sealed class KafkaConsumerEndpoint : ConsumerEndpoint, IConsumerEndpoint, IEndpoint, IEquatable<KafkaConsumerEndpoint> Constructors | Improve this doc View source KafkaConsumerEndpoint(TopicPartition[]) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(params TopicPartition[] topicPartitions) Parameters Type Name Description Confluent.Kafka.TopicPartition [] topicPartitions The topics and partitions to be consumed. | Improve this doc View source KafkaConsumerEndpoint(TopicPartitionOffset[]) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(params TopicPartitionOffset[] topicPartitions) Parameters Type Name Description Confluent.Kafka.TopicPartitionOffset [] topicPartitions The topics and partitions to be consumed and the starting offset. | Improve this doc View source KafkaConsumerEndpoint(IEnumerable<TopicPartition>, KafkaClientConfig) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(IEnumerable<TopicPartition> topicPartitions, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartition > topicPartitions The topics and partitions to be consumed. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . | Improve this doc View source KafkaConsumerEndpoint(IEnumerable<TopicPartitionOffset>, KafkaClientConfig) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(IEnumerable<TopicPartitionOffset> topicPartitions, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset > topicPartitions The topics and partitions to be consumed. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . | Improve this doc View source KafkaConsumerEndpoint(String, KafkaClientConfig) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(string topicName, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String topicName The name of the topic. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . | Improve this doc View source KafkaConsumerEndpoint(String, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>>, KafkaClientConfig) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(string topicName, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>> topicPartitionsResolver, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String topicName The name of the topic. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartition >> topicPartitionsResolver The function that returns the topics and partitions to be consumed. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . | Improve this doc View source KafkaConsumerEndpoint(String, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>>, KafkaClientConfig) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(string topicName, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>> topicPartitionsResolver, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String topicName The name of the topic. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> topicPartitionsResolver The function that returns the topics and partitions to be consumed. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . | Improve this doc View source KafkaConsumerEndpoint(String[]) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(params string[] topicNames) Parameters Type Name Description System.String [] topicNames The name of the topics. | Improve this doc View source KafkaConsumerEndpoint(String[], KafkaClientConfig) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(string[] topicNames, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String [] topicNames The name of the topics. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . | Improve this doc View source KafkaConsumerEndpoint(String[], Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>>, KafkaClientConfig) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(string[] topicNames, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartition>> topicPartitionsResolver, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String [] topicNames The name of the topics. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartition >> topicPartitionsResolver The function that returns the topics and partitions to be consumed. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . | Improve this doc View source KafkaConsumerEndpoint(String[], Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>>, KafkaClientConfig) Initializes a new instance of the KafkaConsumerEndpoint class. Declaration public KafkaConsumerEndpoint(string[] topicNames, Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>> topicPartitionsResolver, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String [] topicNames The name of the topics. System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> topicPartitionsResolver The function that returns the topics and partitions to be consumed. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaConsumerConfig . Properties | Improve this doc View source BackpressureLimit Gets or sets the maximum number of messages to be consumed and enqueued waiting to be processed. When ProcessPartitionsIndependently is set to true (default) the limit will be applied per partition. The default is 1. Declaration public int BackpressureLimit { get; set; } Property Value Type Description System.Int32 | Improve this doc View source Configuration Gets or sets the Kafka client configuration. This is actually an extension of the configuration dictionary provided by the Confluent.Kafka library. Declaration public KafkaConsumerConfig Configuration { get; set; } Property Value Type Description KafkaConsumerConfig | Improve this doc View source MaxDegreeOfParallelism Gets or sets the maximum number of incoming message that can be processed concurrently. Up to a message per each subscribed partition can be processed in parallel. The default is 10. Declaration public int MaxDegreeOfParallelism { get; set; } Property Value Type Description System.Int32 | Improve this doc View source Names Gets the name of the topics. Declaration public IReadOnlyCollection<string> Names { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < System.String > | Improve this doc View source ProcessPartitionsIndependently Gets or sets a value indicating whether the partitions must be processed independently. When true a stream will published per each partition and the sequences ( ChunkSequence , BatchSequence , ...) cannot span across the partitions. The default is true . Declaration public bool ProcessPartitionsIndependently { get; set; } Property Value Type Description System.Boolean | Improve this doc View source TopicPartitions Gets the topics and partitions to be consumed. If both TopicPartitions and TopicPartitionsResolver are null the topics from the Names property will be subscribed and the partitions will be automatically assigned by the broker. If the collection is empty no partition will be consumed. Declaration public IReadOnlyCollection<TopicPartitionOffset> TopicPartitions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartitionOffset > | Improve this doc View source TopicPartitionsResolver Gets the function that returns the topics and partitions to be consumed. If both TopicPartitions and TopicPartitionsResolver are null the topics from the Names property will be subscribed and the partitions will be automatically assigned by the broker. If an empty collection is returned by the function no partition will be consumed. Declaration public Func<IReadOnlyCollection<TopicPartition>, IEnumerable<TopicPartitionOffset>> TopicPartitionsResolver { get; } Property Value Type Description System.Func < System.Collections.Generic.IReadOnlyCollection < Confluent.Kafka.TopicPartition >, System.Collections.Generic.IEnumerable < Confluent.Kafka.TopicPartitionOffset >> Methods | Improve this doc View source Equals(KafkaConsumerEndpoint) Declaration public bool Equals(KafkaConsumerEndpoint other) Parameters Type Name Description KafkaConsumerEndpoint other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source GetUniqueConsumerGroupName() Gets a unique name for the consumer group (e.g. Kafka's consumer group id). This value (joint with the endpoint name) will be used for example to ensure the exactly-once delivery. Declaration public override string GetUniqueConsumerGroupName() Returns Type Description System.String Returns the unique name for the consumer group. Overrides ConsumerEndpoint.GetUniqueConsumerGroupName() Remarks It's not enough to use the endpoint name, since the same topic could be consumed by multiple consumer groups within the same process and/or using the same database to store the information needed to ensure the exactly-once delivery. | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides ConsumerEndpoint.Validate() Implements IConsumerEndpoint IEndpoint System.IEquatable<T>"
  },
  "api/Silverback.Messaging.KafkaProducerEndpoint.html": {
    "href": "api/Silverback.Messaging.KafkaProducerEndpoint.html",
    "title": "Class KafkaProducerEndpoint | Silverback",
    "keywords": "Class KafkaProducerEndpoint Represents a topic to produce to. Inheritance System.Object Endpoint ProducerEndpoint KafkaProducerEndpoint Implements IProducerEndpoint IEndpoint System.IEquatable < KafkaProducerEndpoint > Inherited Members ProducerEndpoint.Chunk ProducerEndpoint.Strategy ProducerEndpoint.MessageEnrichers ProducerEndpoint.IProducerEndpoint.MessageEnrichers ProducerEndpoint.GetActualName(IOutboundEnvelope, IServiceProvider) ProducerEndpoint.BaseEquals(Endpoint) Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.Kafka.dll Syntax public sealed class KafkaProducerEndpoint : ProducerEndpoint, IProducerEndpoint, IEndpoint, IEquatable<KafkaProducerEndpoint> Constructors | Improve this doc View source KafkaProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, String>, KafkaClientConfig) Initializes a new instance of the KafkaProducerEndpoint class. Declaration public KafkaProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, string> nameFunction, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.Func < IOutboundEnvelope , System.IServiceProvider , System.String > nameFunction The function returning the endpoint name for the message being produced. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . | Improve this doc View source KafkaProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, String>, Func<IOutboundEnvelope, IServiceProvider, Int32>, KafkaClientConfig) Initializes a new instance of the KafkaProducerEndpoint class. Declaration public KafkaProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, string> nameFunction, Func<IOutboundEnvelope, IServiceProvider, int> partitionFunction, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.Func < IOutboundEnvelope , System.IServiceProvider , System.String > nameFunction The function returning the endpoint name for the message being produced. System.Func < IOutboundEnvelope , System.IServiceProvider , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . | Improve this doc View source KafkaProducerEndpoint(Func<IOutboundEnvelope, String>, KafkaClientConfig) Initializes a new instance of the KafkaProducerEndpoint class. Declaration public KafkaProducerEndpoint(Func<IOutboundEnvelope, string> nameFunction, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.Func < IOutboundEnvelope , System.String > nameFunction The function returning the endpoint name for the message being produced. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . | Improve this doc View source KafkaProducerEndpoint(Func<IOutboundEnvelope, String>, Func<IOutboundEnvelope, Int32>, KafkaClientConfig) Initializes a new instance of the KafkaProducerEndpoint class. Declaration public KafkaProducerEndpoint(Func<IOutboundEnvelope, string> nameFunction, Func<IOutboundEnvelope, int> partitionFunction, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.Func < IOutboundEnvelope , System.String > nameFunction The function returning the endpoint name for the message being produced. System.Func < IOutboundEnvelope , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . | Improve this doc View source KafkaProducerEndpoint(String, KafkaClientConfig) Initializes a new instance of the KafkaProducerEndpoint class. Declaration public KafkaProducerEndpoint(string name, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String name The name of the topic. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . | Improve this doc View source KafkaProducerEndpoint(String, Func<IOutboundEnvelope, String[]>, KafkaClientConfig) Initializes a new instance of the KafkaProducerEndpoint class. Declaration public KafkaProducerEndpoint(string nameFormat, Func<IOutboundEnvelope, string[]> argumentsFunction, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String nameFormat The endpoint name format string that will be combined with the arguments returned by the argumentsFunction using a string.Format . System.Func < IOutboundEnvelope , System.String []> argumentsFunction The function returning the arguments to be used to format the string. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . | Improve this doc View source KafkaProducerEndpoint(String, Func<IOutboundEnvelope, String[]>, Func<IOutboundEnvelope, Int32>, KafkaClientConfig) Initializes a new instance of the KafkaProducerEndpoint class. Declaration public KafkaProducerEndpoint(string nameFormat, Func<IOutboundEnvelope, string[]> argumentsFunction, Func<IOutboundEnvelope, int> partitionFunction, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String nameFormat The endpoint name format string that will be combined with the arguments returned by the argumentsFunction using a string.Format . System.Func < IOutboundEnvelope , System.String []> argumentsFunction The function returning the arguments to be used to format the string. System.Func < IOutboundEnvelope , System.Int32 > partitionFunction The optional function returning the target partition index for the message being produced. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . | Improve this doc View source KafkaProducerEndpoint(String, Nullable<Int32>, KafkaClientConfig) Initializes a new instance of the KafkaProducerEndpoint class. Declaration public KafkaProducerEndpoint(string name, int? partition, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.String name The name of the topic. System.Nullable < System.Int32 > partition The optional partition index. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . | Improve this doc View source KafkaProducerEndpoint(Type, KafkaClientConfig) Initializes a new instance of the KafkaProducerEndpoint class. Declaration public KafkaProducerEndpoint(Type nameResolverType, KafkaClientConfig clientConfig = null) Parameters Type Name Description System.Type nameResolverType The type of the IKafkaProducerEndpointNameResolver to be used to resolve the actual endpoint name. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . Properties | Improve this doc View source Configuration Gets or sets the Kafka client configuration. This is actually an extension of the configuration dictionary provided by the Confluent.Kafka library. Declaration public KafkaProducerConfig Configuration { get; set; } Property Value Type Description KafkaProducerConfig Methods | Improve this doc View source Equals(KafkaProducerEndpoint) Declaration public bool Equals(KafkaProducerEndpoint other) Parameters Type Name Description KafkaProducerEndpoint other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source GetPartition(IOutboundEnvelope, IServiceProvider) Gets the target partition. When set to Partition.Any (-1) the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). The default is Partition.Any (-1). Declaration public Partition GetPartition(IOutboundEnvelope envelope, IServiceProvider serviceProvider) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message being produced. System.IServiceProvider serviceProvider The System.IServiceProvider in the current scope. Returns Type Description Confluent.Kafka.Partition The partition to be produced to. | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides ProducerEndpoint.Validate() Implements IProducerEndpoint IEndpoint System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Messages.BinaryFileMessage.html": {
    "href": "api/Silverback.Messaging.Messages.BinaryFileMessage.html",
    "title": "Class BinaryFileMessage | Silverback",
    "keywords": "Class BinaryFileMessage Represents a binary file that is being transferred over the message broker. Inheritance System.Object BinaryFileMessage Implements IBinaryFileMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public class BinaryFileMessage : IBinaryFileMessage Constructors | Improve this doc View source BinaryFileMessage() Initializes a new instance of the BinaryFileMessage class. Declaration public BinaryFileMessage() | Improve this doc View source BinaryFileMessage(Byte[], String) Initializes a new instance of the BinaryFileMessage class with the specified content. Declaration public BinaryFileMessage(byte[] content, string contentType = \"application/octet-stream\") Parameters Type Name Description System.Byte [] content The binary content. System.String contentType The optional MIME type. | Improve this doc View source BinaryFileMessage(Stream, String) Initializes a new instance of the BinaryFileMessage class with the specified content. Declaration public BinaryFileMessage(Stream content, string contentType = \"application/octet-stream\") Parameters Type Name Description System.IO.Stream content The binary content. System.String contentType The optional MIME type. Properties | Improve this doc View source Content Gets or sets the binary content. Declaration public Stream Content { get; set; } Property Value Type Description System.IO.Stream | Improve this doc View source ContentType Gets or sets the MIME type of the file. Declaration [Header(\"content-type\")] public string ContentType { get; set; } Property Value Type Description System.String Implements IBinaryFileMessage"
  },
  "api/Silverback.Messaging.Messages.DefaultMessageHeaders.html": {
    "href": "api/Silverback.Messaging.Messages.DefaultMessageHeaders.html",
    "title": "Class DefaultMessageHeaders | Silverback",
    "keywords": "Class DefaultMessageHeaders Contains the constants with the names of the standard message headers used by Silverback. Inheritance System.Object DefaultMessageHeaders Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public static class DefaultMessageHeaders Fields | Improve this doc View source ChunkIndex The message chunk index, used when chunking is enabled. Declaration public const string ChunkIndex = \"x-chunk-index\" Field Value Type Description System.String | Improve this doc View source ChunksCount The total number of chunks the message was split into, used when chunking is enabled. Declaration public const string ChunksCount = \"x-chunk-count\" Field Value Type Description System.String | Improve this doc View source ContentType The MIME type of a binary file. See IBinaryFileMessage . Declaration public const string ContentType = \"content-type\" Field Value Type Description System.String | Improve this doc View source EncryptionKeyId The encryption key identifier. Declaration public const string EncryptionKeyId = \"x-encryption-key-id\" Field Value Type Description System.String Remarks The header is required for the key rotation feature. When rotating keys, it will be used on the consumer side to determine the correct key to be used to decrypt the message. | Improve this doc View source FailedAttempts If an exception if thrown the failed attempts will be incremented and stored as header. This is necessary for the error policies to work. Declaration public const string FailedAttempts = \"x-failed-attempts\" Field Value Type Description System.String | Improve this doc View source FailureReason This will be set by the MoveMessageErrorPolicy and will contain the reason why the message failed to be processed. Declaration public const string FailureReason = \"x-failure-reason\" Field Value Type Description System.String | Improve this doc View source FirstChunkOffset The IBrokerMessageOffset value of the first chunk of the same message, used when chunking is enabled. Declaration public const string FirstChunkOffset = \"x-chunk-first-offset\" Field Value Type Description System.String | Improve this doc View source IsLastChunk A boolean value indicating whether the message is the last one of a chunks sequence, used when chunking is enabled. Declaration public const string IsLastChunk = \"x-chunk-last\" Field Value Type Description System.String | Improve this doc View source MessageId The message identifier. Declaration public const string MessageId = \"x-message-id\" Field Value Type Description System.String | Improve this doc View source MessageType The assembly qualified name of the message type. Used by the default JsonMessageSerializer . Declaration public const string MessageType = \"x-message-type\" Field Value Type Description System.String | Improve this doc View source TraceBaggage Used for distributed tracing. It corresponds to the string representation of the Activity.Baggage dictionary. Declaration public const string TraceBaggage = \"tracebaggage\" Field Value Type Description System.String Remarks This is not part of the w3c standard. | Improve this doc View source TraceId Used for distributed tracing. It is set by the IProducer using the current Activity.Id . The IConsumer uses it's value to set the Activity.ParentId . Note that an Activity is automatically started by the default IProducer implementation. Declaration public const string TraceId = \"traceparent\" Field Value Type Description System.String Remarks The header is implemented according to the W3C Trace Context proposal ( https://www.w3.org/TR/trace-context-1/#traceparent-header ). | Improve this doc View source TraceState Used for distributed tracing. It corresponds to the Activity.TraceStateString . Declaration public const string TraceState = \"tracestate\" Field Value Type Description System.String Remarks The header is implemented according to the W3C Trace Context proposal ( https://www.w3.org/TR/trace-context-1/#tracestate-header )."
  },
  "api/Silverback.Messaging.Messages.EnvelopeFactory.html": {
    "href": "api/Silverback.Messaging.Messages.EnvelopeFactory.html",
    "title": "Class EnvelopeFactory | Silverback",
    "keywords": "Class EnvelopeFactory Can be used to instantiate an IOutboundEnvelope or an IInboundEnvelope . Inheritance System.Object EnvelopeFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public static class EnvelopeFactory Methods | Improve this doc View source Create(Byte[], MessageHeaderCollection, IConsumerEndpoint, IBrokerMessageIdentifier) Creates an IRawInboundEnvelope . Declaration public static IRawInboundEnvelope Create(byte[] rawMessage, MessageHeaderCollection headers, IConsumerEndpoint endpoint, IBrokerMessageIdentifier identifier) Parameters Type Name Description System.Byte [] rawMessage The raw message body. MessageHeaderCollection headers The message headers. IConsumerEndpoint endpoint The source endpoint. IBrokerMessageIdentifier identifier The IBrokerMessageIdentifier . Returns Type Description IRawInboundEnvelope An IInboundEnvelope<TMessage> containing the specified message. | Improve this doc View source Create(Stream, MessageHeaderCollection, IConsumerEndpoint, IBrokerMessageIdentifier) Creates an IRawInboundEnvelope . Declaration public static IRawInboundEnvelope Create(Stream rawMessageStream, MessageHeaderCollection headers, IConsumerEndpoint endpoint, IBrokerMessageIdentifier identifier) Parameters Type Name Description System.IO.Stream rawMessageStream The raw message body. MessageHeaderCollection headers The message headers. IConsumerEndpoint endpoint The source endpoint. IBrokerMessageIdentifier identifier The IBrokerMessageIdentifier . Returns Type Description IRawInboundEnvelope An IInboundEnvelope<TMessage> containing the specified message. | Improve this doc View source Create<TMessage>(TMessage, IRawInboundEnvelope) Creates an IInboundEnvelope<TMessage> copying another envelope and replacing just the deserialized message. Declaration public static IInboundEnvelope<TMessage> Create<TMessage>(TMessage message, IRawInboundEnvelope rawInboundEnvelope) where TMessage : class Parameters Type Name Description TMessage message The message to be wrapped in the envelope. IRawInboundEnvelope rawInboundEnvelope The envelope to be copied. Returns Type Description IInboundEnvelope <TMessage> An IInboundEnvelope<TMessage> containing the specified message. Type Parameters Name Description TMessage The type of the message being wrapped. | Improve this doc View source Create<TMessage>(TMessage, MessageHeaderCollection, IProducerEndpoint) Creates an IOutboundEnvelope<TMessage> . Declaration public static IOutboundEnvelope<TMessage> Create<TMessage>(TMessage message, MessageHeaderCollection headers, IProducerEndpoint endpoint) where TMessage : class Parameters Type Name Description TMessage message The message to be wrapped in the envelope. MessageHeaderCollection headers The message headers. IProducerEndpoint endpoint The destination endpoint. Returns Type Description IOutboundEnvelope <TMessage> An IOutboundEnvelope<TMessage> containing the specified message. Type Parameters Name Description TMessage The type of the message being wrapped."
  },
  "api/Silverback.Messaging.Messages.HeaderAttribute.html": {
    "href": "api/Silverback.Messaging.Messages.HeaderAttribute.html",
    "title": "Class HeaderAttribute | Silverback",
    "keywords": "Class HeaderAttribute Used to decorate a property which value must be produced/consumed as message header. Inheritance System.Object System.Attribute HeaderAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class HeaderAttribute : Attribute Constructors | Improve this doc View source HeaderAttribute(String) Initializes a new instance of the HeaderAttribute class specifying the name of the header. When a property is decorated with this attribute its value will be produced/consumed as message header. Declaration public HeaderAttribute(string headerName) Parameters Type Name Description System.String headerName The name of the header. Properties | Improve this doc View source HeaderName Gets the name of the header. Declaration public string HeaderName { get; } Property Value Type Description System.String | Improve this doc View source PublishDefaultValue Gets or sets a value indicating whether the header must be produced even if the property is set to the default value for its declaring type. Declaration public bool PublishDefaultValue { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Silverback.Messaging.Messages.html": {
    "href": "api/Silverback.Messaging.Messages.html",
    "title": "Namespace Silverback.Messaging.Messages | Silverback",
    "keywords": "Namespace Silverback.Messaging.Messages Classes BinaryFileMessage Represents a binary file that is being transferred over the message broker. DefaultMessageHeaders Contains the constants with the names of the standard message headers used by Silverback. EnvelopeFactory Can be used to instantiate an IOutboundEnvelope or an IInboundEnvelope . HeaderAttribute Used to decorate a property which value must be produced/consumed as message header. KafkaKeyMemberAttribute The values of the properties decorated with this attribute are used to build the message key that will be used by Kafka (for partitioning, compacting, etc.). KafkaMessageHeaders Contains the constants with the names of the Kafka specific message headers used by Silverback. MessageHeader An header added to the message being sent over a message broker. MessageHeaderCollection A modifiable collection of message headers. MessageHeaderEnumerableExtensions Add some helper methods to the System.Collections.Generic.IEnumerable<T> of MessageHeader . MessagesSource<TBaseEvent> The default generic implementation of IMessagesSource . It contains some protected methods to add the internal events to a temporary collection exposed via the IMessagesSource implementation. RabbitMessageHeaders Contains the constants with the names of the RabbitMQ specific message headers used by Silverback. RabbitRoutingKeyAttribute The value of the property decorated with this attribute will be used as routing key. The routing key can be used by RabbitMQ to route the messages to the proper queue. Tombstone Represents a tombstone message (a message with null body). Tombstone<TMessage> Represents a tombstone message (a message with null body). TransactionAbortedEvent The event published when an exception occurs during the processing of a (database) transaction. It is fired by the data access while saving changes (see Silverback.Core.EntityFrameworkCore) and it is internally used (in Silverback.Integration) to trigger additional tasks related to the publishing of the domain events. TransactionCompletedEvent The event published when a (database) transaction is completed and committed. It is fired by the data access after saving changes (see Silverback.Core.EntityFrameworkCore) and it is internally used (in Silverback.Integration) to trigger additional tasks related to the publishing of the domain events. TransactionStartedEvent The event published when a (database) transaction is being started. It is fired by the data access before saving changes (see Silverback.Core.EntityFrameworkCore) and it is internally used (in Silverback.Integration) to trigger additional tasks related to the publishing of the domain events. Interfaces IBinaryFileMessage Represents a binary file that is being transferred over the message broker. IBrokerEnvelope Wraps the deserialized inbound or outbound message. ICommand Represents a message that triggers an action. ICommand<TResult> Represents a message that triggers an action with a result TResult . IEnvelope Wraps a message when it's being transferred over a message broker. IEvent Represents a message that notifies an event. IInboundEnvelope IInboundEnvelope<TMessage> IIntegrationCommand Represents a message that is sent over the message broker to trigger an action. IIntegrationEvent Represents a message that is sent over the message broker to notify an event. IIntegrationMessage Represents a message that is sent over the message broker. It is further specialized as IIntegrationEvent and IIntegrationCommand . ILazyMessageStreamEnumerable<TMessage> Represent a future IMessageStreamEnumerable<TMessage> , that will created as soon as the first message is pushed. IMessage This marker interface is used to tell Silverback that the type is actually a message and enable features like automatic republishing. It is a good practice for all messages to implement this interface but it's not mandatory. IMessagesSource Exposes the methods to retrieve a list of messages associated with the object implementing this interface. IMessageStreamEnumerable<TMessage> Represent a stream of messages being published through the internal bus. It is an enumerable that is asynchronously pushed with messages. IMessageStreamObservable<TMessage> Represent a stream of messages being published through the internal bus. It is an observable that is asynchronously pushed with messages. IMessageStreamProvider Relays the streamed messages to all the linked Silverback.Messaging.Messages.MessageStreamEnumerable`1 . IMessageWithSource Exposes a Source property referencing the object that generated the message. IOutboundEnvelope IOutboundEnvelope<TMessage> IQuery<TResult> Represents a message that queries a result of type TResult . IRawBrokerEnvelope Wraps the serialized inbound or outbound message. IRawInboundEnvelope Wraps the message that is being consumed from an inbound endpoint. IRawOutboundEnvelope Wraps the message that is being produced to an outbound endpoint. ISilverbackEvent An event that is triggered internally by Silverback."
  },
  "api/Silverback.Messaging.Messages.IBinaryFileMessage.html": {
    "href": "api/Silverback.Messaging.Messages.IBinaryFileMessage.html",
    "title": "Interface IBinaryFileMessage | Silverback",
    "keywords": "Interface IBinaryFileMessage Represents a binary file that is being transferred over the message broker. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IBinaryFileMessage Properties | Improve this doc View source Content Gets or sets the binary content. Declaration Stream Content { get; set; } Property Value Type Description System.IO.Stream"
  },
  "api/Silverback.Messaging.Messages.IBrokerEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IBrokerEnvelope.html",
    "title": "Interface IBrokerEnvelope | Silverback",
    "keywords": "Interface IBrokerEnvelope Wraps the deserialized inbound or outbound message. Inherited Members IRawBrokerEnvelope.Headers IRawBrokerEnvelope.Endpoint IRawBrokerEnvelope.RawMessage IEnvelope.AutoUnwrap IEnvelope.Message Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IBrokerEnvelope : IRawBrokerEnvelope, IEnvelope"
  },
  "api/Silverback.Messaging.Messages.ICommand.html": {
    "href": "api/Silverback.Messaging.Messages.ICommand.html",
    "title": "Interface ICommand | Silverback",
    "keywords": "Interface ICommand Represents a message that triggers an action. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface ICommand : IMessage"
  },
  "api/Silverback.Messaging.Messages.ICommand-1.html": {
    "href": "api/Silverback.Messaging.Messages.ICommand-1.html",
    "title": "Interface ICommand<TResult> | Silverback",
    "keywords": "Interface ICommand<TResult> Represents a message that triggers an action with a result TResult . Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface ICommand<out TResult> : ICommand, IMessage Type Parameters Name Description TResult The type of the result being returned."
  },
  "api/Silverback.Messaging.Messages.IEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IEnvelope.html",
    "title": "Interface IEnvelope | Silverback",
    "keywords": "Interface IEnvelope Wraps a message when it's being transferred over a message broker. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public interface IEnvelope Properties | Improve this doc View source AutoUnwrap Gets a value indicating whether this envelope can be automatically unwrapped and the contained message can be forwarded to the matching subscribers in its pure form. Declaration bool AutoUnwrap { get; } Property Value Type Description System.Boolean Remarks This is internally used to avoid mortal loops. | Improve this doc View source Message Gets or sets the message body. Declaration object Message { get; set; } Property Value Type Description System.Object"
  },
  "api/Silverback.Messaging.Messages.IEvent.html": {
    "href": "api/Silverback.Messaging.Messages.IEvent.html",
    "title": "Interface IEvent | Silverback",
    "keywords": "Interface IEvent Represents a message that notifies an event. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IEvent : IMessage"
  },
  "api/Silverback.Messaging.Messages.IInboundEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IInboundEnvelope.html",
    "title": "Interface IInboundEnvelope | Silverback",
    "keywords": "Interface IInboundEnvelope Inherited Members IEnvelope.AutoUnwrap IEnvelope.Message IRawInboundEnvelope.ActualEndpointName IRawInboundEnvelope.ActualEndpointDisplayName IRawInboundEnvelope.BrokerMessageIdentifier IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IInboundEnvelope : IBrokerEnvelope, IEnvelope, IRawInboundEnvelope, IRawBrokerEnvelope Properties | Improve this doc View source Endpoint Gets the source endpoint configuration. Declaration IConsumerEndpoint Endpoint { get; } Property Value Type Description IConsumerEndpoint"
  },
  "api/Silverback.Messaging.Messages.IInboundEnvelope-1.html": {
    "href": "api/Silverback.Messaging.Messages.IInboundEnvelope-1.html",
    "title": "Interface IInboundEnvelope<TMessage> | Silverback",
    "keywords": "Interface IInboundEnvelope<TMessage> Inherited Members IInboundEnvelope.Endpoint IEnvelope.AutoUnwrap IRawInboundEnvelope.ActualEndpointName IRawInboundEnvelope.ActualEndpointDisplayName IRawInboundEnvelope.BrokerMessageIdentifier IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IInboundEnvelope<out TMessage> : IInboundEnvelope, IBrokerEnvelope, IEnvelope, IRawInboundEnvelope, IRawBrokerEnvelope where TMessage : class Type Parameters Name Description TMessage Properties | Improve this doc View source Message Gets the deserialized message body. Declaration TMessage Message { get; } Property Value Type Description TMessage"
  },
  "api/Silverback.Messaging.Messages.IIntegrationCommand.html": {
    "href": "api/Silverback.Messaging.Messages.IIntegrationCommand.html",
    "title": "Interface IIntegrationCommand | Silverback",
    "keywords": "Interface IIntegrationCommand Represents a message that is sent over the message broker to trigger an action. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IIntegrationCommand : ICommand, IIntegrationMessage, IMessage"
  },
  "api/Silverback.Messaging.Messages.IIntegrationEvent.html": {
    "href": "api/Silverback.Messaging.Messages.IIntegrationEvent.html",
    "title": "Interface IIntegrationEvent | Silverback",
    "keywords": "Interface IIntegrationEvent Represents a message that is sent over the message broker to notify an event. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IIntegrationEvent : IEvent, IIntegrationMessage, IMessage"
  },
  "api/Silverback.Messaging.Messages.IIntegrationMessage.html": {
    "href": "api/Silverback.Messaging.Messages.IIntegrationMessage.html",
    "title": "Interface IIntegrationMessage | Silverback",
    "keywords": "Interface IIntegrationMessage Represents a message that is sent over the message broker. It is further specialized as IIntegrationEvent and IIntegrationCommand . Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IIntegrationMessage : IMessage"
  },
  "api/Silverback.Messaging.Messages.ILazyMessageStreamEnumerable-1.html": {
    "href": "api/Silverback.Messaging.Messages.ILazyMessageStreamEnumerable-1.html",
    "title": "Interface ILazyMessageStreamEnumerable<TMessage> | Silverback",
    "keywords": "Interface ILazyMessageStreamEnumerable<TMessage> Represent a future IMessageStreamEnumerable<TMessage> , that will created as soon as the first message is pushed. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public interface ILazyMessageStreamEnumerable<out TMessage> Type Parameters Name Description TMessage The type of the messages being streamed. Properties | Improve this doc View source Stream Gets the IMessageStreamEnumerable<TMessage> , as soon as it is created. Declaration IMessageStreamEnumerable<TMessage> Stream { get; } Property Value Type Description IMessageStreamEnumerable <TMessage> Methods | Improve this doc View source WaitUntilCreatedAsync() Gets an awaitable System.Threading.Tasks.Task that completes when the first message is pushed and the IMessageStreamEnumerable<TMessage> is created. The created stream can be retrieved via the Stream property. Declaration Task WaitUntilCreatedAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Messages.IMessage.html": {
    "href": "api/Silverback.Messaging.Messages.IMessage.html",
    "title": "Interface IMessage | Silverback",
    "keywords": "Interface IMessage This marker interface is used to tell Silverback that the type is actually a message and enable features like automatic republishing. It is a good practice for all messages to implement this interface but it's not mandatory. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public interface IMessage"
  },
  "api/Silverback.Messaging.Messages.IMessagesSource.html": {
    "href": "api/Silverback.Messaging.Messages.IMessagesSource.html",
    "title": "Interface IMessagesSource | Silverback",
    "keywords": "Interface IMessagesSource Exposes the methods to retrieve a list of messages associated with the object implementing this interface. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public interface IMessagesSource Remarks Used to implement the domain entities and automatically publish their events when the entity is saved to the underlying database. Methods | Improve this doc View source ClearMessages() Called after the messages have been successfully published (and processed) to clear the messages collection. Declaration void ClearMessages() | Improve this doc View source GetMessages() Gets the messages to be published. Declaration IEnumerable<object> GetMessages() Returns Type Description System.Collections.Generic.IEnumerable < System.Object > The message objects."
  },
  "api/Silverback.Messaging.Messages.IMessageStreamEnumerable-1.html": {
    "href": "api/Silverback.Messaging.Messages.IMessageStreamEnumerable-1.html",
    "title": "Interface IMessageStreamEnumerable<TMessage> | Silverback",
    "keywords": "Interface IMessageStreamEnumerable<TMessage> Represent a stream of messages being published through the internal bus. It is an enumerable that is asynchronously pushed with messages. Inherited Members System.Collections.Generic.IEnumerable<TMessage>.GetEnumerator() System.Collections.Generic.IAsyncEnumerable<TMessage>.GetAsyncEnumerator(System.Threading.CancellationToken) Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public interface IMessageStreamEnumerable<out TMessage> : IEnumerable<TMessage>, IEnumerable, IAsyncEnumerable<TMessage> Type Parameters Name Description TMessage The type of the messages being streamed."
  },
  "api/Silverback.Messaging.Messages.IMessageStreamObservable-1.html": {
    "href": "api/Silverback.Messaging.Messages.IMessageStreamObservable-1.html",
    "title": "Interface IMessageStreamObservable<TMessage> | Silverback",
    "keywords": "Interface IMessageStreamObservable<TMessage> Represent a stream of messages being published through the internal bus. It is an observable that is asynchronously pushed with messages. Inherited Members System.IObservable<TMessage>.Subscribe(System.IObserver<TMessage>) Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Rx.dll Syntax public interface IMessageStreamObservable<out TMessage> : IObservable<TMessage> Type Parameters Name Description TMessage The type of the messages being streamed."
  },
  "api/Silverback.Messaging.Messages.IMessageStreamProvider.html": {
    "href": "api/Silverback.Messaging.Messages.IMessageStreamProvider.html",
    "title": "Interface IMessageStreamProvider | Silverback",
    "keywords": "Interface IMessageStreamProvider Relays the streamed messages to all the linked Silverback.Messaging.Messages.MessageStreamEnumerable`1 . Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public interface IMessageStreamProvider Properties | Improve this doc View source MessageType Gets the type of the messages being streamed. Declaration Type MessageType { get; } Property Value Type Description System.Type | Improve this doc View source StreamsCount Gets the number of IMessageStreamEnumerable<TMessage> that have been created via CreateStream(Type, IReadOnlyCollection<IMessageFilter>) or CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) . Declaration int StreamsCount { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source CreateLazyStream(Type, IReadOnlyCollection<IMessageFilter>) Creates a new ILazyMessageStreamEnumerable<TMessage> that will be linked with this provider and will create the IMessageStreamEnumerable<TMessage> as soon as a message matching the type messageType is pushed. Declaration ILazyMessageStreamEnumerable<object> CreateLazyStream(Type messageType, IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description System.Type messageType The type of the messages to be streamed to the linked stream. System.Collections.Generic.IReadOnlyCollection < IMessageFilter > filters The filters to be applied. Returns Type Description ILazyMessageStreamEnumerable < System.Object > The linked ILazyMessageStreamEnumerable<TMessage> . | Improve this doc View source CreateLazyStream<TMessage>(IReadOnlyCollection<IMessageFilter>) Creates a new ILazyMessageStreamEnumerable<TMessage> that will be linked with this provider and will create the IMessageStreamEnumerable<TMessage> as soon as a message matching the type TMessage is pushed. Declaration ILazyMessageStreamEnumerable<TMessage> CreateLazyStream<TMessage>(IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IMessageFilter > filters The filters to be applied. Returns Type Description ILazyMessageStreamEnumerable <TMessage> The linked ILazyMessageStreamEnumerable<TMessage> . Type Parameters Name Description TMessage The type of the messages to be streamed to the linked stream. | Improve this doc View source CreateStream(Type, IReadOnlyCollection<IMessageFilter>) Creates a new IMessageStreamEnumerable<TMessage> that will be linked with this provider and will be pushed with the messages matching the type messageType . Declaration IMessageStreamEnumerable<object> CreateStream(Type messageType, IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description System.Type messageType The type of the messages to be streamed to the linked stream. System.Collections.Generic.IReadOnlyCollection < IMessageFilter > filters The filters to be applied. Returns Type Description IMessageStreamEnumerable < System.Object > The linked IMessageStreamEnumerable<TMessage> . | Improve this doc View source CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) Creates a new IMessageStreamEnumerable<TMessage> that will be linked with this provider and will be pushed with the messages matching the type TMessage . Declaration IMessageStreamEnumerable<TMessage> CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IMessageFilter > filters The filters to be applied. Returns Type Description IMessageStreamEnumerable <TMessage> The linked IMessageStreamEnumerable<TMessage> . Type Parameters Name Description TMessage The type of the messages to be streamed to the linked stream."
  },
  "api/Silverback.Messaging.Messages.IMessageWithSource.html": {
    "href": "api/Silverback.Messaging.Messages.IMessageWithSource.html",
    "title": "Interface IMessageWithSource | Silverback",
    "keywords": "Interface IMessageWithSource Exposes a Source property referencing the object that generated the message. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public interface IMessageWithSource Properties | Improve this doc View source Source Gets or sets the reference to the object that generated the message. Declaration object Source { get; set; } Property Value Type Description System.Object"
  },
  "api/Silverback.Messaging.Messages.IOutboundEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IOutboundEnvelope.html",
    "title": "Interface IOutboundEnvelope | Silverback",
    "keywords": "Interface IOutboundEnvelope Inherited Members IEnvelope.AutoUnwrap IEnvelope.Message IRawOutboundEnvelope.Endpoint IRawOutboundEnvelope.BrokerMessageIdentifier IRawOutboundEnvelope.ActualEndpointName IRawOutboundEnvelope.ActualEndpointDisplayName IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IOutboundEnvelope : IBrokerEnvelope, IEnvelope, IRawOutboundEnvelope, IRawBrokerEnvelope"
  },
  "api/Silverback.Messaging.Messages.IOutboundEnvelope-1.html": {
    "href": "api/Silverback.Messaging.Messages.IOutboundEnvelope-1.html",
    "title": "Interface IOutboundEnvelope<TMessage> | Silverback",
    "keywords": "Interface IOutboundEnvelope<TMessage> Inherited Members IEnvelope.AutoUnwrap IRawOutboundEnvelope.Endpoint IRawOutboundEnvelope.BrokerMessageIdentifier IRawOutboundEnvelope.ActualEndpointName IRawOutboundEnvelope.ActualEndpointDisplayName IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IOutboundEnvelope<out TMessage> : IOutboundEnvelope, IBrokerEnvelope, IEnvelope, IRawOutboundEnvelope, IRawBrokerEnvelope where TMessage : class Type Parameters Name Description TMessage Properties | Improve this doc View source Message Gets the deserialized message body. Declaration TMessage Message { get; } Property Value Type Description TMessage"
  },
  "api/Silverback.Messaging.Messages.IQuery-1.html": {
    "href": "api/Silverback.Messaging.Messages.IQuery-1.html",
    "title": "Interface IQuery<TResult> | Silverback",
    "keywords": "Interface IQuery<TResult> Represents a message that queries a result of type TResult . Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.Model.dll Syntax public interface IQuery<out TResult> : IMessage Type Parameters Name Description TResult The type of the result being returned."
  },
  "api/Silverback.Messaging.Messages.IRawBrokerEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IRawBrokerEnvelope.html",
    "title": "Interface IRawBrokerEnvelope | Silverback",
    "keywords": "Interface IRawBrokerEnvelope Wraps the serialized inbound or outbound message. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IRawBrokerEnvelope Properties | Improve this doc View source Endpoint Gets the source or destination endpoint. Declaration IEndpoint Endpoint { get; } Property Value Type Description IEndpoint | Improve this doc View source Headers Gets the optional message headers. Declaration MessageHeaderCollection Headers { get; } Property Value Type Description MessageHeaderCollection | Improve this doc View source RawMessage Gets or sets the serialized message body. Declaration Stream RawMessage { get; set; } Property Value Type Description System.IO.Stream"
  },
  "api/Silverback.Messaging.Messages.IRawInboundEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IRawInboundEnvelope.html",
    "title": "Interface IRawInboundEnvelope | Silverback",
    "keywords": "Interface IRawInboundEnvelope Wraps the message that is being consumed from an inbound endpoint. Inherited Members IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IRawInboundEnvelope : IRawBrokerEnvelope Properties | Improve this doc View source ActualEndpointDisplayName Gets the name to actual source endpoint ( ActualEndpointName ) to be displayed in the human-targeted output (e.g. logs, health checks result, etc.). Declaration string ActualEndpointDisplayName { get; } Property Value Type Description System.String | Improve this doc View source ActualEndpointName Gets the name of the actual source endpoint (in case the Endpoint configuration points to multiple endpoints, for example if consuming multiple topics with a single KafkaConsumer ). Declaration string ActualEndpointName { get; } Property Value Type Description System.String | Improve this doc View source BrokerMessageIdentifier Gets the message identifier on the message broker (the Kafka offset or similar). Declaration IBrokerMessageIdentifier BrokerMessageIdentifier { get; } Property Value Type Description IBrokerMessageIdentifier | Improve this doc View source Endpoint Gets the source endpoint. Declaration IConsumerEndpoint Endpoint { get; } Property Value Type Description IConsumerEndpoint"
  },
  "api/Silverback.Messaging.Messages.IRawOutboundEnvelope.html": {
    "href": "api/Silverback.Messaging.Messages.IRawOutboundEnvelope.html",
    "title": "Interface IRawOutboundEnvelope | Silverback",
    "keywords": "Interface IRawOutboundEnvelope Wraps the message that is being produced to an outbound endpoint. Inherited Members IRawBrokerEnvelope.Headers IRawBrokerEnvelope.RawMessage Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public interface IRawOutboundEnvelope : IRawBrokerEnvelope Properties | Improve this doc View source ActualEndpointDisplayName Gets the name to actual target endpoint ( ActualEndpointName ) to be displayed in the human-targeted output (e.g. logs, health checks result, etc.). Declaration string ActualEndpointDisplayName { get; } Property Value Type Description System.String | Improve this doc View source ActualEndpointName Gets the name of the actual target endpoint resolved by the GetActualName(IOutboundEnvelope, IServiceProvider) method. Declaration string ActualEndpointName { get; } Property Value Type Description System.String | Improve this doc View source BrokerMessageIdentifier Gets the message identifier on the message broker (the Kafka offset or similar). Declaration IBrokerMessageIdentifier BrokerMessageIdentifier { get; } Property Value Type Description IBrokerMessageIdentifier Remarks The identifier value will be set only after the message has been successfully published to the message broker. | Improve this doc View source Endpoint Gets the destination endpoint. Declaration IProducerEndpoint Endpoint { get; } Property Value Type Description IProducerEndpoint"
  },
  "api/Silverback.Messaging.Messages.ISilverbackEvent.html": {
    "href": "api/Silverback.Messaging.Messages.ISilverbackEvent.html",
    "title": "Interface ISilverbackEvent | Silverback",
    "keywords": "Interface ISilverbackEvent An event that is triggered internally by Silverback. Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public interface ISilverbackEvent : IMessage"
  },
  "api/Silverback.Messaging.Messages.KafkaKeyMemberAttribute.html": {
    "href": "api/Silverback.Messaging.Messages.KafkaKeyMemberAttribute.html",
    "title": "Class KafkaKeyMemberAttribute | Silverback",
    "keywords": "Class KafkaKeyMemberAttribute The values of the properties decorated with this attribute are used to build the message key that will be used by Kafka (for partitioning, compacting, etc.). Inheritance System.Object System.Attribute KafkaKeyMemberAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.Kafka.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class KafkaKeyMemberAttribute : Attribute"
  },
  "api/Silverback.Messaging.Messages.KafkaMessageHeaders.html": {
    "href": "api/Silverback.Messaging.Messages.KafkaMessageHeaders.html",
    "title": "Class KafkaMessageHeaders | Silverback",
    "keywords": "Class KafkaMessageHeaders Contains the constants with the names of the Kafka specific message headers used by Silverback. Inheritance System.Object KafkaMessageHeaders Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.Kafka.dll Syntax public static class KafkaMessageHeaders Fields | Improve this doc View source KafkaMessageKey The header that will be filled with the key of the message consumed from Kafka. It is also used to temporary store the key for the produced message, defined via KafkaKeyMemberAttribute . Declaration public const string KafkaMessageKey = \"x-kafka-message-key\" Field Value Type Description System.String | Improve this doc View source KafkaPartitionIndex Used to temporary store the target partition index for the produced message. Declaration public const string KafkaPartitionIndex = \"x-kafka-partition-index\" Field Value Type Description System.String | Improve this doc View source SourceConsumerGroupId This will be set by the MoveMessageErrorPolicy and will contain the GroupId of the consumer that consumed the message that failed to be processed. Declaration public const string SourceConsumerGroupId = \"x-source-consumer-group-id\" Field Value Type Description System.String | Improve this doc View source SourceOffset This will be set by the MoveMessageErrorPolicy and will contain the offset of the message that failed to be processed. Declaration public const string SourceOffset = \"x-source-offset\" Field Value Type Description System.String | Improve this doc View source SourcePartition This will be set by the MoveMessageErrorPolicy and will contain the source partition of the message that failed to be processed. Declaration public const string SourcePartition = \"x-source-partition\" Field Value Type Description System.String | Improve this doc View source SourceTimestamp This will be set by the MoveMessageErrorPolicy and will contain the timestamp of the message that failed to be processed. Declaration public const string SourceTimestamp = \"x-source-timestamp\" Field Value Type Description System.String | Improve this doc View source SourceTopic This will be set by the MoveMessageErrorPolicy and will contain the source topic of the message that failed to be processed. Declaration public const string SourceTopic = \"x-source-topic\" Field Value Type Description System.String | Improve this doc View source TimestampKey The header that will be filled with the timestamp of the message consumed from Kafka. Declaration public const string TimestampKey = \"x-kafka-message-timestamp\" Field Value Type Description System.String"
  },
  "api/Silverback.Messaging.Messages.MessageHeader.html": {
    "href": "api/Silverback.Messaging.Messages.MessageHeader.html",
    "title": "Class MessageHeader | Silverback",
    "keywords": "Class MessageHeader An header added to the message being sent over a message broker. Inheritance System.Object MessageHeader Implements System.IEquatable < MessageHeader > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public sealed class MessageHeader : IEquatable<MessageHeader> Constructors | Improve this doc View source MessageHeader(String, Object) Initializes a new instance of the MessageHeader class. Declaration public MessageHeader(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. | Improve this doc View source MessageHeader(String, String) Initializes a new instance of the MessageHeader class. Declaration [JsonConstructor] public MessageHeader(string name, string value) Parameters Type Name Description System.String name The header name. System.String value The header value. Properties | Improve this doc View source Name Gets or sets the header name. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this doc View source Value Gets or sets the header value. Declaration public string Value { get; set; } Property Value Type Description System.String Methods | Improve this doc View source Equals(MessageHeader) Declaration public bool Equals(MessageHeader other) Parameters Type Name Description MessageHeader other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Operators | Improve this doc View source Equality(MessageHeader, MessageHeader) Declaration public static bool operator ==(MessageHeader left, MessageHeader right) Parameters Type Name Description MessageHeader left MessageHeader right Returns Type Description System.Boolean | Improve this doc View source Inequality(MessageHeader, MessageHeader) Declaration public static bool operator !=(MessageHeader left, MessageHeader right) Parameters Type Name Description MessageHeader left MessageHeader right Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Messages.MessageHeaderCollection.html": {
    "href": "api/Silverback.Messaging.Messages.MessageHeaderCollection.html",
    "title": "Class MessageHeaderCollection | Silverback",
    "keywords": "Class MessageHeaderCollection A modifiable collection of message headers. Inheritance System.Object MessageHeaderCollection Implements System.Collections.Generic.IReadOnlyList < MessageHeader > System.Collections.Generic.IReadOnlyCollection < MessageHeader > System.Collections.Generic.IEnumerable < MessageHeader > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public class MessageHeaderCollection : IReadOnlyList<MessageHeader>, IReadOnlyCollection<MessageHeader>, IEnumerable<MessageHeader>, IEnumerable Constructors | Improve this doc View source MessageHeaderCollection(IReadOnlyCollection<MessageHeader>) Initializes a new instance of the MessageHeaderCollection class. Declaration public MessageHeaderCollection(IReadOnlyCollection<MessageHeader> headers) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The headers to be added to the collection. | Improve this doc View source MessageHeaderCollection(Int32) Initializes a new instance of the MessageHeaderCollection class. Declaration public MessageHeaderCollection(int capacity = 0) Parameters Type Name Description System.Int32 capacity The initial capacity of the backing System.Collections.Generic.List`1 . Properties | Improve this doc View source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this doc View source Item[Int32] Gets the header at the specified index in the collection. Declaration public MessageHeader this[int index] { get; } Parameters Type Name Description System.Int32 index The index in the collection. Property Value Type Description MessageHeader | Improve this doc View source Item[String] Gets or sets the value of the header with the specified name. Declaration public string this[string name] { get; set; } Parameters Type Name Description System.String name The header name. Property Value Type Description System.String Methods | Improve this doc View source Add(MessageHeader) Adds a new header. Declaration public void Add(MessageHeader header) Parameters Type Name Description MessageHeader header The header to be added. | Improve this doc View source Add(String, Object) Adds a new header. Declaration public void Add(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. | Improve this doc View source Add(String, String) Adds a new header. Declaration public void Add(string name, string value) Parameters Type Name Description System.String name The header name. System.String value The header value. | Improve this doc View source AddIfNotExists(String, String) Adds a new header if no header with the same name is already set. Declaration public void AddIfNotExists(string name, string newValue) Parameters Type Name Description System.String name The header name. System.String newValue The new header value. | Improve this doc View source AddOrReplace(String, Object) Adds a new header or replaces the header with the same name. Declaration public void AddOrReplace(string name, object newValue) Parameters Type Name Description System.String name The header name. System.Object newValue The new header value. | Improve this doc View source AddOrReplace(String, String) Adds a new header or replaces the header with the same name. Declaration public void AddOrReplace(string name, string newValue) Parameters Type Name Description System.String name The header name. System.String newValue The new header value. | Improve this doc View source Contains(String) Returns a boolean value indicating whether an header with the specified name has already been added to the collection. Declaration public bool Contains(string name) Parameters Type Name Description System.String name The name to be checked. Returns Type Description System.Boolean A boolean value indicating whether the name was found in the existing headers. | Improve this doc View source GetEnumerator() Declaration public IEnumerator<MessageHeader> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < MessageHeader > | Improve this doc View source GetValue(String, Boolean) Returns the value of the header with the specified name. It will return null if no header with that name is found in the collection. Declaration public string GetValue(string name, bool throwIfNotFound = false) Parameters Type Name Description System.String name The name of the header to be retrieved. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.String The header value converted to the target type, or null if not found. | Improve this doc View source GetValue(String, Type, Boolean) Returns the value of the header with the specified name, casting it to the specified type. By default it will return null if no header with that name is found in the collection but this behavior can be changed setting the throwIfNotFound parameter to true . Declaration public object GetValue(string name, Type targetType, bool throwIfNotFound = false) Parameters Type Name Description System.String name The name of the header to be retrieved. System.Type targetType The type to convert the header value to. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.Object The header value converted to the target type, or null if not found. | Improve this doc View source GetValue<T>(String, Boolean) Returns the value of the header with the specified name, casting it to the specified type T . It will return null if no header with that name is found in the collection. Declaration public T? GetValue<T>(string name, bool throwIfNotFound = false) where T : struct Parameters Type Name Description System.String name The name of the header to be retrieved. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.Nullable <T> The header value converted to the target type, or null if not found. Type Parameters Name Description T The type to convert the header value to. | Improve this doc View source GetValueOrDefault(String, Type) Returns the value of the header with the specified name, casting it to the specified type. It will return the default value for the target type if no header with that name is found in the collection. Declaration public object GetValueOrDefault(string name, Type targetType) Parameters Type Name Description System.String name The name of the header to be retrieved. System.Type targetType The type to convert the header value to. Returns Type Description System.Object The header value converted to the target type, or null if not found. | Improve this doc View source GetValueOrDefault<T>(String) Returns the value of the header with the specified name, casting it to the specified type T . It will return the default value for the type T if no header with that name is found in the collection. Declaration public T GetValueOrDefault<T>(string name) where T : struct Parameters Type Name Description System.String name The name of the header to be retrieved. Returns Type Description T The header value converted to the target type, or null if not found. Type Parameters Name Description T The type to convert the header value to. | Improve this doc View source Remove(MessageHeader) Removes the specified header. Declaration public void Remove(MessageHeader header) Parameters Type Name Description MessageHeader header The header to remove. | Improve this doc View source Remove(String) Removes all headers with the specified name. Declaration public void Remove(string name) Parameters Type Name Description System.String name The header name. Explicit Interface Implementations | Improve this doc View source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods MessageHeaderEnumerableExtensions.Contains(IEnumerable<MessageHeader>, String) MessageHeaderEnumerableExtensions.GetValue(IEnumerable<MessageHeader>, String, Boolean) MessageHeaderEnumerableExtensions.GetValue<T>(IEnumerable<MessageHeader>, String, Boolean) MessageHeaderEnumerableExtensions.GetValue(IEnumerable<MessageHeader>, String, Type, Boolean) MessageHeaderEnumerableExtensions.GetValueOrDefault<T>(IEnumerable<MessageHeader>, String) MessageHeaderEnumerableExtensions.GetValueOrDefault(IEnumerable<MessageHeader>, String, Type)"
  },
  "api/Silverback.Messaging.Messages.MessageHeaderEnumerableExtensions.html": {
    "href": "api/Silverback.Messaging.Messages.MessageHeaderEnumerableExtensions.html",
    "title": "Class MessageHeaderEnumerableExtensions | Silverback",
    "keywords": "Class MessageHeaderEnumerableExtensions Add some helper methods to the System.Collections.Generic.IEnumerable<T> of MessageHeader . Inheritance System.Object MessageHeaderEnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public static class MessageHeaderEnumerableExtensions Methods | Improve this doc View source Contains(IEnumerable<MessageHeader>, String) Returns a boolean value indicating whether an header with the specified name has already been added to the collection. Declaration public static bool Contains(this IEnumerable<MessageHeader> headers, string name) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name to be checked. Returns Type Description System.Boolean A boolean value indicating whether the name was found in the existing headers. | Improve this doc View source GetValue(IEnumerable<MessageHeader>, String, Boolean) Returns the value of the header with the specified name. It will return null if no header with that name is found in the collection. Declaration public static string GetValue(this IEnumerable<MessageHeader> headers, string name, bool throwIfNotFound = false) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.String The header value converted to the target type, or null if not found. | Improve this doc View source GetValue(IEnumerable<MessageHeader>, String, Type, Boolean) Returns the value of the header with the specified name, casting it to the specified type. By default it will return null if no header with that name is found in the collection but this behavior can be changed setting the throwIfNotFound parameter to true . Declaration public static object GetValue(this IEnumerable<MessageHeader> headers, string name, Type targetType, bool throwIfNotFound = false) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. System.Type targetType The type to convert the header value to. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.Object The header value converted to the target type, or null if not found. | Improve this doc View source GetValue<T>(IEnumerable<MessageHeader>, String, Boolean) Returns the value of the header with the specified name, casting it to the specified type T . It will return null if no header with that name is found in the collection. Declaration public static T? GetValue<T>(this IEnumerable<MessageHeader> headers, string name, bool throwIfNotFound = false) where T : struct Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. System.Boolean throwIfNotFound A boolean value specifying whether an exception must be thrown if the header with the specified name is not found (or the value cannot be converted to the specified type). Returns Type Description System.Nullable <T> The header value converted to the target type, or null if not found. Type Parameters Name Description T The type to convert the header value to. | Improve this doc View source GetValueOrDefault(IEnumerable<MessageHeader>, String, Type) Returns the value of the header with the specified name, casting it to the specified type. It will return the default value for the target type if no header with that name is found in the collection. Declaration public static object GetValueOrDefault(this IEnumerable<MessageHeader> headers, string name, Type targetType) Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. System.Type targetType The type to convert the header value to. Returns Type Description System.Object The header value converted to the target type, or null if not found. | Improve this doc View source GetValueOrDefault<T>(IEnumerable<MessageHeader>, String) Returns the value of the header with the specified name, casting it to the specified type T . It will return the default value for the type T if no header with that name is found in the collection. Declaration public static T GetValueOrDefault<T>(this IEnumerable<MessageHeader> headers, string name) where T : struct Parameters Type Name Description System.Collections.Generic.IEnumerable < MessageHeader > headers The enumerable containing the headers to be searched. System.String name The name of the header to be retrieved. Returns Type Description T The header value converted to the target type, or null if not found. Type Parameters Name Description T The type to convert the header value to."
  },
  "api/Silverback.Messaging.Messages.MessagesSource-1.html": {
    "href": "api/Silverback.Messaging.Messages.MessagesSource-1.html",
    "title": "Class MessagesSource<TBaseEvent> | Silverback",
    "keywords": "Class MessagesSource<TBaseEvent> The default generic implementation of IMessagesSource . It contains some protected methods to add the internal events to a temporary collection exposed via the IMessagesSource implementation. Inheritance System.Object MessagesSource<TBaseEvent> DomainEntity EventSourcingDomainEntity<TKey, TDomainEvent> EventStoreEntity<TEventEntity> Implements IMessagesSource Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public abstract class MessagesSource<TBaseEvent> : IMessagesSource Type Parameters Name Description TBaseEvent The base type of the events being published. Remarks This is the base class of the DomainEntity defined in Silverback.Core.Model. Methods | Improve this doc View source AddEvent(TBaseEvent) Adds the specified event to the collection of events related to this object. In the case of an entity model the event will be published when the entity is saved to the underlying database. Declaration protected virtual void AddEvent(TBaseEvent event) Parameters Type Name Description TBaseEvent event The instance of TBaseEvent to be added. | Improve this doc View source AddEvent<TEvent>(Boolean) Adds a new instance of TEvent to the collection of events related to this object. In the case of an entity model the event will be published when the entity is saved to the underlying database. Declaration protected TEvent AddEvent<TEvent>(bool allowMultiple = true) where TEvent : TBaseEvent, new() Parameters Type Name Description System.Boolean allowMultiple if set to false only one instance of the specified type TEvent will be added. Returns Type Description TEvent The TEvent instance that was added. Type Parameters Name Description TEvent The type of the event. | Improve this doc View source ClearMessages() Called after the messages have been successfully published (and processed) to clear the messages collection. Declaration public void ClearMessages() | Improve this doc View source GetMessages() Gets the messages to be published. Declaration public IEnumerable<object> GetMessages() Returns Type Description System.Collections.Generic.IEnumerable < System.Object > The message objects. | Improve this doc View source RemoveEvent(TBaseEvent) Removes the specified event from the collection of events related to this object. Declaration protected void RemoveEvent(TBaseEvent event) Parameters Type Name Description TBaseEvent event The TBaseEvent to be removed. Remarks This is used only to withdraw an event that wasn't published yet. Implements IMessagesSource"
  },
  "api/Silverback.Messaging.Messages.RabbitMessageHeaders.html": {
    "href": "api/Silverback.Messaging.Messages.RabbitMessageHeaders.html",
    "title": "Class RabbitMessageHeaders | Silverback",
    "keywords": "Class RabbitMessageHeaders Contains the constants with the names of the RabbitMQ specific message headers used by Silverback. Inheritance System.Object RabbitMessageHeaders Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.RabbitMQ.dll Syntax public static class RabbitMessageHeaders Fields | Improve this doc View source RoutingKey The header that will be filled with the routing key (if defined via RabbitRoutingKeyAttribute for the message being produced). Declaration public const string RoutingKey = \"x-rabbit-routing-key\" Field Value Type Description System.String"
  },
  "api/Silverback.Messaging.Messages.RabbitRoutingKeyAttribute.html": {
    "href": "api/Silverback.Messaging.Messages.RabbitRoutingKeyAttribute.html",
    "title": "Class RabbitRoutingKeyAttribute | Silverback",
    "keywords": "Class RabbitRoutingKeyAttribute The value of the property decorated with this attribute will be used as routing key. The routing key can be used by RabbitMQ to route the messages to the proper queue. Inheritance System.Object System.Attribute RabbitRoutingKeyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.RabbitMQ.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class RabbitRoutingKeyAttribute : Attribute"
  },
  "api/Silverback.Messaging.Messages.Tombstone.html": {
    "href": "api/Silverback.Messaging.Messages.Tombstone.html",
    "title": "Class Tombstone | Silverback",
    "keywords": "Class Tombstone Represents a tombstone message (a message with null body). Inheritance System.Object Tombstone Tombstone<TMessage> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public class Tombstone Constructors | Improve this doc View source Tombstone(String) Initializes a new instance of the Tombstone class. Declaration public Tombstone(string messageId) Parameters Type Name Description System.String messageId The message identifier. Properties | Improve this doc View source MessageId Gets the message identifier. Declaration [Header(\"x-message-id\")] public string MessageId { get; } Property Value Type Description System.String"
  },
  "api/Silverback.Messaging.Messages.Tombstone-1.html": {
    "href": "api/Silverback.Messaging.Messages.Tombstone-1.html",
    "title": "Class Tombstone<TMessage> | Silverback",
    "keywords": "Class Tombstone<TMessage> Represents a tombstone message (a message with null body). Inheritance System.Object Tombstone Tombstone<TMessage> Inherited Members Tombstone.MessageId System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Integration.dll Syntax public class Tombstone<TMessage> : Tombstone Type Parameters Name Description TMessage The type of the message that was expected. Constructors | Improve this doc View source Tombstone(String) Initializes a new instance of the Tombstone<TMessage> class. Declaration public Tombstone(string messageId) Parameters Type Name Description System.String messageId The message identifier."
  },
  "api/Silverback.Messaging.Messages.TransactionAbortedEvent.html": {
    "href": "api/Silverback.Messaging.Messages.TransactionAbortedEvent.html",
    "title": "Class TransactionAbortedEvent | Silverback",
    "keywords": "Class TransactionAbortedEvent The event published when an exception occurs during the processing of a (database) transaction. It is fired by the data access while saving changes (see Silverback.Core.EntityFrameworkCore) and it is internally used (in Silverback.Integration) to trigger additional tasks related to the publishing of the domain events. Inheritance System.Object TransactionAbortedEvent Implements ISilverbackEvent IMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public class TransactionAbortedEvent : ISilverbackEvent, IMessage Implements ISilverbackEvent IMessage"
  },
  "api/Silverback.Messaging.Messages.TransactionCompletedEvent.html": {
    "href": "api/Silverback.Messaging.Messages.TransactionCompletedEvent.html",
    "title": "Class TransactionCompletedEvent | Silverback",
    "keywords": "Class TransactionCompletedEvent The event published when a (database) transaction is completed and committed. It is fired by the data access after saving changes (see Silverback.Core.EntityFrameworkCore) and it is internally used (in Silverback.Integration) to trigger additional tasks related to the publishing of the domain events. Inheritance System.Object TransactionCompletedEvent Implements ISilverbackEvent IMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public class TransactionCompletedEvent : ISilverbackEvent, IMessage Implements ISilverbackEvent IMessage"
  },
  "api/Silverback.Messaging.Messages.TransactionStartedEvent.html": {
    "href": "api/Silverback.Messaging.Messages.TransactionStartedEvent.html",
    "title": "Class TransactionStartedEvent | Silverback",
    "keywords": "Class TransactionStartedEvent The event published when a (database) transaction is being started. It is fired by the data access before saving changes (see Silverback.Core.EntityFrameworkCore) and it is internally used (in Silverback.Integration) to trigger additional tasks related to the publishing of the domain events. Inheritance System.Object TransactionStartedEvent Implements ISilverbackEvent IMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Messages Assembly : Silverback.Core.dll Syntax public class TransactionStartedEvent : ISilverbackEvent, IMessage Implements ISilverbackEvent IMessage"
  },
  "api/Silverback.Messaging.MqttConsumerEndpoint.html": {
    "href": "api/Silverback.Messaging.MqttConsumerEndpoint.html",
    "title": "Class MqttConsumerEndpoint | Silverback",
    "keywords": "Class MqttConsumerEndpoint Represents a topic to consume from. Inheritance System.Object Endpoint ConsumerEndpoint MqttConsumerEndpoint Implements IConsumerEndpoint IEndpoint System.IEquatable < MqttConsumerEndpoint > Inherited Members ConsumerEndpoint.ErrorPolicy ConsumerEndpoint.ExactlyOnceStrategy ConsumerEndpoint.Batch ConsumerEndpoint.Sequence ConsumerEndpoint.NullMessageHandlingStrategy ConsumerEndpoint.ThrowIfUnhandled Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode Endpoint.BaseEquals(Endpoint) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.MQTT.dll Syntax public sealed class MqttConsumerEndpoint : ConsumerEndpoint, IConsumerEndpoint, IEndpoint, IEquatable<MqttConsumerEndpoint> Constructors | Improve this doc View source MqttConsumerEndpoint(String[]) Initializes a new instance of the MqttConsumerEndpoint class. Declaration public MqttConsumerEndpoint(params string[] topics) Parameters Type Name Description System.String [] topics The name of the topics or the topic filter strings. Properties | Improve this doc View source Configuration Gets or sets the MQTT client configuration. This is actually a wrapper around the MQTTnet.Client.Options.MqttClientOptions from the MQTTnet library. Declaration public MqttClientConfig Configuration { get; set; } Property Value Type Description MqttClientConfig | Improve this doc View source QualityOfServiceLevel Gets or sets the quality of service level (at most once, at least once or exactly once). The default is MQTTnet.Protocol.MqttQualityOfServiceLevel.AtMostOnce . Declaration public MqttQualityOfServiceLevel QualityOfServiceLevel { get; set; } Property Value Type Description MQTTnet.Protocol.MqttQualityOfServiceLevel | Improve this doc View source Topics Gets the name of the topics or the topic filter strings. Declaration public IReadOnlyCollection<string> Topics { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < System.String > Methods | Improve this doc View source Equals(MqttConsumerEndpoint) Declaration public bool Equals(MqttConsumerEndpoint other) Parameters Type Name Description MqttConsumerEndpoint other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source GetUniqueConsumerGroupName() Gets a unique name for the consumer group (e.g. Kafka's consumer group id). This value (joint with the endpoint name) will be used for example to ensure the exactly-once delivery. Declaration public override string GetUniqueConsumerGroupName() Returns Type Description System.String Returns the unique name for the consumer group. Overrides ConsumerEndpoint.GetUniqueConsumerGroupName() Remarks It's not enough to use the endpoint name, since the same topic could be consumed by multiple consumer groups within the same process and/or using the same database to store the information needed to ensure the exactly-once delivery. | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides ConsumerEndpoint.Validate() Implements IConsumerEndpoint IEndpoint System.IEquatable<T>"
  },
  "api/Silverback.Messaging.MqttProducerEndpoint.html": {
    "href": "api/Silverback.Messaging.MqttProducerEndpoint.html",
    "title": "Class MqttProducerEndpoint | Silverback",
    "keywords": "Class MqttProducerEndpoint Represents a topic to produce to. Inheritance System.Object Endpoint ProducerEndpoint MqttProducerEndpoint Implements IProducerEndpoint IEndpoint System.IEquatable < MqttProducerEndpoint > Inherited Members ProducerEndpoint.Chunk ProducerEndpoint.Strategy ProducerEndpoint.MessageEnrichers ProducerEndpoint.IProducerEndpoint.MessageEnrichers ProducerEndpoint.GetActualName(IOutboundEnvelope, IServiceProvider) ProducerEndpoint.BaseEquals(Endpoint) Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.MQTT.dll Syntax public sealed class MqttProducerEndpoint : ProducerEndpoint, IProducerEndpoint, IEndpoint, IEquatable<MqttProducerEndpoint> Constructors | Improve this doc View source MqttProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, String>) Initializes a new instance of the MqttProducerEndpoint class. Declaration public MqttProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, string> nameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.IServiceProvider , System.String > nameFunction The function returning the endpoint name for the message being produced. | Improve this doc View source MqttProducerEndpoint(Func<IOutboundEnvelope, String>) Initializes a new instance of the MqttProducerEndpoint class. Declaration public MqttProducerEndpoint(Func<IOutboundEnvelope, string> nameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.String > nameFunction The function returning the endpoint name for the message being produced. | Improve this doc View source MqttProducerEndpoint(String) Initializes a new instance of the MqttProducerEndpoint class. Declaration public MqttProducerEndpoint(string name) Parameters Type Name Description System.String name The name of the topic. | Improve this doc View source MqttProducerEndpoint(String, Func<IOutboundEnvelope, String[]>) Initializes a new instance of the MqttProducerEndpoint class. Declaration public MqttProducerEndpoint(string nameFormat, Func<IOutboundEnvelope, string[]> argumentsFunction) Parameters Type Name Description System.String nameFormat The endpoint name format string that will be combined with the arguments returned by the argumentsFunction using a string.Format . System.Func < IOutboundEnvelope , System.String []> argumentsFunction The function returning the arguments to be used to format the string. | Improve this doc View source MqttProducerEndpoint(Type) Initializes a new instance of the MqttProducerEndpoint class. Declaration public MqttProducerEndpoint(Type nameResolverType) Parameters Type Name Description System.Type nameResolverType The type of the IProducerEndpointNameResolver to be used to resolve the actual endpoint name. Properties | Improve this doc View source Configuration Gets or sets the MQTT client configuration. This is actually a wrapper around the MQTTnet.Client.Options.MqttClientOptions from the MQTTnet library. Declaration public MqttClientConfig Configuration { get; set; } Property Value Type Description MqttClientConfig | Improve this doc View source MessageExpiryInterval Gets or sets the message expiry interval in seconds. This interval defines the period of time that the broker stores the PUBLISH message for any matching subscribers that are not currently connected. When no message expiry interval is set, the broker must store the message for matching subscribers indefinitely. Declaration public uint? MessageExpiryInterval { get; set; } Property Value Type Description System.Nullable < System.UInt32 > | Improve this doc View source QualityOfServiceLevel Gets or sets the quality of service level (at most once, at least once or exactly once). Declaration public MqttQualityOfServiceLevel QualityOfServiceLevel { get; set; } Property Value Type Description MQTTnet.Protocol.MqttQualityOfServiceLevel | Improve this doc View source Retain Gets or sets a value indicating whether the message have to be sent with the retain flag, causing them to be persisted on the broker. Declaration public bool Retain { get; set; } Property Value Type Description System.Boolean Methods | Improve this doc View source Equals(MqttProducerEndpoint) Declaration public bool Equals(MqttProducerEndpoint other) Parameters Type Name Description MqttProducerEndpoint other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides ProducerEndpoint.Validate() Implements IProducerEndpoint IEndpoint System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Outbound.Enrichers.GenericOutboundHeadersEnricher.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.GenericOutboundHeadersEnricher.html",
    "title": "Class GenericOutboundHeadersEnricher | Silverback",
    "keywords": "Class GenericOutboundHeadersEnricher A generic enricher that adds a message header according to a static name/value pair or a provider function. Inheritance System.Object GenericOutboundHeadersEnricher < System.Object > GenericOutboundHeadersEnricher Implements IOutboundMessageEnricher Inherited Members GenericOutboundHeadersEnricher<Object>.Enrich(IOutboundEnvelope) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public class GenericOutboundHeadersEnricher : GenericOutboundHeadersEnricher<object>, IOutboundMessageEnricher Constructors | Improve this doc View source GenericOutboundHeadersEnricher(String, Func<IOutboundEnvelope<Object>, Object>) Initializes a new instance of the GenericOutboundHeadersEnricher class. Declaration public GenericOutboundHeadersEnricher(string name, Func<IOutboundEnvelope<object>, object> valueProvider) Parameters Type Name Description System.String name The header name. System.Func < IOutboundEnvelope < System.Object >, System.Object > valueProvider The header value provider function. | Improve this doc View source GenericOutboundHeadersEnricher(String, Object) Initializes a new instance of the GenericOutboundHeadersEnricher class. Declaration public GenericOutboundHeadersEnricher(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. Implements IOutboundMessageEnricher"
  },
  "api/Silverback.Messaging.Outbound.Enrichers.GenericOutboundHeadersEnricher-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.GenericOutboundHeadersEnricher-1.html",
    "title": "Class GenericOutboundHeadersEnricher<TMessage> | Silverback",
    "keywords": "Class GenericOutboundHeadersEnricher<TMessage> A generic enricher that adds a message header according to a static name/value pair or a provider function. Inheritance System.Object GenericOutboundHeadersEnricher<TMessage> GenericOutboundHeadersEnricher OutboundMessageIdHeadersEnricher<TMessage> OutboundMessageKafkaKeyEnricher<TMessage> OutboundMessageRabbitRoutingKeyEnricher<TMessage> Implements IOutboundMessageEnricher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public class GenericOutboundHeadersEnricher<TMessage> : IOutboundMessageEnricher where TMessage : class Type Parameters Name Description TMessage The type of the messages to be enriched. Constructors | Improve this doc View source GenericOutboundHeadersEnricher(String, Func<IOutboundEnvelope<TMessage>, Object>) Initializes a new instance of the GenericOutboundHeadersEnricher<TMessage> class. Declaration public GenericOutboundHeadersEnricher(string name, Func<IOutboundEnvelope<TMessage>, object> valueProvider) Parameters Type Name Description System.String name The header name. System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The header value provider function. | Improve this doc View source GenericOutboundHeadersEnricher(String, Object) Initializes a new instance of the GenericOutboundHeadersEnricher<TMessage> class. Declaration public GenericOutboundHeadersEnricher(string name, object value) Parameters Type Name Description System.String name The header name. System.Object value The header value. Methods | Improve this doc View source Enrich(IOutboundEnvelope) Enriches the specified message. Declaration public void Enrich(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be enriched. Implements IOutboundMessageEnricher"
  },
  "api/Silverback.Messaging.Outbound.Enrichers.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.html",
    "title": "Namespace Silverback.Messaging.Outbound.Enrichers | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.Enrichers Classes GenericOutboundHeadersEnricher A generic enricher that adds a message header according to a static name/value pair or a provider function. GenericOutboundHeadersEnricher<TMessage> A generic enricher that adds a message header according to a static name/value pair or a provider function. MessageEnricherProducerBehavior Invokes all the IOutboundMessageEnricher configured for to the endpoint. OutboundMessageIdHeadersEnricher<TMessage> A generic enricher that sets the message id header according to a value provider function. OutboundMessageKafkaKeyEnricher<TMessage> A generic enricher that sets the kafka key according to a value provider function. OutboundMessageRabbitRoutingKeyEnricher<TMessage> A generic enricher that sets the routing key according to a value provider function. Interfaces IBrokerOutboundMessageEnrichersFactory Provides the list of IMovePolicyMessageEnricher according to the specified endpoint. IMovePolicyMessageEnricher Enriches the outbound message being moved. IMovePolicyMessageEnricher<TEndpoint> Enriches the outbound message being moved. IOutboundMessageEnricher Enriches the outbound message (e.g. adding custom headers)."
  },
  "api/Silverback.Messaging.Outbound.Enrichers.IBrokerOutboundMessageEnrichersFactory.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.IBrokerOutboundMessageEnrichersFactory.html",
    "title": "Interface IBrokerOutboundMessageEnrichersFactory | Silverback",
    "keywords": "Interface IBrokerOutboundMessageEnrichersFactory Provides the list of IMovePolicyMessageEnricher according to the specified endpoint. Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public interface IBrokerOutboundMessageEnrichersFactory Methods | Improve this doc View source GetMovePolicyEnricher(IEndpoint) Returns the IMovePolicyMessageEnricher for the specified endpoint. Declaration IMovePolicyMessageEnricher GetMovePolicyEnricher(IEndpoint endpoint) Parameters Type Name Description IEndpoint endpoint The endpoint. Returns Type Description IMovePolicyMessageEnricher The IMovePolicyMessageEnricher that matches the specified endpoint type."
  },
  "api/Silverback.Messaging.Outbound.Enrichers.IMovePolicyMessageEnricher.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.IMovePolicyMessageEnricher.html",
    "title": "Interface IMovePolicyMessageEnricher | Silverback",
    "keywords": "Interface IMovePolicyMessageEnricher Enriches the outbound message being moved. Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public interface IMovePolicyMessageEnricher Methods | Improve this doc View source Enrich(IRawInboundEnvelope, IOutboundEnvelope, Exception) Enriches the specified message. Declaration void Enrich(IRawInboundEnvelope inboundEnvelope, IOutboundEnvelope outboundEnvelope, Exception exception) Parameters Type Name Description IRawInboundEnvelope inboundEnvelope The envelope containing the message which failed to be processed. IOutboundEnvelope outboundEnvelope The envelope containing the message to be enriched. System.Exception exception The exception thrown during the message processing."
  },
  "api/Silverback.Messaging.Outbound.Enrichers.IMovePolicyMessageEnricher-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.IMovePolicyMessageEnricher-1.html",
    "title": "Interface IMovePolicyMessageEnricher<TEndpoint> | Silverback",
    "keywords": "Interface IMovePolicyMessageEnricher<TEndpoint> Enriches the outbound message being moved. Inherited Members IMovePolicyMessageEnricher.Enrich(IRawInboundEnvelope, IOutboundEnvelope, Exception) Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public interface IMovePolicyMessageEnricher<TEndpoint> : IMovePolicyMessageEnricher where TEndpoint : Endpoint Type Parameters Name Description TEndpoint The type of the endpoint that this enricher can be used for."
  },
  "api/Silverback.Messaging.Outbound.Enrichers.IOutboundMessageEnricher.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.IOutboundMessageEnricher.html",
    "title": "Interface IOutboundMessageEnricher | Silverback",
    "keywords": "Interface IOutboundMessageEnricher Enriches the outbound message (e.g. adding custom headers). Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public interface IOutboundMessageEnricher Methods | Improve this doc View source Enrich(IOutboundEnvelope) Enriches the specified message. Declaration void Enrich(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be enriched."
  },
  "api/Silverback.Messaging.Outbound.Enrichers.MessageEnricherProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.MessageEnricherProducerBehavior.html",
    "title": "Class MessageEnricherProducerBehavior | Silverback",
    "keywords": "Class MessageEnricherProducerBehavior Invokes all the IOutboundMessageEnricher configured for to the endpoint. Inheritance System.Object MessageEnricherProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public class MessageEnricherProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Outbound.Enrichers.OutboundMessageIdHeadersEnricher-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.OutboundMessageIdHeadersEnricher-1.html",
    "title": "Class OutboundMessageIdHeadersEnricher<TMessage> | Silverback",
    "keywords": "Class OutboundMessageIdHeadersEnricher<TMessage> A generic enricher that sets the message id header according to a value provider function. Inheritance System.Object GenericOutboundHeadersEnricher <TMessage> OutboundMessageIdHeadersEnricher<TMessage> Implements IOutboundMessageEnricher Inherited Members GenericOutboundHeadersEnricher<TMessage>.Enrich(IOutboundEnvelope) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.dll Syntax public class OutboundMessageIdHeadersEnricher<TMessage> : GenericOutboundHeadersEnricher<TMessage>, IOutboundMessageEnricher where TMessage : class Type Parameters Name Description TMessage The type of the messages to be enriched. Constructors | Improve this doc View source OutboundMessageIdHeadersEnricher(Func<IOutboundEnvelope<TMessage>, Object>) Initializes a new instance of the OutboundMessageIdHeadersEnricher<TMessage> class. Declaration public OutboundMessageIdHeadersEnricher(Func<IOutboundEnvelope<TMessage>, object> valueProvider) Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The header value provider function. Implements IOutboundMessageEnricher"
  },
  "api/Silverback.Messaging.Outbound.Enrichers.OutboundMessageKafkaKeyEnricher-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.OutboundMessageKafkaKeyEnricher-1.html",
    "title": "Class OutboundMessageKafkaKeyEnricher<TMessage> | Silverback",
    "keywords": "Class OutboundMessageKafkaKeyEnricher<TMessage> A generic enricher that sets the kafka key according to a value provider function. Inheritance System.Object GenericOutboundHeadersEnricher <TMessage> OutboundMessageKafkaKeyEnricher<TMessage> Implements IOutboundMessageEnricher Inherited Members GenericOutboundHeadersEnricher<TMessage>.Enrich(IOutboundEnvelope) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.Kafka.dll Syntax public class OutboundMessageKafkaKeyEnricher<TMessage> : GenericOutboundHeadersEnricher<TMessage>, IOutboundMessageEnricher where TMessage : class Type Parameters Name Description TMessage The type of the messages to be enriched. Constructors | Improve this doc View source OutboundMessageKafkaKeyEnricher(Func<IOutboundEnvelope<TMessage>, Object>) Initializes a new instance of the OutboundMessageKafkaKeyEnricher<TMessage> class. Declaration public OutboundMessageKafkaKeyEnricher(Func<IOutboundEnvelope<TMessage>, object> valueProvider) Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The kafka key value provider function. Implements IOutboundMessageEnricher"
  },
  "api/Silverback.Messaging.Outbound.Enrichers.OutboundMessageRabbitRoutingKeyEnricher-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Enrichers.OutboundMessageRabbitRoutingKeyEnricher-1.html",
    "title": "Class OutboundMessageRabbitRoutingKeyEnricher<TMessage> | Silverback",
    "keywords": "Class OutboundMessageRabbitRoutingKeyEnricher<TMessage> A generic enricher that sets the routing key according to a value provider function. Inheritance System.Object GenericOutboundHeadersEnricher <TMessage> OutboundMessageRabbitRoutingKeyEnricher<TMessage> Implements IOutboundMessageEnricher Inherited Members GenericOutboundHeadersEnricher<TMessage>.Enrich(IOutboundEnvelope) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Enrichers Assembly : Silverback.Integration.RabbitMQ.dll Syntax public class OutboundMessageRabbitRoutingKeyEnricher<TMessage> : GenericOutboundHeadersEnricher<TMessage>, IOutboundMessageEnricher where TMessage : class Type Parameters Name Description TMessage The type of the messages to be enriched. Constructors | Improve this doc View source OutboundMessageRabbitRoutingKeyEnricher(Func<IOutboundEnvelope<TMessage>, Object>) Initializes a new instance of the OutboundMessageRabbitRoutingKeyEnricher<TMessage> class. Declaration public OutboundMessageRabbitRoutingKeyEnricher(Func<IOutboundEnvelope<TMessage>, object> valueProvider) Parameters Type Name Description System.Func < IOutboundEnvelope <TMessage>, System.Object > valueProvider The kafka key value provider function. Implements IOutboundMessageEnricher"
  },
  "api/Silverback.Messaging.Outbound.html": {
    "href": "api/Silverback.Messaging.Outbound.html",
    "title": "Namespace Silverback.Messaging.Outbound | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound Classes IntegrationBehaviorsSortIndexes Contains the sort index constants of the default IBehavior added by Silverback.Integration. KafkaMessageKeyInitializerProducerBehavior Sets the message key header with the value from the properties decorated with the KafkaKeyMemberAttribute . The header will be used by the KafkaProducer to set the actual message key. RabbitRoutingKeyInitializerProducerBehavior Sets the routing key header with the value from the property decorated with the RabbitRoutingKeyAttribute . The header will be used by the RabbitProducer to set the actual routing key. Interfaces IProduceStrategy The strategy used to produce the messages. IProduceStrategyImplementation The strategy used to produce the messages."
  },
  "api/Silverback.Messaging.Outbound.IntegrationBehaviorsSortIndexes.html": {
    "href": "api/Silverback.Messaging.Outbound.IntegrationBehaviorsSortIndexes.html",
    "title": "Class IntegrationBehaviorsSortIndexes | Silverback",
    "keywords": "Class IntegrationBehaviorsSortIndexes Contains the sort index constants of the default IBehavior added by Silverback.Integration. Inheritance System.Object IntegrationBehaviorsSortIndexes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound Assembly : Silverback.Integration.dll Syntax public static class IntegrationBehaviorsSortIndexes Fields | Improve this doc View source OutboundProducer The ProduceBehavior sort index. Declaration public const int OutboundProducer = 200 Field Value Type Description System.Int32 | Improve this doc View source OutboundRouter The OutboundRouterBehavior sort index. Declaration public const int OutboundRouter = 300 Field Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Outbound.IProduceStrategy.html": {
    "href": "api/Silverback.Messaging.Outbound.IProduceStrategy.html",
    "title": "Interface IProduceStrategy | Silverback",
    "keywords": "Interface IProduceStrategy The strategy used to produce the messages. Namespace : Silverback.Messaging.Outbound Assembly : Silverback.Integration.dll Syntax public interface IProduceStrategy Methods | Improve this doc View source Build(IServiceProvider) Returns the actual strategy implementation, built using the provided System.IServiceProvider . Declaration IProduceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the strategy. Returns Type Description IProduceStrategyImplementation An instance of IProduceStrategyImplementation that can be used to produce the messages."
  },
  "api/Silverback.Messaging.Outbound.IProduceStrategyImplementation.html": {
    "href": "api/Silverback.Messaging.Outbound.IProduceStrategyImplementation.html",
    "title": "Interface IProduceStrategyImplementation | Silverback",
    "keywords": "Interface IProduceStrategyImplementation The strategy used to produce the messages. Namespace : Silverback.Messaging.Outbound Assembly : Silverback.Integration.dll Syntax public interface IProduceStrategyImplementation Methods | Improve this doc View source ProduceAsync(IOutboundEnvelope) Produces the message in the specified envelope. Declaration Task ProduceAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope containing the message to be produced. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Outbound.KafkaMessageKeyInitializerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.KafkaMessageKeyInitializerProducerBehavior.html",
    "title": "Class KafkaMessageKeyInitializerProducerBehavior | Silverback",
    "keywords": "Class KafkaMessageKeyInitializerProducerBehavior Sets the message key header with the value from the properties decorated with the KafkaKeyMemberAttribute . The header will be used by the KafkaProducer to set the actual message key. Inheritance System.Object KafkaMessageKeyInitializerProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaMessageKeyInitializerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Outbound.RabbitRoutingKeyInitializerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.RabbitRoutingKeyInitializerProducerBehavior.html",
    "title": "Class RabbitRoutingKeyInitializerProducerBehavior | Silverback",
    "keywords": "Class RabbitRoutingKeyInitializerProducerBehavior Sets the routing key header with the value from the property decorated with the RabbitRoutingKeyAttribute . The header will be used by the RabbitProducer to set the actual routing key. Inheritance System.Object RabbitRoutingKeyInitializerProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound Assembly : Silverback.Integration.RabbitMQ.dll Syntax public class RabbitRoutingKeyInitializerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.html",
    "title": "Class DictionaryOutboundRouter<TMessage, TEndpoint> | Silverback",
    "keywords": "Class DictionaryOutboundRouter<TMessage, TEndpoint> Routes the outbound messages to one or multiple endpoints. Inheritance System.Object OutboundRouter <TMessage> DictionaryOutboundRouter<TMessage, TEndpoint> KafkaOutboundEndpointRouter<TMessage> MqttOutboundEndpointRouter<TMessage> Implements IOutboundRouter <TMessage> IOutboundRouter Inherited Members OutboundRouter<TMessage>.IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class DictionaryOutboundRouter<TMessage, TEndpoint> : OutboundRouter<TMessage>, IOutboundRouter<TMessage>, IOutboundRouter where TEndpoint : IProducerEndpoint Type Parameters Name Description TMessage The type of the messages to be routed. TEndpoint The type of the IProducerEndpoint . Constructors | Improve this doc View source DictionaryOutboundRouter(DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction, IReadOnlyDictionary<String, TEndpoint>) Initializes a new instance of the DictionaryOutboundRouter<TMessage, TEndpoint> class. Declaration public DictionaryOutboundRouter(DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction routerFunction, IReadOnlyDictionary<string, TEndpoint> endpoints) Parameters Type Name Description DictionaryOutboundRouter.RouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , TEndpoint> endpoints The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the endpoints and their key. | Improve this doc View source DictionaryOutboundRouter(DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction, IReadOnlyDictionary<String, TEndpoint>) Initializes a new instance of the DictionaryOutboundRouter<TMessage, TEndpoint> class. Declaration public DictionaryOutboundRouter(DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction routerFunction, IReadOnlyDictionary<string, TEndpoint> endpoints) Parameters Type Name Description DictionaryOutboundRouter.SingleEndpointRouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , TEndpoint> endpoints The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the endpoints and their key. Properties | Improve this doc View source Endpoints Gets the endpoints that are potentially targeted by this router. This collection could be built over time in case of a dynamic IOutboundRouter but that will prevent the IOutboxWorker to work properly and it's not optimal as it used for example by the health checks to ping all possible endpoints. Declaration public override IEnumerable<IProducerEndpoint> Endpoints { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<TMessage>.Endpoints Methods | Improve this doc View source GetDestinationEndpoints(TMessage, MessageHeaderCollection) Returns the collection of IProducerEndpoint representing the endpoints where the specified message must be produced. Declaration public override IEnumerable<IProducerEndpoint> GetDestinationEndpoints(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > The endpoints to route the message to. Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<TMessage>.GetDestinationEndpoints(TMessage, Silverback.Messaging.Messages.MessageHeaderCollection) Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.RouterFunction.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.RouterFunction.html",
    "title": "Delegate DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction | Silverback",
    "keywords": "Delegate DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction The actual router method that receives the message (including its headers) together with the dictionary containing all endpoints and returns the destination endpoints. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public delegate IEnumerable<TEndpoint> RouterFunction(TMessage message, MessageHeaderCollection headers, IReadOnlyDictionary<string, TEndpoint> endpoints); Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers. System.Collections.Generic.IReadOnlyDictionary < System.String , TEndpoint> endpoints The dictionary containing all configured endpoints for this router. Returns Type Description System.Collections.Generic.IEnumerable <TEndpoint> The destination endpoints."
  },
  "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.SingleEndpointRouterFunction.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.DictionaryOutboundRouter-2.SingleEndpointRouterFunction.html",
    "title": "Delegate DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction | Silverback",
    "keywords": "Delegate DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction The actual router method that receives the message (including its headers) together with the dictionary containing all endpoints and returns the destination endpoint. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public delegate TEndpoint SingleEndpointRouterFunction(TMessage message, MessageHeaderCollection headers, IReadOnlyDictionary<string, TEndpoint> endpoints); Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers. System.Collections.Generic.IReadOnlyDictionary < System.String , TEndpoint> endpoints The dictionary containing all configured endpoints for this router. Returns Type Description TEndpoint The destination endpoint."
  },
  "api/Silverback.Messaging.Outbound.Routing.EndpointNameResolverProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.EndpointNameResolverProducerBehavior.html",
    "title": "Class EndpointNameResolverProducerBehavior | Silverback",
    "keywords": "Class EndpointNameResolverProducerBehavior Resolves the actual target endpoint name for the message being published using the GetActualName(IOutboundEnvelope, IServiceProvider) method. Inheritance System.Object EndpointNameResolverProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class EndpointNameResolverProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Outbound.Routing.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.html",
    "title": "Namespace Silverback.Messaging.Outbound.Routing | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.Routing Classes DictionaryOutboundRouter<TMessage, TEndpoint> Routes the outbound messages to one or multiple endpoints. EndpointNameResolverProducerBehavior Resolves the actual target endpoint name for the message being published using the GetActualName(IOutboundEnvelope, IServiceProvider) method. KafkaOutboundEndpointRouter<TMessage> Routes the outbound messages to one or multiple Kafka endpoints. KafkaPartitionResolverProducerBehavior Resolves the target partition for the message being published using the GetPartition(IOutboundEnvelope, IServiceProvider) method. KafkaProducerEndpointNameResolver<TMessage> The base class for a type used to resolve the actual target endpoint name for the outbound message. MqttOutboundEndpointRouter<TMessage> Routes the outbound messages to one or multiple MQTT endpoints. OutboundQueueProducer Produces to an endpoint. OutboundRoute Defines the IOutboundRouter to be used to get the destination endpoints to produce the messages of the specified type to. OutboundRouter<TMessage> Routes the outbound messages to one or multiple outbound endpoints. OutboundRouterBehavior Routes the messages to the outbound endpoint by wrapping them in an IOutboundEnvelope<TMessage> that is republished to the bus. ProduceBehavior Produces the IOutboundEnvelope<TMessage> using the IProduceStrategy configured in the endpoint. ProducerEndpointNameResolver<TMessage> The base class for a type used to resolve the actual target endpoint name for the outbound message. SimpleOutboundRouter<TMessage> Routes the outbound messages to one outbound endpoint. StaticOutboundRouter Routes all messages to a static collection of pre-defined endpoints. Interfaces IKafkaProducerEndpointNameResolver Represents a type used to resolve the actual target endpoint name for the outbound message. IOutboundRoute Defines the IOutboundRouter to be used to get the destination endpoints to produce the messages of the specified type to. IOutboundRouter Routes the outbound messages to one or multiple outbound endpoints. IOutboundRouter<TMessage> Routes the outbound messages to one or multiple outbound endpoints. IOutboundRoutingConfiguration Holds the outbound messages routing configuration (which message is redirected to which endpoint). IProducerEndpointNameResolver Represents a type used to resolve the actual target endpoint name for the outbound message. Delegates DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction The actual router method that receives the message (including its headers) together with the dictionary containing all endpoints and returns the destination endpoints. DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction The actual router method that receives the message (including its headers) together with the dictionary containing all endpoints and returns the destination endpoint."
  },
  "api/Silverback.Messaging.Outbound.Routing.IKafkaProducerEndpointNameResolver.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IKafkaProducerEndpointNameResolver.html",
    "title": "Interface IKafkaProducerEndpointNameResolver | Silverback",
    "keywords": "Interface IKafkaProducerEndpointNameResolver Represents a type used to resolve the actual target endpoint name for the outbound message. Inherited Members IProducerEndpointNameResolver.GetName(IOutboundEnvelope) Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaProducerEndpointNameResolver : IProducerEndpointNameResolver Methods | Improve this doc View source GetPartition(IOutboundEnvelope) Gets the target partition for the message being produced. Declaration int? GetPartition(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message being produced. Returns Type Description System.Nullable < System.Int32 > The target partition index. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated)."
  },
  "api/Silverback.Messaging.Outbound.Routing.IOutboundRoute.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IOutboundRoute.html",
    "title": "Interface IOutboundRoute | Silverback",
    "keywords": "Interface IOutboundRoute Defines the IOutboundRouter to be used to get the destination endpoints to produce the messages of the specified type to. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IOutboundRoute Properties | Improve this doc View source MessageType Gets the type of the messages to be routed to the outbound endpoint(s). Declaration Type MessageType { get; } Property Value Type Description System.Type Methods | Improve this doc View source GetOutboundRouter(IServiceProvider) Returns the instance of IOutboundRouter to be used to determine the destination endpoint. Declaration IOutboundRouter GetOutboundRouter(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the router. Returns Type Description IOutboundRouter The instance of IOutboundRouter<TMessage> ."
  },
  "api/Silverback.Messaging.Outbound.Routing.IOutboundRouter.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IOutboundRouter.html",
    "title": "Interface IOutboundRouter | Silverback",
    "keywords": "Interface IOutboundRouter Routes the outbound messages to one or multiple outbound endpoints. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IOutboundRouter Properties | Improve this doc View source Endpoints Gets the endpoints that are potentially targeted by this router. This collection could be built over time in case of a dynamic IOutboundRouter but that will prevent the IOutboxWorker to work properly and it's not optimal as it used for example by the health checks to ping all possible endpoints. Declaration IEnumerable<IProducerEndpoint> Endpoints { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Methods | Improve this doc View source GetDestinationEndpoints(Object, MessageHeaderCollection) Returns the collection of IProducerEndpoint representing the endpoints where the specified message must be produced. Declaration IEnumerable<IProducerEndpoint> GetDestinationEndpoints(object message, MessageHeaderCollection headers) Parameters Type Name Description System.Object message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > The endpoints to produce to."
  },
  "api/Silverback.Messaging.Outbound.Routing.IOutboundRouter-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IOutboundRouter-1.html",
    "title": "Interface IOutboundRouter<TMessage> | Silverback",
    "keywords": "Interface IOutboundRouter<TMessage> Routes the outbound messages to one or multiple outbound endpoints. Inherited Members IOutboundRouter.Endpoints IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IOutboundRouter<TMessage> : IOutboundRouter Type Parameters Name Description TMessage The type of the messages to be routed. Methods | Improve this doc View source GetDestinationEndpoints(TMessage, MessageHeaderCollection) Returns the collection of IProducerEndpoint representing the endpoints where the specified message must be produced. Declaration IEnumerable<IProducerEndpoint> GetDestinationEndpoints(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > The endpoints to route the message to."
  },
  "api/Silverback.Messaging.Outbound.Routing.IOutboundRoutingConfiguration.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IOutboundRoutingConfiguration.html",
    "title": "Interface IOutboundRoutingConfiguration | Silverback",
    "keywords": "Interface IOutboundRoutingConfiguration Holds the outbound messages routing configuration (which message is redirected to which endpoint). Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IOutboundRoutingConfiguration Properties | Improve this doc View source IdempotentEndpointRegistration Gets or sets a value indicating whether the registration of endpoints is idempotent. This means that an endpoint for the same message type and the same name cannot be registered multiple times. The default is true . Declaration bool IdempotentEndpointRegistration { get; set; } Property Value Type Description System.Boolean | Improve this doc View source PublishOutboundMessagesToInternalBus Gets or sets a value indicating whether the messages to be routed through an outbound connector have also to be published to the internal bus, to be locally subscribed. The default is false . Declaration bool PublishOutboundMessagesToInternalBus { get; set; } Property Value Type Description System.Boolean | Improve this doc View source Routes Gets the configured outbound routes. Declaration IReadOnlyCollection<IOutboundRoute> Routes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundRoute > Methods | Improve this doc View source Add(Type, Func<IServiceProvider, IOutboundRouter>) Add an outbound routing rule. Declaration IOutboundRoutingConfiguration Add(Type messageType, Func<IServiceProvider, IOutboundRouter> outboundRouterFactory) Parameters Type Name Description System.Type messageType The type of the messages to be routed. System.Func < System.IServiceProvider , IOutboundRouter > outboundRouterFactory The factory method to be used to get the instance of IOutboundRouter to be used to determine the destination endpoint. Returns Type Description IOutboundRoutingConfiguration The IOutboundRoutingConfiguration so that additional calls can be chained. | Improve this doc View source Add<TMessage>(Func<IServiceProvider, IOutboundRouter>) Add an outbound routing rule. Declaration IOutboundRoutingConfiguration Add<TMessage>(Func<IServiceProvider, IOutboundRouter> outboundRouterFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IOutboundRouter > outboundRouterFactory The factory method to be used to get the instance of IOutboundRouter to be used to determine the destination endpoint. Returns Type Description IOutboundRoutingConfiguration The IOutboundRoutingConfiguration so that additional calls can be chained. Type Parameters Name Description TMessage The type of the messages to be routed. | Improve this doc View source GetRoutesForMessage(Object) Returns the outbound routes that apply to the specified message. Declaration IReadOnlyCollection<IOutboundRoute> GetRoutesForMessage(object message) Parameters Type Name Description System.Object message The message to be routed. Returns Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundRoute > The outbound routes for the specified message. | Improve this doc View source GetRoutesForMessage(Type) Returns the outbound routes that apply to a message of the specified message. Declaration IReadOnlyCollection<IOutboundRoute> GetRoutesForMessage(Type messageType) Parameters Type Name Description System.Type messageType The type of the message to be routed. Returns Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundRoute > The outbound routes for the specified message."
  },
  "api/Silverback.Messaging.Outbound.Routing.IProducerEndpointNameResolver.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.IProducerEndpointNameResolver.html",
    "title": "Interface IProducerEndpointNameResolver | Silverback",
    "keywords": "Interface IProducerEndpointNameResolver Represents a type used to resolve the actual target endpoint name for the outbound message. Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public interface IProducerEndpointNameResolver Methods | Improve this doc View source GetName(IOutboundEnvelope) Gets the actual target endpoint name for the message being produced. Declaration string GetName(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message being produced. Returns Type Description System.String The actual name of the endpoint to be produced to."
  },
  "api/Silverback.Messaging.Outbound.Routing.KafkaOutboundEndpointRouter-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.KafkaOutboundEndpointRouter-1.html",
    "title": "Class KafkaOutboundEndpointRouter<TMessage> | Silverback",
    "keywords": "Class KafkaOutboundEndpointRouter<TMessage> Routes the outbound messages to one or multiple Kafka endpoints. Inheritance System.Object OutboundRouter <TMessage> DictionaryOutboundRouter <TMessage, KafkaProducerEndpoint > KafkaOutboundEndpointRouter<TMessage> Implements IOutboundRouter <TMessage> IOutboundRouter Inherited Members DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.Endpoints DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.GetDestinationEndpoints(TMessage, MessageHeaderCollection) OutboundRouter<TMessage>.Endpoints OutboundRouter<TMessage>.GetDestinationEndpoints(TMessage, MessageHeaderCollection) OutboundRouter<TMessage>.IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaOutboundEndpointRouter<TMessage> : DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>, IOutboundRouter<TMessage>, IOutboundRouter Type Parameters Name Description TMessage The type of the messages to be routed. Constructors | Improve this doc View source KafkaOutboundEndpointRouter(DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.RouterFunction, IReadOnlyDictionary<String, Action<IKafkaProducerEndpointBuilder>>, KafkaClientConfig) Initializes a new instance of the KafkaOutboundEndpointRouter<TMessage> class. Declaration public KafkaOutboundEndpointRouter(DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.RouterFunction routerFunction, IReadOnlyDictionary<string, Action<IKafkaProducerEndpointBuilder>> endpointBuilderActions, KafkaClientConfig clientConfig = null) Parameters Type Name Description DictionaryOutboundRouter.RouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IKafkaProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . | Improve this doc View source KafkaOutboundEndpointRouter(DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.SingleEndpointRouterFunction, IReadOnlyDictionary<String, Action<IKafkaProducerEndpointBuilder>>, KafkaClientConfig) Initializes a new instance of the KafkaOutboundEndpointRouter<TMessage> class. Declaration public KafkaOutboundEndpointRouter(DictionaryOutboundRouter<TMessage, KafkaProducerEndpoint>.SingleEndpointRouterFunction routerFunction, IReadOnlyDictionary<string, Action<IKafkaProducerEndpointBuilder>> endpointBuilderActions, KafkaClientConfig clientConfig = null) Parameters Type Name Description DictionaryOutboundRouter.SingleEndpointRouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IKafkaProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. KafkaClientConfig clientConfig The KafkaClientConfig to be used to initialize the KafkaProducerConfig . Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.Routing.KafkaPartitionResolverProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.KafkaPartitionResolverProducerBehavior.html",
    "title": "Class KafkaPartitionResolverProducerBehavior | Silverback",
    "keywords": "Class KafkaPartitionResolverProducerBehavior Resolves the target partition for the message being published using the GetPartition(IOutboundEnvelope, IServiceProvider) method. Inheritance System.Object KafkaPartitionResolverProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.Kafka.dll Syntax public class KafkaPartitionResolverProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Outbound.Routing.KafkaProducerEndpointNameResolver-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.KafkaProducerEndpointNameResolver-1.html",
    "title": "Class KafkaProducerEndpointNameResolver<TMessage> | Silverback",
    "keywords": "Class KafkaProducerEndpointNameResolver<TMessage> The base class for a type used to resolve the actual target endpoint name for the outbound message. Inheritance System.Object ProducerEndpointNameResolver <TMessage> KafkaProducerEndpointNameResolver<TMessage> Implements IKafkaProducerEndpointNameResolver IProducerEndpointNameResolver Inherited Members ProducerEndpointNameResolver<TMessage>.GetName(IOutboundEnvelope) ProducerEndpointNameResolver<TMessage>.GetName(IOutboundEnvelope<TMessage>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.Kafka.dll Syntax public abstract class KafkaProducerEndpointNameResolver<TMessage> : ProducerEndpointNameResolver<TMessage>, IKafkaProducerEndpointNameResolver, IProducerEndpointNameResolver where TMessage : class Type Parameters Name Description TMessage The type of the messages being produced. Methods | Improve this doc View source GetPartition(IOutboundEnvelope) Gets the target partition for the message being produced. Declaration public int? GetPartition(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message being produced. Returns Type Description System.Nullable < System.Int32 > The target partition index. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). | Improve this doc View source GetPartition(IOutboundEnvelope<TMessage>) Gets the target partition for the message being produced. Declaration protected abstract int? GetPartition(IOutboundEnvelope<TMessage> envelope) Parameters Type Name Description IOutboundEnvelope <TMessage> envelope The envelope containing the message being produced. Returns Type Description System.Nullable < System.Int32 > The target partition index. If null the partition is automatically derived from the message key (use KafkaKeyMemberAttribute to specify a message key, otherwise a random one will be generated). Implements IKafkaProducerEndpointNameResolver IProducerEndpointNameResolver"
  },
  "api/Silverback.Messaging.Outbound.Routing.MqttOutboundEndpointRouter-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.MqttOutboundEndpointRouter-1.html",
    "title": "Class MqttOutboundEndpointRouter<TMessage> | Silverback",
    "keywords": "Class MqttOutboundEndpointRouter<TMessage> Routes the outbound messages to one or multiple MQTT endpoints. Inheritance System.Object OutboundRouter <TMessage> DictionaryOutboundRouter <TMessage, MqttProducerEndpoint > MqttOutboundEndpointRouter<TMessage> Implements IOutboundRouter <TMessage> IOutboundRouter Inherited Members DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.Endpoints DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.GetDestinationEndpoints(TMessage, MessageHeaderCollection) OutboundRouter<TMessage>.Endpoints OutboundRouter<TMessage>.GetDestinationEndpoints(TMessage, MessageHeaderCollection) OutboundRouter<TMessage>.IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.MQTT.dll Syntax public class MqttOutboundEndpointRouter<TMessage> : DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>, IOutboundRouter<TMessage>, IOutboundRouter Type Parameters Name Description TMessage The type of the messages to be routed. Constructors | Improve this doc View source MqttOutboundEndpointRouter(DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.RouterFunction, IReadOnlyDictionary<String, Action<IMqttProducerEndpointBuilder>>, MqttClientConfig) Initializes a new instance of the MqttOutboundEndpointRouter<TMessage> class. Declaration public MqttOutboundEndpointRouter(DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.RouterFunction routerFunction, IReadOnlyDictionary<string, Action<IMqttProducerEndpointBuilder>> endpointBuilderActions, MqttClientConfig clientConfig) Parameters Type Name Description DictionaryOutboundRouter.RouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.RouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IMqttProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. MqttClientConfig clientConfig The MqttClientConfig . | Improve this doc View source MqttOutboundEndpointRouter(DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.SingleEndpointRouterFunction, IReadOnlyDictionary<String, Action<IMqttProducerEndpointBuilder>>, MqttClientConfig) Initializes a new instance of the MqttOutboundEndpointRouter<TMessage> class. Declaration public MqttOutboundEndpointRouter(DictionaryOutboundRouter<TMessage, MqttProducerEndpoint>.SingleEndpointRouterFunction routerFunction, IReadOnlyDictionary<string, Action<IMqttProducerEndpointBuilder>> endpointBuilderActions, MqttClientConfig clientConfig) Parameters Type Name Description DictionaryOutboundRouter.SingleEndpointRouterFunction <> routerFunction The DictionaryOutboundRouter<TMessage, TEndpoint>.SingleEndpointRouterFunction . System.Collections.Generic.IReadOnlyDictionary < System.String , System.Action < IMqttProducerEndpointBuilder >> endpointBuilderActions The System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> containing the key of each endpoint and the System.Action<T> to be invoked to build them. MqttClientConfig clientConfig The MqttClientConfig . Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.Routing.OutboundQueueProducer.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.OutboundQueueProducer.html",
    "title": "Class OutboundQueueProducer | Silverback",
    "keywords": "Class OutboundQueueProducer Produces to an endpoint. Inheritance System.Object Producer Producer < TransactionalOutboxBroker , IProducerEndpoint > OutboundQueueProducer Implements IProducer Inherited Members Producer<TransactionalOutboxBroker, IProducerEndpoint>.Broker Producer<TransactionalOutboxBroker, IProducerEndpoint>.Endpoint Producer.Id Producer.Broker Producer.Endpoint Producer.IsConnecting Producer.IsConnected Producer.ConnectAsync() Producer.DisconnectAsync() Producer.Produce(Object, IReadOnlyCollection<MessageHeader>) Producer.Produce(IOutboundEnvelope) Producer.Produce(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.Produce(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduce(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduce(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>) Producer.ProduceAsync(IOutboundEnvelope) Producer.ProduceAsync(Object, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ProduceAsync(IOutboundEnvelope, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>) Producer.RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Byte[], IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.RawProduceAsync(String, Stream, IReadOnlyCollection<MessageHeader>, Action<IBrokerMessageIdentifier>, Action<Exception>) Producer.ConnectCoreAsync() Producer.DisconnectCoreAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class OutboundQueueProducer : Producer<TransactionalOutboxBroker, IProducerEndpoint>, IProducer Constructors | Improve this doc View source OutboundQueueProducer(IOutboxWriter, TransactionalOutboxBroker, IProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider, IOutboundLogger<Producer>) Initializes a new instance of the OutboundQueueProducer class. Declaration public OutboundQueueProducer(IOutboxWriter queueWriter, TransactionalOutboxBroker broker, IProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider, IOutboundLogger<Producer> logger) Parameters Type Name Description IOutboxWriter queueWriter The IOutboxWriter to be used to write to the queue. TransactionalOutboxBroker broker The IBroker that instantiated this producer. IProducerEndpoint endpoint The endpoint to produce to. IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the needed services. IOutboundLogger < Producer > logger The IOutboundLogger<TCategoryName> . Methods | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override void ProduceCore(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Overrides Producer.ProduceCore(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override IBrokerMessageIdentifier ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description IBrokerMessageIdentifier The message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override void ProduceCore(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Overrides Producer.ProduceCore(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks In this implementation the message is synchronously enqueued but produced asynchronously. The callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override async Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override async Task ProduceCoreAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Overrides Producer.ProduceCoreAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) Publishes the specified message and returns its identifier. Declaration protected override async Task<IBrokerMessageIdentifier> ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task < IBrokerMessageIdentifier > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the message identifier assigned by the broker (the Kafka offset or similar). Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String) | Improve this doc View source ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Publishes the specified message and returns its identifier. Declaration protected override async Task ProduceCoreAsync(object message, Stream messageStream, IReadOnlyCollection<MessageHeader> headers, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Object message The message to be delivered before serialization. This might be null if RawProduce(Byte[], IReadOnlyCollection<MessageHeader>) , RawProduce(Stream, IReadOnlyCollection<MessageHeader>) , RawProduceAsync(Byte[], IReadOnlyCollection<MessageHeader>) or RawProduceAsync(Stream, IReadOnlyCollection<MessageHeader>) have been used to produce. System.IO.Stream messageStream The message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String actualEndpointName The actual endpoint to produce to. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. The System.Threading.Tasks.Task will complete as soon as the message is enqueued. Overrides Producer.ProduceCoreAsync(Object, Stream, IReadOnlyCollection<MessageHeader>, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Remarks The returned System.Threading.Tasks.Task completes when the message is enqueued while the callbacks are called when the message is actually produced (or the produce failed). Implements IProducer"
  },
  "api/Silverback.Messaging.Outbound.Routing.OutboundRoute.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.OutboundRoute.html",
    "title": "Class OutboundRoute | Silverback",
    "keywords": "Class OutboundRoute Defines the IOutboundRouter to be used to get the destination endpoints to produce the messages of the specified type to. Inheritance System.Object OutboundRoute Implements IOutboundRoute Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class OutboundRoute : IOutboundRoute Constructors | Improve this doc View source OutboundRoute(Type, Func<IServiceProvider, IOutboundRouter>) Initializes a new instance of the OutboundRoute class. Declaration public OutboundRoute(Type messageType, Func<IServiceProvider, IOutboundRouter> outboundRouterFactory) Parameters Type Name Description System.Type messageType The type of the messages to be routed to the outbound endpoint(s). System.Func < System.IServiceProvider , IOutboundRouter > outboundRouterFactory The factory to be used to resolve the IOutboundRouter to be used to determine the destination endpoint. Properties | Improve this doc View source MessageType Gets the type of the messages to be routed to the outbound endpoint(s). Declaration public Type MessageType { get; } Property Value Type Description System.Type Methods | Improve this doc View source GetOutboundRouter(IServiceProvider) Returns the instance of IOutboundRouter to be used to determine the destination endpoint. Declaration public IOutboundRouter GetOutboundRouter(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the router. Returns Type Description IOutboundRouter The instance of IOutboundRouter<TMessage> . Implements IOutboundRoute"
  },
  "api/Silverback.Messaging.Outbound.Routing.OutboundRouter-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.OutboundRouter-1.html",
    "title": "Class OutboundRouter<TMessage> | Silverback",
    "keywords": "Class OutboundRouter<TMessage> Routes the outbound messages to one or multiple outbound endpoints. Inheritance System.Object OutboundRouter<TMessage> DictionaryOutboundRouter<TMessage, TEndpoint> SimpleOutboundRouter<TMessage> StaticOutboundRouter Implements IOutboundRouter <TMessage> IOutboundRouter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public abstract class OutboundRouter<TMessage> : IOutboundRouter<TMessage>, IOutboundRouter Type Parameters Name Description TMessage The type of the messages to be routed. Properties | Improve this doc View source Endpoints Gets the endpoints that are potentially targeted by this router. This collection could be built over time in case of a dynamic IOutboundRouter but that will prevent the IOutboxWorker to work properly and it's not optimal as it used for example by the health checks to ping all possible endpoints. Declaration public abstract IEnumerable<IProducerEndpoint> Endpoints { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Methods | Improve this doc View source GetDestinationEndpoints(TMessage, MessageHeaderCollection) Returns the collection of IProducerEndpoint representing the endpoints where the specified message must be produced. Declaration public abstract IEnumerable<IProducerEndpoint> GetDestinationEndpoints(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > The endpoints to route the message to. Explicit Interface Implementations | Improve this doc View source IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) Returns the collection of IProducerEndpoint representing the endpoints where the specified message must be produced. Declaration IEnumerable<IProducerEndpoint> IOutboundRouter.GetDestinationEndpoints(object message, MessageHeaderCollection headers) Parameters Type Name Description System.Object message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > The endpoints to produce to. Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.Routing.OutboundRouterBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.OutboundRouterBehavior.html",
    "title": "Class OutboundRouterBehavior | Silverback",
    "keywords": "Class OutboundRouterBehavior Routes the messages to the outbound endpoint by wrapping them in an IOutboundEnvelope<TMessage> that is republished to the bus. Inheritance System.Object OutboundRouterBehavior Implements IBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class OutboundRouterBehavior : IBehavior, ISorted Constructors | Improve this doc View source OutboundRouterBehavior(IPublisher, IOutboundRoutingConfiguration, IServiceProvider) Initializes a new instance of the OutboundRouterBehavior class. Declaration public OutboundRouterBehavior(IPublisher publisher, IOutboundRoutingConfiguration routingConfiguration, IServiceProvider serviceProvider) Parameters Type Name Description IPublisher publisher The IPublisher . IOutboundRoutingConfiguration routingConfiguration The IOutboundRoutingConfiguration . System.IServiceProvider serviceProvider The System.IServiceProvider . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(Object, MessageHandler) Process, handles or transforms the messages being published to the internal bus. Declaration public async Task<IReadOnlyCollection<object>> HandleAsync(object message, MessageHandler next) Parameters Type Name Description System.Object message The message being published. MessageHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < System.Object >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the result values (if any). Implements IBehavior ISorted"
  },
  "api/Silverback.Messaging.Outbound.Routing.ProduceBehavior.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.ProduceBehavior.html",
    "title": "Class ProduceBehavior | Silverback",
    "keywords": "Class ProduceBehavior Produces the IOutboundEnvelope<TMessage> using the IProduceStrategy configured in the endpoint. Inheritance System.Object ProduceBehavior Implements IBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class ProduceBehavior : IBehavior, ISorted Constructors | Improve this doc View source ProduceBehavior(IServiceProvider) Initializes a new instance of the ProduceBehavior class. Declaration public ProduceBehavior(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the IProduceStrategyImplementation . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(Object, MessageHandler) Process, handles or transforms the messages being published to the internal bus. Declaration public async Task<IReadOnlyCollection<object>> HandleAsync(object message, MessageHandler next) Parameters Type Name Description System.Object message The message being published. MessageHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < System.Object >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the result values (if any). Implements IBehavior ISorted"
  },
  "api/Silverback.Messaging.Outbound.Routing.ProducerEndpointNameResolver-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.ProducerEndpointNameResolver-1.html",
    "title": "Class ProducerEndpointNameResolver<TMessage> | Silverback",
    "keywords": "Class ProducerEndpointNameResolver<TMessage> The base class for a type used to resolve the actual target endpoint name for the outbound message. Inheritance System.Object ProducerEndpointNameResolver<TMessage> KafkaProducerEndpointNameResolver<TMessage> Implements IProducerEndpointNameResolver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public abstract class ProducerEndpointNameResolver<TMessage> : IProducerEndpointNameResolver where TMessage : class Type Parameters Name Description TMessage The type of the messages being produced. Methods | Improve this doc View source GetName(IOutboundEnvelope) Gets the actual target endpoint name for the message being produced. Declaration public string GetName(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message being produced. Returns Type Description System.String The actual name of the endpoint to be produced to. | Improve this doc View source GetName(IOutboundEnvelope<TMessage>) Gets the actual target endpoint name for the message being produced. Declaration protected abstract string GetName(IOutboundEnvelope<TMessage> envelope) Parameters Type Name Description IOutboundEnvelope <TMessage> envelope The envelope containing the message being produced. Returns Type Description System.String The actual name of the endpoint to be produced to. Implements IProducerEndpointNameResolver"
  },
  "api/Silverback.Messaging.Outbound.Routing.SimpleOutboundRouter-1.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.SimpleOutboundRouter-1.html",
    "title": "Class SimpleOutboundRouter<TMessage> | Silverback",
    "keywords": "Class SimpleOutboundRouter<TMessage> Routes the outbound messages to one outbound endpoint. Inheritance System.Object OutboundRouter <TMessage> SimpleOutboundRouter<TMessage> Implements IOutboundRouter <TMessage> IOutboundRouter Inherited Members OutboundRouter<TMessage>.Endpoints OutboundRouter<TMessage>.IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public abstract class SimpleOutboundRouter<TMessage> : OutboundRouter<TMessage>, IOutboundRouter<TMessage>, IOutboundRouter Type Parameters Name Description TMessage The type of the messages to be routed. Methods | Improve this doc View source GetDestinationEndpoint(TMessage, MessageHeaderCollection) Returns the IProducerEndpoint representing the endpoint where the specified message must be produced. When null is returned, the message will not be be published. Declaration protected abstract IProducerEndpoint GetDestinationEndpoint(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description IProducerEndpoint The endpoint to route the message to, or null if the message doesn't have to be routed. | Improve this doc View source GetDestinationEndpoints(TMessage, MessageHeaderCollection) Returns the collection of IProducerEndpoint representing the endpoints where the specified message must be produced. Declaration public override IEnumerable<IProducerEndpoint> GetDestinationEndpoints(TMessage message, MessageHeaderCollection headers) Parameters Type Name Description TMessage message The message to be routed. MessageHeaderCollection headers The message headers collection. Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > The endpoints to route the message to. Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<TMessage>.GetDestinationEndpoints(TMessage, Silverback.Messaging.Messages.MessageHeaderCollection) Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.Routing.StaticOutboundRouter.html": {
    "href": "api/Silverback.Messaging.Outbound.Routing.StaticOutboundRouter.html",
    "title": "Class StaticOutboundRouter | Silverback",
    "keywords": "Class StaticOutboundRouter Routes all messages to a static collection of pre-defined endpoints. Inheritance System.Object OutboundRouter < System.Object > StaticOutboundRouter Implements IOutboundRouter < System.Object > IOutboundRouter Inherited Members OutboundRouter<Object>.IOutboundRouter.GetDestinationEndpoints(Object, MessageHeaderCollection) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.Routing Assembly : Silverback.Integration.dll Syntax public class StaticOutboundRouter : OutboundRouter<object>, IOutboundRouter<object>, IOutboundRouter Constructors | Improve this doc View source StaticOutboundRouter(IProducerEndpoint[]) Initializes a new instance of the StaticOutboundRouter class. Declaration public StaticOutboundRouter(params IProducerEndpoint[] endpoints) Parameters Type Name Description IProducerEndpoint [] endpoints The endpoints to route the messages to. | Improve this doc View source StaticOutboundRouter(IEnumerable<IProducerEndpoint>) Initializes a new instance of the StaticOutboundRouter class. Declaration public StaticOutboundRouter(IEnumerable<IProducerEndpoint> endpoints) Parameters Type Name Description System.Collections.Generic.IEnumerable < IProducerEndpoint > endpoints The endpoints to route the messages to. Properties | Improve this doc View source Endpoints Gets the endpoints that are potentially targeted by this router. This collection could be built over time in case of a dynamic IOutboundRouter but that will prevent the IOutboxWorker to work properly and it's not optimal as it used for example by the health checks to ping all possible endpoints. Declaration public override IEnumerable<IProducerEndpoint> Endpoints { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<System.Object>.Endpoints Methods | Improve this doc View source GetDestinationEndpoints(Object, MessageHeaderCollection) Returns the collection of IProducerEndpoint representing the endpoints where the specified message must be produced. Declaration public override IEnumerable<IProducerEndpoint> GetDestinationEndpoints(object message, MessageHeaderCollection headers) Parameters Type Name Description System.Object message MessageHeaderCollection headers The message headers collection. Returns Type Description System.Collections.Generic.IEnumerable < IProducerEndpoint > The endpoints to route the message to. Overrides Silverback.Messaging.Outbound.Routing.OutboundRouter<System.Object>.GetDestinationEndpoints(System.Object, Silverback.Messaging.Messages.MessageHeaderCollection) Remarks Always returns the endpoints provided in the constructor. Implements IOutboundRouter<TMessage> IOutboundRouter"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.html",
    "title": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox Classes OutboxProduceStrategy The messages are stored in a the transactional outbox table. The operation is therefore included in the database transaction applying the message side effects to the local database. The IOutboxWorker takes care of asynchronously sending the messages to the message broker. OutboxTransactionManager Manages the consumer transaction calling Commit or Rollback on the IOutboxWriter when the database transaction is being completed. OutboxWorker Processes the outbox and produces the messages to the target message broker endpoint. OutboxWorkerService The Microsoft.Extensions.Hosting.IHostedService that triggers the outbound queue worker at regular intervals. TransactionalOutboxBroker An IBroker implementation that is used by the OutboxProduceStrategy to write into the outbox. Interfaces IOutboxWorker Processes the outbox and produces the messages to the target message broker endpoint."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.IOutboxWorker.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.IOutboxWorker.html",
    "title": "Interface IOutboxWorker | Silverback",
    "keywords": "Interface IOutboxWorker Processes the outbox and produces the messages to the target message broker endpoint. Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public interface IOutboxWorker Methods | Improve this doc View source ProcessQueueAsync(CancellationToken) Processes the outbox. Declaration Task ProcessQueueAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that represents the long running operations."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxProduceStrategy.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxProduceStrategy.html",
    "title": "Class OutboxProduceStrategy | Silverback",
    "keywords": "Class OutboxProduceStrategy The messages are stored in a the transactional outbox table. The operation is therefore included in the database transaction applying the message side effects to the local database. The IOutboxWorker takes care of asynchronously sending the messages to the message broker. Inheritance System.Object OutboxProduceStrategy Implements IProduceStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class OutboxProduceStrategy : IProduceStrategy Methods | Improve this doc View source Build(IServiceProvider) Returns the actual strategy implementation, built using the provided System.IServiceProvider . Declaration public IProduceStrategyImplementation Build(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to build the strategy. Returns Type Description IProduceStrategyImplementation An instance of IProduceStrategyImplementation that can be used to produce the messages. Implements IProduceStrategy"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxTransactionManager.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxTransactionManager.html",
    "title": "Class OutboxTransactionManager | Silverback",
    "keywords": "Class OutboxTransactionManager Manages the consumer transaction calling Commit or Rollback on the IOutboxWriter when the database transaction is being completed. Inheritance System.Object OutboxTransactionManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class OutboxTransactionManager Remarks This isn't even necessary if using EF Core and the DbOutboxWriter , since it is already implicitly taking part in the save changes transaction. Constructors | Improve this doc View source OutboxTransactionManager(IOutboxWriter) Initializes a new instance of the OutboxTransactionManager class. Declaration public OutboxTransactionManager(IOutboxWriter queueWriter) Parameters Type Name Description IOutboxWriter queueWriter The OutboxTransactionManager to manage."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxWorker.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxWorker.html",
    "title": "Class OutboxWorker | Silverback",
    "keywords": "Class OutboxWorker Processes the outbox and produces the messages to the target message broker endpoint. Inheritance System.Object OutboxWorker Implements IOutboxWorker Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class OutboxWorker : IOutboxWorker Constructors | Improve this doc View source OutboxWorker(IServiceScopeFactory, IBrokerCollection, IOutboundRoutingConfiguration, IOutboundLogger<OutboxWorker>, Boolean, Int32) Initializes a new instance of the OutboxWorker class. Declaration public OutboxWorker(IServiceScopeFactory serviceScopeFactory, IBrokerCollection brokerCollection, IOutboundRoutingConfiguration routingConfiguration, IOutboundLogger<OutboxWorker> logger, bool enforceMessageOrder, int batchSize) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory The Microsoft.Extensions.DependencyInjection.IServiceScopeFactory used to resolve the scoped types. IBrokerCollection brokerCollection The collection containing the available brokers. IOutboundRoutingConfiguration routingConfiguration The configured outbound routes. IOutboundLogger < OutboxWorker > logger The IOutboundLogger<TCategoryName> . System.Boolean enforceMessageOrder Specifies whether the messages must be produced in the same order as they were added to the queue. If set to true the message order will be ensured, retrying the same message until it can be successfully produced. System.Int32 batchSize The number of messages to be loaded and processed at once. Methods | Improve this doc View source ProcessQueueAsync(CancellationToken) Processes the outbox. Declaration public async Task ProcessQueueAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that represents the long running operations. | Improve this doc View source ProduceMessageAsync(Byte[], IReadOnlyCollection<MessageHeader>, IProducerEndpoint, String, Action<IBrokerMessageIdentifier>, Action<Exception>) Gets the producer for the specified endpoint and produces the specified message. Declaration protected virtual Task ProduceMessageAsync(byte[] content, IReadOnlyCollection<MessageHeader> headers, IProducerEndpoint endpoint, string actualEndpointName, Action<IBrokerMessageIdentifier> onSuccess, Action<Exception> onError) Parameters Type Name Description System.Byte [] content The serialized message content (body). System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The collection of message headers. IProducerEndpoint endpoint The endpoint to produce to. System.String actualEndpointName The actual endpoint name that was resolved for the message. System.Action < IBrokerMessageIdentifier > onSuccess The callback to be invoked when the message is successfully produced. System.Action < System.Exception > onError The callback to be invoked when the produce fails. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IOutboxWorker"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxWorkerService.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.OutboxWorkerService.html",
    "title": "Class OutboxWorkerService | Silverback",
    "keywords": "Class OutboxWorkerService The Microsoft.Extensions.Hosting.IHostedService that triggers the outbound queue worker at regular intervals. Inheritance System.Object Microsoft.Extensions.Hosting.BackgroundService DistributedBackgroundService RecurringDistributedBackgroundService OutboxWorkerService Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable Inherited Members RecurringDistributedBackgroundService.Pause() RecurringDistributedBackgroundService.Resume() RecurringDistributedBackgroundService.ExecuteLockedAsync(CancellationToken) DistributedBackgroundService.Lock DistributedBackgroundService.ExecuteAsync(CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class OutboxWorkerService : RecurringDistributedBackgroundService, IHostedService, IDisposable Constructors | Improve this doc View source OutboxWorkerService(TimeSpan, IOutboxWorker, DistributedLockSettings, IDistributedLockManager, ISilverbackLogger<OutboxWorkerService>) Initializes a new instance of the OutboxWorkerService class. Declaration public OutboxWorkerService(TimeSpan interval, IOutboxWorker outboxWorker, DistributedLockSettings distributedLockSettings, IDistributedLockManager distributedLockManager, ISilverbackLogger<OutboxWorkerService> logger) Parameters Type Name Description System.TimeSpan interval The interval between each execution. IOutboxWorker outboxWorker The IOutboxWorker implementation. DistributedLockSettings distributedLockSettings Customizes the lock mechanism settings. IDistributedLockManager distributedLockManager The IDistributedLockManager . ISilverbackLogger < OutboxWorkerService > logger The ISilverbackLogger . Methods | Improve this doc View source ExecuteRecurringAsync(CancellationToken) Calls the IOutboxWorker to process the queue at regular intervals. Declaration protected override Task ExecuteRecurringAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that represents the long running operations. Overrides RecurringDistributedBackgroundService.ExecuteRecurringAsync(CancellationToken) Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.DbOutboxReader.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.DbOutboxReader.html",
    "title": "Class DbOutboxReader | Silverback",
    "keywords": "Class DbOutboxReader Exposes the methods to read from the outbound queue. Used by the IOutboxWorker . An IDbContext is used to read from a queue stored in a database table. Inheritance System.Object RepositoryBase < OutboxMessage > DbOutboxReader Implements IOutboxReader Inherited Members RepositoryBase<OutboxMessage>.DbContext RepositoryBase<OutboxMessage>.DbSet System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public class DbOutboxReader : RepositoryBase<OutboxMessage>, IOutboxReader Constructors | Improve this doc View source DbOutboxReader(IDbContext) Initializes a new instance of the DbOutboxReader class. Declaration public DbOutboxReader(IDbContext dbContext) Parameters Type Name Description IDbContext dbContext The IDbContext to use as storage. Methods | Improve this doc View source AcknowledgeAsync(OutboxStoredMessage) Called after the message has been successfully produced to remove it from the outbox. Declaration public async Task AcknowledgeAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage The message that was processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source AcknowledgeAsync(IEnumerable<OutboxStoredMessage>) Called after the message has been successfully produced to remove it from the outbox. Declaration public async Task AcknowledgeAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages The messages that have been processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source GetLengthAsync() Returns the total number of messages in the outbox. Declaration public Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of messages in the outbox. | Improve this doc View source GetMaxAgeAsync() Gets a System.TimeSpan representing the time elapsed since the oldest message currently in the outbox was written. Declaration public async Task<TimeSpan> GetMaxAgeAsync() Returns Type Description System.Threading.Tasks.Task < System.TimeSpan > The age of the oldest message. | Improve this doc View source ReadAsync(Int32) Reads the specified number of messages from the outbox (according to the FIFO rule). The operation must be acknowledged for the messages to be removed. Declaration public async Task<IReadOnlyCollection<OutboxStoredMessage>> ReadAsync(int count) Parameters Type Name Description System.Int32 count The number of items to be dequeued. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < OutboxStoredMessage >> A System.Threading.Tasks.Task representing the result of the asynchronous operation. The task result contains the collection of OutboxStoredMessage . | Improve this doc View source RetryAsync(OutboxStoredMessage) Called when an error occurs producing the message to re-enqueue it and retry later on. Declaration public Task RetryAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage The message that was processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source RetryAsync(IEnumerable<OutboxStoredMessage>) Called when an error occurs producing the message to re-enqueue it and retry later on. Declaration public Task RetryAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages The messages that have been processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. Implements IOutboxReader"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.DbOutboxWriter.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.DbOutboxWriter.html",
    "title": "Class DbOutboxWriter | Silverback",
    "keywords": "Class DbOutboxWriter Stores the outbound messages into the database. Used by the OutboxProduceStrategy . Inheritance System.Object RepositoryBase < OutboxMessage > DbOutboxWriter Implements IOutboxWriter Inherited Members RepositoryBase<OutboxMessage>.DbContext RepositoryBase<OutboxMessage>.DbSet System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public class DbOutboxWriter : RepositoryBase<OutboxMessage>, IOutboxWriter Constructors | Improve this doc View source DbOutboxWriter(IDbContext) Initializes a new instance of the DbOutboxWriter class. Declaration public DbOutboxWriter(IDbContext dbContext) Parameters Type Name Description IDbContext dbContext The IDbContext to use as storage. Methods | Improve this doc View source CommitAsync() Called to commit the transaction, storing the pending messages to the outbox. Declaration public Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync() Called to rollback the transaction, preventing the pending messages to be stored in the outbox. Declaration public Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source WriteAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, String) Adds the message contained in the specified envelope to the outbox. Declaration public Task WriteAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String endpointName The name of the configured endpoint to produce to. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IOutboxWriter"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.html",
    "title": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox.Repositories | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Classes DbOutboxReader Exposes the methods to read from the outbound queue. Used by the IOutboxWorker . An IDbContext is used to read from a queue stored in a database table. DbOutboxWriter Stores the outbound messages into the database. Used by the OutboxProduceStrategy . InMemoryOutbox An outbound queue persisted in memory. Note that writing in the queue is thread-safe but reading is not. Implements both IOutboxWriter and IOutboxReader . Interfaces IOutboxReader Exposes the methods to read from the outbox. Used by the IOutboxWorker . IOutboxWriter Exposes the methods to write to the outbox. Used by the OutboxProduceStrategy ."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.InMemoryOutbox.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.InMemoryOutbox.html",
    "title": "Class InMemoryOutbox | Silverback",
    "keywords": "Class InMemoryOutbox An outbound queue persisted in memory. Note that writing in the queue is thread-safe but reading is not. Implements both IOutboxWriter and IOutboxReader . Inheritance System.Object TransactionalList < OutboxStoredMessage > InMemoryOutbox Implements IOutboxWriter IOutboxReader Inherited Members TransactionalList<OutboxStoredMessage>.CommittedItemsCount TransactionalList<OutboxStoredMessage>.Items TransactionalList<OutboxStoredMessage>.UncommittedItems TransactionalList<OutboxStoredMessage>.CommitAsync() TransactionalList<OutboxStoredMessage>.RollbackAsync() TransactionalList<OutboxStoredMessage>.AddAsync(OutboxStoredMessage) TransactionalList<OutboxStoredMessage>.RemoveAsync(OutboxStoredMessage) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public class InMemoryOutbox : TransactionalList<OutboxStoredMessage>, IOutboxWriter, IOutboxReader Constructors | Improve this doc View source InMemoryOutbox(TransactionalListSharedItems<OutboxStoredMessage>) Initializes a new instance of the InMemoryOutbox class. Declaration public InMemoryOutbox(TransactionalListSharedItems<OutboxStoredMessage> sharedItems) Parameters Type Name Description TransactionalListSharedItems < OutboxStoredMessage > sharedItems The messages shared between the instances of this repository. Methods | Improve this doc View source AcknowledgeAsync(OutboxStoredMessage) Called after the message has been successfully produced to remove it from the outbox. Declaration public Task AcknowledgeAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage The message that was processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source AcknowledgeAsync(IEnumerable<OutboxStoredMessage>) Called after the message has been successfully produced to remove it from the outbox. Declaration public Task AcknowledgeAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages The messages that have been processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source GetLengthAsync() Returns the total number of messages in the outbox. Declaration public Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of messages in the outbox. | Improve this doc View source GetMaxAgeAsync() Gets a System.TimeSpan representing the time elapsed since the oldest message currently in the outbox was written. Declaration public Task<TimeSpan> GetMaxAgeAsync() Returns Type Description System.Threading.Tasks.Task < System.TimeSpan > The age of the oldest message. | Improve this doc View source ReadAsync(Int32) Reads the specified number of messages from the outbox (according to the FIFO rule). The operation must be acknowledged for the messages to be removed. Declaration public Task<IReadOnlyCollection<OutboxStoredMessage>> ReadAsync(int count) Parameters Type Name Description System.Int32 count The number of items to be dequeued. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < OutboxStoredMessage >> A System.Threading.Tasks.Task representing the result of the asynchronous operation. The task result contains the collection of OutboxStoredMessage . | Improve this doc View source RetryAsync(OutboxStoredMessage) Called when an error occurs producing the message to re-enqueue it and retry later on. Declaration public Task RetryAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage The message that was processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source RetryAsync(IEnumerable<OutboxStoredMessage>) Called when an error occurs producing the message to re-enqueue it and retry later on. Declaration public Task RetryAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages The messages that have been processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source WriteAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, String) Adds the message contained in the specified envelope to the outbox. Declaration public Task WriteAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String endpointName The name of the configured endpoint to produce to. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IOutboxWriter IOutboxReader"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.IOutboxReader.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.IOutboxReader.html",
    "title": "Interface IOutboxReader | Silverback",
    "keywords": "Interface IOutboxReader Exposes the methods to read from the outbox. Used by the IOutboxWorker . Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public interface IOutboxReader Methods | Improve this doc View source AcknowledgeAsync(OutboxStoredMessage) Called after the message has been successfully produced to remove it from the outbox. Declaration Task AcknowledgeAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage The message that was processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source AcknowledgeAsync(IEnumerable<OutboxStoredMessage>) Called after the message has been successfully produced to remove it from the outbox. Declaration Task AcknowledgeAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages The messages that have been processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source GetLengthAsync() Returns the total number of messages in the outbox. Declaration Task<int> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of messages in the outbox. | Improve this doc View source GetMaxAgeAsync() Gets a System.TimeSpan representing the time elapsed since the oldest message currently in the outbox was written. Declaration Task<TimeSpan> GetMaxAgeAsync() Returns Type Description System.Threading.Tasks.Task < System.TimeSpan > The age of the oldest message. | Improve this doc View source ReadAsync(Int32) Reads the specified number of messages from the outbox (according to the FIFO rule). The operation must be acknowledged for the messages to be removed. Declaration Task<IReadOnlyCollection<OutboxStoredMessage>> ReadAsync(int count) Parameters Type Name Description System.Int32 count The number of items to be dequeued. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < OutboxStoredMessage >> A System.Threading.Tasks.Task representing the result of the asynchronous operation. The task result contains the collection of OutboxStoredMessage . | Improve this doc View source RetryAsync(OutboxStoredMessage) Called when an error occurs producing the message to re-enqueue it and retry later on. Declaration Task RetryAsync(OutboxStoredMessage outboxMessage) Parameters Type Name Description OutboxStoredMessage outboxMessage The message that was processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation. | Improve this doc View source RetryAsync(IEnumerable<OutboxStoredMessage>) Called when an error occurs producing the message to re-enqueue it and retry later on. Declaration Task RetryAsync(IEnumerable<OutboxStoredMessage> outboxMessages) Parameters Type Name Description System.Collections.Generic.IEnumerable < OutboxStoredMessage > outboxMessages The messages that have been processed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the result of the asynchronous operation."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.IOutboxWriter.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.IOutboxWriter.html",
    "title": "Interface IOutboxWriter | Silverback",
    "keywords": "Interface IOutboxWriter Exposes the methods to write to the outbox. Used by the OutboxProduceStrategy . Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories Assembly : Silverback.Integration.dll Syntax public interface IOutboxWriter Methods | Improve this doc View source CommitAsync() Called to commit the transaction, storing the pending messages to the outbox. Declaration Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync() Called to rollback the transaction, preventing the pending messages to be stored in the outbox. Declaration Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source WriteAsync(Object, Byte[], IReadOnlyCollection<MessageHeader>, String, String) Adds the message contained in the specified envelope to the outbox. Declaration Task WriteAsync(object message, byte[] messageBytes, IReadOnlyCollection<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Object message The message to be delivered. System.Byte [] messageBytes The actual serialized message to be delivered. System.Collections.Generic.IReadOnlyCollection < MessageHeader > headers The message headers. System.String endpointName The name of the configured endpoint to produce to. System.String actualEndpointName The actual endpoint to produce to. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.DbOutboxStoredMessage.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.DbOutboxStoredMessage.html",
    "title": "Class DbOutboxStoredMessage | Silverback",
    "keywords": "Class DbOutboxStoredMessage Extends the OutboxStoredMessage adding the specific information related to a message stored in the transactional outbox table. Inheritance System.Object OutboxStoredMessage DbOutboxStoredMessage Inherited Members OutboxStoredMessage.Content OutboxStoredMessage.Headers OutboxStoredMessage.EndpointName OutboxStoredMessage.ActualEndpointName OutboxStoredMessage.MessageType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model Assembly : Silverback.Integration.dll Syntax public class DbOutboxStoredMessage : OutboxStoredMessage Constructors | Improve this doc View source DbOutboxStoredMessage(Int32, Type, Byte[], IEnumerable<MessageHeader>, String, String) Initializes a new instance of the DbOutboxStoredMessage class. Declaration public DbOutboxStoredMessage(int id, Type messageType, byte[] content, IEnumerable<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Int32 id The primary key of the database record. System.Type messageType The type of the message. System.Byte [] content The message raw binary content (body). System.Collections.Generic.IEnumerable < MessageHeader > headers The message headers. System.String endpointName The name of the producer endpoint. System.String actualEndpointName The name of the actual target endpoint that was resolved for the message. Properties | Improve this doc View source Id Gets the value of the primary key of the related database record. Declaration public int Id { get; } Property Value Type Description System.Int32"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.html",
    "title": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model | Silverback",
    "keywords": "Namespace Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model Classes DbOutboxStoredMessage Extends the OutboxStoredMessage adding the specific information related to a message stored in the transactional outbox table. OutboxStoredMessage Encapsulates the information related to a message stored in the outbox."
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.OutboxStoredMessage.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model.OutboxStoredMessage.html",
    "title": "Class OutboxStoredMessage | Silverback",
    "keywords": "Class OutboxStoredMessage Encapsulates the information related to a message stored in the outbox. Inheritance System.Object OutboxStoredMessage DbOutboxStoredMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox.Repositories.Model Assembly : Silverback.Integration.dll Syntax public class OutboxStoredMessage Constructors | Improve this doc View source OutboxStoredMessage(Type, Byte[], IEnumerable<MessageHeader>, String, String) Initializes a new instance of the OutboxStoredMessage class. Declaration public OutboxStoredMessage(Type messageType, byte[] content, IEnumerable<MessageHeader> headers, string endpointName, string actualEndpointName) Parameters Type Name Description System.Type messageType The type of the message. System.Byte [] content The message raw binary content (body). System.Collections.Generic.IEnumerable < MessageHeader > headers The message headers. System.String endpointName The name of the producer endpoint. System.String actualEndpointName The name of the actual target endpoint that was resolved for the message. Properties | Improve this doc View source ActualEndpointName Gets the name of the actual target endpoint that was resolved for the message. Declaration public string ActualEndpointName { get; } Property Value Type Description System.String | Improve this doc View source Content Gets the message raw binary content (body). Declaration public byte[] Content { get; } Property Value Type Description System.Byte [] | Improve this doc View source EndpointName Gets the name of the producer endpoint. Declaration public string EndpointName { get; } Property Value Type Description System.String | Improve this doc View source Headers Gets the message headers. Declaration public IReadOnlyCollection<MessageHeader> Headers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < MessageHeader > | Improve this doc View source MessageType Gets the type of the message. Declaration public Type MessageType { get; } Property Value Type Description System.Type"
  },
  "api/Silverback.Messaging.Outbound.TransactionalOutbox.TransactionalOutboxBroker.html": {
    "href": "api/Silverback.Messaging.Outbound.TransactionalOutbox.TransactionalOutboxBroker.html",
    "title": "Class TransactionalOutboxBroker | Silverback",
    "keywords": "Class TransactionalOutboxBroker An IBroker implementation that is used by the OutboxProduceStrategy to write into the outbox. Inheritance System.Object Broker < IProducerEndpoint , IConsumerEndpoint > TransactionalOutboxBroker Implements IBroker System.IDisposable Inherited Members Broker<IProducerEndpoint, IConsumerEndpoint>.ProducerEndpointType Broker<IProducerEndpoint, IConsumerEndpoint>.ConsumerEndpointType Broker<IProducerEndpoint, IConsumerEndpoint>.Producers Broker<IProducerEndpoint, IConsumerEndpoint>.Consumers Broker<IProducerEndpoint, IConsumerEndpoint>.IsConnected Broker<IProducerEndpoint, IConsumerEndpoint>.GetProducer(IProducerEndpoint) Broker<IProducerEndpoint, IConsumerEndpoint>.GetProducer(String) Broker<IProducerEndpoint, IConsumerEndpoint>.AddConsumer(IConsumerEndpoint) Broker<IProducerEndpoint, IConsumerEndpoint>.ConnectAsync() Broker<IProducerEndpoint, IConsumerEndpoint>.DisconnectAsync() Broker<IProducerEndpoint, IConsumerEndpoint>.Dispose() Broker<IProducerEndpoint, IConsumerEndpoint>.InstantiateProducer(IProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Broker<IProducerEndpoint, IConsumerEndpoint>.InstantiateConsumer(IConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Broker<IProducerEndpoint, IConsumerEndpoint>.ConnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<IProducerEndpoint, IConsumerEndpoint>.DisconnectAsync(IReadOnlyCollection<IProducer>, IReadOnlyCollection<IConsumer>) Broker<IProducerEndpoint, IConsumerEndpoint>.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Outbound.TransactionalOutbox Assembly : Silverback.Integration.dll Syntax public class TransactionalOutboxBroker : Broker<IProducerEndpoint, IConsumerEndpoint>, IBroker, IDisposable Constructors | Improve this doc View source TransactionalOutboxBroker(IOutboxWriter, IServiceProvider) Initializes a new instance of the TransactionalOutboxBroker class. Declaration public TransactionalOutboxBroker(IOutboxWriter queueWriter, IServiceProvider serviceProvider) Parameters Type Name Description IOutboxWriter queueWriter The IOutboxWriter to be used to write to the queue. System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Methods | Improve this doc View source InstantiateConsumer(IConsumerEndpoint, IBrokerBehaviorsProvider<IConsumerBehavior>, IServiceProvider) Returns a new instance of IConsumer to subscribe to the specified endpoint. Declaration protected override IConsumer InstantiateConsumer(IConsumerEndpoint endpoint, IBrokerBehaviorsProvider<IConsumerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description IConsumerEndpoint endpoint IBrokerBehaviorsProvider < IConsumerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IConsumer The instantiated IConsumer . Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.IProducerEndpoint, Silverback.Messaging.IConsumerEndpoint>.InstantiateConsumer(Silverback.Messaging.IConsumerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IConsumerBehavior>, System.IServiceProvider) | Improve this doc View source InstantiateProducer(IProducerEndpoint, IBrokerBehaviorsProvider<IProducerBehavior>, IServiceProvider) Returns a new instance of IProducer to publish to the specified endpoint. The returned instance will be cached and reused for the same endpoint. Declaration protected override IProducer InstantiateProducer(IProducerEndpoint endpoint, IBrokerBehaviorsProvider<IProducerBehavior> behaviorsProvider, IServiceProvider serviceProvider) Parameters Type Name Description IProducerEndpoint endpoint IBrokerBehaviorsProvider < IProducerBehavior > behaviorsProvider The IBrokerBehaviorsProvider<TBehavior> . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the needed types or to be forwarded to the consumer. Returns Type Description IProducer The instantiated IProducer . Overrides Silverback.Messaging.Broker.Broker<Silverback.Messaging.IProducerEndpoint, Silverback.Messaging.IConsumerEndpoint>.InstantiateProducer(Silverback.Messaging.IProducerEndpoint, Silverback.Messaging.Broker.Behaviors.IBrokerBehaviorsProvider<Silverback.Messaging.Broker.Behaviors.IProducerBehavior>, System.IServiceProvider) Implements IBroker System.IDisposable"
  },
  "api/Silverback.Messaging.ProducerEndpoint.html": {
    "href": "api/Silverback.Messaging.ProducerEndpoint.html",
    "title": "Class ProducerEndpoint | Silverback",
    "keywords": "Class ProducerEndpoint Represents a message broker endpoint to produce to (such as a Kafka topic or RabbitMQ queue or exchange). Inheritance System.Object Endpoint ProducerEndpoint KafkaProducerEndpoint MqttProducerEndpoint RabbitProducerEndpoint Implements IProducerEndpoint IEndpoint Inherited Members Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.dll Syntax public abstract class ProducerEndpoint : Endpoint, IProducerEndpoint, IEndpoint Constructors | Improve this doc View source ProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, String>) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(Func<IOutboundEnvelope, IServiceProvider, string> nameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.IServiceProvider , System.String > nameFunction The function returning the endpoint name for the message being produced. | Improve this doc View source ProducerEndpoint(Func<IOutboundEnvelope, String>) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(Func<IOutboundEnvelope, string> nameFunction) Parameters Type Name Description System.Func < IOutboundEnvelope , System.String > nameFunction The function returning the endpoint name for the message being produced. | Improve this doc View source ProducerEndpoint(String) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(string name) Parameters Type Name Description System.String name The endpoint name. | Improve this doc View source ProducerEndpoint(String, Func<IOutboundEnvelope, String[]>) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(string nameFormat, Func<IOutboundEnvelope, string[]> argumentsFunction) Parameters Type Name Description System.String nameFormat The endpoint name format string that will be combined with the arguments returned by the argumentsFunction using a string.Format . System.Func < IOutboundEnvelope , System.String []> argumentsFunction The function returning the arguments to be used to format the string. | Improve this doc View source ProducerEndpoint(Type) Initializes a new instance of the ProducerEndpoint class. Declaration protected ProducerEndpoint(Type nameResolverType) Parameters Type Name Description System.Type nameResolverType The type of the IProducerEndpointNameResolver to be used to resolve the actual endpoint name. Properties | Improve this doc View source Chunk Gets or sets the message chunking settings. This option can be used to split large messages into smaller chunks. Declaration public ChunkSettings Chunk { get; set; } Property Value Type Description ChunkSettings | Improve this doc View source MessageEnrichers Gets or sets the collection of IOutboundMessageEnricher to be used to enrich the outbound message. Declaration public ICollection<IOutboundMessageEnricher> MessageEnrichers { get; set; } Property Value Type Description System.Collections.Generic.ICollection < IOutboundMessageEnricher > | Improve this doc View source Strategy Gets or sets the strategy to be used to produce the messages. If no strategy is specified, the messages will be sent to the message broker directly. Declaration public IProduceStrategy Strategy { get; set; } Property Value Type Description IProduceStrategy Methods | Improve this doc View source BaseEquals(Endpoint) Determines whether the specified Endpoint is equal to the current Endpoint . Declaration protected override bool BaseEquals(Endpoint other) Parameters Type Name Description Endpoint other The object to compare with the current object. Returns Type Description System.Boolean Returns a value indicating whether the other object is equal to the current object. Overrides Endpoint.BaseEquals(Endpoint) | Improve this doc View source GetActualName(IOutboundEnvelope, IServiceProvider) Gets the actual target endpoint name for the message being produced. Declaration public string GetActualName(IOutboundEnvelope envelope, IServiceProvider serviceProvider) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message being produced. System.IServiceProvider serviceProvider The System.IServiceProvider in the current scope. Returns Type Description System.String The actual name of the endpoint to be produced to. | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides Endpoint.Validate() Explicit Interface Implementations | Improve this doc View source IProducerEndpoint.MessageEnrichers Gets the collection of IOutboundMessageEnricher to be used to enrich the outbound message. Declaration IReadOnlyCollection<IOutboundMessageEnricher> IProducerEndpoint.MessageEnrichers { get; } Returns Type Description System.Collections.Generic.IReadOnlyCollection < IOutboundMessageEnricher > Implements IProducerEndpoint IEndpoint"
  },
  "api/Silverback.Messaging.Publishing.BehaviorsProvider.html": {
    "href": "api/Silverback.Messaging.Publishing.BehaviorsProvider.html",
    "title": "Class BehaviorsProvider | Silverback",
    "keywords": "Class BehaviorsProvider Provides the System.Collections.Generic.Stack<T> of IBehavior to be used in the IPublisher pipeline. Inheritance System.Object BehaviorsProvider Implements IBehaviorsProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.dll Syntax public class BehaviorsProvider : IBehaviorsProvider Constructors | Improve this doc View source BehaviorsProvider(IServiceProvider) Initializes a new instance of the BehaviorsProvider class. Declaration public BehaviorsProvider(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Methods | Improve this doc View source CreateStack() Creates a new System.Collections.Generic.Stack<T> of IBehavior to be used in the IPublisher pipeline. Declaration public Stack<IBehavior> CreateStack() Returns Type Description System.Collections.Generic.Stack < IBehavior > The ready-to-use System.Collections.Generic.Stack<T> of IBehavior . Implements IBehaviorsProvider"
  },
  "api/Silverback.Messaging.Publishing.CommandPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.CommandPublisher.html",
    "title": "Class CommandPublisher | Silverback",
    "keywords": "Class CommandPublisher Publishes the messages implementing ICommand or ICommand<TResult> . Inheritance System.Object CommandPublisher Implements ICommandPublisher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public class CommandPublisher : ICommandPublisher Constructors | Improve this doc View source CommandPublisher(IPublisher) Initializes a new instance of the CommandPublisher class. Declaration public CommandPublisher(IPublisher publisher) Parameters Type Name Description IPublisher publisher The IPublisher to be wrapped. Methods | Improve this doc View source Execute(ICommand) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public void Execute(ICommand commandMessage) Parameters Type Name Description ICommand commandMessage The command to be executed. | Improve this doc View source Execute(ICommand, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public void Execute(ICommand commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. | Improve this doc View source Execute<TResult>(ICommand<TResult>) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public TResult Execute<TResult>(ICommand<TResult> commandMessage) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. Returns Type Description TResult The command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source Execute<TResult>(ICommand<TResult>, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public TResult Execute<TResult>(ICommand<TResult> commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description TResult The command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source ExecuteAsync(ICommand) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public Task ExecuteAsync(ICommand commandMessage) Parameters Type Name Description ICommand commandMessage The command to be executed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExecuteAsync(ICommand, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public Task ExecuteAsync(ICommand commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExecuteAsync<TResult>(ICommand<TResult>) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public async Task<TResult> ExecuteAsync<TResult>(ICommand<TResult> commandMessage) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source ExecuteAsync<TResult>(ICommand<TResult>, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public async Task<TResult> ExecuteAsync<TResult>(ICommand<TResult> commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. Implements ICommandPublisher"
  },
  "api/Silverback.Messaging.Publishing.EventPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.EventPublisher.html",
    "title": "Class EventPublisher | Silverback",
    "keywords": "Class EventPublisher Publishes the messages implementing IEvent . Inheritance System.Object EventPublisher Implements IEventPublisher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public class EventPublisher : IEventPublisher Constructors | Improve this doc View source EventPublisher(IPublisher) Initializes a new instance of the EventPublisher class. Declaration public EventPublisher(IPublisher publisher) Parameters Type Name Description IPublisher publisher The IPublisher to be wrapped. Methods | Improve this doc View source Publish(IEvent) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public void Publish(IEvent eventMessage) Parameters Type Name Description IEvent eventMessage The event to be published. | Improve this doc View source Publish(IEvent, Boolean) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public void Publish(IEvent eventMessage, bool throwIfUnhandled) Parameters Type Name Description IEvent eventMessage The event to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. | Improve this doc View source PublishAsync(IEvent) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public Task PublishAsync(IEvent eventMessage) Parameters Type Name Description IEvent eventMessage The event to be executed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source PublishAsync(IEvent, Boolean) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public Task PublishAsync(IEvent eventMessage, bool throwIfUnhandled) Parameters Type Name Description IEvent eventMessage The event to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IEventPublisher"
  },
  "api/Silverback.Messaging.Publishing.html": {
    "href": "api/Silverback.Messaging.Publishing.html",
    "title": "Namespace Silverback.Messaging.Publishing | Silverback",
    "keywords": "Namespace Silverback.Messaging.Publishing Classes BehaviorsProvider Provides the System.Collections.Generic.Stack<T> of IBehavior to be used in the IPublisher pipeline. CommandPublisher Publishes the messages implementing ICommand or ICommand<TResult> . EventPublisher Publishes the messages implementing IEvent . Publisher Publishes the messages to the internal bus. This is the actual mediator that forwards the messages being published to their subscribers. QueryPublisher Publishes the messages implementing IQuery<TResult> . UnhandledMessageException The exception that is thrown when some published messages aren't handled by any registered subscriber. Interfaces IBehavior Can be used to build a custom pipeline, plugging some functionality into the IPublisher . IBehaviorsProvider Provides the System.Collections.Generic.Stack<T> of IBehavior to be used in the IPublisher pipeline. ICommandPublisher Publishes the messages implementing ICommand or ICommand<TResult> . IEventPublisher Publishes the messages implementing IEvent . IPublisher Publishes the messages to the internal bus. This is the actual mediator that forwards the messages being published to their subscribers. IQueryPublisher Publishes the messages implementing IQuery<TResult> . Delegates MessageHandler The delegate representing the Handle method of the IBehavior ."
  },
  "api/Silverback.Messaging.Publishing.IBehavior.html": {
    "href": "api/Silverback.Messaging.Publishing.IBehavior.html",
    "title": "Interface IBehavior | Silverback",
    "keywords": "Interface IBehavior Can be used to build a custom pipeline, plugging some functionality into the IPublisher . Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.dll Syntax public interface IBehavior Methods | Improve this doc View source HandleAsync(Object, MessageHandler) Process, handles or transforms the messages being published to the internal bus. Declaration Task<IReadOnlyCollection<object>> HandleAsync(object message, MessageHandler next) Parameters Type Name Description System.Object message The message being published. MessageHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < System.Object >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the result values (if any)."
  },
  "api/Silverback.Messaging.Publishing.IBehaviorsProvider.html": {
    "href": "api/Silverback.Messaging.Publishing.IBehaviorsProvider.html",
    "title": "Interface IBehaviorsProvider | Silverback",
    "keywords": "Interface IBehaviorsProvider Provides the System.Collections.Generic.Stack<T> of IBehavior to be used in the IPublisher pipeline. Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.dll Syntax public interface IBehaviorsProvider Methods | Improve this doc View source CreateStack() Creates a new System.Collections.Generic.Stack<T> of IBehavior to be used in the IPublisher pipeline. Declaration Stack<IBehavior> CreateStack() Returns Type Description System.Collections.Generic.Stack < IBehavior > The ready-to-use System.Collections.Generic.Stack<T> of IBehavior ."
  },
  "api/Silverback.Messaging.Publishing.ICommandPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.ICommandPublisher.html",
    "title": "Interface ICommandPublisher | Silverback",
    "keywords": "Interface ICommandPublisher Publishes the messages implementing ICommand or ICommand<TResult> . Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public interface ICommandPublisher Methods | Improve this doc View source Execute(ICommand) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Execute(ICommand commandMessage) Parameters Type Name Description ICommand commandMessage The command to be executed. | Improve this doc View source Execute(ICommand, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Execute(ICommand commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. | Improve this doc View source Execute<TResult>(ICommand<TResult>) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration TResult Execute<TResult>(ICommand<TResult> commandMessage) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. Returns Type Description TResult The command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source Execute<TResult>(ICommand<TResult>, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration TResult Execute<TResult>(ICommand<TResult> commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description TResult The command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source ExecuteAsync(ICommand) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task ExecuteAsync(ICommand commandMessage) Parameters Type Name Description ICommand commandMessage The command to be executed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExecuteAsync(ICommand, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task ExecuteAsync(ICommand commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source ExecuteAsync<TResult>(ICommand<TResult>) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<TResult> ExecuteAsync<TResult>(ICommand<TResult> commandMessage) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source ExecuteAsync<TResult>(ICommand<TResult>, Boolean) Executes the specified command publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<TResult> ExecuteAsync<TResult>(ICommand<TResult> commandMessage, bool throwIfUnhandled) Parameters Type Name Description ICommand <TResult> commandMessage The command to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the command result. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers."
  },
  "api/Silverback.Messaging.Publishing.IEventPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.IEventPublisher.html",
    "title": "Interface IEventPublisher | Silverback",
    "keywords": "Interface IEventPublisher Publishes the messages implementing IEvent . Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public interface IEventPublisher Methods | Improve this doc View source Publish(IEvent) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Publish(IEvent eventMessage) Parameters Type Name Description IEvent eventMessage The event to be published. | Improve this doc View source Publish(IEvent, Boolean) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Publish(IEvent eventMessage, bool throwIfUnhandled) Parameters Type Name Description IEvent eventMessage The event to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. | Improve this doc View source PublishAsync(IEvent) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task PublishAsync(IEvent eventMessage) Parameters Type Name Description IEvent eventMessage The event to be executed. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source PublishAsync(IEvent, Boolean) Publishes the specified event to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task PublishAsync(IEvent eventMessage, bool throwIfUnhandled) Parameters Type Name Description IEvent eventMessage The event to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Publishing.IPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.IPublisher.html",
    "title": "Interface IPublisher | Silverback",
    "keywords": "Interface IPublisher Publishes the messages to the internal bus. This is the actual mediator that forwards the messages being published to their subscribers. Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.dll Syntax public interface IPublisher Methods | Improve this doc View source Publish(Object) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Publish(object message) Parameters Type Name Description System.Object message The message to be published. | Improve this doc View source Publish(Object, Boolean) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration void Publish(object message, bool throwIfUnhandled) Parameters Type Name Description System.Object message The message to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. | Improve this doc View source Publish<TResult>(Object) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration IReadOnlyCollection<TResult> Publish<TResult>(object message) Parameters Type Name Description System.Object message The message to be published. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A collection of TResult , since multiple subscribers could handle the message and return a value. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source Publish<TResult>(Object, Boolean) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration IReadOnlyCollection<TResult> Publish<TResult>(object message, bool throwIfUnhandled) Parameters Type Name Description System.Object message The message to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A collection of TResult , since multiple subscribers could handle the message and return a value. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source PublishAsync(Object) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task PublishAsync(object message) Parameters Type Name Description System.Object message The message to be published. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source PublishAsync(Object, Boolean) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task PublishAsync(object message, bool throwIfUnhandled) Parameters Type Name Description System.Object message The message to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source PublishAsync<TResult>(Object) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<IReadOnlyCollection<TResult>> PublishAsync<TResult>(object message) Parameters Type Name Description System.Object message The message to be published. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection <TResult>> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a collection of TResult , since multiple subscribers could handle the message and return a value. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source PublishAsync<TResult>(Object, Boolean) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<IReadOnlyCollection<TResult>> PublishAsync<TResult>(object message, bool throwIfUnhandled) Parameters Type Name Description System.Object message The message to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection <TResult>> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a collection of TResult , since multiple subscribers could handle the message and return a value. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers."
  },
  "api/Silverback.Messaging.Publishing.IQueryPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.IQueryPublisher.html",
    "title": "Interface IQueryPublisher | Silverback",
    "keywords": "Interface IQueryPublisher Publishes the messages implementing IQuery<TResult> . Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public interface IQueryPublisher Methods | Improve this doc View source Execute<TResult>(IQuery<TResult>) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration TResult Execute<TResult>(IQuery<TResult> queryMessage) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. Returns Type Description TResult The query result. Type Parameters Name Description TResult The type of the expected query result. | Improve this doc View source Execute<TResult>(IQuery<TResult>, Boolean) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration TResult Execute<TResult>(IQuery<TResult> queryMessage, bool throwIfUnhandled) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description TResult The query result. Type Parameters Name Description TResult The type of the expected query result. | Improve this doc View source ExecuteAsync<TResult>(IQuery<TResult>) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<TResult> ExecuteAsync<TResult>(IQuery<TResult> queryMessage) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the query result. Type Parameters Name Description TResult The type of the expected query result. | Improve this doc View source ExecuteAsync<TResult>(IQuery<TResult>, Boolean) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration Task<TResult> ExecuteAsync<TResult>(IQuery<TResult> queryMessage, bool throwIfUnhandled) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the query result. Type Parameters Name Description TResult The type of the expected query result."
  },
  "api/Silverback.Messaging.Publishing.MessageHandler.html": {
    "href": "api/Silverback.Messaging.Publishing.MessageHandler.html",
    "title": "Delegate MessageHandler | Silverback",
    "keywords": "Delegate MessageHandler The delegate representing the Handle method of the IBehavior . Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.dll Syntax public delegate Task<IReadOnlyCollection<object>> MessageHandler(object message); Parameters Type Name Description System.Object message The message being published. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection < System.Object >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the actual messages to be published."
  },
  "api/Silverback.Messaging.Publishing.Publisher.html": {
    "href": "api/Silverback.Messaging.Publishing.Publisher.html",
    "title": "Class Publisher | Silverback",
    "keywords": "Class Publisher Publishes the messages to the internal bus. This is the actual mediator that forwards the messages being published to their subscribers. Inheritance System.Object Publisher Implements IPublisher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.dll Syntax public class Publisher : IPublisher Constructors | Improve this doc View source Publisher(IBehaviorsProvider, IServiceProvider, ISilverbackLogger<Publisher>) Initializes a new instance of the Publisher class. Declaration public Publisher(IBehaviorsProvider behaviorsProvider, IServiceProvider serviceProvider, ISilverbackLogger<Publisher> logger) Parameters Type Name Description IBehaviorsProvider behaviorsProvider The IBehaviorsProvider . System.IServiceProvider serviceProvider The System.IServiceProvider instance to be used to resolve the subscribers. ISilverbackLogger < Publisher > logger The ISilverbackLogger . Methods | Improve this doc View source Publish(Object) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public void Publish(object message) Parameters Type Name Description System.Object message The message to be published. | Improve this doc View source Publish(Object, Boolean) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public void Publish(object message, bool throwIfUnhandled) Parameters Type Name Description System.Object message The message to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. | Improve this doc View source Publish<TResult>(Object) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public IReadOnlyCollection<TResult> Publish<TResult>(object message) Parameters Type Name Description System.Object message The message to be published. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A collection of TResult , since multiple subscribers could handle the message and return a value. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source Publish<TResult>(Object, Boolean) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public IReadOnlyCollection<TResult> Publish<TResult>(object message, bool throwIfUnhandled) Parameters Type Name Description System.Object message The message to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Collections.Generic.IReadOnlyCollection <TResult> A collection of TResult , since multiple subscribers could handle the message and return a value. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source PublishAsync(Object) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public Task PublishAsync(object message) Parameters Type Name Description System.Object message The message to be published. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source PublishAsync(Object, Boolean) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public Task PublishAsync(object message, bool throwIfUnhandled) Parameters Type Name Description System.Object message The message to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source PublishAsync<TResult>(Object) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public Task<IReadOnlyCollection<TResult>> PublishAsync<TResult>(object message) Parameters Type Name Description System.Object message The message to be published. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection <TResult>> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a collection of TResult , since multiple subscribers could handle the message and return a value. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. | Improve this doc View source PublishAsync<TResult>(Object, Boolean) Publishes the specified message to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public async Task<IReadOnlyCollection<TResult>> PublishAsync<TResult>(object message, bool throwIfUnhandled) Parameters Type Name Description System.Object message The message to be published. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IReadOnlyCollection <TResult>> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a collection of TResult , since multiple subscribers could handle the message and return a value. Type Parameters Name Description TResult The type of the result that is expected to be returned by the subscribers. Implements IPublisher"
  },
  "api/Silverback.Messaging.Publishing.QueryPublisher.html": {
    "href": "api/Silverback.Messaging.Publishing.QueryPublisher.html",
    "title": "Class QueryPublisher | Silverback",
    "keywords": "Class QueryPublisher Publishes the messages implementing IQuery<TResult> . Inheritance System.Object QueryPublisher Implements IQueryPublisher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.Model.dll Syntax public class QueryPublisher : IQueryPublisher Constructors | Improve this doc View source QueryPublisher(IPublisher) Initializes a new instance of the QueryPublisher class. Declaration public QueryPublisher(IPublisher publisher) Parameters Type Name Description IPublisher publisher The IPublisher to be wrapped. Methods | Improve this doc View source Execute<TResult>(IQuery<TResult>) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public TResult Execute<TResult>(IQuery<TResult> queryMessage) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. Returns Type Description TResult The query result. Type Parameters Name Description TResult The type of the expected query result. | Improve this doc View source Execute<TResult>(IQuery<TResult>, Boolean) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the method will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public TResult Execute<TResult>(IQuery<TResult> queryMessage, bool throwIfUnhandled) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description TResult The query result. Type Parameters Name Description TResult The type of the expected query result. | Improve this doc View source ExecuteAsync<TResult>(IQuery<TResult>) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public async Task<TResult> ExecuteAsync<TResult>(IQuery<TResult> queryMessage) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the query result. Type Parameters Name Description TResult The type of the expected query result. | Improve this doc View source ExecuteAsync<TResult>(IQuery<TResult>, Boolean) Executes the specified query publishing it to the internal bus. The message will be forwarded to its subscribers and the System.Threading.Tasks.Task will not complete until all subscribers have processed it (unless using Silverback.Integration to produce and consume the message through a message broker). Declaration public async Task<TResult> ExecuteAsync<TResult>(IQuery<TResult> queryMessage, bool throwIfUnhandled) Parameters Type Name Description IQuery <TResult> queryMessage The query to be executed. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task <TResult> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the query result. Type Parameters Name Description TResult The type of the expected query result. Implements IQueryPublisher"
  },
  "api/Silverback.Messaging.Publishing.UnhandledMessageException.html": {
    "href": "api/Silverback.Messaging.Publishing.UnhandledMessageException.html",
    "title": "Class UnhandledMessageException | Silverback",
    "keywords": "Class UnhandledMessageException The exception that is thrown when some published messages aren't handled by any registered subscriber. Inheritance System.Object System.Exception SilverbackException UnhandledMessageException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Publishing Assembly : Silverback.Core.dll Syntax [Serializable] public class UnhandledMessageException : SilverbackException, ISerializable Constructors | Improve this doc View source UnhandledMessageException() Initializes a new instance of the UnhandledMessageException class. Declaration public UnhandledMessageException() | Improve this doc View source UnhandledMessageException(Object) Initializes a new instance of the UnhandledMessageException class with the specified message. Declaration public UnhandledMessageException(object unhandledMessage) Parameters Type Name Description System.Object unhandledMessage The message that wasn't handled. | Improve this doc View source UnhandledMessageException(SerializationInfo, StreamingContext) Initializes a new instance of the UnhandledMessageException class with the serialized data. Declaration protected UnhandledMessageException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source UnhandledMessageException(String) Initializes a new instance of the UnhandledMessageException class with the specified message. Declaration public UnhandledMessageException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source UnhandledMessageException(String, Exception) Initializes a new instance of the UnhandledMessageException class with the specified message and inner exception. Declaration public UnhandledMessageException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Properties | Improve this doc View source UnhandledMessage Gets the message that wasn't handled. Declaration public object UnhandledMessage { get; } Property Value Type Description System.Object Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.RabbitConsumerEndpoint.html": {
    "href": "api/Silverback.Messaging.RabbitConsumerEndpoint.html",
    "title": "Class RabbitConsumerEndpoint | Silverback",
    "keywords": "Class RabbitConsumerEndpoint Represents a queue or exchange to consume from. Inheritance System.Object Endpoint ConsumerEndpoint RabbitConsumerEndpoint RabbitExchangeConsumerEndpoint RabbitQueueConsumerEndpoint Implements IConsumerEndpoint IEndpoint Inherited Members ConsumerEndpoint.ErrorPolicy ConsumerEndpoint.ExactlyOnceStrategy ConsumerEndpoint.Batch ConsumerEndpoint.Sequence ConsumerEndpoint.NullMessageHandlingStrategy ConsumerEndpoint.ThrowIfUnhandled ConsumerEndpoint.GetUniqueConsumerGroupName() Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.RabbitMQ.dll Syntax public abstract class RabbitConsumerEndpoint : ConsumerEndpoint, IConsumerEndpoint, IEndpoint Constructors | Improve this doc View source RabbitConsumerEndpoint(String) Initializes a new instance of the RabbitConsumerEndpoint class. Declaration protected RabbitConsumerEndpoint(string name) Parameters Type Name Description System.String name The name of the queue or exchange. Properties | Improve this doc View source AcknowledgeEach Gets or sets the number of message to be processed before sending the acknowledgment to the server. The most reliable level is 1 but it reduces throughput. Declaration public int AcknowledgeEach { get; set; } Property Value Type Description System.Int32 | Improve this doc View source Connection Gets or sets the RabbitMQ connection settings. Declaration public RabbitConnectionConfig Connection { get; set; } Property Value Type Description RabbitConnectionConfig | Improve this doc View source PrefetchCount Gets or sets the QoS prefetch count parameter for the consumer. Declaration public ushort PrefetchCount { get; set; } Property Value Type Description System.UInt16 | Improve this doc View source PrefetchSize Gets or sets the QoS prefetch size parameter for the consumer. Declaration public uint PrefetchSize { get; set; } Property Value Type Description System.UInt32 | Improve this doc View source Queue Gets or sets the queue configuration. Declaration public RabbitQueueConfig Queue { get; set; } Property Value Type Description RabbitQueueConfig Methods | Improve this doc View source BaseEquals(Endpoint) Determines whether the specified Endpoint is equal to the current Endpoint . Declaration protected override bool BaseEquals(Endpoint other) Parameters Type Name Description Endpoint other The object to compare with the current object. Returns Type Description System.Boolean Returns a value indicating whether the other object is equal to the current object. Overrides Endpoint.BaseEquals(Endpoint) | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides ConsumerEndpoint.Validate() Implements IConsumerEndpoint IEndpoint"
  },
  "api/Silverback.Messaging.RabbitExchangeConsumerEndpoint.html": {
    "href": "api/Silverback.Messaging.RabbitExchangeConsumerEndpoint.html",
    "title": "Class RabbitExchangeConsumerEndpoint | Silverback",
    "keywords": "Class RabbitExchangeConsumerEndpoint Represents an exchange to consume from. Inheritance System.Object Endpoint ConsumerEndpoint RabbitConsumerEndpoint RabbitExchangeConsumerEndpoint Implements IConsumerEndpoint IEndpoint System.IEquatable < RabbitExchangeConsumerEndpoint > Inherited Members RabbitConsumerEndpoint.Connection RabbitConsumerEndpoint.Queue RabbitConsumerEndpoint.AcknowledgeEach RabbitConsumerEndpoint.PrefetchSize RabbitConsumerEndpoint.PrefetchCount RabbitConsumerEndpoint.BaseEquals(Endpoint) ConsumerEndpoint.ErrorPolicy ConsumerEndpoint.ExactlyOnceStrategy ConsumerEndpoint.Batch ConsumerEndpoint.Sequence ConsumerEndpoint.NullMessageHandlingStrategy ConsumerEndpoint.ThrowIfUnhandled Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitExchangeConsumerEndpoint : RabbitConsumerEndpoint, IConsumerEndpoint, IEndpoint, IEquatable<RabbitExchangeConsumerEndpoint> Constructors | Improve this doc View source RabbitExchangeConsumerEndpoint(String) Initializes a new instance of the RabbitExchangeConsumerEndpoint class. Declaration public RabbitExchangeConsumerEndpoint(string name) Parameters Type Name Description System.String name The name of the exchange. Properties | Improve this doc View source Exchange Gets or sets the exchange configuration. Declaration public RabbitExchangeConfig Exchange { get; set; } Property Value Type Description RabbitExchangeConfig | Improve this doc View source QueueName Gets or sets the desired queue name. If null or empty a random name will be generated by RabbitMQ. Declaration public string QueueName { get; set; } Property Value Type Description System.String | Improve this doc View source RoutingKey Gets or sets the routing key (aka binding key) to be used to bind with the exchange. Declaration public string RoutingKey { get; set; } Property Value Type Description System.String Methods | Improve this doc View source Equals(RabbitExchangeConsumerEndpoint) Declaration public bool Equals(RabbitExchangeConsumerEndpoint other) Parameters Type Name Description RabbitExchangeConsumerEndpoint other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source GetUniqueConsumerGroupName() Gets a unique name for the consumer group (e.g. Kafka's consumer group id). This value (joint with the endpoint name) will be used for example to ensure the exactly-once delivery. Declaration public override string GetUniqueConsumerGroupName() Returns Type Description System.String Returns the unique name for the consumer group. Overrides ConsumerEndpoint.GetUniqueConsumerGroupName() Remarks It's not enough to use the endpoint name, since the same topic could be consumed by multiple consumer groups within the same process and/or using the same database to store the information needed to ensure the exactly-once delivery. | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides RabbitConsumerEndpoint.Validate() Implements IConsumerEndpoint IEndpoint System.IEquatable<T>"
  },
  "api/Silverback.Messaging.RabbitExchangeProducerEndpoint.html": {
    "href": "api/Silverback.Messaging.RabbitExchangeProducerEndpoint.html",
    "title": "Class RabbitExchangeProducerEndpoint | Silverback",
    "keywords": "Class RabbitExchangeProducerEndpoint Represents an exchange to produce to. Inheritance System.Object Endpoint ProducerEndpoint RabbitProducerEndpoint RabbitExchangeProducerEndpoint Implements IProducerEndpoint IEndpoint System.IEquatable < RabbitExchangeProducerEndpoint > Inherited Members RabbitProducerEndpoint.Connection RabbitProducerEndpoint.ConfirmationTimeout RabbitProducerEndpoint.BaseEquals(Endpoint) ProducerEndpoint.Chunk ProducerEndpoint.Strategy ProducerEndpoint.MessageEnrichers ProducerEndpoint.IProducerEndpoint.MessageEnrichers ProducerEndpoint.GetActualName(IOutboundEnvelope, IServiceProvider) Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitExchangeProducerEndpoint : RabbitProducerEndpoint, IProducerEndpoint, IEndpoint, IEquatable<RabbitExchangeProducerEndpoint> Constructors | Improve this doc View source RabbitExchangeProducerEndpoint(String) Initializes a new instance of the RabbitExchangeProducerEndpoint class. Declaration public RabbitExchangeProducerEndpoint(string name) Parameters Type Name Description System.String name The name of the exchange. Properties | Improve this doc View source Exchange Gets or sets the exchange configuration. Declaration public RabbitExchangeConfig Exchange { get; set; } Property Value Type Description RabbitExchangeConfig Methods | Improve this doc View source Equals(RabbitExchangeProducerEndpoint) Declaration public bool Equals(RabbitExchangeProducerEndpoint other) Parameters Type Name Description RabbitExchangeProducerEndpoint other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides RabbitProducerEndpoint.Validate() Implements IProducerEndpoint IEndpoint System.IEquatable<T>"
  },
  "api/Silverback.Messaging.RabbitProducerEndpoint.html": {
    "href": "api/Silverback.Messaging.RabbitProducerEndpoint.html",
    "title": "Class RabbitProducerEndpoint | Silverback",
    "keywords": "Class RabbitProducerEndpoint Represents a queue or exchange to produce to. Inheritance System.Object Endpoint ProducerEndpoint RabbitProducerEndpoint RabbitExchangeProducerEndpoint RabbitQueueProducerEndpoint Implements IProducerEndpoint IEndpoint Inherited Members ProducerEndpoint.Chunk ProducerEndpoint.Strategy ProducerEndpoint.MessageEnrichers ProducerEndpoint.IProducerEndpoint.MessageEnrichers ProducerEndpoint.GetActualName(IOutboundEnvelope, IServiceProvider) Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.RabbitMQ.dll Syntax public abstract class RabbitProducerEndpoint : ProducerEndpoint, IProducerEndpoint, IEndpoint Constructors | Improve this doc View source RabbitProducerEndpoint(String) Initializes a new instance of the RabbitProducerEndpoint class. Declaration protected RabbitProducerEndpoint(string name) Parameters Type Name Description System.String name The name of the queue or exchange. Properties | Improve this doc View source ConfirmationTimeout Gets or sets the maximum amount of time to wait for the message produce to be acknowledge before considering it failed. Set it to null to proceed without waiting for a positive or negative acknowledgment. The default is a quite conservative 5 seconds. Declaration public TimeSpan? ConfirmationTimeout { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source Connection Gets or sets the RabbitMQ connection settings. Declaration public RabbitConnectionConfig Connection { get; set; } Property Value Type Description RabbitConnectionConfig Methods | Improve this doc View source BaseEquals(Endpoint) Determines whether the specified Endpoint is equal to the current Endpoint . Declaration protected override bool BaseEquals(Endpoint other) Parameters Type Name Description Endpoint other The object to compare with the current object. Returns Type Description System.Boolean Returns a value indicating whether the other object is equal to the current object. Overrides ProducerEndpoint.BaseEquals(Endpoint) | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides ProducerEndpoint.Validate() Implements IProducerEndpoint IEndpoint"
  },
  "api/Silverback.Messaging.RabbitQueueConsumerEndpoint.html": {
    "href": "api/Silverback.Messaging.RabbitQueueConsumerEndpoint.html",
    "title": "Class RabbitQueueConsumerEndpoint | Silverback",
    "keywords": "Class RabbitQueueConsumerEndpoint Represents a queue to consume from. Inheritance System.Object Endpoint ConsumerEndpoint RabbitConsumerEndpoint RabbitQueueConsumerEndpoint Implements IConsumerEndpoint IEndpoint System.IEquatable < RabbitQueueConsumerEndpoint > Inherited Members RabbitConsumerEndpoint.Connection RabbitConsumerEndpoint.Queue RabbitConsumerEndpoint.AcknowledgeEach RabbitConsumerEndpoint.PrefetchSize RabbitConsumerEndpoint.PrefetchCount RabbitConsumerEndpoint.Validate() RabbitConsumerEndpoint.BaseEquals(Endpoint) ConsumerEndpoint.ErrorPolicy ConsumerEndpoint.ExactlyOnceStrategy ConsumerEndpoint.Batch ConsumerEndpoint.Sequence ConsumerEndpoint.NullMessageHandlingStrategy ConsumerEndpoint.ThrowIfUnhandled Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitQueueConsumerEndpoint : RabbitConsumerEndpoint, IConsumerEndpoint, IEndpoint, IEquatable<RabbitQueueConsumerEndpoint> Constructors | Improve this doc View source RabbitQueueConsumerEndpoint(String) Initializes a new instance of the RabbitQueueConsumerEndpoint class. Declaration public RabbitQueueConsumerEndpoint(string name) Parameters Type Name Description System.String name The name of the queue. Methods | Improve this doc View source Equals(RabbitQueueConsumerEndpoint) Declaration public bool Equals(RabbitQueueConsumerEndpoint other) Parameters Type Name Description RabbitQueueConsumerEndpoint other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source GetUniqueConsumerGroupName() Gets a unique name for the consumer group (e.g. Kafka's consumer group id). This value (joint with the endpoint name) will be used for example to ensure the exactly-once delivery. Declaration public override string GetUniqueConsumerGroupName() Returns Type Description System.String Returns the unique name for the consumer group. Overrides ConsumerEndpoint.GetUniqueConsumerGroupName() Remarks It's not enough to use the endpoint name, since the same topic could be consumed by multiple consumer groups within the same process and/or using the same database to store the information needed to ensure the exactly-once delivery. Implements IConsumerEndpoint IEndpoint System.IEquatable<T>"
  },
  "api/Silverback.Messaging.RabbitQueueProducerEndpoint.html": {
    "href": "api/Silverback.Messaging.RabbitQueueProducerEndpoint.html",
    "title": "Class RabbitQueueProducerEndpoint | Silverback",
    "keywords": "Class RabbitQueueProducerEndpoint Represents a queue to produce to. Inheritance System.Object Endpoint ProducerEndpoint RabbitProducerEndpoint RabbitQueueProducerEndpoint Implements IProducerEndpoint IEndpoint System.IEquatable < RabbitQueueProducerEndpoint > Inherited Members RabbitProducerEndpoint.Connection RabbitProducerEndpoint.ConfirmationTimeout RabbitProducerEndpoint.BaseEquals(Endpoint) ProducerEndpoint.Chunk ProducerEndpoint.Strategy ProducerEndpoint.MessageEnrichers ProducerEndpoint.IProducerEndpoint.MessageEnrichers ProducerEndpoint.GetActualName(IOutboundEnvelope, IServiceProvider) Endpoint.DefaultSerializer Endpoint.DisplayName Endpoint.Name Endpoint.FriendlyName Endpoint.Serializer Endpoint.Encryption Endpoint.MessageValidationMode System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging Assembly : Silverback.Integration.RabbitMQ.dll Syntax public sealed class RabbitQueueProducerEndpoint : RabbitProducerEndpoint, IProducerEndpoint, IEndpoint, IEquatable<RabbitQueueProducerEndpoint> Constructors | Improve this doc View source RabbitQueueProducerEndpoint(String) Initializes a new instance of the RabbitQueueProducerEndpoint class. Declaration public RabbitQueueProducerEndpoint(string name) Parameters Type Name Description System.String name The name of the queue. Properties | Improve this doc View source Queue Gets or sets the queue configuration. Declaration public RabbitQueueConfig Queue { get; set; } Property Value Type Description RabbitQueueConfig Methods | Improve this doc View source Equals(RabbitQueueProducerEndpoint) Declaration public bool Equals(RabbitQueueProducerEndpoint other) Parameters Type Name Description RabbitQueueProducerEndpoint other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Validates the endpoint configuration and throws an EndpointConfigurationException if not valid. Declaration public override void Validate() Overrides RabbitProducerEndpoint.Validate() Implements IProducerEndpoint IEndpoint System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Sequences.Batch.BatchSequence.html": {
    "href": "api/Silverback.Messaging.Sequences.Batch.BatchSequence.html",
    "title": "Class BatchSequence | Silverback",
    "keywords": "Class BatchSequence Represent an arbitrary sequence of messages created to consume unrelated messages in batch (see BatchSettings ). Inheritance System.Object SequenceBase < IInboundEnvelope > Sequence BatchSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IInboundEnvelope>.SequenceId SequenceBase<IInboundEnvelope>.IsPending SequenceBase<IInboundEnvelope>.IsAborted SequenceBase<IInboundEnvelope>.IsBeingConsumed SequenceBase<IInboundEnvelope>.Sequences SequenceBase<IInboundEnvelope>.Context SequenceBase<IInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IInboundEnvelope>.ProcessingCompletedTask SequenceBase<IInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IInboundEnvelope>.StreamProvider SequenceBase<IInboundEnvelope>.Activity SequenceBase<IInboundEnvelope>.ParentSequence SequenceBase<IInboundEnvelope>.AbortException SequenceBase<IInboundEnvelope>.Length SequenceBase<IInboundEnvelope>.TotalLength SequenceBase<IInboundEnvelope>.IsNew SequenceBase<IInboundEnvelope>.IsCompleting SequenceBase<IInboundEnvelope>.IsComplete SequenceBase<IInboundEnvelope>.AbortReason SequenceBase<IInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IInboundEnvelope>.Dispose() SequenceBase<IInboundEnvelope>.AddCoreAsync(IInboundEnvelope, ISequence, Boolean) SequenceBase<IInboundEnvelope>.IsLastMessage(IInboundEnvelope) SequenceBase<IInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IInboundEnvelope>.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Batch Assembly : Silverback.Integration.dll Syntax public class BatchSequence : Sequence, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source BatchSequence(String, ConsumerPipelineContext) Initializes a new instance of the BatchSequence class. Declaration public BatchSequence(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. Methods | Improve this doc View source OnTimeoutElapsedAsync() Called when the timout is elapsed. In this special case the sequence is completed instead of aborted. Declaration protected override Task OnTimeoutElapsedAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides Silverback.Messaging.Sequences.SequenceBase<Silverback.Messaging.Messages.IInboundEnvelope>.OnTimeoutElapsedAsync() Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.Batch.BatchSequenceReader.html": {
    "href": "api/Silverback.Messaging.Sequences.Batch.BatchSequenceReader.html",
    "title": "Class BatchSequenceReader | Silverback",
    "keywords": "Class BatchSequenceReader Enables the batch processing creating a BatchSequence containing the configured number of messages. Inheritance System.Object SequenceReaderBase BatchSequenceReader Implements ISequenceReader ISorted Inherited Members SequenceReaderBase.HandlesRawMessages SequenceReaderBase.GetSequenceAsync(ConsumerPipelineContext) SequenceReaderBase.CreateNewSequenceAsync(String, ConsumerPipelineContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Batch Assembly : Silverback.Integration.dll Syntax public sealed class BatchSequenceReader : SequenceReaderBase, ISequenceReader, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source CanHandleAsync(ConsumerPipelineContext) Checks whether this reader can and must handle the message being processed in the specified context. Declaration public override Task<bool> CanHandleAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether this reader can and must handle the message. Overrides SequenceReaderBase.CanHandleAsync(ConsumerPipelineContext) | Improve this doc View source CreateNewSequenceCore(String, ConsumerPipelineContext) Creates the new sequence object. Declaration protected override ISequence CreateNewSequenceCore(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description ISequence The new sequence. Overrides SequenceReaderBase.CreateNewSequenceCore(String, ConsumerPipelineContext) | Improve this doc View source GetExistingSequenceAsync(ConsumerPipelineContext, String) Retrieves the existing incomplete sequence from the store. Declaration protected override Task<ISequence> GetExistingSequenceAsync(ConsumerPipelineContext context, string sequenceId) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . System.String sequenceId The sequence identifier. Returns Type Description System.Threading.Tasks.Task < ISequence > The ISequence or null if not found. Overrides SequenceReaderBase.GetExistingSequenceAsync(ConsumerPipelineContext, String) | Improve this doc View source GetSequenceIdAsync(ConsumerPipelineContext) Gets the sequence identifier extracted from the current envelope. Declaration protected override Task<string> GetSequenceIdAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.String > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the recognized sequence identifier, or null . Overrides SequenceReaderBase.GetSequenceIdAsync(ConsumerPipelineContext) | Improve this doc View source IsNewSequenceAsync(String, ConsumerPipelineContext) Determines if the current message correspond with the beginning of a new sequence. Declaration protected override async Task<bool> IsNewSequenceAsync(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains true if a new sequence is starting; otherwise false . Overrides SequenceReaderBase.IsNewSequenceAsync(String, ConsumerPipelineContext) Implements ISequenceReader ISorted"
  },
  "api/Silverback.Messaging.Sequences.Batch.BatchSettings.html": {
    "href": "api/Silverback.Messaging.Sequences.Batch.BatchSettings.html",
    "title": "Class BatchSettings | Silverback",
    "keywords": "Class BatchSettings The batch consuming settings. Inheritance System.Object BatchSettings Implements System.IEquatable < BatchSettings > IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Batch Assembly : Silverback.Integration.dll Syntax public sealed class BatchSettings : IEquatable<BatchSettings>, IValidatableEndpointSettings Properties | Improve this doc View source MaxWaitTime Gets or sets the maximum amount of time to wait for the batch to be filled. After this time the batch will be completed even if the specified Size is not reached. Declaration public TimeSpan? MaxWaitTime { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > | Improve this doc View source Size Gets or sets the number of messages to be processed in batch. Setting this property to a value greater than 1 enables batch consuming. Declaration public int Size { get; set; } Property Value Type Description System.Int32 Methods | Improve this doc View source Equals(BatchSettings) Declaration public bool Equals(BatchSettings other) Parameters Type Name Description BatchSettings other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public void Validate() Implements System.IEquatable<T> IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Sequences.Batch.html": {
    "href": "api/Silverback.Messaging.Sequences.Batch.html",
    "title": "Namespace Silverback.Messaging.Sequences.Batch | Silverback",
    "keywords": "Namespace Silverback.Messaging.Sequences.Batch Classes BatchSequence Represent an arbitrary sequence of messages created to consume unrelated messages in batch (see BatchSettings ). BatchSequenceReader Enables the batch processing creating a BatchSequence containing the configured number of messages. BatchSettings The batch consuming settings."
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkSequence.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkSequence.html",
    "title": "Class ChunkSequence | Silverback",
    "keywords": "Class ChunkSequence Represents a sequence of chunks that belong to the same message. Inheritance System.Object SequenceBase < IRawInboundEnvelope > RawSequence ChunkSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IRawInboundEnvelope>.SequenceId SequenceBase<IRawInboundEnvelope>.IsPending SequenceBase<IRawInboundEnvelope>.IsAborted SequenceBase<IRawInboundEnvelope>.IsBeingConsumed SequenceBase<IRawInboundEnvelope>.Sequences SequenceBase<IRawInboundEnvelope>.Context SequenceBase<IRawInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IRawInboundEnvelope>.ProcessingCompletedTask SequenceBase<IRawInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IRawInboundEnvelope>.StreamProvider SequenceBase<IRawInboundEnvelope>.Activity SequenceBase<IRawInboundEnvelope>.ParentSequence SequenceBase<IRawInboundEnvelope>.AbortException SequenceBase<IRawInboundEnvelope>.Length SequenceBase<IRawInboundEnvelope>.TotalLength SequenceBase<IRawInboundEnvelope>.IsNew SequenceBase<IRawInboundEnvelope>.IsCompleting SequenceBase<IRawInboundEnvelope>.IsComplete SequenceBase<IRawInboundEnvelope>.AbortReason SequenceBase<IRawInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IRawInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IRawInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IRawInboundEnvelope>.Dispose() SequenceBase<IRawInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IRawInboundEnvelope>.Dispose(Boolean) SequenceBase<IRawInboundEnvelope>.OnTimeoutElapsedAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public class ChunkSequence : RawSequence, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source ChunkSequence(String, Nullable<Int32>, ConsumerPipelineContext) Initializes a new instance of the ChunkSequence class. Declaration public ChunkSequence(string sequenceId, int? totalLength, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. System.Nullable < System.Int32 > totalLength The expected total length of the sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. Methods | Improve this doc View source AddCoreAsync(IRawInboundEnvelope, ISequence, Boolean) Adds the message to the sequence. Declaration protected override Task<int> AddCoreAsync(IRawInboundEnvelope envelope, ISequence sequence, bool throwIfUnhandled) Parameters Type Name Description IRawInboundEnvelope envelope ISequence sequence The sequence to be added to the sequence. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of streams that have been pushed. Overrides Silverback.Messaging.Sequences.SequenceBase<Silverback.Messaging.Messages.IRawInboundEnvelope>.AddCoreAsync(Silverback.Messaging.Messages.IRawInboundEnvelope, Silverback.Messaging.Sequences.ISequence, System.Boolean) | Improve this doc View source IsLastMessage(IRawInboundEnvelope) Implements the logic to recognize the last message in the sequence without relying on the TotalCount property. Declaration protected override bool IsLastMessage(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope Returns Type Description System.Boolean true if it is the last message, otherwise false . Overrides Silverback.Messaging.Sequences.SequenceBase<Silverback.Messaging.Messages.IRawInboundEnvelope>.IsLastMessage(Silverback.Messaging.Messages.IRawInboundEnvelope) Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkSequenceReader.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkSequenceReader.html",
    "title": "Class ChunkSequenceReader | Silverback",
    "keywords": "Class ChunkSequenceReader Creates a ChunkSequence containing all the chunks of the original message. Inheritance System.Object SequenceReaderBase ChunkSequenceReader Implements ISequenceReader Inherited Members SequenceReaderBase.HandlesRawMessages SequenceReaderBase.GetSequenceAsync(ConsumerPipelineContext) SequenceReaderBase.GetSequenceIdAsync(ConsumerPipelineContext) SequenceReaderBase.CreateNewSequenceAsync(String, ConsumerPipelineContext) SequenceReaderBase.GetExistingSequenceAsync(ConsumerPipelineContext, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public class ChunkSequenceReader : SequenceReaderBase, ISequenceReader Constructors | Improve this doc View source ChunkSequenceReader() Initializes a new instance of the ChunkSequenceReader class. Declaration public ChunkSequenceReader() Methods | Improve this doc View source CanHandleAsync(ConsumerPipelineContext) Checks whether this reader can and must handle the message being processed in the specified context. Declaration public override Task<bool> CanHandleAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether this reader can and must handle the message. Overrides SequenceReaderBase.CanHandleAsync(ConsumerPipelineContext) | Improve this doc View source CreateNewSequenceCore(String, ConsumerPipelineContext) Creates the new sequence object. Declaration protected override ISequence CreateNewSequenceCore(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description ISequence The new sequence. Overrides SequenceReaderBase.CreateNewSequenceCore(String, ConsumerPipelineContext) | Improve this doc View source IsNewSequenceAsync(String, ConsumerPipelineContext) Determines if the current message correspond with the beginning of a new sequence. Declaration protected override Task<bool> IsNewSequenceAsync(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains true if a new sequence is starting; otherwise false . Overrides SequenceReaderBase.IsNewSequenceAsync(String, ConsumerPipelineContext) Implements ISequenceReader"
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkSequenceWriter.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkSequenceWriter.html",
    "title": "Class ChunkSequenceWriter | Silverback",
    "keywords": "Class ChunkSequenceWriter Creates the chunks sequence according to the ChunkSettings . Inheritance System.Object ChunkSequenceWriter Implements ISequenceWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public class ChunkSequenceWriter : ISequenceWriter Methods | Improve this doc View source CanHandle(IOutboundEnvelope) Checks whether this writer can and must handle the specified message. Declaration public bool CanHandle(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be handled. Returns Type Description System.Boolean A value indicating whether this writer can and must handle the message. | Improve this doc View source ProcessMessageAsync(IOutboundEnvelope) Sets the headers used to match the message with the sequence it belongs to. If needed it can also split a single message into multiple messages. Declaration public async IAsyncEnumerable<IOutboundEnvelope> ProcessMessageAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be handled. Returns Type Description System.Collections.Generic.IAsyncEnumerable < IOutboundEnvelope > An System.Collections.Generic.IAsyncEnumerable<T> with the envelopes containing the messages to be produced. Implements ISequenceWriter"
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkSettings.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkSettings.html",
    "title": "Class ChunkSettings | Silverback",
    "keywords": "Class ChunkSettings The chunking settings. To enable chunking just set the Size property to the desired (maximum) chunk size. Inheritance System.Object ChunkSettings Implements System.IEquatable < ChunkSettings > IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public sealed class ChunkSettings : IEquatable<ChunkSettings>, IValidatableEndpointSettings Properties | Improve this doc View source AlwaysAddHeaders Gets or sets a value indicating whether the x-chunk-index and related headers have to be added to the produced message in any case, even if its size doesn't exceed the single chunk size. The default is true . This setting is ignored if chunking is disabled ( Size is not set). Declaration public bool AlwaysAddHeaders { get; set; } Property Value Type Description System.Boolean | Improve this doc View source Size Gets or sets the size in bytes of each chunk. The default is System.Int32.MaxValue , meaning that chunking is disabled. Declaration public int Size { get; set; } Property Value Type Description System.Int32 Methods | Improve this doc View source Equals(ChunkSettings) Declaration public bool Equals(ChunkSettings other) Parameters Type Name Description ChunkSettings other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public void Validate() Implements System.IEquatable<T> IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Sequences.Chunking.ChunkStream.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.ChunkStream.html",
    "title": "Class ChunkStream | Silverback",
    "keywords": "Class ChunkStream The System.IO.Stream implementation used to read the chunked messages. This stream is used by the ChunkSequenceReader and it is asynchronously pushed with the chunks being consumed. Inheritance System.Object System.MarshalByRefObject System.IO.Stream ChunkStream Implements System.IAsyncDisposable System.IDisposable Inherited Members System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.FlushAsync(System.Threading.CancellationToken) System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences.Chunking Assembly : Silverback.Integration.dll Syntax public sealed class ChunkStream : Stream, IAsyncDisposable, IDisposable Constructors | Improve this doc View source ChunkStream(IMessageStreamEnumerable<IRawInboundEnvelope>) Initializes a new instance of the ChunkStream class. Declaration public ChunkStream(IMessageStreamEnumerable<IRawInboundEnvelope> source) Parameters Type Name Description IMessageStreamEnumerable < IRawInboundEnvelope > source The chunks composing this stream. Properties | Improve this doc View source CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead | Improve this doc View source CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek | Improve this doc View source CanTimeout Declaration public override bool CanTimeout { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanTimeout | Improve this doc View source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite | Improve this doc View source Length Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length | Improve this doc View source Position Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods | Improve this doc View source Close() Declaration public override void Close() Overrides System.IO.Stream.Close() | Improve this doc View source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.Stream.Dispose(System.Boolean) | Improve this doc View source DisposeAsync() Declaration public override async ValueTask DisposeAsync() Returns Type Description System.Threading.Tasks.ValueTask Overrides System.IO.Stream.DisposeAsync() | Improve this doc View source Flush() Declaration public override void Flush() Overrides System.IO.Stream.Flush() | Improve this doc View source Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Returns Type Description System.Int32 Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) | Improve this doc View source ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override async Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 > Overrides System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) | Improve this doc View source Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset System.IO.SeekOrigin origin Returns Type Description System.Int64 Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) | Improve this doc View source SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value Overrides System.IO.Stream.SetLength(System.Int64) | Improve this doc View source Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) Implements System.IAsyncDisposable System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.Chunking.html": {
    "href": "api/Silverback.Messaging.Sequences.Chunking.html",
    "title": "Namespace Silverback.Messaging.Sequences.Chunking | Silverback",
    "keywords": "Namespace Silverback.Messaging.Sequences.Chunking Classes ChunkSequence Represents a sequence of chunks that belong to the same message. ChunkSequenceReader Creates a ChunkSequence containing all the chunks of the original message. ChunkSequenceWriter Creates the chunks sequence according to the ChunkSettings . ChunkSettings The chunking settings. To enable chunking just set the Size property to the desired (maximum) chunk size. ChunkStream The System.IO.Stream implementation used to read the chunked messages. This stream is used by the ChunkSequenceReader and it is asynchronously pushed with the chunks being consumed."
  },
  "api/Silverback.Messaging.Sequences.html": {
    "href": "api/Silverback.Messaging.Sequences.html",
    "title": "Namespace Silverback.Messaging.Sequences | Silverback",
    "keywords": "Namespace Silverback.Messaging.Sequences Classes IncompleteSequence Represent an incomplete sequence (missing the first message) and is used to signal the pipeline to ignore the message. RawSequence Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. RawSequencerConsumerBehavior Uses the available implementations of ISequenceReader to assign the incoming message to the right sequence. Sequence Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. SequenceBase<TEnvelope> Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. SequenceException The exception that is thrown when a sequence cannot be properly recreated (e.g. because of bad ordering or similar). SequencerConsumerBehavior Uses the available implementations of ISequenceReader to assign the incoming message to the right sequence. SequencerConsumerBehaviorBase Uses the available implementations of ISequenceReader to assign the incoming message to the right sequence. SequenceReaderBase The base class for the ISequenceReader implementations. It encapsulates the logic to deal with the ISequenceStore . SequencerProducerBehavior Uses the available implementations of ISequenceWriter to set the proper headers and split the published message or messages set to create the sequences. SequenceSettings The sequence handling settings. Interfaces ISequence Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. ISequenceReader Can recognize a message that belongs to a sequence and match it with the proper ISequence instance. ISequenceStore The temporary store for the sequences being consumed. ISequenceWriter Can set the headers used to match the message with the sequence it belongs to. If needed it can also split a single message into multiple messages. Enums SequenceAbortReason The possible reasons for a sequence to be aborted."
  },
  "api/Silverback.Messaging.Sequences.IncompleteSequence.html": {
    "href": "api/Silverback.Messaging.Sequences.IncompleteSequence.html",
    "title": "Class IncompleteSequence | Silverback",
    "keywords": "Class IncompleteSequence Represent an incomplete sequence (missing the first message) and is used to signal the pipeline to ignore the message. Inheritance System.Object SequenceBase < IRawInboundEnvelope > RawSequence IncompleteSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IRawInboundEnvelope>.SequenceId SequenceBase<IRawInboundEnvelope>.IsPending SequenceBase<IRawInboundEnvelope>.IsAborted SequenceBase<IRawInboundEnvelope>.IsBeingConsumed SequenceBase<IRawInboundEnvelope>.Sequences SequenceBase<IRawInboundEnvelope>.Context SequenceBase<IRawInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IRawInboundEnvelope>.ProcessingCompletedTask SequenceBase<IRawInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IRawInboundEnvelope>.StreamProvider SequenceBase<IRawInboundEnvelope>.Activity SequenceBase<IRawInboundEnvelope>.ParentSequence SequenceBase<IRawInboundEnvelope>.AbortException SequenceBase<IRawInboundEnvelope>.Length SequenceBase<IRawInboundEnvelope>.TotalLength SequenceBase<IRawInboundEnvelope>.IsNew SequenceBase<IRawInboundEnvelope>.IsCompleting SequenceBase<IRawInboundEnvelope>.IsComplete SequenceBase<IRawInboundEnvelope>.AbortReason SequenceBase<IRawInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IRawInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IRawInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IRawInboundEnvelope>.Dispose() SequenceBase<IRawInboundEnvelope>.AddCoreAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.IsLastMessage(IRawInboundEnvelope) SequenceBase<IRawInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IRawInboundEnvelope>.Dispose(Boolean) SequenceBase<IRawInboundEnvelope>.OnTimeoutElapsedAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public class IncompleteSequence : RawSequence, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source IncompleteSequence(String, ConsumerPipelineContext) Initializes a new instance of the IncompleteSequence class. Declaration public IncompleteSequence(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.ISequence.html": {
    "href": "api/Silverback.Messaging.Sequences.ISequence.html",
    "title": "Interface ISequence | Silverback",
    "keywords": "Interface ISequence Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. Inherited Members System.IDisposable.Dispose() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public interface ISequence : IDisposable Properties | Improve this doc View source AbortException Gets the exception that caused the abort, if any. Declaration Exception AbortException { get; } Property Value Type Description System.Exception Remarks This property is filled only when AbortReason is Error . | Improve this doc View source AbortReason Gets the reason of the abort. Declaration SequenceAbortReason AbortReason { get; } Property Value Type Description SequenceAbortReason | Improve this doc View source Context Gets the ConsumerPipelineContext related to the processing of this sequence (usually the context of the first message that initiated the sequence). Declaration ConsumerPipelineContext Context { get; } Property Value Type Description ConsumerPipelineContext | Improve this doc View source IsAborted Gets a value indicating whether the sequence processing has been aborted and no further message will be pushed. Declaration bool IsAborted { get; } Property Value Type Description System.Boolean | Improve this doc View source IsBeingConsumed Gets a value indicating whether the sequence is being consumed. This value is set to true as soon as CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) is called and the output IMessageStreamEnumerable<TMessage> is created. Declaration bool IsBeingConsumed { get; } Property Value Type Description System.Boolean | Improve this doc View source IsComplete Gets a value indicating whether all messages belonging to the sequence have been pushed and processed. Declaration bool IsComplete { get; } Property Value Type Description System.Boolean | Improve this doc View source IsCompleting Gets a value indicating whether all messages belonging to the sequence have been pushed and the last message is currently being processed. Declaration bool IsCompleting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsNew Gets a value indicating whether the first message in the sequence was consumed and this instance was just created. Declaration bool IsNew { get; } Property Value Type Description System.Boolean | Improve this doc View source IsPending Gets a value indicating whether the sequence is incomplete and awaiting for new messages to be pushed. Declaration bool IsPending { get; } Property Value Type Description System.Boolean | Improve this doc View source Length Gets the length of the sequence so far. Declaration int Length { get; } Property Value Type Description System.Int32 | Improve this doc View source ParentSequence Gets the ISequence that contain this sequence (e.g. the ChunkSequence whose aggregated message is added to a BatchSequence . Declaration ISequence ParentSequence { get; } Property Value Type Description ISequence | Improve this doc View source SequenceId Gets the identifier that is used to match the consumed messages with their belonging sequence. Declaration string SequenceId { get; } Property Value Type Description System.String | Improve this doc View source Sequences Gets the ISequence that were added to this sequence (e.g. the ChunkSequence whose aggregated message is added to a BatchSequence . Declaration IReadOnlyCollection<ISequence> Sequences { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < ISequence > | Improve this doc View source StreamProvider Gets the IMessageStreamProvider that will be pushed with the messages belonging to the sequence. Declaration IMessageStreamProvider StreamProvider { get; } Property Value Type Description IMessageStreamProvider | Improve this doc View source TotalLength Gets the declared total length of the sequence, if known. Declaration int? TotalLength { get; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this doc View source AbortAsync(SequenceAbortReason, Exception) Aborts the sequence processing. Used for example to signal that an exception occurred or the enumeration returned prematurely. Declaration Task AbortAsync(SequenceAbortReason reason, Exception exception = null) Parameters Type Name Description SequenceAbortReason reason The abort reason. System.Exception exception The exception that caused the abort, if an exception was thrown. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source AddAsync(IRawInboundEnvelope, ISequence, Boolean) Adds the message to the sequence. Declaration Task<int> AddAsync(IRawInboundEnvelope envelope, ISequence sequence, bool throwIfUnhandled = true) Parameters Type Name Description IRawInboundEnvelope envelope The envelope to be added to the sequence. ISequence sequence The sequence to be added to the sequence. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of streams that have been pushed. | Improve this doc View source CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) Creates a IMessageStreamEnumerable<TMessage> that will be pushed with the messages belonging to the sequence. Declaration IMessageStreamEnumerable<TMessage> CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IMessageFilter > filters The filters to be applied. Returns Type Description IMessageStreamEnumerable <TMessage> The IMessageStreamEnumerable<TMessage> . Type Parameters Name Description TMessage The type of the messages to be streamed. | Improve this doc View source GetBrokerMessageIdentifiers() Gets the identifiers of the messages belonging to the sequence. Declaration IReadOnlyList<IBrokerMessageIdentifier> GetBrokerMessageIdentifiers() Returns Type Description System.Collections.Generic.IReadOnlyList < IBrokerMessageIdentifier > The list of identifiers."
  },
  "api/Silverback.Messaging.Sequences.ISequenceReader.html": {
    "href": "api/Silverback.Messaging.Sequences.ISequenceReader.html",
    "title": "Interface ISequenceReader | Silverback",
    "keywords": "Interface ISequenceReader Can recognize a message that belongs to a sequence and match it with the proper ISequence instance. Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public interface ISequenceReader Properties | Improve this doc View source HandlesRawMessages Gets a value indicating whether this reader handles the raw messages, before they are being deserialized, decrypted, etc. Declaration bool HandlesRawMessages { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source CanHandleAsync(ConsumerPipelineContext) Checks whether this reader can and must handle the message being processed in the specified context. Declaration Task<bool> CanHandleAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether this reader can and must handle the message. | Improve this doc View source GetSequenceAsync(ConsumerPipelineContext) Returns the ISequence related to the message being processed. Declaration Task<ISequence> GetSequenceAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < ISequence > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the ISequence ."
  },
  "api/Silverback.Messaging.Sequences.ISequenceStore.html": {
    "href": "api/Silverback.Messaging.Sequences.ISequenceStore.html",
    "title": "Interface ISequenceStore | Silverback",
    "keywords": "Interface ISequenceStore The temporary store for the sequences being consumed. Inherited Members System.Collections.Generic.IReadOnlyCollection<Silverback.Messaging.Sequences.ISequence>.Count System.Collections.Generic.IEnumerable<Silverback.Messaging.Sequences.ISequence>.GetEnumerator() System.IDisposable.Dispose() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public interface ISequenceStore : IReadOnlyCollection<ISequence>, IEnumerable<ISequence>, IEnumerable, IDisposable Methods | Improve this doc View source AddAsync<TSequence>(TSequence) Adds the specified sequence to the store. Declaration Task<TSequence> AddAsync<TSequence>(TSequence sequence) where TSequence : class, ISequence Parameters Type Name Description TSequence sequence The sequence to be added. Returns Type Description System.Threading.Tasks.Task <TSequence> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the ISequence instance. Type Parameters Name Description TSequence The type of the sequence to be added. | Improve this doc View source GetAsync<TSequence>(String, Boolean) Gets the sequence with the specified id. Declaration Task<TSequence> GetAsync<TSequence>(string sequenceId, bool matchPrefix = false) where TSequence : class, ISequence Parameters Type Name Description System.String sequenceId The sequence identifier. System.Boolean matchPrefix Enables sequence id prefix matching (String.StartsWith). Returns Type Description System.Threading.Tasks.Task <TSequence> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the ISequence instance. Type Parameters Name Description TSequence The type of the sequence to be retrieved. | Improve this doc View source GetPendingSequences(Boolean) Returns the pending sequences currently in the store. Declaration IReadOnlyCollection<ISequence> GetPendingSequences(bool includeUnbounded = false) Parameters Type Name Description System.Boolean includeUnbounded A value indicating whether the Silverback.Messaging.Sequences.Unbounded.UnboundedSequence instances have to be returned as well. Returns Type Description System.Collections.Generic.IReadOnlyCollection < ISequence > The collection of sequences. | Improve this doc View source RemoveAsync(String) Removes the sequence with the specified id. Declaration Task RemoveAsync(string sequenceId) Parameters Type Name Description System.String sequenceId The sequence identifier. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Sequences.ISequenceWriter.html": {
    "href": "api/Silverback.Messaging.Sequences.ISequenceWriter.html",
    "title": "Interface ISequenceWriter | Silverback",
    "keywords": "Interface ISequenceWriter Can set the headers used to match the message with the sequence it belongs to. If needed it can also split a single message into multiple messages. Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public interface ISequenceWriter Methods | Improve this doc View source CanHandle(IOutboundEnvelope) Checks whether this writer can and must handle the specified message. Declaration bool CanHandle(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be handled. Returns Type Description System.Boolean A value indicating whether this writer can and must handle the message. | Improve this doc View source ProcessMessageAsync(IOutboundEnvelope) Sets the headers used to match the message with the sequence it belongs to. If needed it can also split a single message into multiple messages. Declaration IAsyncEnumerable<IOutboundEnvelope> ProcessMessageAsync(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The envelope containing the message to be handled. Returns Type Description System.Collections.Generic.IAsyncEnumerable < IOutboundEnvelope > An System.Collections.Generic.IAsyncEnumerable<T> with the envelopes containing the messages to be produced."
  },
  "api/Silverback.Messaging.Sequences.RawSequence.html": {
    "href": "api/Silverback.Messaging.Sequences.RawSequence.html",
    "title": "Class RawSequence | Silverback",
    "keywords": "Class RawSequence Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. Inheritance System.Object SequenceBase < IRawInboundEnvelope > RawSequence ChunkSequence IncompleteSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IRawInboundEnvelope>.SequenceId SequenceBase<IRawInboundEnvelope>.IsPending SequenceBase<IRawInboundEnvelope>.IsAborted SequenceBase<IRawInboundEnvelope>.IsBeingConsumed SequenceBase<IRawInboundEnvelope>.Sequences SequenceBase<IRawInboundEnvelope>.Context SequenceBase<IRawInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IRawInboundEnvelope>.ProcessingCompletedTask SequenceBase<IRawInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IRawInboundEnvelope>.StreamProvider SequenceBase<IRawInboundEnvelope>.Activity SequenceBase<IRawInboundEnvelope>.ParentSequence SequenceBase<IRawInboundEnvelope>.AbortException SequenceBase<IRawInboundEnvelope>.Length SequenceBase<IRawInboundEnvelope>.TotalLength SequenceBase<IRawInboundEnvelope>.IsNew SequenceBase<IRawInboundEnvelope>.IsCompleting SequenceBase<IRawInboundEnvelope>.IsComplete SequenceBase<IRawInboundEnvelope>.AbortReason SequenceBase<IRawInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IRawInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IRawInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IRawInboundEnvelope>.Dispose() SequenceBase<IRawInboundEnvelope>.AddCoreAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IRawInboundEnvelope>.IsLastMessage(IRawInboundEnvelope) SequenceBase<IRawInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IRawInboundEnvelope>.Dispose(Boolean) SequenceBase<IRawInboundEnvelope>.OnTimeoutElapsedAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class RawSequence : SequenceBase<IRawInboundEnvelope>, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source RawSequence(String, ConsumerPipelineContext, Boolean, Nullable<TimeSpan>, IMessageStreamProvider) Initializes a new instance of the RawSequence class. Declaration protected RawSequence(string sequenceId, ConsumerPipelineContext context, bool enforceTimeout = true, TimeSpan? timeout = null, IMessageStreamProvider streamProvider = null) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. System.Boolean enforceTimeout A value indicating whether the timeout has to be enforced. System.Nullable < System.TimeSpan > timeout The timeout to be applied. If not specified the value of Endpoint.Sequence.Timeout will be used. IMessageStreamProvider streamProvider The IMessageStreamProvider to be pushed. A new one will be created if not provided. Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.RawSequencerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Sequences.RawSequencerConsumerBehavior.html",
    "title": "Class RawSequencerConsumerBehavior | Silverback",
    "keywords": "Class RawSequencerConsumerBehavior Uses the available implementations of ISequenceReader to assign the incoming message to the right sequence. Inheritance System.Object SequencerConsumerBehaviorBase RawSequencerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members SequencerConsumerBehaviorBase.HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public class RawSequencerConsumerBehavior : SequencerConsumerBehaviorBase, IConsumerBehavior, IBrokerBehavior, ISorted Remarks A sequence is a set of messages that are handled as a single unit of work. A sequence could be used to group all chunks belonging to the same source message, all messages belonging to the same data set or to implement batch processing. Constructors | Improve this doc View source RawSequencerConsumerBehavior(IEnumerable<ISequenceReader>, ISilverbackLogger<RawSequencerConsumerBehavior>) Initializes a new instance of the RawSequencerConsumerBehavior class. Declaration public RawSequencerConsumerBehavior(IEnumerable<ISequenceReader> sequenceReaders, ISilverbackLogger<RawSequencerConsumerBehavior> logger) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISequenceReader > sequenceReaders The ISequenceReader implementations to be used. ISilverbackLogger < RawSequencerConsumerBehavior > logger The ISilverbackLogger . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public override int SortIndex { get; } Property Value Type Description System.Int32 Overrides SequencerConsumerBehaviorBase.SortIndex Methods | Improve this doc View source AwaitOtherBehaviorIfNeededAsync(ISequence) When overridden in a derived class awaits for the sequence to be processed by the other twin behavior. This is used to have the RawSequencerConsumerBehavior wait for the processing by the SequencerConsumerBehavior and it's needed to be able to properly determine the sequence end in the case where a ChunkSequence is added into another sequence (e.g. BatchSequence). Declaration protected override async Task AwaitOtherBehaviorIfNeededAsync(ISequence sequence) Parameters Type Name Description ISequence sequence The current sequence. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides SequencerConsumerBehaviorBase.AwaitOtherBehaviorIfNeededAsync(ISequence) | Improve this doc View source PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Forwards the new sequence to the next behavior in the pipeline. Declaration protected override Task PublishSequenceAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides SequencerConsumerBehaviorBase.PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Sequences.Sequence.html": {
    "href": "api/Silverback.Messaging.Sequences.Sequence.html",
    "title": "Class Sequence | Silverback",
    "keywords": "Class Sequence Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. Inheritance System.Object SequenceBase < IInboundEnvelope > Sequence BatchSequence Implements ISequence System.IDisposable Inherited Members SequenceBase<IInboundEnvelope>.SequenceId SequenceBase<IInboundEnvelope>.IsPending SequenceBase<IInboundEnvelope>.IsAborted SequenceBase<IInboundEnvelope>.IsBeingConsumed SequenceBase<IInboundEnvelope>.Sequences SequenceBase<IInboundEnvelope>.Context SequenceBase<IInboundEnvelope>.SequencerBehaviorsTask SequenceBase<IInboundEnvelope>.ProcessingCompletedTask SequenceBase<IInboundEnvelope>.ShouldCreateNewActivity SequenceBase<IInboundEnvelope>.StreamProvider SequenceBase<IInboundEnvelope>.Activity SequenceBase<IInboundEnvelope>.ParentSequence SequenceBase<IInboundEnvelope>.AbortException SequenceBase<IInboundEnvelope>.Length SequenceBase<IInboundEnvelope>.TotalLength SequenceBase<IInboundEnvelope>.IsNew SequenceBase<IInboundEnvelope>.IsCompleting SequenceBase<IInboundEnvelope>.IsComplete SequenceBase<IInboundEnvelope>.AbortReason SequenceBase<IInboundEnvelope>.CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) SequenceBase<IInboundEnvelope>.AddAsync(IRawInboundEnvelope, ISequence, Boolean) SequenceBase<IInboundEnvelope>.AbortAsync(SequenceAbortReason, Exception) SequenceBase<IInboundEnvelope>.GetBrokerMessageIdentifiers() SequenceBase<IInboundEnvelope>.Dispose() SequenceBase<IInboundEnvelope>.AddCoreAsync(IInboundEnvelope, ISequence, Boolean) SequenceBase<IInboundEnvelope>.IsLastMessage(IInboundEnvelope) SequenceBase<IInboundEnvelope>.CompleteAsync(CancellationToken) SequenceBase<IInboundEnvelope>.Dispose(Boolean) SequenceBase<IInboundEnvelope>.OnTimeoutElapsedAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class Sequence : SequenceBase<IInboundEnvelope>, ISequenceImplementation, ISequence, IDisposable Constructors | Improve this doc View source Sequence(String, ConsumerPipelineContext, Boolean, Nullable<TimeSpan>, Boolean) Initializes a new instance of the Sequence class. Declaration protected Sequence(string sequenceId, ConsumerPipelineContext context, bool enforceTimeout = true, TimeSpan? timeout = null, bool trackIdentifiers = true) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. System.Boolean enforceTimeout A value indicating whether the timeout has to be enforced. System.Nullable < System.TimeSpan > timeout The timeout to be applied. If not specified the value of Endpoint.Sequence.Timeout will be used. System.Boolean trackIdentifiers Specifies whether the message identifiers have to be collected, in order to be used for the commit later on. Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.SequenceAbortReason.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceAbortReason.html",
    "title": "Enum SequenceAbortReason | Silverback",
    "keywords": "Enum SequenceAbortReason The possible reasons for a sequence to be aborted. Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public enum SequenceAbortReason Fields Name Description ConsumerAborted The consumer aborted the sequence because it is disconnecting (or rebalancing). Disposing The sequence is being disposed before it could complete. EnumerationAborted The subscriber prematurely exited the enumeration loop. Error The sequence was aborted because of an exception thrown either by the consumer pipeline or the subscriber. IncompleteSequence The sequence was incomplete. None The sequence isn't aborted."
  },
  "api/Silverback.Messaging.Sequences.SequenceBase-1.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceBase-1.html",
    "title": "Class SequenceBase<TEnvelope> | Silverback",
    "keywords": "Class SequenceBase<TEnvelope> Represents a set of logically related messages, like the chunks belonging to the same message or the messages in a dataset. Inheritance System.Object SequenceBase<TEnvelope> RawSequence Sequence Implements ISequence System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class SequenceBase<TEnvelope> : ISequenceImplementation, ISequence, IDisposable where TEnvelope : IRawInboundEnvelope Type Parameters Name Description TEnvelope Constructors | Improve this doc View source SequenceBase(String, ConsumerPipelineContext, Boolean, Nullable<TimeSpan>, IMessageStreamProvider, Boolean) Initializes a new instance of the SequenceBase<TEnvelope> class. Declaration protected SequenceBase(string sequenceId, ConsumerPipelineContext context, bool enforceTimeout = true, TimeSpan? timeout = null, IMessageStreamProvider streamProvider = null, bool trackIdentifiers = true) Parameters Type Name Description System.String sequenceId The identifier that is used to match the consumed messages with their belonging sequence. ConsumerPipelineContext context The current ConsumerPipelineContext , assuming that it will be the one from which the sequence gets published to the internal bus. System.Boolean enforceTimeout Specifies whether the timeout has to be enforced. System.Nullable < System.TimeSpan > timeout The timeout to be applied. If not specified the value of Endpoint.Sequence.Timeout will be used. IMessageStreamProvider streamProvider The IMessageStreamProvider to be pushed. A new one will be created if not provided. System.Boolean trackIdentifiers Specifies whether the message identifiers have to be collected, in order to be used for the commit later on. Properties | Improve this doc View source AbortException Gets the exception that caused the abort, if any. Declaration public Exception AbortException { get; } Property Value Type Description System.Exception Remarks This property is filled only when AbortReason is Error . | Improve this doc View source AbortReason Gets the reason of the abort. Declaration public SequenceAbortReason AbortReason { get; } Property Value Type Description SequenceAbortReason | Improve this doc View source Activity Declaration public Activity Activity { get; } Property Value Type Description System.Diagnostics.Activity | Improve this doc View source Context Gets the ConsumerPipelineContext related to the processing of this sequence (usually the context of the first message that initiated the sequence). Declaration public ConsumerPipelineContext Context { get; } Property Value Type Description ConsumerPipelineContext | Improve this doc View source IsAborted Gets a value indicating whether the sequence processing has been aborted and no further message will be pushed. Declaration public bool IsAborted { get; } Property Value Type Description System.Boolean | Improve this doc View source IsBeingConsumed Gets a value indicating whether the sequence is being consumed. This value is set to true as soon as CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) is called and the output IMessageStreamEnumerable<TMessage> is created. Declaration public bool IsBeingConsumed { get; } Property Value Type Description System.Boolean | Improve this doc View source IsComplete Gets a value indicating whether all messages belonging to the sequence have been pushed and processed. Declaration public bool IsComplete { get; } Property Value Type Description System.Boolean | Improve this doc View source IsCompleting Gets a value indicating whether all messages belonging to the sequence have been pushed and the last message is currently being processed. Declaration public bool IsCompleting { get; } Property Value Type Description System.Boolean | Improve this doc View source IsNew Gets a value indicating whether the first message in the sequence was consumed and this instance was just created. Declaration public bool IsNew { get; } Property Value Type Description System.Boolean | Improve this doc View source IsPending Gets a value indicating whether the sequence is incomplete and awaiting for new messages to be pushed. Declaration public bool IsPending { get; } Property Value Type Description System.Boolean | Improve this doc View source Length Gets the length of the sequence so far. Declaration public int Length { get; protected set; } Property Value Type Description System.Int32 | Improve this doc View source ParentSequence Gets the ISequence that contain this sequence (e.g. the ChunkSequence whose aggregated message is added to a BatchSequence . Declaration public ISequence ParentSequence { get; } Property Value Type Description ISequence | Improve this doc View source ProcessingCompletedTask Declaration public Task ProcessingCompletedTask { get; } Property Value Type Description System.Threading.Tasks.Task | Improve this doc View source SequenceId Gets the identifier that is used to match the consumed messages with their belonging sequence. Declaration public string SequenceId { get; } Property Value Type Description System.String | Improve this doc View source SequencerBehaviorsTask Declaration public Task SequencerBehaviorsTask { get; } Property Value Type Description System.Threading.Tasks.Task | Improve this doc View source Sequences Gets the ISequence that were added to this sequence (e.g. the ChunkSequence whose aggregated message is added to a BatchSequence . Declaration public IReadOnlyCollection<ISequence> Sequences { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < ISequence > | Improve this doc View source ShouldCreateNewActivity Declaration public bool ShouldCreateNewActivity { get; } Property Value Type Description System.Boolean | Improve this doc View source StreamProvider Gets the IMessageStreamProvider that will be pushed with the messages belonging to the sequence. Declaration public IMessageStreamProvider StreamProvider { get; } Property Value Type Description IMessageStreamProvider | Improve this doc View source TotalLength Gets the declared total length of the sequence, if known. Declaration public int? TotalLength { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this doc View source AbortAsync(SequenceAbortReason, Exception) Aborts the sequence processing. Used for example to signal that an exception occurred or the enumeration returned prematurely. Declaration public Task AbortAsync(SequenceAbortReason reason, Exception exception = null) Parameters Type Name Description SequenceAbortReason reason The abort reason. System.Exception exception The exception that caused the abort, if an exception was thrown. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source AddAsync(IRawInboundEnvelope, ISequence, Boolean) Adds the message to the sequence. Declaration public Task<int> AddAsync(IRawInboundEnvelope envelope, ISequence sequence, bool throwIfUnhandled = true) Parameters Type Name Description IRawInboundEnvelope envelope The envelope to be added to the sequence. ISequence sequence The sequence to be added to the sequence. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of streams that have been pushed. | Improve this doc View source AddCoreAsync(TEnvelope, ISequence, Boolean) Adds the message to the sequence. Declaration protected virtual async Task<int> AddCoreAsync(TEnvelope envelope, ISequence sequence, bool throwIfUnhandled) Parameters Type Name Description TEnvelope envelope The envelope to be added to the sequence. ISequence sequence The sequence to be added to the sequence. System.Boolean throwIfUnhandled A boolean value indicating whether an exception must be thrown if no subscriber is handling the message. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the number of streams that have been pushed. | Improve this doc View source CompleteAsync(CancellationToken) Marks the sequence as complete, meaning no more messages will be pushed. Declaration protected virtual async Task CompleteAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken used to cancel the operation. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter>) Creates a IMessageStreamEnumerable<TMessage> that will be pushed with the messages belonging to the sequence. Declaration public IMessageStreamEnumerable<TMessage> CreateStream<TMessage>(IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < IMessageFilter > filters The filters to be applied. Returns Type Description IMessageStreamEnumerable <TMessage> The IMessageStreamEnumerable<TMessage> . Type Parameters Name Description TMessage The type of the messages to be streamed. | Improve this doc View source Dispose() Declaration public void Dispose() | Improve this doc View source Dispose(Boolean) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing A value indicating whether the method has been called by the Dispose method and not from the finalizer. | Improve this doc View source GetBrokerMessageIdentifiers() Gets the identifiers of the messages belonging to the sequence. Declaration public IReadOnlyList<IBrokerMessageIdentifier> GetBrokerMessageIdentifiers() Returns Type Description System.Collections.Generic.IReadOnlyList < IBrokerMessageIdentifier > The list of identifiers. | Improve this doc View source IsLastMessage(TEnvelope) Implements the logic to recognize the last message in the sequence without relying on the TotalCount property. Declaration protected virtual bool IsLastMessage(TEnvelope envelope) Parameters Type Name Description TEnvelope envelope The envelope to be added to the sequence. Returns Type Description System.Boolean true if it is the last message, otherwise false . | Improve this doc View source OnTimeoutElapsedAsync() Called when the timout is elapsed. If not overridden in a derived class, the default implementation aborts the sequence. Declaration protected virtual Task OnTimeoutElapsedAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements ISequence System.IDisposable"
  },
  "api/Silverback.Messaging.Sequences.SequenceException.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceException.html",
    "title": "Class SequenceException | Silverback",
    "keywords": "Class SequenceException The exception that is thrown when a sequence cannot be properly recreated (e.g. because of bad ordering or similar). Inheritance System.Object System.Exception SilverbackException SequenceException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax [Serializable] public class SequenceException : SilverbackException, ISerializable Constructors | Improve this doc View source SequenceException() Initializes a new instance of the SequenceException class. Declaration public SequenceException() | Improve this doc View source SequenceException(SerializationInfo, StreamingContext) Initializes a new instance of the SequenceException class with the serialized data. Declaration protected SequenceException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source SequenceException(String) Initializes a new instance of the SequenceException class with the specified message. Declaration public SequenceException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source SequenceException(String, Exception) Initializes a new instance of the SequenceException class with the specified message and inner exception. Declaration public SequenceException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Sequences.SequencerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Sequences.SequencerConsumerBehavior.html",
    "title": "Class SequencerConsumerBehavior | Silverback",
    "keywords": "Class SequencerConsumerBehavior Uses the available implementations of ISequenceReader to assign the incoming message to the right sequence. Inheritance System.Object SequencerConsumerBehaviorBase SequencerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members SequencerConsumerBehaviorBase.AwaitOtherBehaviorIfNeededAsync(ISequence) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public class SequencerConsumerBehavior : SequencerConsumerBehaviorBase, IConsumerBehavior, IBrokerBehavior, ISorted Remarks A sequence is a set of messages that are handled as a single unit of work. A sequence could be used to group all chunks belonging to the same source message, all messages belonging to the same data set or to implement batch processing. Constructors | Improve this doc View source SequencerConsumerBehavior(IEnumerable<ISequenceReader>, ISilverbackLogger<SequencerConsumerBehavior>) Initializes a new instance of the SequencerConsumerBehavior class. Declaration public SequencerConsumerBehavior(IEnumerable<ISequenceReader> sequenceReaders, ISilverbackLogger<SequencerConsumerBehavior> logger) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISequenceReader > sequenceReaders The ISequenceReader implementations to be used. ISilverbackLogger < SequencerConsumerBehavior > logger The ISilverbackLogger . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public override int SortIndex { get; } Property Value Type Description System.Int32 Overrides SequencerConsumerBehaviorBase.SortIndex Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public override async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides SequencerConsumerBehaviorBase.HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) | Improve this doc View source PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Forwards the new sequence to the next behavior in the pipeline. Declaration protected override Task PublishSequenceAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Overrides SequencerConsumerBehaviorBase.PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Sequences.SequencerConsumerBehaviorBase.html": {
    "href": "api/Silverback.Messaging.Sequences.SequencerConsumerBehaviorBase.html",
    "title": "Class SequencerConsumerBehaviorBase | Silverback",
    "keywords": "Class SequencerConsumerBehaviorBase Uses the available implementations of ISequenceReader to assign the incoming message to the right sequence. Inheritance System.Object SequencerConsumerBehaviorBase RawSequencerConsumerBehavior SequencerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class SequencerConsumerBehaviorBase : IConsumerBehavior, IBrokerBehavior, ISorted Remarks A sequence is a set of messages that are handled as a single unit of work. A sequence could be used to group all chunks belonging to the same source message, all messages belonging to the same data set or to implement batch processing. Constructors | Improve this doc View source SequencerConsumerBehaviorBase(IEnumerable<ISequenceReader>, ISilverbackLogger<SequencerConsumerBehaviorBase>) Initializes a new instance of the SequencerConsumerBehaviorBase class. Declaration protected SequencerConsumerBehaviorBase(IEnumerable<ISequenceReader> sequenceReaders, ISilverbackLogger<SequencerConsumerBehaviorBase> logger) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISequenceReader > sequenceReaders The ISequenceReader implementations to be used. ISilverbackLogger < SequencerConsumerBehaviorBase > logger The ISilverbackLogger . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public abstract int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source AwaitOtherBehaviorIfNeededAsync(ISequence) When overridden in a derived class awaits for the sequence to be processed by the other twin behavior. This is used to have the RawSequencerConsumerBehavior wait for the processing by the SequencerConsumerBehavior and it's needed to be able to properly determine the sequence end in the case where a ChunkSequence is added into another sequence (e.g. BatchSequence). Declaration protected virtual Task AwaitOtherBehaviorIfNeededAsync(ISequence sequence) Parameters Type Name Description ISequence sequence The current sequence. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public virtual async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source PublishSequenceAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Forwards the new sequence to the next behavior in the pipeline. Declaration protected abstract Task PublishSequenceAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Sequences.SequenceReaderBase.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceReaderBase.html",
    "title": "Class SequenceReaderBase | Silverback",
    "keywords": "Class SequenceReaderBase The base class for the ISequenceReader implementations. It encapsulates the logic to deal with the ISequenceStore . Inheritance System.Object SequenceReaderBase BatchSequenceReader ChunkSequenceReader Implements ISequenceReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public abstract class SequenceReaderBase : ISequenceReader Constructors | Improve this doc View source SequenceReaderBase(Boolean) Initializes a new instance of the SequenceReaderBase class. Declaration protected SequenceReaderBase(bool handlesRawMessages = false) Parameters Type Name Description System.Boolean handlesRawMessages A value indicating whether this reader handles the raw messages, before they are being deserialized, decrypted, etc. Properties | Improve this doc View source HandlesRawMessages Gets a value indicating whether this reader handles the raw messages, before they are being deserialized, decrypted, etc. Declaration public bool HandlesRawMessages { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source CanHandleAsync(ConsumerPipelineContext) Checks whether this reader can and must handle the message being processed in the specified context. Declaration public abstract Task<bool> CanHandleAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether this reader can and must handle the message. | Improve this doc View source CreateNewSequenceAsync(String, ConsumerPipelineContext) Creates the new sequence and adds it to the store. Declaration protected virtual async Task<ISequence> CreateNewSequenceAsync(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < ISequence > The new sequence. | Improve this doc View source CreateNewSequenceCore(String, ConsumerPipelineContext) Creates the new sequence object. Declaration protected abstract ISequence CreateNewSequenceCore(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description ISequence The new sequence. | Improve this doc View source GetExistingSequenceAsync(ConsumerPipelineContext, String) Retrieves the existing incomplete sequence from the store. Declaration protected virtual Task<ISequence> GetExistingSequenceAsync(ConsumerPipelineContext context, string sequenceId) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . System.String sequenceId The sequence identifier. Returns Type Description System.Threading.Tasks.Task < ISequence > The ISequence or null if not found. | Improve this doc View source GetSequenceAsync(ConsumerPipelineContext) Returns the ISequence related to the message being processed. Declaration public async Task<ISequence> GetSequenceAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < ISequence > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the ISequence . | Improve this doc View source GetSequenceIdAsync(ConsumerPipelineContext) Gets the sequence identifier extracted from the current envelope. Declaration protected virtual Task<string> GetSequenceIdAsync(ConsumerPipelineContext context) Parameters Type Name Description ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.String > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the recognized sequence identifier, or null . | Improve this doc View source IsNewSequenceAsync(String, ConsumerPipelineContext) Determines if the current message correspond with the beginning of a new sequence. Declaration protected abstract Task<bool> IsNewSequenceAsync(string sequenceId, ConsumerPipelineContext context) Parameters Type Name Description System.String sequenceId The sequence identifier. ConsumerPipelineContext context The current ConsumerPipelineContext . Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains true if a new sequence is starting; otherwise false . Implements ISequenceReader"
  },
  "api/Silverback.Messaging.Sequences.SequencerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Sequences.SequencerProducerBehavior.html",
    "title": "Class SequencerProducerBehavior | Silverback",
    "keywords": "Class SequencerProducerBehavior Uses the available implementations of ISequenceWriter to set the proper headers and split the published message or messages set to create the sequences. Inheritance System.Object SequencerProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public class SequencerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Remarks A sequence is a set of messages that are handled as a single unit of work. A sequence could be used to group all chunks belonging to the same source message, all messages belonging to the same data set or to implement batch processing. Constructors | Improve this doc View source SequencerProducerBehavior(IEnumerable<ISequenceWriter>) Initializes a new instance of the SequencerProducerBehavior class. Declaration public SequencerProducerBehavior(IEnumerable<ISequenceWriter> sequenceWriters) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISequenceWriter > sequenceWriters The ISequenceWriter implementations to be used. Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Sequences.SequenceSettings.html": {
    "href": "api/Silverback.Messaging.Sequences.SequenceSettings.html",
    "title": "Class SequenceSettings | Silverback",
    "keywords": "Class SequenceSettings The sequence handling settings. Inheritance System.Object SequenceSettings Implements System.IEquatable < SequenceSettings > IValidatableEndpointSettings Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Sequences Assembly : Silverback.Integration.dll Syntax public sealed class SequenceSettings : IEquatable<SequenceSettings>, IValidatableEndpointSettings Properties | Improve this doc View source Timeout Gets or sets the timeout after which an incomplete sequence that isn't pushed with new messages will be aborted and discarded. The default is a conservative 30 minutes. Declaration public TimeSpan Timeout { get; set; } Property Value Type Description System.TimeSpan Remarks This setting is ignored for batches ( BatchSequence ), use the MaxWaitTime instead. Methods | Improve this doc View source Equals(SequenceSettings) Declaration public bool Equals(SequenceSettings other) Parameters Type Name Description SequenceSettings other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source Validate() Throws an EndpointConfigurationException if the current configuration is not valid. Declaration public void Validate() Implements System.IEquatable<T> IValidatableEndpointSettings"
  },
  "api/Silverback.Messaging.Serialization.AvroMessageSerializer-1.html": {
    "href": "api/Silverback.Messaging.Serialization.AvroMessageSerializer-1.html",
    "title": "Class AvroMessageSerializer<TMessage> | Silverback",
    "keywords": "Class AvroMessageSerializer<TMessage> Connects to the specified schema registry and serializes the messages in Apache Avro format. Inheritance System.Object AvroMessageSerializerBase AvroMessageSerializer<TMessage> Implements IKafkaMessageSerializer IMessageSerializer Inherited Members AvroMessageSerializerBase.RequireHeaders AvroMessageSerializerBase.SchemaRegistryConfig AvroMessageSerializerBase.AvroSerializerConfig System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Kafka.SchemaRegistry.dll Syntax public class AvroMessageSerializer<TMessage> : AvroMessageSerializerBase, IKafkaMessageSerializer, IMessageSerializer where TMessage : class Type Parameters Name Description TMessage The type of the messages to be serialized and/or deserialized. Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public override async ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. Overrides AvroMessageSerializerBase.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source DeserializeKey(Byte[], IReadOnlyCollection<MessageHeader>, MessageSerializationContext) Deserializes the byte array back into a key string. Declaration public override string DeserializeKey(byte[] key, IReadOnlyCollection<MessageHeader> messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Byte [] key The byte array to be deserialized. System.Collections.Generic.IReadOnlyCollection < MessageHeader > messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.String The deserialized key. Overrides AvroMessageSerializerBase.DeserializeKey(Byte[], IReadOnlyCollection<MessageHeader>, MessageSerializationContext) | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public override async ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. Overrides AvroMessageSerializerBase.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source SerializeKey(String, IReadOnlyCollection<MessageHeader>, MessageSerializationContext) Serializes the specified key string into a byte array. Declaration public override byte[] SerializeKey(string key, IReadOnlyCollection<MessageHeader> messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.String key The message key to be serialized. System.Collections.Generic.IReadOnlyCollection < MessageHeader > messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Byte [] The serialization result. Overrides AvroMessageSerializerBase.SerializeKey(String, IReadOnlyCollection<MessageHeader>, MessageSerializationContext) Implements IKafkaMessageSerializer IMessageSerializer"
  },
  "api/Silverback.Messaging.Serialization.AvroMessageSerializerBase.html": {
    "href": "api/Silverback.Messaging.Serialization.AvroMessageSerializerBase.html",
    "title": "Class AvroMessageSerializerBase | Silverback",
    "keywords": "Class AvroMessageSerializerBase The base class for AvroMessageSerializer<TMessage> . Inheritance System.Object AvroMessageSerializerBase AvroMessageSerializer <TMessage> Implements IKafkaMessageSerializer IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Kafka.SchemaRegistry.dll Syntax public abstract class AvroMessageSerializerBase : IKafkaMessageSerializer, IMessageSerializer Properties | Improve this doc View source AvroSerializerConfig Gets or sets the Avro serializer configuration. Declaration public AvroSerializerConfig AvroSerializerConfig { get; set; } Property Value Type Description Confluent.SchemaRegistry.Serdes.AvroSerializerConfig | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public bool RequireHeaders { get; } Property Value Type Description System.Boolean | Improve this doc View source SchemaRegistryConfig Gets or sets the schema registry configuration. Declaration public SchemaRegistryConfig SchemaRegistryConfig { get; set; } Property Value Type Description Confluent.SchemaRegistry.SchemaRegistryConfig Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public abstract ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. | Improve this doc View source DeserializeKey(Byte[], IReadOnlyCollection<MessageHeader>, MessageSerializationContext) Deserializes the byte array back into a key string. Declaration public abstract string DeserializeKey(byte[] key, IReadOnlyCollection<MessageHeader> messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Byte [] key The byte array to be deserialized. System.Collections.Generic.IReadOnlyCollection < MessageHeader > messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.String The deserialized key. | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public abstract ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. | Improve this doc View source SerializeKey(String, IReadOnlyCollection<MessageHeader>, MessageSerializationContext) Serializes the specified key string into a byte array. Declaration public abstract byte[] SerializeKey(string key, IReadOnlyCollection<MessageHeader> messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.String key The message key to be serialized. System.Collections.Generic.IReadOnlyCollection < MessageHeader > messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Byte [] The serialization result. Implements IKafkaMessageSerializer IMessageSerializer"
  },
  "api/Silverback.Messaging.Serialization.DefaultKafkaMessageSerializer.html": {
    "href": "api/Silverback.Messaging.Serialization.DefaultKafkaMessageSerializer.html",
    "title": "Class DefaultKafkaMessageSerializer | Silverback",
    "keywords": "Class DefaultKafkaMessageSerializer The default implementation of a IKafkaMessageSerializer simply uses the provided IMessageSerializer for the value and treats the key as a UTF-8 encoded string. Inheritance System.Object DefaultKafkaMessageSerializer Implements IKafkaMessageSerializer IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Kafka.dll Syntax public class DefaultKafkaMessageSerializer : IKafkaMessageSerializer, IMessageSerializer Constructors | Improve this doc View source DefaultKafkaMessageSerializer(IMessageSerializer) Initializes a new instance of the DefaultKafkaMessageSerializer class. Declaration public DefaultKafkaMessageSerializer(IMessageSerializer serializer) Parameters Type Name Description IMessageSerializer serializer The IMessageSerializer to be used. Properties | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public bool RequireHeaders { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. | Improve this doc View source DeserializeKey(Byte[], IReadOnlyCollection<MessageHeader>, MessageSerializationContext) Deserializes the byte array back into a key string. Declaration public string DeserializeKey(byte[] key, IReadOnlyCollection<MessageHeader> messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Byte [] key The byte array to be deserialized. System.Collections.Generic.IReadOnlyCollection < MessageHeader > messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.String The deserialized key. | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. | Improve this doc View source SerializeKey(String, IReadOnlyCollection<MessageHeader>, MessageSerializationContext) Serializes the specified key string into a byte array. Declaration public byte[] SerializeKey(string key, IReadOnlyCollection<MessageHeader> messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.String key The message key to be serialized. System.Collections.Generic.IReadOnlyCollection < MessageHeader > messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Byte [] The serialization result. Implements IKafkaMessageSerializer IMessageSerializer"
  },
  "api/Silverback.Messaging.Serialization.DeserializerConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Serialization.DeserializerConsumerBehavior.html",
    "title": "Class DeserializerConsumerBehavior | Silverback",
    "keywords": "Class DeserializerConsumerBehavior Deserializes the messages being consumed using the configured IMessageSerializer . Inheritance System.Object DeserializerConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public class DeserializerConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source DeserializerConsumerBehavior(IInboundLogger<DeserializerConsumerBehavior>) Initializes a new instance of the DeserializerConsumerBehavior class. Declaration public DeserializerConsumerBehavior(IInboundLogger<DeserializerConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < DeserializerConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Serialization.html": {
    "href": "api/Silverback.Messaging.Serialization.html",
    "title": "Namespace Silverback.Messaging.Serialization | Silverback",
    "keywords": "Namespace Silverback.Messaging.Serialization Classes AvroMessageSerializer<TMessage> Connects to the specified schema registry and serializes the messages in Apache Avro format. AvroMessageSerializerBase The base class for AvroMessageSerializer<TMessage> . DefaultKafkaMessageSerializer The default implementation of a IKafkaMessageSerializer simply uses the provided IMessageSerializer for the value and treats the key as a UTF-8 encoded string. DeserializerConsumerBehavior Deserializes the messages being consumed using the configured IMessageSerializer . JsonMessageSerializer Serializes the messages in JSON format and relies on some added headers to determine the message type upon deserialization. This default serializer is ideal when the producer and the consumer are both using Silverback. JsonMessageSerializer<TMessage> Serializes and deserializes the messages of type TMessage in JSON format. JsonMessageSerializerBase The base class for JsonMessageSerializer and JsonMessageSerializer<TMessage> . MessageSerializationContext The context that is passed from the producer or consumer to the serializer. It can be used to customize the serialization behavior according to the endpoint. MessageSerializerException The exception that is thrown by the IMessageSerializer implementations when the message cannot be serialized or deserialized. This exception is thrown only when a Silverback specific error occurs, other exceptions related to reflection or the underlying serializer are not wrapped. NewtonsoftJsonMessageSerializer Serializes the messages in JSON format and relies on some added headers to determine the message type upon deserialization. This default serializer is ideal when the producer and the consumer are both using Silverback. NewtonsoftJsonMessageSerializer<TMessage> Serializes and deserializes the messages of type TMessage in JSON format. NewtonsoftJsonMessageSerializerBase The base class for NewtonsoftJsonMessageSerializer and NewtonsoftJsonMessageSerializer<TMessage> . SerializerProducerBehavior Serializes the message being produced using the configured IMessageSerializer . Interfaces IKafkaMessageSerializer Serializes and deserializes the messages sent through Kafka. IMessageSerializer Serializes and deserializes the messages sent through the broker. Enums MessageEncoding Specifies the message encoding used by some IMessageSerializer implementations. NullMessageHandlingStrategy The null message handling strategies."
  },
  "api/Silverback.Messaging.Serialization.IKafkaMessageSerializer.html": {
    "href": "api/Silverback.Messaging.Serialization.IKafkaMessageSerializer.html",
    "title": "Interface IKafkaMessageSerializer | Silverback",
    "keywords": "Interface IKafkaMessageSerializer Serializes and deserializes the messages sent through Kafka. Inherited Members IMessageSerializer.RequireHeaders IMessageSerializer.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) IMessageSerializer.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Kafka.dll Syntax public interface IKafkaMessageSerializer : IMessageSerializer Methods | Improve this doc View source DeserializeKey(Byte[], IReadOnlyCollection<MessageHeader>, MessageSerializationContext) Deserializes the byte array back into a key string. Declaration string DeserializeKey(byte[] key, IReadOnlyCollection<MessageHeader> messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Byte [] key The byte array to be deserialized. System.Collections.Generic.IReadOnlyCollection < MessageHeader > messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.String The deserialized key. | Improve this doc View source SerializeKey(String, IReadOnlyCollection<MessageHeader>, MessageSerializationContext) Serializes the specified key string into a byte array. Declaration byte[] SerializeKey(string key, IReadOnlyCollection<MessageHeader> messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.String key The message key to be serialized. System.Collections.Generic.IReadOnlyCollection < MessageHeader > messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Byte [] The serialization result."
  },
  "api/Silverback.Messaging.Serialization.IMessageSerializer.html": {
    "href": "api/Silverback.Messaging.Serialization.IMessageSerializer.html",
    "title": "Interface IMessageSerializer | Silverback",
    "keywords": "Interface IMessageSerializer Serializes and deserializes the messages sent through the broker. Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public interface IMessageSerializer Properties | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration bool RequireHeaders { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message."
  },
  "api/Silverback.Messaging.Serialization.JsonMessageSerializer.html": {
    "href": "api/Silverback.Messaging.Serialization.JsonMessageSerializer.html",
    "title": "Class JsonMessageSerializer | Silverback",
    "keywords": "Class JsonMessageSerializer Serializes the messages in JSON format and relies on some added headers to determine the message type upon deserialization. This default serializer is ideal when the producer and the consumer are both using Silverback. Inheritance System.Object JsonMessageSerializerBase JsonMessageSerializer Implements IMessageSerializer System.IEquatable < JsonMessageSerializer > Inherited Members JsonMessageSerializerBase.Options System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public sealed class JsonMessageSerializer : JsonMessageSerializerBase, IMessageSerializer, IEquatable<JsonMessageSerializer> Properties | Improve this doc View source Default Gets the default static instance of JsonMessageSerializer . Declaration public static JsonMessageSerializer Default { get; } Property Value Type Description JsonMessageSerializer | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public override bool RequireHeaders { get; } Property Value Type Description System.Boolean Overrides JsonMessageSerializerBase.RequireHeaders Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public override async ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. Overrides JsonMessageSerializerBase.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source Equals(JsonMessageSerializer) Declaration public bool Equals(JsonMessageSerializer other) Parameters Type Name Description JsonMessageSerializer other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public override ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. Overrides JsonMessageSerializerBase.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Implements IMessageSerializer System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Serialization.JsonMessageSerializer-1.html": {
    "href": "api/Silverback.Messaging.Serialization.JsonMessageSerializer-1.html",
    "title": "Class JsonMessageSerializer<TMessage> | Silverback",
    "keywords": "Class JsonMessageSerializer<TMessage> Serializes and deserializes the messages of type TMessage in JSON format. Inheritance System.Object JsonMessageSerializerBase JsonMessageSerializer<TMessage> Implements IMessageSerializer System.IEquatable < JsonMessageSerializer <TMessage>> Inherited Members JsonMessageSerializerBase.Options System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public sealed class JsonMessageSerializer<TMessage> : JsonMessageSerializerBase, IMessageSerializer, IEquatable<JsonMessageSerializer<TMessage>> Type Parameters Name Description TMessage The type of the messages to be serialized and/or deserialized. Properties | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public override bool RequireHeaders { get; } Property Value Type Description System.Boolean Overrides JsonMessageSerializerBase.RequireHeaders Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public override async ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. Overrides JsonMessageSerializerBase.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source Equals(JsonMessageSerializer<TMessage>) Declaration public bool Equals(JsonMessageSerializer<TMessage> other) Parameters Type Name Description JsonMessageSerializer <TMessage> other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public override ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. Overrides JsonMessageSerializerBase.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Implements IMessageSerializer System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Serialization.JsonMessageSerializerBase.html": {
    "href": "api/Silverback.Messaging.Serialization.JsonMessageSerializerBase.html",
    "title": "Class JsonMessageSerializerBase | Silverback",
    "keywords": "Class JsonMessageSerializerBase The base class for JsonMessageSerializer and JsonMessageSerializer<TMessage> . Inheritance System.Object JsonMessageSerializerBase JsonMessageSerializer JsonMessageSerializer <TMessage> Implements IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public abstract class JsonMessageSerializerBase : IMessageSerializer Properties | Improve this doc View source Options Gets or sets the options to be passed to the System.Text.Json.JsonSerializer . Declaration public JsonSerializerOptions Options { get; set; } Property Value Type Description System.Text.Json.JsonSerializerOptions | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public abstract bool RequireHeaders { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public abstract ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public abstract ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. Implements IMessageSerializer"
  },
  "api/Silverback.Messaging.Serialization.MessageEncoding.html": {
    "href": "api/Silverback.Messaging.Serialization.MessageEncoding.html",
    "title": "Enum MessageEncoding | Silverback",
    "keywords": "Enum MessageEncoding Specifies the message encoding used by some IMessageSerializer implementations. Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public enum MessageEncoding Fields Name Description ASCII Corresponds to System.Text.Encoding.ASCII . Default Corresponds to System.Text.Encoding.Default . Unicode Corresponds to System.Text.Encoding.Unicode . UTF32 Corresponds to System.Text.Encoding.UTF32 . UTF8 Corresponds to System.Text.Encoding.UTF8 ."
  },
  "api/Silverback.Messaging.Serialization.MessageSerializationContext.html": {
    "href": "api/Silverback.Messaging.Serialization.MessageSerializationContext.html",
    "title": "Class MessageSerializationContext | Silverback",
    "keywords": "Class MessageSerializationContext The context that is passed from the producer or consumer to the serializer. It can be used to customize the serialization behavior according to the endpoint. Inheritance System.Object MessageSerializationContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public class MessageSerializationContext Constructors | Improve this doc View source MessageSerializationContext(IEndpoint, String) Initializes a new instance of the MessageSerializationContext class from the provided IEndpoint . Declaration public MessageSerializationContext(IEndpoint endpoint, string actualEndpointName = null) Parameters Type Name Description IEndpoint endpoint The related endpoint configuration. System.String actualEndpointName The name of the actual related endpoint. Properties | Improve this doc View source ActualEndpointName Gets the name of the actual endpoint (in case the Endpoint configuration points to multiple endpoints, for example if consuming multiple topics with a single KafkaConsumer ). Declaration public string ActualEndpointName { get; } Property Value Type Description System.String | Improve this doc View source Empty Gets the default instance of an empty context. Declaration public static MessageSerializationContext Empty { get; } Property Value Type Description MessageSerializationContext | Improve this doc View source Endpoint Gets the related endpoint configuration. Declaration public IEndpoint Endpoint { get; } Property Value Type Description IEndpoint"
  },
  "api/Silverback.Messaging.Serialization.MessageSerializerException.html": {
    "href": "api/Silverback.Messaging.Serialization.MessageSerializerException.html",
    "title": "Class MessageSerializerException | Silverback",
    "keywords": "Class MessageSerializerException The exception that is thrown by the IMessageSerializer implementations when the message cannot be serialized or deserialized. This exception is thrown only when a Silverback specific error occurs, other exceptions related to reflection or the underlying serializer are not wrapped. Inheritance System.Object System.Exception SilverbackException MessageSerializerException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax [Serializable] public class MessageSerializerException : SilverbackException, ISerializable Constructors | Improve this doc View source MessageSerializerException() Initializes a new instance of the MessageSerializerException class. Declaration public MessageSerializerException() | Improve this doc View source MessageSerializerException(SerializationInfo, StreamingContext) Initializes a new instance of the MessageSerializerException class with the serialized data. Declaration protected MessageSerializerException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source MessageSerializerException(String) Initializes a new instance of the MessageSerializerException class with the specified message. Declaration public MessageSerializerException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source MessageSerializerException(String, Exception) Initializes a new instance of the MessageSerializerException class with the specified message and inner exception. Declaration public MessageSerializerException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializer.html": {
    "href": "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializer.html",
    "title": "Class NewtonsoftJsonMessageSerializer | Silverback",
    "keywords": "Class NewtonsoftJsonMessageSerializer Serializes the messages in JSON format and relies on some added headers to determine the message type upon deserialization. This default serializer is ideal when the producer and the consumer are both using Silverback. Inheritance System.Object NewtonsoftJsonMessageSerializerBase NewtonsoftJsonMessageSerializer Implements IMessageSerializer System.IEquatable < NewtonsoftJsonMessageSerializer > Inherited Members NewtonsoftJsonMessageSerializerBase.Encoding NewtonsoftJsonMessageSerializerBase.Settings NewtonsoftJsonMessageSerializerBase.SystemEncoding System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Newtonsoft.dll Syntax public sealed class NewtonsoftJsonMessageSerializer : NewtonsoftJsonMessageSerializerBase, IMessageSerializer, IEquatable<NewtonsoftJsonMessageSerializer> Properties | Improve this doc View source Default Gets the default static instance of NewtonsoftJsonMessageSerializer . Declaration public static NewtonsoftJsonMessageSerializer Default { get; } Property Value Type Description NewtonsoftJsonMessageSerializer | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public override bool RequireHeaders { get; } Property Value Type Description System.Boolean Overrides NewtonsoftJsonMessageSerializerBase.RequireHeaders Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public override async ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. Overrides NewtonsoftJsonMessageSerializerBase.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source Equals(NewtonsoftJsonMessageSerializer) Declaration public bool Equals(NewtonsoftJsonMessageSerializer other) Parameters Type Name Description NewtonsoftJsonMessageSerializer other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public override ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. Overrides NewtonsoftJsonMessageSerializerBase.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Implements IMessageSerializer System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializer-1.html": {
    "href": "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializer-1.html",
    "title": "Class NewtonsoftJsonMessageSerializer<TMessage> | Silverback",
    "keywords": "Class NewtonsoftJsonMessageSerializer<TMessage> Serializes and deserializes the messages of type TMessage in JSON format. Inheritance System.Object NewtonsoftJsonMessageSerializerBase NewtonsoftJsonMessageSerializer<TMessage> Implements IMessageSerializer System.IEquatable < NewtonsoftJsonMessageSerializer <TMessage>> Inherited Members NewtonsoftJsonMessageSerializerBase.Encoding NewtonsoftJsonMessageSerializerBase.Settings NewtonsoftJsonMessageSerializerBase.SystemEncoding System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Newtonsoft.dll Syntax public sealed class NewtonsoftJsonMessageSerializer<TMessage> : NewtonsoftJsonMessageSerializerBase, IMessageSerializer, IEquatable<NewtonsoftJsonMessageSerializer<TMessage>> Type Parameters Name Description TMessage The type of the messages to be serialized and/or deserialized. Properties | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public override bool RequireHeaders { get; } Property Value Type Description System.Boolean Overrides NewtonsoftJsonMessageSerializerBase.RequireHeaders Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public override async ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. Overrides NewtonsoftJsonMessageSerializerBase.DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) | Improve this doc View source Equals(NewtonsoftJsonMessageSerializer<TMessage>) Declaration public bool Equals(NewtonsoftJsonMessageSerializer<TMessage> other) Parameters Type Name Description NewtonsoftJsonMessageSerializer <TMessage> other Returns Type Description System.Boolean | Improve this doc View source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this doc View source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public override ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. Overrides NewtonsoftJsonMessageSerializerBase.SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Implements IMessageSerializer System.IEquatable<T>"
  },
  "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializerBase.html": {
    "href": "api/Silverback.Messaging.Serialization.NewtonsoftJsonMessageSerializerBase.html",
    "title": "Class NewtonsoftJsonMessageSerializerBase | Silverback",
    "keywords": "Class NewtonsoftJsonMessageSerializerBase The base class for NewtonsoftJsonMessageSerializer and NewtonsoftJsonMessageSerializer<TMessage> . Inheritance System.Object NewtonsoftJsonMessageSerializerBase NewtonsoftJsonMessageSerializer NewtonsoftJsonMessageSerializer <TMessage> Implements IMessageSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.Newtonsoft.dll Syntax public abstract class NewtonsoftJsonMessageSerializerBase : IMessageSerializer Properties | Improve this doc View source Encoding Gets or sets the message encoding. The default is UTF8. Declaration public MessageEncoding Encoding { get; set; } Property Value Type Description MessageEncoding | Improve this doc View source RequireHeaders Gets a value indicating whether headers are mandatory for this serializer implementation or configuration to work properly. Declaration public abstract bool RequireHeaders { get; } Property Value Type Description System.Boolean | Improve this doc View source Settings Gets or sets the settings to be applied to the Json.NET serializer. Declaration public JsonSerializerSettings Settings { get; set; } Property Value Type Description Newtonsoft.Json.JsonSerializerSettings | Improve this doc View source SystemEncoding Gets the System.Text.Encoding corresponding to the MessageEncoding . Declaration protected Encoding SystemEncoding { get; } Property Value Type Description System.Text.Encoding A System.Text.Encoding that matches the current MessageEncoding . Methods | Improve this doc View source DeserializeAsync(Stream, MessageHeaderCollection, MessageSerializationContext) Deserializes the byte array back into a message object. Declaration public abstract ValueTask<(object Message, Type MessageType)> DeserializeAsync(Stream messageStream, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.IO.Stream messageStream The System.IO.Stream containing the message to be deserialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.ValueTuple < System.Object , System.Type >> A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the deserialized message (or null when the input is null or empty) and the type of the message. | Improve this doc View source SerializeAsync(Object, MessageHeaderCollection, MessageSerializationContext) Serializes the specified message object into a byte array. Declaration public abstract ValueTask<Stream> SerializeAsync(object message, MessageHeaderCollection messageHeaders, MessageSerializationContext context) Parameters Type Name Description System.Object message The message object to be serialized. MessageHeaderCollection messageHeaders The message headers collection. MessageSerializationContext context The context information. Returns Type Description System.Threading.Tasks.ValueTask < System.IO.Stream > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains the System.IO.Stream with the serialized message. Implements IMessageSerializer"
  },
  "api/Silverback.Messaging.Serialization.NullMessageHandlingStrategy.html": {
    "href": "api/Silverback.Messaging.Serialization.NullMessageHandlingStrategy.html",
    "title": "Enum NullMessageHandlingStrategy | Silverback",
    "keywords": "Enum NullMessageHandlingStrategy The null message handling strategies. Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public enum NullMessageHandlingStrategy Fields Name Description Legacy The legacy behavior prior to Silverback 3. The message is forwarded as null and can be subscribed as IInboundEnvelope<TMessage> only. Skip Silently skip the null message. Tombstone Map the null messages to a Tombstone<TMessage> ."
  },
  "api/Silverback.Messaging.Serialization.SerializerProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Serialization.SerializerProducerBehavior.html",
    "title": "Class SerializerProducerBehavior | Silverback",
    "keywords": "Class SerializerProducerBehavior Serializes the message being produced using the configured IMessageSerializer . Inheritance System.Object SerializerProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Serialization Assembly : Silverback.Integration.dll Syntax public class SerializerProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.DefaultAdditionalArgumentResolver.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.DefaultAdditionalArgumentResolver.html",
    "title": "Class DefaultAdditionalArgumentResolver | Silverback",
    "keywords": "Class DefaultAdditionalArgumentResolver Simply tries to resolve the additional parameters of the subscribed methods using the System.IServiceProvider . Inheritance System.Object DefaultAdditionalArgumentResolver Implements IAdditionalArgumentResolver IArgumentResolver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.dll Syntax public class DefaultAdditionalArgumentResolver : IAdditionalArgumentResolver, IArgumentResolver Methods | Improve this doc View source CanResolve(Type) Returns a boolean value indicating whether this resolver instance can handle the parameter of the specified type. Declaration public bool CanResolve(Type parameterType) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. Returns Type Description System.Boolean A boolean value indicating whether the specified parameter type can be handled. | Improve this doc View source GetValue(Type, IServiceProvider) Returns a suitable value for the parameter of the specified type. Declaration public object GetValue(Type parameterType, IServiceProvider serviceProvider) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the necessary services. Returns Type Description System.Object A value to be forwarded to the subscribed method. Implements IAdditionalArgumentResolver IArgumentResolver"
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.html",
    "title": "Namespace Silverback.Messaging.Subscribers.ArgumentResolvers | Silverback",
    "keywords": "Namespace Silverback.Messaging.Subscribers.ArgumentResolvers Classes DefaultAdditionalArgumentResolver Simply tries to resolve the additional parameters of the subscribed methods using the System.IServiceProvider . ObservableStreamMessageArgumentResolver Resolves the parameters declared as IMessageStreamObservable<TMessage> where TMessage is compatible with the type of the message being published. SingleMessageArgumentResolver Resolves the parameters declared with a type that is compatible with the type of the message being published. StreamEnumerableMessageArgumentResolver Resolves the parameters declared as IMessageStreamEnumerable<TMessage> where TMessage is compatible with the type of the message being published. Interfaces IAdditionalArgumentResolver These resolvers are used to try to get a value for the additional parameters (other than the message itself) of the subscribed methods. IArgumentResolver Used as base for the more specialized IMessageArgumentResolver and IAdditionalArgumentResolver . ILazyArgumentValue Represent a value for an argument that will be available in the future. IMessageArgumentResolver These resolvers are used to cast or transform the message parameter to be forwarded to the subscribed method. ISingleMessageArgumentResolver These resolvers are used to handle the single message parameter (the pure message, not wrapped in any enumerable or collection). IStreamEnumerableMessageArgumentResolver These resolvers are used to handle the message streams such as IMessageStreamEnumerable<TMessage> . The streams are basically handled as a single message by the publisher. The difference is that it is guaranteed that the subscribers are invoked from another thread, when published via PublishAsync(Object) / PublishAsync<TResult>(Object) . This is done to avoid blocking the original thread waiting for the stream to complete."
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.IAdditionalArgumentResolver.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.IAdditionalArgumentResolver.html",
    "title": "Interface IAdditionalArgumentResolver | Silverback",
    "keywords": "Interface IAdditionalArgumentResolver These resolvers are used to try to get a value for the additional parameters (other than the message itself) of the subscribed methods. Inherited Members IArgumentResolver.CanResolve(Type) Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.dll Syntax public interface IAdditionalArgumentResolver : IArgumentResolver Methods | Improve this doc View source GetValue(Type, IServiceProvider) Returns a suitable value for the parameter of the specified type. Declaration object GetValue(Type parameterType, IServiceProvider serviceProvider) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the necessary services. Returns Type Description System.Object A value to be forwarded to the subscribed method."
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.IArgumentResolver.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.IArgumentResolver.html",
    "title": "Interface IArgumentResolver | Silverback",
    "keywords": "Interface IArgumentResolver Used as base for the more specialized IMessageArgumentResolver and IAdditionalArgumentResolver . Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.dll Syntax public interface IArgumentResolver Methods | Improve this doc View source CanResolve(Type) Returns a boolean value indicating whether this resolver instance can handle the parameter of the specified type. Declaration bool CanResolve(Type parameterType) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. Returns Type Description System.Boolean A boolean value indicating whether the specified parameter type can be handled."
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.ILazyArgumentValue.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.ILazyArgumentValue.html",
    "title": "Interface ILazyArgumentValue | Silverback",
    "keywords": "Interface ILazyArgumentValue Represent a value for an argument that will be available in the future. Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.dll Syntax public interface ILazyArgumentValue Properties | Improve this doc View source Value Gets the argument value, as soon as it is available. Declaration object Value { get; } Property Value Type Description System.Object Methods | Improve this doc View source WaitUntilCreatedAsync() Gets an awaitable System.Threading.Tasks.Task that completes when the argument value is available. Declaration Task WaitUntilCreatedAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.IMessageArgumentResolver.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.IMessageArgumentResolver.html",
    "title": "Interface IMessageArgumentResolver | Silverback",
    "keywords": "Interface IMessageArgumentResolver These resolvers are used to cast or transform the message parameter to be forwarded to the subscribed method. Inherited Members IArgumentResolver.CanResolve(Type) Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.dll Syntax public interface IMessageArgumentResolver : IArgumentResolver Methods | Improve this doc View source GetMessageType(Type) Returns the actual message type in the specified parameter type (e.g. TMessage for a parameter declared as IEnumerable<TMessage> . Declaration Type GetMessageType(Type parameterType) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. Returns Type Description System.Type The actual message type."
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.ISingleMessageArgumentResolver.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.ISingleMessageArgumentResolver.html",
    "title": "Interface ISingleMessageArgumentResolver | Silverback",
    "keywords": "Interface ISingleMessageArgumentResolver These resolvers are used to handle the single message parameter (the pure message, not wrapped in any enumerable or collection). Inherited Members IMessageArgumentResolver.GetMessageType(Type) IArgumentResolver.CanResolve(Type) Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.dll Syntax public interface ISingleMessageArgumentResolver : IMessageArgumentResolver, IArgumentResolver Methods | Improve this doc View source GetValue(Object) Returns the message value in a shape that is compatible with the subscribed method. Declaration object GetValue(object message) Parameters Type Name Description System.Object message The message being published. Returns Type Description System.Object The actual value to be forwarded to the subscribed method."
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.IStreamEnumerableMessageArgumentResolver.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.IStreamEnumerableMessageArgumentResolver.html",
    "title": "Interface IStreamEnumerableMessageArgumentResolver | Silverback",
    "keywords": "Interface IStreamEnumerableMessageArgumentResolver These resolvers are used to handle the message streams such as IMessageStreamEnumerable<TMessage> . The streams are basically handled as a single message by the publisher. The difference is that it is guaranteed that the subscribers are invoked from another thread, when published via PublishAsync(Object) / PublishAsync<TResult>(Object) . This is done to avoid blocking the original thread waiting for the stream to complete. Inherited Members IMessageArgumentResolver.GetMessageType(Type) IArgumentResolver.CanResolve(Type) Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.dll Syntax public interface IStreamEnumerableMessageArgumentResolver : IMessageArgumentResolver, IArgumentResolver Methods | Improve this doc View source GetValue(IMessageStreamProvider, Type, IReadOnlyCollection<IMessageFilter>) Returns the messages stream in a shape that is compatible with the subscribed method. Declaration ILazyArgumentValue GetValue(IMessageStreamProvider streamProvider, Type targetMessageType, IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description IMessageStreamProvider streamProvider The IMessageStreamProvider being published. System.Type targetMessageType The actual message type being declared by the subscribed method (e.g. TMessage for an IMessageStreamEnumerable<TMessage> ). System.Collections.Generic.IReadOnlyCollection < IMessageFilter > filters The filters to be applied. Returns Type Description ILazyArgumentValue The actual value to be forwarded to the subscribed method."
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.ObservableStreamMessageArgumentResolver.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.ObservableStreamMessageArgumentResolver.html",
    "title": "Class ObservableStreamMessageArgumentResolver | Silverback",
    "keywords": "Class ObservableStreamMessageArgumentResolver Resolves the parameters declared as IMessageStreamObservable<TMessage> where TMessage is compatible with the type of the message being published. Inheritance System.Object ObservableStreamMessageArgumentResolver Implements IStreamEnumerableMessageArgumentResolver IMessageArgumentResolver IArgumentResolver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.Rx.dll Syntax public class ObservableStreamMessageArgumentResolver : IStreamEnumerableMessageArgumentResolver, IMessageArgumentResolver, IArgumentResolver Methods | Improve this doc View source CanResolve(Type) Returns a boolean value indicating whether this resolver instance can handle the parameter of the specified type. Declaration public bool CanResolve(Type parameterType) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. Returns Type Description System.Boolean A boolean value indicating whether the specified parameter type can be handled. | Improve this doc View source GetMessageType(Type) Returns the actual message type in the specified parameter type (e.g. TMessage for a parameter declared as IEnumerable<TMessage> . Declaration public Type GetMessageType(Type parameterType) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. Returns Type Description System.Type The actual message type. | Improve this doc View source GetValue(IMessageStreamProvider, Type, IReadOnlyCollection<IMessageFilter>) Returns the messages stream in a shape that is compatible with the subscribed method. Declaration public ILazyArgumentValue GetValue(IMessageStreamProvider streamProvider, Type targetMessageType, IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description IMessageStreamProvider streamProvider The IMessageStreamProvider being published. System.Type targetMessageType The actual message type being declared by the subscribed method (e.g. TMessage for an IMessageStreamEnumerable<TMessage> ). System.Collections.Generic.IReadOnlyCollection < IMessageFilter > filters The filters to be applied. Returns Type Description ILazyArgumentValue The actual value to be forwarded to the subscribed method. Implements IStreamEnumerableMessageArgumentResolver IMessageArgumentResolver IArgumentResolver"
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.SingleMessageArgumentResolver.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.SingleMessageArgumentResolver.html",
    "title": "Class SingleMessageArgumentResolver | Silverback",
    "keywords": "Class SingleMessageArgumentResolver Resolves the parameters declared with a type that is compatible with the type of the message being published. Inheritance System.Object SingleMessageArgumentResolver Implements ISingleMessageArgumentResolver IMessageArgumentResolver IArgumentResolver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.dll Syntax public class SingleMessageArgumentResolver : ISingleMessageArgumentResolver, IMessageArgumentResolver, IArgumentResolver Methods | Improve this doc View source CanResolve(Type) Returns a boolean value indicating whether this resolver instance can handle the parameter of the specified type. Declaration public bool CanResolve(Type parameterType) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. Returns Type Description System.Boolean A boolean value indicating whether the specified parameter type can be handled. | Improve this doc View source GetMessageType(Type) Returns the actual message type in the specified parameter type (e.g. TMessage for a parameter declared as IEnumerable<TMessage> . Declaration public Type GetMessageType(Type parameterType) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. Returns Type Description System.Type The actual message type. | Improve this doc View source GetValue(Object) Returns the message value in a shape that is compatible with the subscribed method. Declaration public object GetValue(object message) Parameters Type Name Description System.Object message The message being published. Returns Type Description System.Object The actual value to be forwarded to the subscribed method. Implements ISingleMessageArgumentResolver IMessageArgumentResolver IArgumentResolver"
  },
  "api/Silverback.Messaging.Subscribers.ArgumentResolvers.StreamEnumerableMessageArgumentResolver.html": {
    "href": "api/Silverback.Messaging.Subscribers.ArgumentResolvers.StreamEnumerableMessageArgumentResolver.html",
    "title": "Class StreamEnumerableMessageArgumentResolver | Silverback",
    "keywords": "Class StreamEnumerableMessageArgumentResolver Resolves the parameters declared as IMessageStreamEnumerable<TMessage> where TMessage is compatible with the type of the message being published. Inheritance System.Object StreamEnumerableMessageArgumentResolver Implements IStreamEnumerableMessageArgumentResolver IMessageArgumentResolver IArgumentResolver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.ArgumentResolvers Assembly : Silverback.Core.dll Syntax public class StreamEnumerableMessageArgumentResolver : IStreamEnumerableMessageArgumentResolver, IMessageArgumentResolver, IArgumentResolver Methods | Improve this doc View source CanResolve(Type) Returns a boolean value indicating whether this resolver instance can handle the parameter of the specified type. Declaration public bool CanResolve(Type parameterType) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. Returns Type Description System.Boolean A boolean value indicating whether the specified parameter type can be handled. | Improve this doc View source GetMessageType(Type) Returns the actual message type in the specified parameter type (e.g. TMessage for a parameter declared as IEnumerable<TMessage> . Declaration public Type GetMessageType(Type parameterType) Parameters Type Name Description System.Type parameterType The type of the parameter to be resolved. Returns Type Description System.Type The actual message type. | Improve this doc View source GetValue(IMessageStreamProvider, Type, IReadOnlyCollection<IMessageFilter>) Returns the messages stream in a shape that is compatible with the subscribed method. Declaration public ILazyArgumentValue GetValue(IMessageStreamProvider streamProvider, Type targetMessageType, IReadOnlyCollection<IMessageFilter> filters = null) Parameters Type Name Description IMessageStreamProvider streamProvider The IMessageStreamProvider being published. System.Type targetMessageType The actual message type being declared by the subscribed method (e.g. TMessage for an IMessageStreamEnumerable<TMessage> ). System.Collections.Generic.IReadOnlyCollection < IMessageFilter > filters The filters to be applied. Returns Type Description ILazyArgumentValue The actual value to be forwarded to the subscribed method. Implements IStreamEnumerableMessageArgumentResolver IMessageArgumentResolver IArgumentResolver"
  },
  "api/Silverback.Messaging.Subscribers.html": {
    "href": "api/Silverback.Messaging.Subscribers.html",
    "title": "Namespace Silverback.Messaging.Subscribers | Silverback",
    "keywords": "Namespace Silverback.Messaging.Subscribers Classes KafkaGroupIdFilterAttribute Can be placed on a subscribed method to filter the messages to be processed according to the group id that consumed them. This is used when having multiple consumer groups for the same topic running in the same process. MessageFilterAttribute Can be placed on a subscribed method to filter the messages to be processed. MqttClientIdFilterAttribute Can be placed on a subscribed method to filter the messages to be processed according to the client id that consumed them. This is used when having multiple clients for the same topic running in the same process. SubscribeAttribute Used to identify the methods that have to be subscribed to the messages stream. The first parameter of the subscriber method always correspond to the message and must be declared with a type compatible with the message to be received (the message type, a base type or an implemented interface) or a collection of items of that type. The methods can be either synchronous or asynchronous (returning a System.Threading.Tasks.Task ) and don't need to be publicly visible. SubscribedMethod A subscribed method that can process certain messages. SubscribedMethodInvocationException The exception that is thrown when a subscribed method cannot be invoked. This usually happens because no value can be resolved for one or more arguments. SubscribedMethodsLoaderService Resolves all the subscribers and build the types cache to boost the first publish performance. Interfaces IMessageFilter Filters the messages to be processed. ISubscribedMethodsCache Stores the map of the subscribed methods for each message type."
  },
  "api/Silverback.Messaging.Subscribers.IMessageFilter.html": {
    "href": "api/Silverback.Messaging.Subscribers.IMessageFilter.html",
    "title": "Interface IMessageFilter | Silverback",
    "keywords": "Interface IMessageFilter Filters the messages to be processed. Namespace : Silverback.Messaging.Subscribers Assembly : Silverback.Core.dll Syntax public interface IMessageFilter Methods | Improve this doc View source MustProcess(Object) Returns a boolean value indicating whether the specified message must be processed by the subscribed method decorated with this attribute. Declaration bool MustProcess(object message) Parameters Type Name Description System.Object message The message to be checked. Returns Type Description System.Boolean A boolean value indicating whether the message must be processed by the subscribed method."
  },
  "api/Silverback.Messaging.Subscribers.ISubscribedMethodsCache.html": {
    "href": "api/Silverback.Messaging.Subscribers.ISubscribedMethodsCache.html",
    "title": "Interface ISubscribedMethodsCache | Silverback",
    "keywords": "Interface ISubscribedMethodsCache Stores the map of the subscribed methods for each message type. Namespace : Silverback.Messaging.Subscribers Assembly : Silverback.Core.dll Syntax public interface ISubscribedMethodsCache Properties | Improve this doc View source HasAnyMessageStreamSubscriber Gets a value indicating whether there is at least one subscriber that would potentially receive an IMessageStreamEnumerable<TMessage> . Declaration bool HasAnyMessageStreamSubscriber { get; } Property Value Type Description System.Boolean Methods | Improve this doc View source IsSubscribed(Object) Checks whether the specified message would be handled by any of the registered subscribers. Declaration bool IsSubscribed(object message) Parameters Type Name Description System.Object message The message that could be published. Returns Type Description System.Boolean true if at least a subscriber would be invoked for the specified message, otherwise false ."
  },
  "api/Silverback.Messaging.Subscribers.KafkaGroupIdFilterAttribute.html": {
    "href": "api/Silverback.Messaging.Subscribers.KafkaGroupIdFilterAttribute.html",
    "title": "Class KafkaGroupIdFilterAttribute | Silverback",
    "keywords": "Class KafkaGroupIdFilterAttribute Can be placed on a subscribed method to filter the messages to be processed according to the group id that consumed them. This is used when having multiple consumer groups for the same topic running in the same process. Inheritance System.Object System.Attribute MessageFilterAttribute KafkaGroupIdFilterAttribute Implements IMessageFilter Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers Assembly : Silverback.Integration.Kafka.dll Syntax public sealed class KafkaGroupIdFilterAttribute : MessageFilterAttribute, IMessageFilter Constructors | Improve this doc View source KafkaGroupIdFilterAttribute(String[]) Initializes a new instance of the KafkaGroupIdFilterAttribute class. Declaration public KafkaGroupIdFilterAttribute(params string[] groupId) Parameters Type Name Description System.String [] groupId The list of group id whose messages have to be processed. Properties | Improve this doc View source GroupId Gets the list of group id whose messages have to be processed. Declaration public string[] GroupId { get; } Property Value Type Description System.String [] Methods | Improve this doc View source MustProcess(Object) Returns a boolean value indicating whether the specified message must be processed by the subscribed method decorated with this attribute. Declaration public override bool MustProcess(object message) Parameters Type Name Description System.Object message The message to be checked. Returns Type Description System.Boolean A boolean value indicating whether the message must be processed by the subscribed method. Overrides MessageFilterAttribute.MustProcess(Object) Implements IMessageFilter"
  },
  "api/Silverback.Messaging.Subscribers.MessageFilterAttribute.html": {
    "href": "api/Silverback.Messaging.Subscribers.MessageFilterAttribute.html",
    "title": "Class MessageFilterAttribute | Silverback",
    "keywords": "Class MessageFilterAttribute Can be placed on a subscribed method to filter the messages to be processed. Inheritance System.Object System.Attribute MessageFilterAttribute KafkaGroupIdFilterAttribute MqttClientIdFilterAttribute Implements IMessageFilter Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers Assembly : Silverback.Core.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public abstract class MessageFilterAttribute : Attribute, IMessageFilter Methods | Improve this doc View source MustProcess(Object) Returns a boolean value indicating whether the specified message must be processed by the subscribed method decorated with this attribute. Declaration public abstract bool MustProcess(object message) Parameters Type Name Description System.Object message The message to be checked. Returns Type Description System.Boolean A boolean value indicating whether the message must be processed by the subscribed method. Implements IMessageFilter"
  },
  "api/Silverback.Messaging.Subscribers.MqttClientIdFilterAttribute.html": {
    "href": "api/Silverback.Messaging.Subscribers.MqttClientIdFilterAttribute.html",
    "title": "Class MqttClientIdFilterAttribute | Silverback",
    "keywords": "Class MqttClientIdFilterAttribute Can be placed on a subscribed method to filter the messages to be processed according to the client id that consumed them. This is used when having multiple clients for the same topic running in the same process. Inheritance System.Object System.Attribute MessageFilterAttribute MqttClientIdFilterAttribute Implements IMessageFilter Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers Assembly : Silverback.Integration.MQTT.dll Syntax public sealed class MqttClientIdFilterAttribute : MessageFilterAttribute, IMessageFilter Constructors | Improve this doc View source MqttClientIdFilterAttribute(String[]) Initializes a new instance of the MqttClientIdFilterAttribute class. Declaration public MqttClientIdFilterAttribute(params string[] clientId) Parameters Type Name Description System.String [] clientId The list of client id whose messages have to be processed. Properties | Improve this doc View source ClientId Gets the list of client id whose messages have to be processed. Declaration public string[] ClientId { get; } Property Value Type Description System.String [] Methods | Improve this doc View source MustProcess(Object) Returns a boolean value indicating whether the specified message must be processed by the subscribed method decorated with this attribute. Declaration public override bool MustProcess(object message) Parameters Type Name Description System.Object message The message to be checked. Returns Type Description System.Boolean A boolean value indicating whether the message must be processed by the subscribed method. Overrides MessageFilterAttribute.MustProcess(Object) Implements IMessageFilter"
  },
  "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.AsyncEnumerableMessagesReturnValueHandler.html": {
    "href": "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.AsyncEnumerableMessagesReturnValueHandler.html",
    "title": "Class AsyncEnumerableMessagesReturnValueHandler | Silverback",
    "keywords": "Class AsyncEnumerableMessagesReturnValueHandler Handles the returned System.Collections.Generic.IAsyncEnumerable<T> republishing all the messages. Inheritance System.Object AsyncEnumerableMessagesReturnValueHandler Implements IReturnValueHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.ReturnValueHandlers Assembly : Silverback.Core.dll Syntax public class AsyncEnumerableMessagesReturnValueHandler : IReturnValueHandler Constructors | Improve this doc View source AsyncEnumerableMessagesReturnValueHandler(IPublisher, IBusOptions) Initializes a new instance of the AsyncEnumerableMessagesReturnValueHandler class. Declaration public AsyncEnumerableMessagesReturnValueHandler(IPublisher publisher, IBusOptions busOptions) Parameters Type Name Description IPublisher publisher The IPublisher to be used to publish the messages. IBusOptions busOptions The IBusOptions that specify which message types have to be handled. Methods | Improve this doc View source CanHandle(Object) Returns a boolean value indicating whether this handler can handle the specified value. Declaration public bool CanHandle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Boolean A boolean value indicating whether the value can be handled. | Improve this doc View source Handle(Object) Handles the specified return value. Declaration public void Handle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. | Improve this doc View source HandleAsync(Object) Handles the specified return value. Declaration public Task HandleAsync(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IReturnValueHandler"
  },
  "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.EnumerableMessagesReturnValueHandler.html": {
    "href": "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.EnumerableMessagesReturnValueHandler.html",
    "title": "Class EnumerableMessagesReturnValueHandler | Silverback",
    "keywords": "Class EnumerableMessagesReturnValueHandler Handles the returned System.Collections.Generic.IEnumerable<T> republishing all the messages. Inheritance System.Object EnumerableMessagesReturnValueHandler Implements IReturnValueHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.ReturnValueHandlers Assembly : Silverback.Core.dll Syntax public class EnumerableMessagesReturnValueHandler : IReturnValueHandler Constructors | Improve this doc View source EnumerableMessagesReturnValueHandler(IPublisher, IBusOptions) Initializes a new instance of the EnumerableMessagesReturnValueHandler class. Declaration public EnumerableMessagesReturnValueHandler(IPublisher publisher, IBusOptions busOptions) Parameters Type Name Description IPublisher publisher The IPublisher to be used to publish the messages. IBusOptions busOptions The IBusOptions that specify which message types have to be handled. Methods | Improve this doc View source CanHandle(Object) Returns a boolean value indicating whether this handler can handle the specified value. Declaration public bool CanHandle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Boolean A boolean value indicating whether the value can be handled. | Improve this doc View source Handle(Object) Handles the specified return value. Declaration public void Handle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. | Improve this doc View source HandleAsync(Object) Handles the specified return value. Declaration public Task HandleAsync(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IReturnValueHandler"
  },
  "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.html": {
    "href": "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.html",
    "title": "Namespace Silverback.Messaging.Subscribers.ReturnValueHandlers | Silverback",
    "keywords": "Namespace Silverback.Messaging.Subscribers.ReturnValueHandlers Classes AsyncEnumerableMessagesReturnValueHandler Handles the returned System.Collections.Generic.IAsyncEnumerable<T> republishing all the messages. EnumerableMessagesReturnValueHandler Handles the returned System.Collections.Generic.IEnumerable<T> republishing all the messages. ObservableMessagesReturnValueHandler Handles the returned System.IObservable<T> republishing all the messages. ReadOnlyCollectionMessagesReturnValueHandler Handles the returned System.Collections.Generic.IReadOnlyCollection<T> republishing all the messages. SingleMessageReturnValueHandler Handles the returned message republishing it. Interfaces IReturnValueHandler These types are used to handle the subscribed methods return values (e.g. to republish the returned messages)."
  },
  "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.IReturnValueHandler.html": {
    "href": "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.IReturnValueHandler.html",
    "title": "Interface IReturnValueHandler | Silverback",
    "keywords": "Interface IReturnValueHandler These types are used to handle the subscribed methods return values (e.g. to republish the returned messages). Namespace : Silverback.Messaging.Subscribers.ReturnValueHandlers Assembly : Silverback.Core.dll Syntax public interface IReturnValueHandler Methods | Improve this doc View source CanHandle(Object) Returns a boolean value indicating whether this handler can handle the specified value. Declaration bool CanHandle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Boolean A boolean value indicating whether the value can be handled. | Improve this doc View source Handle(Object) Handles the specified return value. Declaration void Handle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. | Improve this doc View source HandleAsync(Object) Handles the specified return value. Declaration Task HandleAsync(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.ObservableMessagesReturnValueHandler.html": {
    "href": "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.ObservableMessagesReturnValueHandler.html",
    "title": "Class ObservableMessagesReturnValueHandler | Silverback",
    "keywords": "Class ObservableMessagesReturnValueHandler Handles the returned System.IObservable<T> republishing all the messages. Inheritance System.Object ObservableMessagesReturnValueHandler Implements IReturnValueHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.ReturnValueHandlers Assembly : Silverback.Core.Rx.dll Syntax public class ObservableMessagesReturnValueHandler : IReturnValueHandler Constructors | Improve this doc View source ObservableMessagesReturnValueHandler(IPublisher, IBusOptions) Initializes a new instance of the ObservableMessagesReturnValueHandler class. Declaration public ObservableMessagesReturnValueHandler(IPublisher publisher, IBusOptions busOptions) Parameters Type Name Description IPublisher publisher The IPublisher to be used to publish the messages. IBusOptions busOptions The IBusOptions that specify which message types have to be handled. Methods | Improve this doc View source CanHandle(Object) Returns a boolean value indicating whether this handler can handle the specified value. Declaration public bool CanHandle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Boolean A boolean value indicating whether the value can be handled. | Improve this doc View source Handle(Object) Handles the specified return value. Declaration public void Handle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. | Improve this doc View source HandleAsync(Object) Handles the specified return value. Declaration public Task HandleAsync(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IReturnValueHandler"
  },
  "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.ReadOnlyCollectionMessagesReturnValueHandler.html": {
    "href": "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.ReadOnlyCollectionMessagesReturnValueHandler.html",
    "title": "Class ReadOnlyCollectionMessagesReturnValueHandler | Silverback",
    "keywords": "Class ReadOnlyCollectionMessagesReturnValueHandler Handles the returned System.Collections.Generic.IReadOnlyCollection<T> republishing all the messages. Inheritance System.Object ReadOnlyCollectionMessagesReturnValueHandler Implements IReturnValueHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.ReturnValueHandlers Assembly : Silverback.Core.dll Syntax public class ReadOnlyCollectionMessagesReturnValueHandler : IReturnValueHandler Constructors | Improve this doc View source ReadOnlyCollectionMessagesReturnValueHandler(IPublisher, IBusOptions) Initializes a new instance of the ReadOnlyCollectionMessagesReturnValueHandler class. Declaration public ReadOnlyCollectionMessagesReturnValueHandler(IPublisher publisher, IBusOptions busOptions) Parameters Type Name Description IPublisher publisher The IPublisher to be used to publish the messages. IBusOptions busOptions The IBusOptions that specify which message types have to be handled. Methods | Improve this doc View source CanHandle(Object) Returns a boolean value indicating whether this handler can handle the specified value. Declaration public bool CanHandle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Boolean A boolean value indicating whether the value can be handled. | Improve this doc View source Handle(Object) Handles the specified return value. Declaration public void Handle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. | Improve this doc View source HandleAsync(Object) Handles the specified return value. Declaration public Task HandleAsync(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IReturnValueHandler"
  },
  "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.SingleMessageReturnValueHandler.html": {
    "href": "api/Silverback.Messaging.Subscribers.ReturnValueHandlers.SingleMessageReturnValueHandler.html",
    "title": "Class SingleMessageReturnValueHandler | Silverback",
    "keywords": "Class SingleMessageReturnValueHandler Handles the returned message republishing it. Inheritance System.Object SingleMessageReturnValueHandler Implements IReturnValueHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.ReturnValueHandlers Assembly : Silverback.Core.dll Syntax public class SingleMessageReturnValueHandler : IReturnValueHandler Constructors | Improve this doc View source SingleMessageReturnValueHandler(IPublisher, IBusOptions) Initializes a new instance of the SingleMessageReturnValueHandler class. Declaration public SingleMessageReturnValueHandler(IPublisher publisher, IBusOptions busOptions) Parameters Type Name Description IPublisher publisher The IPublisher to be used to publish the messages. IBusOptions busOptions The IBusOptions that specify which message types have to be handled. Methods | Improve this doc View source CanHandle(Object) Returns a boolean value indicating whether this handler can handle the specified value. Declaration public bool CanHandle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Boolean A boolean value indicating whether the value can be handled. | Improve this doc View source Handle(Object) Handles the specified return value. Declaration public void Handle(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. | Improve this doc View source HandleAsync(Object) Handles the specified return value. Declaration public Task HandleAsync(object returnValue) Parameters Type Name Description System.Object returnValue The value to be handled. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IReturnValueHandler"
  },
  "api/Silverback.Messaging.Subscribers.SubscribeAttribute.html": {
    "href": "api/Silverback.Messaging.Subscribers.SubscribeAttribute.html",
    "title": "Class SubscribeAttribute | Silverback",
    "keywords": "Class SubscribeAttribute Used to identify the methods that have to be subscribed to the messages stream. The first parameter of the subscriber method always correspond to the message and must be declared with a type compatible with the message to be received (the message type, a base type or an implemented interface) or a collection of items of that type. The methods can be either synchronous or asynchronous (returning a System.Threading.Tasks.Task ) and don't need to be publicly visible. Inheritance System.Object System.Attribute SubscribeAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers Assembly : Silverback.Core.dll Syntax [AttributeUsage(AttributeTargets.Method)] public sealed class SubscribeAttribute : Attribute Properties | Improve this doc View source Exclusive Gets or sets a value indicating whether the method can be executed concurrently to other methods handling the same message . The default value is true (the method will be executed sequentially to other subscribers). Declaration public bool Exclusive { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Silverback.Messaging.Subscribers.SubscribedMethod.html": {
    "href": "api/Silverback.Messaging.Subscribers.SubscribedMethod.html",
    "title": "Class SubscribedMethod | Silverback",
    "keywords": "Class SubscribedMethod A subscribed method that can process certain messages. Inheritance System.Object SubscribedMethod Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers Assembly : Silverback.Core.dll Syntax public class SubscribedMethod Constructors | Improve this doc View source SubscribedMethod(Func<IServiceProvider, Object>, MethodInfo, SubscriptionOptions) Initializes a new instance of the SubscribedMethod class. Declaration public SubscribedMethod(Func<IServiceProvider, object> targetTypeFactory, MethodInfo methodInfo, SubscriptionOptions options) Parameters Type Name Description System.Func < System.IServiceProvider , System.Object > targetTypeFactory The delegate to be used to resolve an instantiate of the type declaring the subscribed method. System.Reflection.MethodInfo methodInfo The MethodInfo related to the subscribed method. SubscriptionOptions options The SubscriptionOptions . Properties | Improve this doc View source AdditionalArgumentsResolvers Gets the list of IAdditionalArgumentResolver to be used to invoke the method. Declaration public IReadOnlyList<IAdditionalArgumentResolver> AdditionalArgumentsResolvers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IAdditionalArgumentResolver > | Improve this doc View source MessageArgumentResolver Gets the IMessageArgumentResolver to be used to invoke the method. Declaration public IMessageArgumentResolver MessageArgumentResolver { get; } Property Value Type Description IMessageArgumentResolver | Improve this doc View source MessageArgumentType Gets the type of the message argument (e.g. MyMessage or IEnumerable<MyMessage> ). Declaration public Type MessageArgumentType { get; } Property Value Type Description System.Type | Improve this doc View source MessageType Gets the type of the message (or envelope) being subscribe. Declaration public Type MessageType { get; } Property Value Type Description System.Type | Improve this doc View source MethodInfo Gets the MethodInfo related to the subscribed method. Declaration public MethodInfo MethodInfo { get; } Property Value Type Description System.Reflection.MethodInfo | Improve this doc View source Options Gets the SubscriptionOptions . Declaration public SubscriptionOptions Options { get; } Property Value Type Description SubscriptionOptions | Improve this doc View source Parameters Gets the System.Reflection.ParameterInfo for each parameter of the subscribed method. Declaration public IReadOnlyList<ParameterInfo> Parameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.Reflection.ParameterInfo > Methods | Improve this doc View source ResolveTargetType(IServiceProvider) Resolves an instantiate of the type declaring the subscribed method. Declaration public object ResolveTargetType(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the type or the necessary services. Returns Type Description System.Object The target type ."
  },
  "api/Silverback.Messaging.Subscribers.SubscribedMethodInvocationException.html": {
    "href": "api/Silverback.Messaging.Subscribers.SubscribedMethodInvocationException.html",
    "title": "Class SubscribedMethodInvocationException | Silverback",
    "keywords": "Class SubscribedMethodInvocationException The exception that is thrown when a subscribed method cannot be invoked. This usually happens because no value can be resolved for one or more arguments. Inheritance System.Object System.Exception SilverbackException SubscribedMethodInvocationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Subscribers Assembly : Silverback.Core.dll Syntax [Serializable] public class SubscribedMethodInvocationException : SilverbackException, ISerializable Constructors | Improve this doc View source SubscribedMethodInvocationException() Initializes a new instance of the SubscribedMethodInvocationException class. Declaration public SubscribedMethodInvocationException() | Improve this doc View source SubscribedMethodInvocationException(MethodInfo, String) Initializes a new instance of the SubscribedMethodInvocationException class with the specified message and related to the specified MethodInfo . Declaration public SubscribedMethodInvocationException(MethodInfo methodInfo, string message) Parameters Type Name Description System.Reflection.MethodInfo methodInfo The MethodInfo of the related subscribed method. System.String message The exception message. | Improve this doc View source SubscribedMethodInvocationException(SerializationInfo, StreamingContext) Initializes a new instance of the SubscribedMethodInvocationException class with the serialized data. Declaration protected SubscribedMethodInvocationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source SubscribedMethodInvocationException(String) Initializes a new instance of the SubscribedMethodInvocationException class with the specified message. Declaration public SubscribedMethodInvocationException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source SubscribedMethodInvocationException(String, Exception) Initializes a new instance of the SubscribedMethodInvocationException class with the specified message and inner exception. Declaration public SubscribedMethodInvocationException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Properties | Improve this doc View source MethodInfo Gets the MethodInfo representing the subscribed method whose invocation thrown the exception. Declaration public MethodInfo MethodInfo { get; } Property Value Type Description System.Reflection.MethodInfo Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Subscribers.SubscribedMethodsLoaderService.html": {
    "href": "api/Silverback.Messaging.Subscribers.SubscribedMethodsLoaderService.html",
    "title": "Class SubscribedMethodsLoaderService | Silverback",
    "keywords": "Class SubscribedMethodsLoaderService Resolves all the subscribers and build the types cache to boost the first publish performance. Inheritance System.Object Microsoft.Extensions.Hosting.BackgroundService SubscribedMethodsLoaderService Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable Inherited Members Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken) Microsoft.Extensions.Hosting.BackgroundService.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers Assembly : Silverback.Core.dll Syntax public class SubscribedMethodsLoaderService : BackgroundService, IHostedService, IDisposable Constructors | Improve this doc View source SubscribedMethodsLoaderService(IServiceScopeFactory) Initializes a new instance of the SubscribedMethodsLoaderService class. Declaration public SubscribedMethodsLoaderService(IServiceScopeFactory serviceScopeFactory) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory The Microsoft.Extensions.DependencyInjection.IServiceScopeFactory . Methods | Improve this doc View source ExecuteAsync(CancellationToken) Declaration protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters Type Name Description System.Threading.CancellationToken stoppingToken Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken) Implements Microsoft.Extensions.Hosting.IHostedService System.IDisposable"
  },
  "api/Silverback.Messaging.Subscribers.Subscriptions.html": {
    "href": "api/Silverback.Messaging.Subscribers.Subscriptions.html",
    "title": "Namespace Silverback.Messaging.Subscribers.Subscriptions | Silverback",
    "keywords": "Namespace Silverback.Messaging.Subscribers.Subscriptions Classes SubscriptionOptions The subscription options such as filters and parallelism settings. TypeSubscriptionOptions The subscription options such as filters and parallelism settings. Interfaces ISubscription Represents a subscription configuration. Each subscription can resolve to multiple SubscribedMethod ."
  },
  "api/Silverback.Messaging.Subscribers.Subscriptions.ISubscription.html": {
    "href": "api/Silverback.Messaging.Subscribers.Subscriptions.ISubscription.html",
    "title": "Interface ISubscription | Silverback",
    "keywords": "Interface ISubscription Represents a subscription configuration. Each subscription can resolve to multiple SubscribedMethod . Namespace : Silverback.Messaging.Subscribers.Subscriptions Assembly : Silverback.Core.dll Syntax public interface ISubscription Methods | Improve this doc View source GetSubscribedMethods(IServiceProvider) Gets the SubscribedMethod collection. Declaration IReadOnlyCollection<SubscribedMethod> GetSubscribedMethods(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider to be used to resolve the required services. Returns Type Description System.Collections.Generic.IReadOnlyCollection < SubscribedMethod > A collection of SubscribedMethod ."
  },
  "api/Silverback.Messaging.Subscribers.Subscriptions.SubscriptionOptions.html": {
    "href": "api/Silverback.Messaging.Subscribers.Subscriptions.SubscriptionOptions.html",
    "title": "Class SubscriptionOptions | Silverback",
    "keywords": "Class SubscriptionOptions The subscription options such as filters and parallelism settings. Inheritance System.Object SubscriptionOptions TypeSubscriptionOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.Subscriptions Assembly : Silverback.Core.dll Syntax public class SubscriptionOptions Properties | Improve this doc View source Exclusive Gets or sets a value indicating whether the method(s) can be executed concurrently to other methods handling the same message. The default value is true (the method(s) will be executed sequentially to other subscribers). Declaration public bool Exclusive { get; set; } Property Value Type Description System.Boolean | Improve this doc View source Filters Gets or sets the filters to be applied. Declaration public IReadOnlyCollection<IMessageFilter> Filters { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < IMessageFilter >"
  },
  "api/Silverback.Messaging.Subscribers.Subscriptions.TypeSubscriptionOptions.html": {
    "href": "api/Silverback.Messaging.Subscribers.Subscriptions.TypeSubscriptionOptions.html",
    "title": "Class TypeSubscriptionOptions | Silverback",
    "keywords": "Class TypeSubscriptionOptions The subscription options such as filters and parallelism settings. Inheritance System.Object SubscriptionOptions TypeSubscriptionOptions Inherited Members SubscriptionOptions.Exclusive SubscriptionOptions.Filters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Subscribers.Subscriptions Assembly : Silverback.Core.dll Syntax public class TypeSubscriptionOptions : SubscriptionOptions Properties | Improve this doc View source AutoSubscribeAllPublicMethods Gets or sets a value indicating whether all public methods of the specified type have to be automatically subscribed. When set to false only the methods decorated with the SubscribeAttribute are subscribed. Declaration public bool AutoSubscribeAllPublicMethods { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Silverback.Messaging.Validation.html": {
    "href": "api/Silverback.Messaging.Validation.html",
    "title": "Namespace Silverback.Messaging.Validation | Silverback",
    "keywords": "Namespace Silverback.Messaging.Validation Classes MessageValidationException The exception that is thrown when the message is not valid and the validation mode is ThrowException . ValidatorConsumerBehavior Deserializes the messages being consumed using the configured IMessageSerializer . ValidatorProducerBehavior Determines whether the message is valid. Enums MessageValidationMode Specifies the message validation mode."
  },
  "api/Silverback.Messaging.Validation.MessageValidationException.html": {
    "href": "api/Silverback.Messaging.Validation.MessageValidationException.html",
    "title": "Class MessageValidationException | Silverback",
    "keywords": "Class MessageValidationException The exception that is thrown when the message is not valid and the validation mode is ThrowException . Inheritance System.Object System.Exception SilverbackException MessageValidationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback.Messaging.Validation Assembly : Silverback.Integration.dll Syntax [Serializable] public class MessageValidationException : SilverbackException, ISerializable Constructors | Improve this doc View source MessageValidationException() Initializes a new instance of the MessageValidationException class. Declaration public MessageValidationException() | Improve this doc View source MessageValidationException(SerializationInfo, StreamingContext) Initializes a new instance of the MessageValidationException class with the serialized data. Declaration protected MessageValidationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source MessageValidationException(String) Initializes a new instance of the MessageValidationException class with the specified message. Declaration public MessageValidationException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source MessageValidationException(String, Exception) Initializes a new instance of the MessageValidationException class with the specified message and inner exception. Declaration public MessageValidationException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Messaging.Validation.MessageValidationMode.html": {
    "href": "api/Silverback.Messaging.Validation.MessageValidationMode.html",
    "title": "Enum MessageValidationMode | Silverback",
    "keywords": "Enum MessageValidationMode Specifies the message validation mode. Namespace : Silverback.Messaging.Validation Assembly : Silverback.Integration.dll Syntax public enum MessageValidationMode Fields Name Description LogWarning A warning is logged if the message is not valid. None No validation is performed. ThrowException An exception is thrown if the message is not valid."
  },
  "api/Silverback.Messaging.Validation.ValidatorConsumerBehavior.html": {
    "href": "api/Silverback.Messaging.Validation.ValidatorConsumerBehavior.html",
    "title": "Class ValidatorConsumerBehavior | Silverback",
    "keywords": "Class ValidatorConsumerBehavior Deserializes the messages being consumed using the configured IMessageSerializer . Inheritance System.Object ValidatorConsumerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Validation Assembly : Silverback.Integration.dll Syntax public class ValidatorConsumerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ValidatorConsumerBehavior(IInboundLogger<ValidatorConsumerBehavior>) Initializes a new instance of the ValidatorConsumerBehavior class. Declaration public ValidatorConsumerBehavior(IInboundLogger<ValidatorConsumerBehavior> logger) Parameters Type Name Description IInboundLogger < ValidatorConsumerBehavior > logger The IInboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public async Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Messaging.Validation.ValidatorProducerBehavior.html": {
    "href": "api/Silverback.Messaging.Validation.ValidatorProducerBehavior.html",
    "title": "Class ValidatorProducerBehavior | Silverback",
    "keywords": "Class ValidatorProducerBehavior Determines whether the message is valid. Inheritance System.Object ValidatorProducerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Messaging.Validation Assembly : Silverback.Integration.dll Syntax public class ValidatorProducerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source ValidatorProducerBehavior(IOutboundLogger<ValidatorProducerBehavior>) Initializes a new instance of the ValidatorProducerBehavior class. Declaration public ValidatorProducerBehavior(IOutboundLogger<ValidatorProducerBehavior> logger) Parameters Type Name Description IOutboundLogger < ValidatorProducerBehavior > logger The IOutboundLogger<TCategoryName> . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public async Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.SilverbackException.html": {
    "href": "api/Silverback.SilverbackException.html",
    "title": "Class SilverbackException | Silverback",
    "keywords": "Class SilverbackException The base class for all the custom exceptions thrown by Silverback. Inheritance System.Object System.Exception SilverbackException DatabaseTableNotFoundException EventSourcingException EventStoreException BrokerCallbackInvocationException ProduceException ConsumerPipelineFatalException EndpointConfigurationException UnhandledMessageException SequenceException MessageSerializerException SubscribedMethodInvocationException MessageValidationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Silverback Assembly : Silverback.Core.dll Syntax [Serializable] public abstract class SilverbackException : Exception, ISerializable Constructors | Improve this doc View source SilverbackException() Initializes a new instance of the SilverbackException class. Declaration protected SilverbackException() | Improve this doc View source SilverbackException(SerializationInfo, StreamingContext) Initializes a new instance of the SilverbackException class with the serialized data. Declaration protected SilverbackException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this doc View source SilverbackException(String) Initializes a new instance of the SilverbackException class with the specified message. Declaration protected SilverbackException(string message) Parameters Type Name Description System.String message The exception message. | Improve this doc View source SilverbackException(String, Exception) Initializes a new instance of the SilverbackException class with the specified message and inner exception. Declaration protected SilverbackException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message. System.Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Silverback.Testing.html": {
    "href": "api/Silverback.Testing.html",
    "title": "Namespace Silverback.Testing | Silverback",
    "keywords": "Namespace Silverback.Testing Classes InboundSpyBrokerBehavior Added at the end of the consumer pipeline, forwards the processed IInboundEnvelope to the IIntegrationSpy . InboundSpySubscriber Subscribes to all the IOutboundEnvelope transiting through the internal bus and forwards them to the IIntegrationSpy to be collected. IntegrationSpy Monitors and collects all outbound and inbound messages. KafkaTestingHelper Exposes some helper methods and shortcuts to simplify testing. MqttTestingHelper Exposes some helper methods and shortcuts to simplify testing. OutboundSpyBrokerBehavior Added at the very beginning of the producer pipeline, forwards the published IOutboundEnvelope to the IIntegrationSpy . RawInboundSpyBrokerBehavior Added at the very beginning of the consumer pipeline, forwards the untouched IRawInboundEnvelope to the IIntegrationSpy . RawOutboundSpyBrokerBehavior Added at the very end of the producer pipeline, forwards the produced IRawOutboundEnvelope to the IIntegrationSpy . TestingHelper<TBroker> Exposes some helper methods and shortcuts to simplify testing. Interfaces IIntegrationSpy Monitors and collects all outbound and inbound messages. IKafkaTestingHelper IMqttTestingHelper ITestingHelper<TBroker> Exposes some helper methods and shortcuts to simplify testing."
  },
  "api/Silverback.Testing.IIntegrationSpy.html": {
    "href": "api/Silverback.Testing.IIntegrationSpy.html",
    "title": "Interface IIntegrationSpy | Silverback",
    "keywords": "Interface IIntegrationSpy Monitors and collects all outbound and inbound messages. Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public interface IIntegrationSpy Properties | Improve this doc View source InboundEnvelopes Gets the list of IInboundEnvelope corresponding to all the inbound messages that have been processed by the consumer pipeline (except the ones that couldn't be deserialized, e.g. the ones with an empty body). Declaration IReadOnlyList<IInboundEnvelope> InboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IInboundEnvelope > | Improve this doc View source OutboundEnvelopes Gets the list of IOutboundEnvelope corresponding to all the outbound messages. Declaration IReadOnlyList<IOutboundEnvelope> OutboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IOutboundEnvelope > Remarks The messages produces via RawProduce or RawProduceAsync will not go through the Silverback pipeline and will therefore not show up in this collection. | Improve this doc View source RawInboundEnvelopes Gets the list of IRawInboundEnvelope corresponding to all the inbound messages, before they are even processed by the consumer pipeline. Declaration IReadOnlyList<IRawInboundEnvelope> RawInboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IRawInboundEnvelope > | Improve this doc View source RawOutboundEnvelopes Gets the list of IRawOutboundEnvelope corresponding to all the actual outbound messages being produced (these may differ from the OutboundEnvelopes , e.g. if chunking is applied). Declaration IReadOnlyList<IRawOutboundEnvelope> RawOutboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IRawOutboundEnvelope > Remarks The messages produces via RawProduce or RawProduceAsync will not go through the Silverback pipeline and will therefore not show up in this collection."
  },
  "api/Silverback.Testing.IKafkaTestingHelper.html": {
    "href": "api/Silverback.Testing.IKafkaTestingHelper.html",
    "title": "Interface IKafkaTestingHelper | Silverback",
    "keywords": "Interface IKafkaTestingHelper Inherited Members ITestingHelper<KafkaBroker>.Broker ITestingHelper<KafkaBroker>.Spy ITestingHelper<KafkaBroker>.WaitUntilConnectedAsync(Nullable<TimeSpan>) ITestingHelper<KafkaBroker>.WaitUntilConnectedAsync(Boolean, Nullable<TimeSpan>) ITestingHelper<KafkaBroker>.WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) ITestingHelper<KafkaBroker>.WaitUntilAllMessagesAreConsumedAsync(Boolean, Nullable<TimeSpan>) ITestingHelper<KafkaBroker>.WaitUntilOutboxIsEmptyAsync(CancellationToken) ITestingHelper<KafkaBroker>.IsOutboxEmptyAsync() Namespace : Silverback.Testing Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public interface IKafkaTestingHelper : ITestingHelper<KafkaBroker> Methods | Improve this doc View source GetTopic(String) Returns the IInMemoryTopic with the specified name. Declaration IInMemoryTopic GetTopic(string name) Parameters Type Name Description System.String name The name of the topic. Returns Type Description IInMemoryTopic The IInMemoryTopic . Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) . | Improve this doc View source GetTopic(String, String) Returns the IInMemoryTopic with the specified name. Declaration IInMemoryTopic GetTopic(string name, string bootstrapServers) Parameters Type Name Description System.String name The name of the topic. System.String bootstrapServers The bootstrap servers string used to identify the target broker. Returns Type Description IInMemoryTopic The IInMemoryTopic . Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) . | Improve this doc View source GetTopics(String, String) Returns the collection of IInMemoryTopic with the specified name. Declaration IReadOnlyCollection<IInMemoryTopic> GetTopics(string name, string bootstrapServers = null) Parameters Type Name Description System.String name The name of the topic. System.String bootstrapServers The bootstrap servers string used to identify the target broker. Returns Type Description System.Collections.Generic.IReadOnlyCollection < IInMemoryTopic > The collection of IInMemoryTopic . Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) . | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Boolean, IReadOnlyCollection<String>, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration Task WaitUntilAllMessagesAreConsumedAsync(bool throwTimeoutException, IReadOnlyCollection<string> topicNames, TimeSpan? timeout = null) Parameters Type Name Description System.Boolean throwTimeoutException A value specifying whether a System.TimeoutException has to be thrown when the messages aren't consumed before the timeout expires. System.Collections.Generic.IReadOnlyCollection < System.String > topicNames The name of the topics to be monitored. System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) . | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(IReadOnlyCollection<String>, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration Task WaitUntilAllMessagesAreConsumedAsync(IReadOnlyCollection<string> topicNames, TimeSpan? timeout = null) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < System.String > topicNames The name of the topics to be monitored. System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) ."
  },
  "api/Silverback.Testing.IMqttTestingHelper.html": {
    "href": "api/Silverback.Testing.IMqttTestingHelper.html",
    "title": "Interface IMqttTestingHelper | Silverback",
    "keywords": "Interface IMqttTestingHelper Inherited Members ITestingHelper<MqttBroker>.Broker ITestingHelper<MqttBroker>.Spy ITestingHelper<MqttBroker>.WaitUntilConnectedAsync(Nullable<TimeSpan>) ITestingHelper<MqttBroker>.WaitUntilConnectedAsync(Boolean, Nullable<TimeSpan>) ITestingHelper<MqttBroker>.WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) ITestingHelper<MqttBroker>.WaitUntilAllMessagesAreConsumedAsync(Boolean, Nullable<TimeSpan>) ITestingHelper<MqttBroker>.WaitUntilOutboxIsEmptyAsync(CancellationToken) ITestingHelper<MqttBroker>.IsOutboxEmptyAsync() Namespace : Silverback.Testing Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public interface IMqttTestingHelper : ITestingHelper<MqttBroker> Methods | Improve this doc View source GetClientSession(String) Gets the IClientSession of the specified client. Declaration IClientSession GetClientSession(string clientId) Parameters Type Name Description System.String clientId The client id. Returns Type Description IClientSession The IClientSession . Remarks This method works with the mocked MQTT broker only. See UseMockedMqtt(ISilverbackBuilder, Action<IMockedMqttOptionsBuilder>) or AddMockedMqtt(IBrokerOptionsBuilder, Action<IMockedMqttOptionsBuilder>) . | Improve this doc View source GetMessages(String) Gets the messages that have been published to the specified topic. Declaration IReadOnlyList<MqttApplicationMessage> GetMessages(string topic) Parameters Type Name Description System.String topic The name of the topic. Returns Type Description System.Collections.Generic.IReadOnlyList < MQTTnet.MqttApplicationMessage > The messages published to the topic. Remarks This method works with the mocked MQTT broker only. See UseMockedMqtt(ISilverbackBuilder, Action<IMockedMqttOptionsBuilder>) or AddMockedMqtt(IBrokerOptionsBuilder, Action<IMockedMqttOptionsBuilder>) ."
  },
  "api/Silverback.Testing.InboundSpyBrokerBehavior.html": {
    "href": "api/Silverback.Testing.InboundSpyBrokerBehavior.html",
    "title": "Class InboundSpyBrokerBehavior | Silverback",
    "keywords": "Class InboundSpyBrokerBehavior Added at the end of the consumer pipeline, forwards the processed IInboundEnvelope to the IIntegrationSpy . Inheritance System.Object InboundSpyBrokerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class InboundSpyBrokerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source InboundSpyBrokerBehavior(IntegrationSpy) Initializes a new instance of the InboundSpyBrokerBehavior class. Declaration public InboundSpyBrokerBehavior(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Testing.InboundSpySubscriber.html": {
    "href": "api/Silverback.Testing.InboundSpySubscriber.html",
    "title": "Class InboundSpySubscriber | Silverback",
    "keywords": "Class InboundSpySubscriber Subscribes to all the IOutboundEnvelope transiting through the internal bus and forwards them to the IIntegrationSpy to be collected. Inheritance System.Object InboundSpySubscriber Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class InboundSpySubscriber Remarks This is used alternatively to the InboundSpyBrokerBehavior . Constructors | Improve this doc View source InboundSpySubscriber(IntegrationSpy) Initializes a new instance of the InboundSpySubscriber class. Declaration public InboundSpySubscriber(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy ."
  },
  "api/Silverback.Testing.IntegrationSpy.html": {
    "href": "api/Silverback.Testing.IntegrationSpy.html",
    "title": "Class IntegrationSpy | Silverback",
    "keywords": "Class IntegrationSpy Monitors and collects all outbound and inbound messages. Inheritance System.Object IntegrationSpy Implements IIntegrationSpy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class IntegrationSpy : IIntegrationSpy Properties | Improve this doc View source InboundEnvelopes Gets the list of IInboundEnvelope corresponding to all the inbound messages that have been processed by the consumer pipeline (except the ones that couldn't be deserialized, e.g. the ones with an empty body). Declaration public IReadOnlyList<IInboundEnvelope> InboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IInboundEnvelope > | Improve this doc View source OutboundEnvelopes Gets the list of IOutboundEnvelope corresponding to all the outbound messages. Declaration public IReadOnlyList<IOutboundEnvelope> OutboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IOutboundEnvelope > Remarks The messages produces via RawProduce or RawProduceAsync will not go through the Silverback pipeline and will therefore not show up in this collection. | Improve this doc View source RawInboundEnvelopes Gets the list of IRawInboundEnvelope corresponding to all the inbound messages, before they are even processed by the consumer pipeline. Declaration public IReadOnlyList<IRawInboundEnvelope> RawInboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IRawInboundEnvelope > | Improve this doc View source RawOutboundEnvelopes Gets the list of IRawOutboundEnvelope corresponding to all the actual outbound messages being produced (these may differ from the OutboundEnvelopes , e.g. if chunking is applied). Declaration public IReadOnlyList<IRawOutboundEnvelope> RawOutboundEnvelopes { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IRawOutboundEnvelope > Remarks The messages produces via RawProduce or RawProduceAsync will not go through the Silverback pipeline and will therefore not show up in this collection. Methods | Improve this doc View source AddInboundEnvelope(IInboundEnvelope) Adds an item to the InboundEnvelopes . Declaration public void AddInboundEnvelope(IInboundEnvelope envelope) Parameters Type Name Description IInboundEnvelope envelope The IInboundEnvelope to add. | Improve this doc View source AddOutboundEnvelope(IOutboundEnvelope) Adds an item to the OutboundEnvelopes . Declaration public void AddOutboundEnvelope(IOutboundEnvelope envelope) Parameters Type Name Description IOutboundEnvelope envelope The IOutboundEnvelope to add. | Improve this doc View source AddRawInboundEnvelope(IRawInboundEnvelope) Adds an item to the Silverback.Messaging.Messages.RawInboundEnvelope . Declaration public void AddRawInboundEnvelope(IRawInboundEnvelope envelope) Parameters Type Name Description IRawInboundEnvelope envelope The IRawInboundEnvelope to add. | Improve this doc View source AddRawOutboundEnvelope(IRawOutboundEnvelope) Adds an item to the Silverback.Messaging.Messages.RawOutboundEnvelope . Declaration public void AddRawOutboundEnvelope(IRawOutboundEnvelope envelope) Parameters Type Name Description IRawOutboundEnvelope envelope The IRawOutboundEnvelope to add. Implements IIntegrationSpy"
  },
  "api/Silverback.Testing.ITestingHelper-1.html": {
    "href": "api/Silverback.Testing.ITestingHelper-1.html",
    "title": "Interface ITestingHelper<TBroker> | Silverback",
    "keywords": "Interface ITestingHelper<TBroker> Exposes some helper methods and shortcuts to simplify testing. Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public interface ITestingHelper<out TBroker> where TBroker : IBroker Type Parameters Name Description TBroker The IBroker implementation. Properties | Improve this doc View source Broker Gets the current IBroker instance. Declaration TBroker Broker { get; } Property Value Type Description TBroker | Improve this doc View source Spy Gets the IIntegrationSpy . Declaration IIntegrationSpy Spy { get; } Property Value Type Description IIntegrationSpy Remarks The IIntegrationSpy must be enabled calling AddIntegrationSpy or AddIntegrationSpyAndSubscriber . Methods | Improve this doc View source IsOutboxEmptyAsync() Checks whether the outbox (table) is empty. Declaration Task<bool> IsOutboxEmptyAsync() Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains true if the outbox is empty, otherwise false . | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Boolean, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration Task WaitUntilAllMessagesAreConsumedAsync(bool throwTimeoutException, TimeSpan? timeout = null) Parameters Type Name Description System.Boolean throwTimeoutException A value specifying whether a System.TimeoutException has to be thrown when the messages aren't consumed before the timeout expires. System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Remarks This method works with the mocked brokers only. | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration Task WaitUntilAllMessagesAreConsumedAsync(TimeSpan? timeout = null) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Remarks This method works with the mocked brokers only. | Improve this doc View source WaitUntilConnectedAsync(Boolean, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all consumers are connected and ready. Declaration Task WaitUntilConnectedAsync(bool throwTimeoutException, TimeSpan? timeout = null) Parameters Type Name Description System.Boolean throwTimeoutException A value specifying whether a System.TimeoutException has to be thrown when the connection isn't established before the timeout expires. System.Nullable < System.TimeSpan > timeout The time to wait for the consumers to connect. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all consumers are successfully connected and ready. | Improve this doc View source WaitUntilConnectedAsync(Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all consumers are connected and ready. Declaration Task WaitUntilConnectedAsync(TimeSpan? timeout = null) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout The time to wait for the consumers to connect. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all consumers are successfully connected and ready. | Improve this doc View source WaitUntilOutboxIsEmptyAsync(CancellationToken) Returns a System.Threading.Tasks.Task that completes when all messages stored in the outbox have been produced. Declaration Task WaitUntilOutboxIsEmptyAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when the outbox is empty."
  },
  "api/Silverback.Testing.KafkaTestingHelper.html": {
    "href": "api/Silverback.Testing.KafkaTestingHelper.html",
    "title": "Class KafkaTestingHelper | Silverback",
    "keywords": "Class KafkaTestingHelper Exposes some helper methods and shortcuts to simplify testing. Inheritance System.Object TestingHelper < KafkaBroker > KafkaTestingHelper Implements IKafkaTestingHelper ITestingHelper < KafkaBroker > Inherited Members TestingHelper<KafkaBroker>.Broker TestingHelper<KafkaBroker>.Spy TestingHelper<KafkaBroker>.WaitUntilConnectedAsync(Nullable<TimeSpan>) TestingHelper<KafkaBroker>.WaitUntilConnectedAsync(Boolean, Nullable<TimeSpan>) TestingHelper<KafkaBroker>.WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) TestingHelper<KafkaBroker>.WaitUntilOutboxIsEmptyAsync(CancellationToken) TestingHelper<KafkaBroker>.IsOutboxEmptyAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Kafka.Testing.dll Syntax public class KafkaTestingHelper : TestingHelper<KafkaBroker>, IKafkaTestingHelper, ITestingHelper<KafkaBroker> Constructors | Improve this doc View source KafkaTestingHelper(IServiceProvider, ILogger<KafkaTestingHelper>) Initializes a new instance of the KafkaTestingHelper class. Declaration public KafkaTestingHelper(IServiceProvider serviceProvider, ILogger<KafkaTestingHelper> logger) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider . Microsoft.Extensions.Logging.ILogger < KafkaTestingHelper > logger The ISilverbackLogger . Methods | Improve this doc View source GetTopic(String) Returns the IInMemoryTopic with the specified name. Declaration public IInMemoryTopic GetTopic(string name) Parameters Type Name Description System.String name The name of the topic. Returns Type Description IInMemoryTopic The IInMemoryTopic . Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) . | Improve this doc View source GetTopic(String, String) Returns the IInMemoryTopic with the specified name. Declaration public IInMemoryTopic GetTopic(string name, string bootstrapServers) Parameters Type Name Description System.String name The name of the topic. System.String bootstrapServers The bootstrap servers string used to identify the target broker. Returns Type Description IInMemoryTopic The IInMemoryTopic . Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) . | Improve this doc View source GetTopics(String, String) Returns the collection of IInMemoryTopic with the specified name. Declaration public IReadOnlyCollection<IInMemoryTopic> GetTopics(string name, string bootstrapServers = null) Parameters Type Name Description System.String name The name of the topic. System.String bootstrapServers The bootstrap servers string used to identify the target broker. Returns Type Description System.Collections.Generic.IReadOnlyCollection < IInMemoryTopic > The collection of IInMemoryTopic . Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) . | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Boolean, IReadOnlyCollection<String>, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration public Task WaitUntilAllMessagesAreConsumedAsync(bool throwTimeoutException, IReadOnlyCollection<string> topicNames, TimeSpan? timeout = null) Parameters Type Name Description System.Boolean throwTimeoutException A value specifying whether a System.TimeoutException has to be thrown when the messages aren't consumed before the timeout expires. System.Collections.Generic.IReadOnlyCollection < System.String > topicNames The name of the topics to be monitored. System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) . | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Boolean, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration public override Task WaitUntilAllMessagesAreConsumedAsync(bool throwTimeoutException, TimeSpan? timeout = null) Parameters Type Name Description System.Boolean throwTimeoutException A value specifying whether a System.TimeoutException has to be thrown when the messages aren't consumed before the timeout expires. System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Overrides Silverback.Testing.TestingHelper<Silverback.Messaging.Broker.KafkaBroker>.WaitUntilAllMessagesAreConsumedAsync(System.Boolean, System.Nullable<System.TimeSpan>) Remarks This method works with the mocked brokers only. | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(IReadOnlyCollection<String>, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration public Task WaitUntilAllMessagesAreConsumedAsync(IReadOnlyCollection<string> topicNames, TimeSpan? timeout = null) Parameters Type Name Description System.Collections.Generic.IReadOnlyCollection < System.String > topicNames The name of the topics to be monitored. System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Remarks This method works with the mocked Kafka broker only. See UseMockedKafka(ISilverbackBuilder, Action<IMockedKafkaOptionsBuilder>) or AddMockedKafka(IBrokerOptionsBuilder, Action<IMockedKafkaOptionsBuilder>) . Implements IKafkaTestingHelper ITestingHelper<TBroker>"
  },
  "api/Silverback.Testing.MqttTestingHelper.html": {
    "href": "api/Silverback.Testing.MqttTestingHelper.html",
    "title": "Class MqttTestingHelper | Silverback",
    "keywords": "Class MqttTestingHelper Exposes some helper methods and shortcuts to simplify testing. Inheritance System.Object TestingHelper < MqttBroker > MqttTestingHelper Implements IMqttTestingHelper ITestingHelper < MqttBroker > Inherited Members TestingHelper<MqttBroker>.Broker TestingHelper<MqttBroker>.Spy TestingHelper<MqttBroker>.WaitUntilConnectedAsync(Nullable<TimeSpan>) TestingHelper<MqttBroker>.WaitUntilConnectedAsync(Boolean, Nullable<TimeSpan>) TestingHelper<MqttBroker>.WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) TestingHelper<MqttBroker>.WaitUntilOutboxIsEmptyAsync(CancellationToken) TestingHelper<MqttBroker>.IsOutboxEmptyAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.MQTT.Testing.dll Syntax public class MqttTestingHelper : TestingHelper<MqttBroker>, IMqttTestingHelper, ITestingHelper<MqttBroker> Constructors | Improve this doc View source MqttTestingHelper(IServiceProvider, ILogger<MqttTestingHelper>) Initializes a new instance of the MqttTestingHelper class. Declaration public MqttTestingHelper(IServiceProvider serviceProvider, ILogger<MqttTestingHelper> logger) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider . Microsoft.Extensions.Logging.ILogger < MqttTestingHelper > logger The ISilverbackLogger . Methods | Improve this doc View source GetClientSession(String) Gets the IClientSession of the specified client. Declaration public IClientSession GetClientSession(string clientId) Parameters Type Name Description System.String clientId The client id. Returns Type Description IClientSession The IClientSession . Remarks This method works with the mocked MQTT broker only. See UseMockedMqtt(ISilverbackBuilder, Action<IMockedMqttOptionsBuilder>) or AddMockedMqtt(IBrokerOptionsBuilder, Action<IMockedMqttOptionsBuilder>) . | Improve this doc View source GetMessages(String) Gets the messages that have been published to the specified topic. Declaration public IReadOnlyList<MqttApplicationMessage> GetMessages(string topic) Parameters Type Name Description System.String topic The name of the topic. Returns Type Description System.Collections.Generic.IReadOnlyList < MQTTnet.MqttApplicationMessage > The messages published to the topic. Remarks This method works with the mocked MQTT broker only. See UseMockedMqtt(ISilverbackBuilder, Action<IMockedMqttOptionsBuilder>) or AddMockedMqtt(IBrokerOptionsBuilder, Action<IMockedMqttOptionsBuilder>) . | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Boolean, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration public override async Task WaitUntilAllMessagesAreConsumedAsync(bool throwTimeoutException, TimeSpan? timeout = null) Parameters Type Name Description System.Boolean throwTimeoutException A value specifying whether a System.TimeoutException has to be thrown when the messages aren't consumed before the timeout expires. System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Overrides Silverback.Testing.TestingHelper<Silverback.Messaging.Broker.MqttBroker>.WaitUntilAllMessagesAreConsumedAsync(System.Boolean, System.Nullable<System.TimeSpan>) Remarks This method works with the mocked brokers only. Implements IMqttTestingHelper ITestingHelper<TBroker>"
  },
  "api/Silverback.Testing.OutboundSpyBrokerBehavior.html": {
    "href": "api/Silverback.Testing.OutboundSpyBrokerBehavior.html",
    "title": "Class OutboundSpyBrokerBehavior | Silverback",
    "keywords": "Class OutboundSpyBrokerBehavior Added at the very beginning of the producer pipeline, forwards the published IOutboundEnvelope to the IIntegrationSpy . Inheritance System.Object OutboundSpyBrokerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class OutboundSpyBrokerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source OutboundSpyBrokerBehavior(IntegrationSpy) Initializes a new instance of the OutboundSpyBrokerBehavior class. Declaration public OutboundSpyBrokerBehavior(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Testing.RawInboundSpyBrokerBehavior.html": {
    "href": "api/Silverback.Testing.RawInboundSpyBrokerBehavior.html",
    "title": "Class RawInboundSpyBrokerBehavior | Silverback",
    "keywords": "Class RawInboundSpyBrokerBehavior Added at the very beginning of the consumer pipeline, forwards the untouched IRawInboundEnvelope to the IIntegrationSpy . Inheritance System.Object RawInboundSpyBrokerBehavior Implements IConsumerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class RawInboundSpyBrokerBehavior : IConsumerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source RawInboundSpyBrokerBehavior(IntegrationSpy) Initializes a new instance of the RawInboundSpyBrokerBehavior class. Declaration public RawInboundSpyBrokerBehavior(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ConsumerPipelineContext, ConsumerBehaviorHandler) Process, handles or transforms the message being consumed. Declaration public Task HandleAsync(ConsumerPipelineContext context, ConsumerBehaviorHandler next) Parameters Type Name Description ConsumerPipelineContext context The context that is passed along the behaviors pipeline. ConsumerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IConsumerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Testing.RawOutboundSpyBrokerBehavior.html": {
    "href": "api/Silverback.Testing.RawOutboundSpyBrokerBehavior.html",
    "title": "Class RawOutboundSpyBrokerBehavior | Silverback",
    "keywords": "Class RawOutboundSpyBrokerBehavior Added at the very end of the producer pipeline, forwards the produced IRawOutboundEnvelope to the IIntegrationSpy . Inheritance System.Object RawOutboundSpyBrokerBehavior Implements IProducerBehavior IBrokerBehavior ISorted Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public class RawOutboundSpyBrokerBehavior : IProducerBehavior, IBrokerBehavior, ISorted Constructors | Improve this doc View source RawOutboundSpyBrokerBehavior(IntegrationSpy) Initializes a new instance of the RawOutboundSpyBrokerBehavior class. Declaration public RawOutboundSpyBrokerBehavior(IntegrationSpy integrationSpy) Parameters Type Name Description IntegrationSpy integrationSpy The IntegrationSpy . Properties | Improve this doc View source SortIndex Gets the sort index. Declaration public int SortIndex { get; } Property Value Type Description System.Int32 Methods | Improve this doc View source HandleAsync(ProducerPipelineContext, ProducerBehaviorHandler) Process, handles or transforms the message being produced. Declaration public Task HandleAsync(ProducerPipelineContext context, ProducerBehaviorHandler next) Parameters Type Name Description ProducerPipelineContext context The context that is passed along the behaviors pipeline. ProducerBehaviorHandler next The next behavior in the pipeline. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. Implements IProducerBehavior IBrokerBehavior ISorted"
  },
  "api/Silverback.Testing.TestingHelper-1.html": {
    "href": "api/Silverback.Testing.TestingHelper-1.html",
    "title": "Class TestingHelper<TBroker> | Silverback",
    "keywords": "Class TestingHelper<TBroker> Exposes some helper methods and shortcuts to simplify testing. Inheritance System.Object TestingHelper<TBroker> KafkaTestingHelper MqttTestingHelper Implements ITestingHelper <TBroker> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Testing Assembly : Silverback.Integration.Testing.dll Syntax public abstract class TestingHelper<TBroker> : ITestingHelper<TBroker> where TBroker : IBroker Type Parameters Name Description TBroker The IBroker implementation. Constructors | Improve this doc View source TestingHelper(IServiceProvider, ILogger<TestingHelper<TBroker>>) Initializes a new instance of the TestingHelper<TBroker> class. Declaration protected TestingHelper(IServiceProvider serviceProvider, ILogger<TestingHelper<TBroker>> logger) Parameters Type Name Description System.IServiceProvider serviceProvider The System.IServiceProvider . Microsoft.Extensions.Logging.ILogger < TestingHelper <TBroker>> logger The Microsoft.Extensions.Logging.ILogger<TCategoryName> . Properties | Improve this doc View source Broker Gets the current IBroker instance. Declaration public TBroker Broker { get; } Property Value Type Description TBroker | Improve this doc View source Spy Gets the IIntegrationSpy . Declaration public IIntegrationSpy Spy { get; } Property Value Type Description IIntegrationSpy Remarks The IIntegrationSpy must be enabled calling AddIntegrationSpy or AddIntegrationSpyAndSubscriber . Methods | Improve this doc View source IsOutboxEmptyAsync() Checks whether the outbox (table) is empty. Declaration public async Task<bool> IsOutboxEmptyAsync() Returns Type Description System.Threading.Tasks.Task < System.Boolean > A System.Threading.Tasks.Task<TResult> representing the asynchronous operation. The task result contains true if the outbox is empty, otherwise false . | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Boolean, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration public abstract Task WaitUntilAllMessagesAreConsumedAsync(bool throwTimeoutException, TimeSpan? timeout = null) Parameters Type Name Description System.Boolean throwTimeoutException A value specifying whether a System.TimeoutException has to be thrown when the messages aren't consumed before the timeout expires. System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Remarks This method works with the mocked brokers only. | Improve this doc View source WaitUntilAllMessagesAreConsumedAsync(Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all messages routed to the consumers have been processed and committed. Declaration public Task WaitUntilAllMessagesAreConsumedAsync(TimeSpan? timeout = null) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout The time to wait for the messages to be consumed and processed. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all messages have been processed. Remarks This method works with the mocked brokers only. | Improve this doc View source WaitUntilConnectedAsync(Boolean, Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all consumers are connected and ready. Declaration public async Task WaitUntilConnectedAsync(bool throwTimeoutException, TimeSpan? timeout = null) Parameters Type Name Description System.Boolean throwTimeoutException A value specifying whether a System.TimeoutException has to be thrown when the connection isn't established before the timeout expires. System.Nullable < System.TimeSpan > timeout The time to wait for the consumers to connect. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all consumers are successfully connected and ready. | Improve this doc View source WaitUntilConnectedAsync(Nullable<TimeSpan>) Returns a System.Threading.Tasks.Task that completes when all consumers are connected and ready. Declaration public Task WaitUntilConnectedAsync(TimeSpan? timeout = null) Parameters Type Name Description System.Nullable < System.TimeSpan > timeout The time to wait for the consumers to connect. The default is 30 seconds. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when all consumers are successfully connected and ready. | Improve this doc View source WaitUntilOutboxIsEmptyAsync(CancellationToken) Returns a System.Threading.Tasks.Task that completes when all messages stored in the outbox have been produced. Declaration public async Task WaitUntilOutboxIsEmptyAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A System.Threading.CancellationToken to observe while waiting for the task to complete. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that completes when the outbox is empty. Implements ITestingHelper<TBroker>"
  },
  "api/Silverback.Util.html": {
    "href": "api/Silverback.Util.html",
    "title": "Namespace Silverback.Util | Silverback",
    "keywords": "Namespace Silverback.Util Classes TransactionalDictionary<TKey, TValue> Wraps the changes being made to the underlying System.Collections.Generic.Dictionary<TKey, TValue> into a transaction. TransactionalDictionarySharedItems<TKey, TValue> Registered as Singleton holds the actual items list shared between the scoped instances of the TransactionalDictionary<TKey, TValue> . TransactionalList<T> Wraps the changes being made to the underlying System.Collections.Generic.List`1 into a transaction. TransactionalListItem<T> Wraps an item stored in the TransactionalList<T> . TransactionalListSharedItems<T> Registered as Singleton holds the actual items list shared between the scoped instances of the TransactionalList<T> ."
  },
  "api/Silverback.Util.TransactionalDictionary-2.html": {
    "href": "api/Silverback.Util.TransactionalDictionary-2.html",
    "title": "Class TransactionalDictionary<TKey, TValue> | Silverback",
    "keywords": "Class TransactionalDictionary<TKey, TValue> Wraps the changes being made to the underlying System.Collections.Generic.Dictionary<TKey, TValue> into a transaction. Inheritance System.Object TransactionalDictionary<TKey, TValue> InMemoryOffsetStore Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public abstract class TransactionalDictionary<TKey, TValue> Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. Constructors | Improve this doc View source TransactionalDictionary(TransactionalDictionarySharedItems<TKey, TValue>) Initializes a new instance of the TransactionalDictionary<TKey, TValue> class. Declaration protected TransactionalDictionary(TransactionalDictionarySharedItems<TKey, TValue> sharedItems) Parameters Type Name Description TransactionalDictionarySharedItems <TKey, TValue> sharedItems The dictionary items that are persisted and shared between the instances of this class. Properties | Improve this doc View source CommittedItemsCount Gets the number of items currently in the dictionary, ignoring the uncommitted changes. Declaration public int CommittedItemsCount { get; } Property Value Type Description System.Int32 | Improve this doc View source Items Gets the underlying System.Collections.Generic.Dictionary<TKey, TValue> containing the persisted items. Declaration protected Dictionary<TKey, TValue> Items { get; } Property Value Type Description System.Collections.Generic.Dictionary <TKey, TValue> | Improve this doc View source UncommittedItems Gets the System.Collections.Generic.Dictionary<TKey, TValue> containing the pending items that will be persisted when Commit is called. Declaration protected Dictionary<TKey, TValue> UncommittedItems { get; } Property Value Type Description System.Collections.Generic.Dictionary <TKey, TValue> Methods | Improve this doc View source AddOrReplaceAsync(TKey, TValue) Adds or replaces an item in the dictionary. Declaration protected Task AddOrReplaceAsync(TKey key, TValue value) Parameters Type Name Description TKey key The item key. TValue value The item value. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitAsync() Called to commit the pending changes. Declaration public virtual Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RemoveAsync(TKey) Removes the item with the specified key. Declaration protected Task RemoveAsync(TKey key) Parameters Type Name Description TKey key The item key. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync() Called to rollback the pending changes. Declaration public virtual Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Util.TransactionalDictionarySharedItems-2.html": {
    "href": "api/Silverback.Util.TransactionalDictionarySharedItems-2.html",
    "title": "Class TransactionalDictionarySharedItems<TKey, TValue> | Silverback",
    "keywords": "Class TransactionalDictionarySharedItems<TKey, TValue> Registered as Singleton holds the actual items list shared between the scoped instances of the TransactionalDictionary<TKey, TValue> . Inheritance System.Object TransactionalDictionarySharedItems<TKey, TValue> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public sealed class TransactionalDictionarySharedItems<TKey, TValue> Type Parameters Name Description TKey The type of the keys in the dictionary. TValue The type of the values in the dictionary. Properties | Improve this doc View source Items Gets the underlying System.Collections.Generic.Dictionary<TKey, TValue> containing the persisted items. Declaration public Dictionary<TKey, TValue> Items { get; } Property Value Type Description System.Collections.Generic.Dictionary <TKey, TValue>"
  },
  "api/Silverback.Util.TransactionalList-1.html": {
    "href": "api/Silverback.Util.TransactionalList-1.html",
    "title": "Class TransactionalList<T> | Silverback",
    "keywords": "Class TransactionalList<T> Wraps the changes being made to the underlying System.Collections.Generic.List`1 into a transaction. Inheritance System.Object TransactionalList<T> InMemoryInboundLog InMemoryOutbox Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public abstract class TransactionalList<T> where T : class Type Parameters Name Description T The type of the items in the list. Constructors | Improve this doc View source TransactionalList(TransactionalListSharedItems<T>) Initializes a new instance of the TransactionalList<T> class. Declaration protected TransactionalList(TransactionalListSharedItems<T> sharedItems) Parameters Type Name Description TransactionalListSharedItems <T> sharedItems The items shared between the instances of this repository. Properties | Improve this doc View source CommittedItemsCount Gets the number of items currently in the list, ignoring the uncommitted changes. Declaration public int CommittedItemsCount { get; } Property Value Type Description System.Int32 | Improve this doc View source Items Gets the underlying System.Collections.Generic.List`1 containing the persisted items, wrapped into a TransactionalListItem<T> . Declaration protected IList<TransactionalListItem<T>> Items { get; } Property Value Type Description System.Collections.Generic.IList < TransactionalListItem <T>> | Improve this doc View source UncommittedItems Gets the System.Collections.Generic.List`1 containing the pending items that will be persisted when Commit is called. Declaration protected IList<TransactionalListItem<T>> UncommittedItems { get; } Property Value Type Description System.Collections.Generic.IList < TransactionalListItem <T>> Methods | Improve this doc View source AddAsync(T) Adds the specified item to the list. Declaration protected Task AddAsync(T item) Parameters Type Name Description T item The item to be added. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source CommitAsync() Called to commit the pending changes. Declaration public virtual Task CommitAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RemoveAsync(T) Removes the specified item to the list. Declaration protected Task RemoveAsync(T item) Parameters Type Name Description T item The item to be added. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation. | Improve this doc View source RollbackAsync() Called to rollback the pending changes. Declaration public virtual Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task representing the asynchronous operation."
  },
  "api/Silverback.Util.TransactionalListItem-1.html": {
    "href": "api/Silverback.Util.TransactionalListItem-1.html",
    "title": "Class TransactionalListItem<T> | Silverback",
    "keywords": "Class TransactionalListItem<T> Wraps an item stored in the TransactionalList<T> . Inheritance System.Object TransactionalListItem<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public class TransactionalListItem<T> Type Parameters Name Description T The type of the wrapped item. Constructors | Improve this doc View source TransactionalListItem(T) Initializes a new instance of the TransactionalListItem<T> class. Declaration public TransactionalListItem(T item) Parameters Type Name Description T item The actual item to be wrapped. Properties | Improve this doc View source InsertDate Gets the datetime when the item was added to the list. Declaration public DateTime InsertDate { get; } Property Value Type Description System.DateTime | Improve this doc View source Item Gets the actual item. Declaration public T Item { get; } Property Value Type Description T"
  },
  "api/Silverback.Util.TransactionalListSharedItems-1.html": {
    "href": "api/Silverback.Util.TransactionalListSharedItems-1.html",
    "title": "Class TransactionalListSharedItems<T> | Silverback",
    "keywords": "Class TransactionalListSharedItems<T> Registered as Singleton holds the actual items list shared between the scoped instances of the TransactionalList<T> . Inheritance System.Object TransactionalListSharedItems<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Silverback.Util Assembly : Silverback.Integration.dll Syntax public sealed class TransactionalListSharedItems<T> Type Parameters Name Description T The type of the item in the list. Properties | Improve this doc View source Items Gets the underlying System.Collections.Generic.List`1 containing the persisted items. Declaration public IList<TransactionalListItem<T>> Items { get; } Property Value Type Description System.Collections.Generic.IList < TransactionalListItem <T>>"
  },
  "concepts/background-services.html": {
    "href": "concepts/background-services.html",
    "title": "Distributed Background Services | Silverback",
    "keywords": "Distributed Background Services To implement the OutboxWorkerService we had to create a database based locking mechanism, to ensure that only a single instance of our worker was running. You can take advantage of this implementation to build your IHostedService . DistributedBackgroundService Two base classes are available in Silverback.Core : DistributedBackgroundService implements the basic locking mechanism, while RecurringDistributedBackgroundService adds on top of it the ability to run a task as specified intervals. using Silverback.Background; namespace Sample { public class MyBackroundService : RecurringDistributedBackgroundService { private readonly IMyService _myService; public MyBackroundService( IMyService _myService, IDistributedLockManager distributedLockManager, ILogger<OutboundQueueWorkerService> logger) : base( TimeSpan.FromMinutes(5), // interval distributedLockManager, logger) { } protected override Task ExecuteRecurringAsync( CancellationToken stoppingToken) => _myService.DoWork(stoppingToken); } } Note A DistributedLockSettings object can be passed to the constructor of the base class to customize lock timeout, heartbeat interval, etc. Lock Manager To enable the distributed locks an IDistributedLockManager implementation (probably a DbDistributedLockManager ) must be registered for dependency injection as shown in the next code snippet. Note The Silverback.Core.EntityFrameworkCore package is also required and the DbContext must configure a DbSet<Lock> . See also the Sample DbContext (EF Core) . public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .AddDbDistributedLockManager(); } }"
  },
  "concepts/broker/behaviors.html": {
    "href": "concepts/broker/behaviors.html",
    "title": "Broker behaviors pipeline | Silverback",
    "keywords": "Broker behaviors pipeline Silverback is built to be modular and most of its feature are plugged into the consumers and producers via some so-called behaviors. The inbound and outbound messages flow through this pipeline and each behavior take care of a specific task such as serialization, encryption, chunking, logging, etc. The IProducerBehavior and IConsumerBehavior are the interfaces used to build such behaviors. Note IProducerBehavior and IConsumerBehavior inherit the ISorted interface. It is therefore mandatory to specify the exact sort index of each behavior. Built-in producer behaviors This behaviors build the producer pipeline and contain the actual logic to properly serialize the messages according to the applied configuration. Name Index Description ActivityProducerBehavior 100 Starts an Activity and adds the tracing information to the message headers. HeadersWriterProducerBehavior 200 Maps the properties decorated with the HeaderAttribute to the message headers. MessageEnricherProducerBehavior 250 Invokes all the IOutboundMessageEnricher configured for to the endpoint. MessageIdInitializerProducerBehavior 300 It ensures that an x-message-id header is always produced. BrokerKeyHeaderInitializer 400 Provided by the message broker implementation (e.g. KafkaMessageKeyInitializerProducerBehavior or RabbitRoutingKeyInitializerProducerBehavior ), sets the message key header that will be used by the IProducer implementation to set the actual message key. BinaryFileHandlerProducerBehavior 500 Switches to the BinaryFileMessageSerializer if the message being produced implements the IBinaryFileMessage interface. SerializerProducerBehavior 600 Serializes the message being produced using the configured IMessageSerializer . EncryptorProducerBehavior 700 Encrypts the message according to the EncryptionSettings . SequencerProducerBehavior 800 Uses the available implementations of ISequenceWriter (e.g. ChunkSequenceWriter ) to set the proper headers and split the published message or messages set to create the sequences. EndpointNameResolverProducerBehavior 900 Resolves the actual target endpoint name for the message being published. KafkaPartitionResolverProducerBehavior 901 Resolves the actual target endpoint name for the message being published. CustomHeadersMapperProducerBehavior 1000 Applies the custom header name mappings. Built-in consumer behaviors This behaviors are the foundation of the consumer pipeline and contain the actual logic to deserialize the incoming messages. Name Index Description ActivityConsumerBehavior 100 Starts an Activity with the tracing information from the message headers. FatalExceptionLoggerConsumerBehavior 200 Logs the unhandled exceptions thrown while processing the message. These exceptions are fatal since they will usually cause the consumer to stop. CustomHeadersMapperConsumerBehavior 300 Applies the custom header name mappings. TransactionHandlerConsumerBehavior 400 Handles the consumer transaction and applies the error policies. RawSequencerConsumerBehavior 500 Uses the available implementations of ISequenceReader (e.g. ChunkSequenceReader ) to assign the incoming message to the right sequence. ExactlyOnceGuardConsumerBehavior 600 Uses the configured implementation of IExactlyOnceStrategy to ensure that the message is processed only once. DecryptorConsumerBehavior 700 Decrypts the message according to the EncryptionSettings . BinaryFileHandlerProducerBehavior 800 Switches to the BinaryFileMessageSerializer if the message being consumed is a binary message (according to the x-message-type header. DeserializerConsumerBehavior 900 Deserializes the messages being consumed using the configured IMessageSerializer . HeadersReaderConsumerBehavior 1000 Maps the headers with the properties decorated with the HeaderAttribute . SequencerConsumerBehavior 1100 Uses the available implementations of ISequenceReader (e.g. BatchSequenceReader ) to assign the incoming message to the right sequence. PublisherConsumerBehavior 2000 Publishes the consumed messages to the internal bus. Custom behaviors The behaviors can be used to implement cross-cutting concerns or add new features to Silverback. Custom IProducerBehavior example The following example demonstrate how to set a custom message header on each outbound message. Note The ProducerPipelineContext and ConsumerPipelineContext hold a reference to the IServiceProvider and can be used to resolve the needed services. The IServiceProvider in the ConsumerPipelineContext can be either the root service provider or the scoped service provider for the processing of the consumed message (depending on the position of the behavior in the pipeline). Note The broker behaviors can be registered either as singleton or transient services. When registered as transient a new instance will be created per each producer or consumer. ProducerBehavior Startup public class CustomHeadersProducerBehavior : IProducerBehavior { public int SortIndex => 1000; public async Task HandleAsync( ProducerPipelineContext context, ProducerBehaviorHandler next) { context.Envelope.Headers.Add(\"generated-by\", \"silverback\"); await next(context); } } public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddSingletonBrokerBehavior<CustomHeadersBehavior>(); } } Custom IConsumerBehavior example The following example demonstrate how to log the headers received with each inbound message. ConsumerBehavior Startup public class LogHeadersConsumerBehavior : IConsumerBehavior { private readonly ILogger<LogHeadersBehavior> _logger; public LogHeadersBehavior(ILogger<LogHeadersBehavior> logger) { _logger = logger; } public int SortIndex => 1000; public async Task HandleAsync( ConsumerPipelineContext context, ConsumerBehaviorHandler next) { foreach (var header in context.Envelope.Headers) { _logger.LogTrace( \"{Name}={Value}\", header.Name, header.Value); } await next(context); } } public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddSingletonBrokerBehavior<LogHeadersBehavior>(); } } See also Behaviors"
  },
  "concepts/broker/binary-files.html": {
    "href": "concepts/broker/binary-files.html",
    "title": "Binary Files | Silverback",
    "keywords": "Binary Files Serializing a binary file (a stream or a byte array) using the regular JsonMessageSerializer would mean to encode it in base64 and convert it to a UTF-8 encoded byte array. Beside not being very elegant this approach may cause you some trouble when integrating with other systems expecting the raw file content. This procedure would also result in the transferred byte array to be approximately a 30% bigger than the file itself. In this page it's shown how to use an IBinaryFileMessage to more efficiently transfer raw binary files. Producer configuration The IBinaryFileMessage interface is meant to transfer files over the message broker and is natively supported by Silverback. This means that the raw file content will be transferred in its original form. For convenience the BinaryFileMessage class already implements the IBinaryFileMessage interface. This class exposes a ContentType property as well, resulting in the content-type header to be produced. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Publisher public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IBinaryFileMessage>(endpoint => endpoint .ProduceTo(\"raw-files\"))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IBinaryFileMessage>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }); } public class FileTransferService { private readonly IPublisher _publisher; public FileTransferService(IPublisher publisher) { _publisher = publisher; } public async Task TransferFile(byte[] content, string contentType) { await _publihser.PublishAsync( new BinaryFileMessage(content, contentType)); } } Otherwise you can implement the interface yourself or extend the BinaryFileMessage (e.g. to add some additional headers, as explained in the Message Headers section). EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Message Publisher public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IBinaryFileMessage>(endpoint => endpoint .ProduceTo(\"raw-files\"))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IBinaryFileMessage>( new KafkaProducerEndpoint(\"raw-files\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }); } public class MyBinaryFileMessage : BinaryFileMessage { [Header(\"x-user-id\")] public Guid UserId { get; set; } } public class FileTransferService { private readonly IPublisher _publisher; public FileTransferService(IPublisher publisher) { _publisher = publisher; } public async Task TransferFile( byte[] content, string contentType, Guid userId) { await _publihser.PublishAsync( new MyBinaryFileMessage { Content = content, ContentType = contentType, UserId = userId }); } } Consumer configuration You don't need to do anything special to consume a binary file, if all necessary headers are in place (ensured by Silverback, if it was used to produce the message). The message will be wrapped again in a BinaryFileMessage that can be subscribed like any other message. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"raw-files\") .Configure(config => { config.GroupId = \"my-consumer\" })); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"raw-files\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }); } public class FileSubscriberService { public async Task OnFileReceived(IBinaryFileMessage message) { // ...your file handling logic... } } If the message wasn't produced by Silverback chances are that the message type header is not there. In that case you need to explicitly configure the BinaryFileMessageSerializer in the inbound endpoint. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"raw-files\") .ConsumeBinaryFiles() .Configure(config => { config.GroupId = \"my-consumer\" })); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"raw-files\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } , Serializer = BinaryFileMessageSerializer.Default }); } public class FileSubscriberService { public async Task OnFileReceived(IBinaryFileMessage message) { // ...your file handling logic... } } If you need to read additional headers you can either extend the BinaryFileMessage (suggested approach) or subscribe to an IInboundEnvelope<TMessage> . The following snippet assumes that the files aren't being streamed by a Silverback producer, otherwise it wouldn't be necessary to explicitly set the serializer and the type would be inferred from the x-message-type header. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Message Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"raw-files\") .ConsumeBinaryFiles(serializer => serializer.UseModel<MyBinaryFileMessage>())); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IBinaryFileMessage>( new KafkaProducerEndpoint(\"raw-files\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new BinaryFileMessageSerializer<MyBinaryFileMessage>() }); } public class MyBinaryFileMessage : BinaryFileMessage { [Header(\"x-user-id\")] public Guid UserId { get; set; } } public class FileSubscriberService { public async Task OnFileReceived(MyBinaryFileMessage message) { // ...your file handling logic... } } Samples Kafka - Files Streaming"
  },
  "concepts/broker/callbacks.html": {
    "href": "concepts/broker/callbacks.html",
    "title": "Broker Callbacks | Silverback",
    "keywords": "Broker Callbacks The callbacks are used to notify some events happening during the lifecycle of a message broker client. An interface has to be implemented by the callback handler that is then registered via the Add*BrokerCallbacksHandler methods. The only generic callback, invoked for any of the actual broker implementation is: IEndpointsConfiguredCallback Some broker specific callbacks may be added by the specific broker implementation (see Kafka Events and MQTT Events ). Example In the following example an handler for the IEndpointsConfiguredCallback is being registered. Startup EndpointsConfiguredCallbackHandler public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddSingletonBrokerCallbacksHandler<EndpointsConfiguredCallbackHandler>(); } } public class EndpointsConfiguredCallbackHandler : IKafkaPartitionsAssignedCallback { public Task OnEndpointsConfiguredAsync() { // Perform some initialization logic, // e.g. create the missing topics } }"
  },
  "concepts/broker/chunking.html": {
    "href": "concepts/broker/chunking.html",
    "title": "Chunking | Silverback",
    "keywords": "Chunking Some message brokers like Apache Kafka are very efficient at handling huge amount of relatively small messages. In order to make the most out of it you may want to split your largest messages (e.g. containing binary data) into smaller chunks. Silverback can handle such scenario transparently, reassembling the message automatically in the consumer before pushing it to the internal bus. The messages are being split into small chunks. Producer configuration The producer endpoint can be configured to split the message into chunks by specifying their maximum size (in bytes). Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\") .EnableChunking(500000) .ProduceToOutbox()); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new KafkaProducerEndpoint(\"order-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Chunk = new ChunkSettings { Size = 500000 }, Strategy = new OutboxProduceStrategy() }); } Important The chunks belonging to the same message must be contiguous. It is therefore recommended to have a single producer per endpoint or partition. If using Kafka see also Kafka Partitioning and Message Key . Consumer configuration No particular configuration is needed in the consumer side. Silverback will automatically recognize the chunks sequence by its headers and transparently reassemble the message. With Silverback 3.0.0 the consumer pipeline has been rewritten completely to handle this scenario in a streaming way, processing each chunk directly and applying the behaviors (such as the deserializer) on the fly. The entire original message is never stored anywhere, therefore this approach is suitable also for very large payloads. Important The chunks belonging to the same message must be contiguous. It is therefore recommended to have a single producer per endpoint or partition. If using Kafka see also Kafka Partitioning and Message Key . Incomplete sequences Some chunks sequences may be incomplete because either the producer failed to publish all chunks or the consumer started consuming from the middle of a sequence. In both cases Silverback will silently ignore the incomplete sequences and log a warning. Limitations As mentioned already, the chunks have to be written to the same partition and have to be contiguous. This is by design. Another limitation is that the MoveMessageErrorPolicy is currently unable to move a sequence and is therefore unusable with chunked messages. This may be fixed in a future release. Please open an issue on GitHub if this is important for your use case. Headers Some headers are used to describe the chunks sequence. See Message Headers for details. Samples Kafka - Files Streaming"
  },
  "concepts/broker/connecting.html": {
    "href": "concepts/broker/connecting.html",
    "title": "Connecting to a Message Broker | Silverback",
    "keywords": "Connecting to a Message Broker To connect Silverback to a message broker we need a reference to Silverback.Integration , plus the concrete implementation ( Silverback.Integration.Kafka , Silverback.Integration.MQTT , Silverback.Integration.RabbitMQ , etc.). We can then add the broker to the DI and configure the connected endpoints. Sample configuration The following example is very basic and there are of course many more configurations and possibilities. Some more details are given in the dedicated Outbound Endpoint and Inbound Endpoint sections. The basic concepts: WithConnectionToMessageBroker registers the services necessary to connect to a message broker AddKafka , AddMqtt , AddRabbit , etc. register the message broker implementation(s) AddEndpointsConfigurator is used to outsource the endpoints configuration into a separate class implementing the IEndpointsConfigurator interface (of course multiple configurators can be registered) AddInbound is used to automatically relay the incoming messages to the internal bus and they can therefore be subscribed as seen in the previous chapters AddOutbound works the other way around and subscribes to the internal bus to forward the integration messages to the message broker More complex and complete samples can be found in the Samples section. Basic configuration The following sample demonstrates how to setup some inbound and outbound endpoints against the built-in message brokers (Apache Kafka, MQTT or RabbitMQ). Apache Kafka Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"basket-events\") .Configure(config => { config.GroupId = \"order-service\"; })) .AddInbound(endpoint => endpoint .ConsumeFrom(\"payment-events\") .Configure(config => { confing.GroupId = \"order-service\" })) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\"))); } MQTT Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddMqtt()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddMqttEndpoints(endpoints => endpoints .Configure( config => config .WithClientId(\"order-service\") .ConnectViaTcp(\"localhost\") .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"testaments\"))) .AddInbound(endpoint => endpoint .ConsumeFrom(\"basket-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce)) .AddInbound(endpoint => endpoint .ConsumeFrom(\"payment-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce)) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .Retain())); } Important Silverback uses by default the v5 of the MQTT protocol, since it supports the user properties (headers). You can of course configure the client to use an older version but some Silverback functionalities (relying on message headers) might not work. RabbitMQ Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddRabbit()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddInbound( new RabbitExchangeConsumerEndpoint(\"basket-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\", }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout }, QueueName = \"basket-events-order-service-queue\", Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = true, IsAutoDeleteEnabled = false } }) .AddInbound( new RabbitExchangeConsumerEndpoint(\"payment-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\", }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout }, QueueName = \"payment-events-order-service-queue\", Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = true, IsAutoDeleteEnabled = false } }) .AddOutbound<IIntegrationEvent>( new RabbitExchangeProducerEndpoint(\"order-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout } }); } } Tip All IEndpointsConfigurator implementations are registered as scoped services. Multiple implementations can be registered to split the configuration and of course dependencies (such as IOption or a DbContext ) can be injected to load the configuration variables. Important Starting from version 3.0.0 the broker(s) will be connected and all consumers started automatically at startup, unless explicitly disabled (see the Connection modes chapter for details). Inline endpoints configuration The preferred and suggested way to configure the message broker endpoints is using the IEndpointsConfigurator but you can use AddEndpoints (or AddKafkaEndpoints etc.) directly and configure everything inline. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(...) .AddOutbound<IIntegrationEvent>(...)); } } Multiple brokers It is possible to use multiple message broker implementation together in the same application. The following sample demonstrates how to consume from both Apache Kafka and RabbitMQ. Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka() .AddRabbit()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(...) .AddOutbound<IIntegrationEvent>(...)) .AddInbound( new RabbitExchangeConsumerEndpoint(\"rabbit-events\") { ... }); } } Connection modes You may not want to connect your broker immediately. In the following example is shown how to postpone the automatic connection after the application startup. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka() .WithConnectionOptions(new BrokerConnectionOptions { Mode = BrokerConnectionMode.AfterStartup, RetryInterval = TimeSpan.FromMinutes(5) })) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } But it's also possible to completely disable the automatic connection and manually perform it. Startup Service public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka() .WithConnectionOptions(new BrokerConnectionOptions { Mode = BrokerConnectionMode.Manual })) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class BrokerConnectionService { private readonly IBroker _broker; public BrokerConnectionService(IBroker broker) { _broker = broker; } public async ConnectAsync() { broker.ConnectAsync(); } } Tip See the BrokerConnectionOptions documentation for details about the different options. Note Use IBrokerCollection instead of IBroker when multiple broker implementations are used. Important If your application is not running using an IHost ( GenericHost or WebHost , like in a normal ASP.NET Core application) you always need to manually connect it as shown in the second example above. Graceful shutdown It is important to properly close the consumers using the DisconnectAsync method before exiting. The offsets have to be committed and the broker has to be notified (it will then proceed to reassign the partitions as needed). Starting from version 3.0.0 this is done automatically (if your application is running using an IHost ( GenericHost or WebHost , like in a normal ASP.NET Core application). Health Monitoring The Silverback.Integration.HealthChecks package contains some extensions for Microsoft.Extensions.Diagnostics.HealthChecks that can be used to monitor the connection to the message broker. Currently, two checks exists: AddOutboundEndpointsCheck : Adds an health check that sends a ping message to all the outbound endpoints. AddOutboxCheck : Adds an health check that monitors the outbound queue (outbox table), verifying that the messages are being processed. AddConsumersCheck : Adds a health check that verifies that all consumers are connected. The usage is very simple, you just need to configure the checks in the Startup.cs, as shown in the following example. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddHealthChecks() .AddOutboundEndpointsCheck() .AddOutboundQueueCheck() .AddConsumersCheck(); } public void Configure(IApplicationBuilder app) { app.UseHealthChecks(\"/health\"); } } Consumer management API The consumer exposes some information and statistics that can be used to programmatically check the consumer status (see IConsumer ). A consumer can also be connected, started, stopped and disconnected at will. The following example shows a sample service that is used to monitor the total number of consumed message and restart the faulted consumers (the consumers get disconnected when an unhandled exception is thrown while processing the consumed message). public class ConsumerManagementService { private readonly IBrokerCollection _brokers; public ConsumerManagementService(IBrokerCollection brokers) { _brokers = brokers; } public int GetTotalConsumedMessages() { int totalCount = 0; foreach (var broker in _brokers) { foreach (var consumer in broker.Consumers) { totalCount += consumer.StatusInfo.ConsumedMessagesCount; } } } public void RestartDisconnectedConsumers() { foreach (var broker in _brokers) { if (!broker.IsConnected) continue; foreach (var consumer in broker.Consumers) { if (consumer.StatusInfo.Status == ConsumerStatus.Disconnected) { consumer.Connect(); } } } } } Samples All"
  },
  "concepts/broker/encryption.html": {
    "href": "concepts/broker/encryption.html",
    "title": "Encryption | Silverback",
    "keywords": "Encryption The end-to-end message encryption in Silverback is handled transparently in the producer and consumer and works independently from the used serializer or other features like chunking . The messages are transparently encrypted and decrypted. Symmetric encryption Enabling the end-to-end encryption using a symmetric algorithm just require an extra configuration in the endpoint. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .EncryptUsingAes(encryptionKey)) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DecryptUsingAes(encryptionKey))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Encryption = new SymmetricEncryptionSettings { AlgorithmName = \"AES\", Key = encryptionKey } }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Encryption = new SymmetricEncryptionSettings { AlgorithmName = \"AES\", Key = encryptionKey } }); } The SymmetricEncryptionSettings class encapsulates all common settings of a symmetric algorithm (block size, initialization vector, ...). The AlgorithmName is used to load the algorithm implementation using the SymmetricAlgorithm.Create(string) method. Refer to the SymmetricAlgorithm class documentation to see which implementations are available in .net core are. Silverback uses Aes by default. Random initialization vector If no static initialization vector is provided, a random one is automatically generated per each message and prepended to the actual encrypted message. The consumer will automatically extract and use it. It is recommended to stick to this default behavior, for increased security. Ket rotation You can smoothly rotate the key being used to encrypt the messages. In the outbound endpoint you can specify the current key identifier to be submitted as header, while in the inbound endpoint a custom function can be used to provide the correct key, depending on the value in the header. This simple mechanism allows to consume messages that were encrypted using different keys, enabling key rotation and supporting a rolling update of the producers. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .EncryptUsingAes(encryptionKey, \"key1\")) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DecryptUsingAes(keyIdentifier => { switch (keyIdentifier) { case \"key1\": return encryptionKey1; default: return encryptionKey2; } }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Encryption = new SymmetricEncryptionSettings { AlgorithmName = \"AES\", KeyProvider = encryptionKey, KeyIdentifier = \"key1\" } }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Encryption = new SymmetricEncryptionSettings { AlgorithmName = \"AES\", KeyProvider = keyIdentifier => { switch (keyIdentifier) { case \"key1\": return encryptionKey1; default: return encryptionKey2; } } } }); }"
  },
  "concepts/broker/headers.html": {
    "href": "concepts/broker/headers.html",
    "title": "Message Headers | Silverback",
    "keywords": "Message Headers Custom headers There are multiple ways to add custom headers to an outbound message: adding an enricher to the IProducerEndpoint annotating some properties with the HeaderAttribute , as shown in the next chapter. using a custom IBehavior or IProducerBehavior can be implemented, as shown in the Behaviors and Broker behaviors pipeline sections. Warning Some message broker implementations might not support headers and Silverback doesn't currently provide any workaround, thus the headers will simply be ignored. Using enrichers Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .AddHeader( \"x-my-header\", \"static value\") .AddHeader<InventoryEvent>( \"x-product-id\", envelope => envelope.Message?.ProductId))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, MessageEnrichers = new List<IOutboundMessageEnricher> { new GenericOutboundHeadersEnricher( \"x-my-header\", \"static value\"), new GenericOutboundHeadersEnricher<InventoryEvent>( \"x-product-id\", envelope => envelope.Message?.ProductId) } }); } Using HeaderAttribute The HeaderAttribute usage is very simple: you just have to decorate the properties you want to publish as headers and specify a name for the header. The headers value will also automatically be mapped back to the property upon consuming if the property declares a setter. using Silverback.Messaging.Messages; namespace Sample { public class OrderCreatedEvent { public List<LineItems> Items { get; set; } [Header(\"x-order-type\", PublishDefaultValue = true)] [JsonIgnore] public OrderType OrderType { get; set; } [Header(\"x-books-order\")] public bool ContainsBooks => Items.Any(item => item.Type == \"book\") [Header(\"x-dvd-order\")] public bool ContainsDvd => Items.Any(item => item.Type == \"dvd\") } } Note The PublishDefaultValue boolean property defines whether the header has to be published even if the property is set to the default value for its data type. The default is false . Note that the JsonIgnoreAttribute can be used to prevent the same properties to be serialized in the JSON body, when using the JsonMessageSerializer . Important Only the message type will be scanned, therefore the properties decorated with the HeaderAttribute must be in the root of the message object. Default headers Silverback will add some headers to the produced messages. They may vary depending on the scenario. Here is the list of the default headers that may be sent. Header Key Description x-message-id The message identifier . x-message-type The assembly qualified name of the message type. Used by the default JsonMessageSerializer . x-failed-attempts If an exception if thrown the failed attempts will be incremented and stored as header. This is necessary for the error policies to work. x-source-endpoint This will be set by the Move error policy and will contain the name of the endpoint the failed message is being moved from. x-chunk-index The message chunk index, used when chunking is enabled. x-chunk-count The total number of chunks the message was split into, used when chunking is enabled. x-chunk-last A boolean value indicating whether the message is the last one of a chunks sequence, used when chunking is enabled. x-first-chunk-offset The IBrokerMessageOffset value of the first chunk of the same message, used when chunking is enabled. traceparent Used for distributed tracing. It is set by the IProducer using the current Activity.Id . The IConsumer uses it's value to set the Activity.ParentId . Note that an Activity is automatically started by the default IProducer implementation. The header is implemented according to the W3C Trace Context proposal . tracestate Used for distributed tracing. It corresponds to the Activity.TraceStateString . The header is implemented according to the W3C Trace Context proposal . tracebaggage Used for distributed tracing. It corresponds to the string representation of the Activity.Baggage dictionary. This is not part of the w3c standard. content-type The content type of the binary file , used when producing or consuming an IBinaryFileMessage . x-failure-reason The header that will be set by the MoveMessageErrorPolicy and will contain the reason why the message failed to be processed. Kafka specific Header Key Description x-kafka-message-key The header that will be filled with the key of the message consumed from Kafka. x-kafka-message-timestamp The header that will be filled with the timestamp of the message consumed from Kafka. x-source-consumer-group-id The header that will be set by the MoveMessageErrorPolicy and will contain the GroupId the consumer that consumed the message that failed to be processed. x-source-topic The header that will be set by the MoveMessageErrorPolicy and will contain the source topic of the message that failed to be processed. x-source-partition The header that will be set by the MoveMessageErrorPolicy and will contain the source partition of the message that failed to be processed. x-source-offset The header that will be set by the MoveMessageErrorPolicy and will contain the offset of the message that failed to be processed. x-source-timestamp The header that will be set by the MoveMessageErrorPolicy and will contain the timestamp of the message that failed to be processed. The static classes DefaultMessageHeaders and KafkaMessageHeaders contain all default header names constants. Customizing header names The default header names can be overridden using the WithCustomHeaderName configuration method. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>() .WithCustomHeaderName(DefaultMessageHeaders.ChunkId, \"x-ch-id\") .WithCustomHeaderName(DefaultMessageHeaders.ChunksCount, \"x-ch-cnt\")); } }"
  },
  "concepts/broker/inbound.html": {
    "href": "concepts/broker/inbound.html",
    "title": "Inbound Endpoint | Silverback",
    "keywords": "Inbound Endpoint An inbound endpoint is used to configure Silverback to automatically consume a topic/queue and relay the messages to the internal bus. If no exception is thrown by the subscribers, the message is acknowledged and the next one is consumed. The endpoint object identifies the topic/queue that is being connected and the client configuration, such the connection options. The endpoint object is therefore very specific and every broker type will define it's own implementation of IConsumerEndpoint . The options in the endpoint object are also used to tweak the Silverback behavior (e.g. the deserialization ) and to enable additional features such as batch processing , decryption , etc. Note Silverback abstracts the message broker completely and the messages are automatically acknowledged if the subscribers complete without throwing an exception. Apache Kafka The KafkaConsumerEndpoint is defined by Silverback.Integration.Kafka and is used to declare an inbound endpoint connected to Apache Kafka. Fluent (preferred) Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; config.AutoOffsetReset = AutoOffsetResetType.Earliest; } .OnError(policy => policy.Retry(5)))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint( \"order-events\", \"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\", AutoOffsetReset = AutoOffsetResetType.Earliest }, ErrorPolicy = new RetryErrorPolicy().MaxFailedAttempts(5) }); } Note You can decide whether to use one consumer per topic or subscribe multiple topics with the same consumer (passing multiple topic names in the endpoint constructor, as shown in the example above). There are advantages and disadvantages of both solutions and the best choice really depends on your specific requirements, the amount of messages being produced, etc. Anyway the main difference is that when subscribing multiple topics you will still consume one message after the other but they will simply be interleaved (this may or may not be an issue, it depends) and on the other hand each consumer will use some resources, so creating multiple consumers will result in a bigger overhead. Note For a more in-depth documentation about the Kafka client configuration refer also to the confluent-kafka-dotnet documentation . MQTT The MqttConsumerEndpoint is defined by Silverback.Integration.MQTT and is used to declare an inbound endpoint connected to an MQTT broker. Fluent (preferred) Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddMqttEndpoints(endpoints => endpoints .Configure( config => config .WithClientId(\"order-service\") .ConnectViaTcp(\"localhost\") .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"testaments\"))) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .OnError(policy => policy.Retry(5)))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new MqttConsumerEndpoint( \"order-events\", \"inventory-events\") { Configuration = { ClientId = \"order-service\", ChannelOptions = new MqttClientTcpOptions { Server = \"localhost\" }, WillMessage = new MqttApplicationMessage() { ... } }, QualityOfServiceLevel = MqttQualityOfServiceLevel.AtLeastOnce ErrorPolicy = new RetryErrorPolicy().MaxFailedAttempts(5) }); } Note It doesn't matter how you configure the inbound and outbound endpoints, a single client will be created as long as all endpoints match the exact same configuration. (Using a slightly different configuration for the same client it will cause an exception to be thrown when validating the endpoints configuration.) Note For a more in-depth documentation about the MQTT client configuration refer also to the MQTTNet documentation . RabbitMQ Silverback.Integration.RabbitMQ is a bit more intricate and uses 2 different classes to specify an endpoint that connects to a queue ( RabbitQueueConsumerEndpoint ) or directly to an exchange ( RabbitExchangeConsumerEndpoint ). public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new RabbitQueueConsumerEndpoint(\"inventory-commands-queue\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = false, IsAutoDeleteEnabled = false } }) .AddInbound( new RabbitExchangeConsumerEndpoint(\"order-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout }, QueueName = \"my-consumer-group\", Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = false, IsAutoDeleteEnabled = false } }); } Note For a more in-depth documentation about the RabbitMQ configuration refer to the RabbitMQ tutorials and documentation . Error handling If an exceptions is thrown by the methods consuming the incoming messages (subscribers) the consumer will stop, unless some error policies are defined. The built-in policies are: StopConsumerErrorPolicy (default) SkipMessageErrorPolicy RetryErrorPolicy MoveMessageErrorPolicy ErrorPolicyChain Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; config.AutoOffsetReset = AutoOffsetResetType.Earliest; }) .OnError(policy => policy .Retry(3, TimeSpan.FromSeconds(1)) .ThenSkip()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint( \"order-events\", \"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\", AutoOffsetReset = AutoOffsetResetType.Earliest }, ErrorPolicy = new ErrorPolicyChain( new RetryErrorPolicy().MaxFailedAttempts(5), new SkipErrorPolicy()) }); } Important If the processing still fails after the last policy is applied the exception will be returned to the consumer, causing it to stop. Important The number of attempts are tracked according to the message id header . A message id must be provided in order for the MaxFailedAttempts mechanism to work. This is ensured by the Silverback producer but might not be the case when consuming messages coming from other sources. Some message broker implementations might transparently cope with the missing message id header and derive it from other identifiers (e.g. the kafka message key) but it's not automatically guaranteed that they will always be unique. You should carefully check that before relying on this feature. Important The RetryErrorPolicy will prevent the message broker to be polled for the duration of the configured delay, which could lead to a timeout. With Kafka you should for example set the max.poll.interval.ms settings to an higher value. Apply rules Use ApplyTo and Exclude methods to decide which exceptions must be handled by the error policy or take advantage of ApplyWhen to specify a custom apply rule. .OnError(policy => policy .MoveToKafkaTopic( moveEndpoint => moveEndpoint.ProduceTo(\"some-other-topic\"), movePolicy => movePolicy .ApplyTo<MyException>() .ApplyWhen((msg, ex) => msg.Xy == myValue)) .ThenSkip()); public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .OnError(policy => policy .MoveToKafkaTopic( moveEndpoint => moveEndpoint.ProduceTo(\"some-other-topic\"), movePolicy => movePolicy .ApplyTo<MyException>() .ApplyWhen((msg, ex) => msg.Xy == myValue)) .ThenSkip()))); } Publishing events Messages can be published when a policy is applied, in order to execute custom code. EndpointsConfigurator Event Handler public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\", \"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .OnError(policy => policy .Retry(3, TimeSpan.FromSeconds(1)) .ThenSkip(skipPolicy => skipPolicy .Publish(msg => new ProcessingFailedEvent(msg)))))); } public void OnProcessingFailed(ProcessingFailedEvent @event) { _processingStatusService.SetFailed(@event.Message.Id); _mailService.SendNotification(\"Failed to process message!\"); } Batch processing In some scenario, when having to deal with huge amounts of messages, processing each one of them on its own isn't the most efficient approach. Batch processing allow to process an arbitrary number of unrelated messages as a single unit of work. The messages are processed in batches. Refer to the BatchSettings documentation for details about the configuration. The batch can be subscribed either as IEnumerable , IAsyncEnumerable or IMessageStreamEnumerable<TMessage> . See also Streaming for details. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .EnableBatchProcessing(100, TimeSpan.FromSeconds(5)))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Batch = new Messaging.Batch.BatchSettings { Size = 100, MaxWaitTime = TimeSpan.FromSeconds(5) } }); } public class InventoryService { private DbContext _db; public InventoryService(MyDbContext db) { _db = db; } public async Task OnBatchReceived(IAsyncEnumerable<InventoryUpdateEvent> messages) { async foreach (var message in messages) { // Process each message } // Commit all changes in a single transaction await _db.SaveChangesAsync(); } } Parallelism The consumer processes the messages sequentially, this is by design. The KafkaConsumer is a bit special and actually processes each assigned partition independently and concurrently. This feature can be toggled using the ProcessAllPartitionsTogether and ProcessPartitionsIndependently methods of the IKafkaConsumerEndpointBuilder (or the KafkaConsumerEndpoint.ProcessPartitionsIndependently property), while the LimitParallelism method (or the KafkaConsumerEndpoint.MaxDegreeOfParallelism property) can be used to limit the number of messages being actually processed concurrently. Exactly-once processing Silverback is able to keep track of the messages that have been consumed in order to guarantee that each message is processed exactly once. Offset storage The OffsetStoreExactlyOnceStrategy will store the offset of the latest processed message (of each topic/partition) into a database table. The offsets are being stored to prevent the very same message to be consumed twice. Note The Silverback.Core.EntityFrameworkCore package is also required and the DbContext must include a DbSet of StoredOffset . See also the Sample DbContext (EF Core) . Startup EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .WithConnectionToMessageBroker(options => options .AddKafka() .AddOffsetStoreDatabaseTable()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .EnsureExactlyOnce(strategy => strategy.StoreOffsets()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, ExactlyOnceStrategy = new OffsetStoreExactlyOnceStrategy() }); } Inbound log The LogExactlyOnceStrategy will store the identifiers of all processed messages into a database table. The inbound messages are logged to prevent two messages with the same key to be consumed. Note The Silverback.Core.EntityFrameworkCore package is also required and the DbContext must include a DbSet of InboundLogEntry . See also the Sample DbContext (EF Core) . Startup EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .WithConnectionToMessageBroker(options => options .AddKafka() .AddInboundLogDatabaseTable()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"inventory-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .EnsureExactlyOnce(strategy => strategy.LogMessages()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, ExactlyOnceStrategy = new LogExactlyOnceStrategy() }); } Custom store At the moment only a database accessed using Entity Framework is supported as offset or log storage, but a custom storage can be used implementing IOffsetStore or IInboundLog . public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .WithConnectionToMessageBroker(options => options .AddKafka() .AddOffsetStore<MyCustomOffsetStore>()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } Samples All"
  },
  "concepts/broker/inboundenvelope.html": {
    "href": "concepts/broker/inboundenvelope.html",
    "title": "IInboundEnvelope | Silverback",
    "keywords": "IInboundEnvelope When a message is consumed Silverback wraps it into an IInboundEnvelope<TMessage> and pushes it to the message bus. Both the IInboundEnvelope<TMessage> or the contained message in its pure form can be subscribed. You can take advantage of this mechanism to gain access to the transport information of the message, since the IInboundEnvelope<TMessage> holds all the information like endpoint, offset and headers data. Subscribing to the IInboundEnvelope<TMessage> works exactly the same as subscribing to any other message. public class SubscribingService { public async Task OnWrappedMessageReceived(IInboundEnvelope<SampleMessage> envelope) { // ...your message handling logic... } public async Task OnPureMessageReceived(SampleMessage message) { // ...your message handling logic... } } Note Subscribing to the non-generic IInboundEnvelope or IRawInboundEnvelope it is possible to subscribe even the messages with an empty body."
  },
  "concepts/broker/kafka/kafka-events.html": {
    "href": "concepts/broker/kafka/kafka-events.html",
    "title": "Kafka Events | Silverback",
    "keywords": "Kafka Events The underlying library ( Confluent.Kafka ) uses some events to let you catch important information, interact with the partitions assignment process, etc. Silverback proxies those events to give you full access to those features. Consumer events These callbacks are available: IKafkaPartitionsAssignedCallback IKafkaPartitionsRevokedCallback IKafkaOffsetCommittedCallback IKafkaConsumerErrorCallback IKafkaConsumerStatisticsCallback IKafkaConsumerLogCallback IKafkaPartitionEofCallback Offset reset example In the following example the partitions assigned event is subscribed in order to reset the start offsets and replay the past messages. Startup ResetOffsetPartitionsAssignedCallbackHandler public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddSingletonBrokerCallbacksHandler<ResetOffsetPartitionsAssignedCallbackHandler>(); } } public class ResetOffsetPartitionsAssignedCallbackHandler : IKafkaPartitionsAssignedCallback { public IEnumerable<TopicPartitionOffset> OnPartitionsAssigned( IReadOnlyCollection<TopicPartition> topicPartitions, KafkaConsumer consumer) => topicPartitions.Select( topicPartition => new TopicPartitionOffset(topicPartition, Offset.Beginning)); } Producer events These callbacks are available: IKafkaProducerStatisticsCallback IKafkaProducerLogCallback See also Broker Callbacks"
  },
  "concepts/broker/kafka/kafka-partitioning.html": {
    "href": "concepts/broker/kafka/kafka-partitioning.html",
    "title": "Kafka Partitioning and Message Key | Silverback",
    "keywords": "Kafka Partitioning and Message Key Producer Destination partition If the destination topic contains multiple partitions, the destination partition is picked according to the hash of the message key . If no explicit message key was set, a random one is generated, resulting in the messages being randomly spread across the partitions. You can override this default behavior explicitly setting the target partition in the endpoint. The endpoint can be statically defined like in the following snippet or resolved via dynamic routing . Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\", 2))); // <- partition 2 } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new KafkaProducerEndpoint(\"order-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Partition = 2 }); } Producing to a fixed partition may be required in the case you have multiple producers to the same topic and you have to prevent the messages from the different clients to be interleaved (e.g. because you are relying on sequences, like chunking ). Message key Apache Kafka require a message key for different purposes, such as: Partitioning : Kafka can guarantee ordering only inside the same partition and it is therefore important to be able to route correlated messages into the same partition. To do so you need to specify a key for each message and Kafka will put all messages with the same key in the same partition. Compacting topics : A topic can be configured with cleanup.policy=compact to instruct Kafka to keep only the latest message related to a certain object, identified by the message key. In other words Kafka will retain only 1 message per each key value. The messages with the same key are guaranteed to be written to the same partition. Silverback will always generate a message key (same value as the x-message-id header ) but you can also generate your own key, either adding an enricher to the IProducerEndpoint or decorating the properties that must be part of the key with KafkaKeyMemberAttribute . Using enricher Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .WithKafkaKey<InventoryEvent>( envelope => envelope.Message?.ProductId))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, MessageEnrichers = new List<IOutboundMessageEnricher> { new OutboundMessageKafkaKeyEnricher<InventoryEvent>( envelope => envelope.Message?.ProductId) } }); } Using KafkaKeyMemberAttribute public class MultipleKeyMembersMessage : IIntegrationMessage { public Guid Id { get; set; } [KafkaKeyMember] public string One { get; set; } [KafkaKeyMember] public string Two { get; set; } public string Three { get; set; } } Note The message key will also be received as header (see Message Headers for details). Consumer Partitions processing While using a single poll loop, Silverback processes the messages consumed from each Kafka partition independently and concurrently. By default up to 10 messages/partitions are processed concurrently (per topic). This value can be tweaked in the endpoint configuration or disabled completely. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .LimitParallelism(2) .Configure(config => { config.GroupId = \"my-consumer\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"inventory-events\") .ProcessAllPartitionsTogether() .Configure(config => { config.GroupId = \"my-consumer\"; }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\", }, MaxDegreeOfParallelism = 2 }) .AddInbound( new KafkaConsumerEndpoint(\"inventory-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\", }, ProcessPartitionsIndependently = false }); } Manual partitions assignment In some cases you don't want to let the broker randomly distribute the partitions among the consumers. This might also be useful when dealing with large sequences (e.g. large messages/files being chunked or when batch processing ), to prevent that a rebalance occurs in the middle of a sequence, forcing the consumer to abort and restart from the beginning. The assignment can either be completely static or dynamic using a resolver function that will receive all available partitions as input (see IKafkaConsumerEndpointBuilder and KafkaConsumerEndpoint for details). Fluent (static) Fluent (dynamic) Legacy (static) Legacy (dynamic) public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom( new TopicPartition(\"order-events\", 0), new TopicPartition(\"order-events\", 1)) .Configure(config => { config.GroupId = \"my-consumer\"; }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom( \"order-events\", partitions => partitions .Where(partition => partition.Partition % 2 == 0)) .Configure(config => { config.GroupId = \"my-consumer\"; }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint( new TopicPartition(\"order-events\", 0), new TopicPartition(\"order-events\", 1)) { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" } }); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint( \"order-events\", partitions => partitions .Where(partition => partition.Partition % 2 == 0)) { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" } }); } Samples Kafka - Files Streaming"
  },
  "concepts/broker/kafka/multiple-consumer-groups.html": {
    "href": "concepts/broker/kafka/multiple-consumer-groups.html",
    "title": "Multiple Consumer Groups (in same process) | Silverback",
    "keywords": "Multiple Consumer Groups (in same process) In some cases you may want to subscribe multiple times the same consumed message, to perform independent tasks. Having multiple subscribers handling the very same message is not a good idea since a failure in one of them will cause the message to be consumed again and thus reprocessed by all subscribers. A much safer approach is to bind multiple consumers to the same topic, using a different consumer group id. This will cause the message to be consumed multiple times (once per consumer group) and being committed independently. The KafkaGroupIdFilterAttribute can be used to execute a subscribed method according to the group id. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"document-events\") .Configure(config => { config.GroupId = \"group1\"; })) .AddInbound(endpoint => endpoint .ConsumeFrom(\"document-events\") .Configure(config => { config.GroupId = \"group2\"; }))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new KafkaConsumerEndpoint(\"document-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"group1\" } }) .AddInbound( new KafkaConsumerEndpoint(\"document-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"group2\" } }); } public class MySubscriber { [KafkaGroupIdFilter(\"group1\")] public void PerformTask1(MyEvent @event) => ... [KafkaGroupIdFilter(\"group2\")] public void PerformTask2(MyEvent @event) => ... } Note The filters can be added dynamically using the overloads of AddSubscriber accepting a SubscriptionOptions or TypeSubscriptionOptions and this allows you to use a variable for the group id. .AddSingletonSubscriber<MySubscriber>( new TypeSubscriptionOptions { Filters = new[] { new KafkaGroupIdFilterAttribute(\"consumer1\") } }) Using the KafkaGroupIdFilterAttribute is the cleanest and easiest approach but alternatively you can always subscribe to the IInboundEnvelope<TMessage> and perform different tasks according to the GroupId value. public class MySubscriber { public void OnMessageReceived(IInboundEnvelope<MyEvent> envelope) { switch (((KafkaConsumerEndpoint)envelope.Endpoint).Configuration.GroupId) { case \"group1\": PerformTask1(envelope.Message); break; case \"group2\": PerformTask2(envelope.Message); break; } } private void PerformTask1(MyEvent @event) => ... private void PerformTask2(MyEvent @event) => ... }"
  },
  "concepts/broker/message-id.html": {
    "href": "concepts/broker/message-id.html",
    "title": "Message Identifier | Silverback",
    "keywords": "Message Identifier Silverback will ensure that an x-message-id header is always set with each message. This header is used mostly for tracing purpose and it's value is always printed in the logs generated by Silverback. The producer will automatically generate a random Guid to be used as message identifier. (This value will be used also as Kafka key by default, see Kafka Partitioning and Message Key .) In the consumer side the message identifier may be used also to rebuild the chunks sequence , implement exactly once processing and similar. If the header is not present, the consumer may artificially set if with another identifier such as the Kafka key (see Kafka Partitioning and Message Key ). Custom value It is of course possible to use a customized message identifier instead of a random Guid , simply overriding the x-message-id header as shown in the following snippet. More information about the message headers can be found in the Message Headers section. using Silverback.Messaging.Messages; namespace Sample { public class OrderSubmittedEvent { [Header(DefaultMessageHeaders.MessageId)] public string UniqueOrderNumber { get; set; } } } Note This example assumes that only one message per each order is published to the same endpoint, because the message id should be unique in order for the various features relying on it to work properly."
  },
  "concepts/broker/mqtt/mqtt-events.html": {
    "href": "concepts/broker/mqtt/mqtt-events.html",
    "title": "MQTT Events | Silverback",
    "keywords": "MQTT Events Some lifetime events are fired by the MqttBroker and can be handled using the following callbacks: IMqttClientConnectedCallback IMqttClientDisconnectingCallback Example In the following example a message is sent as soon as the client is connected. Startup ConnectionCallbackHandler public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddMqtt()) .AddSingletonBrokerCallbacksHandler<ConnectionCallbackHandler>(); } } public class ConnectionCallbackHandler : IMqttClientConnectedCallback { private readonly IPublisher _publisher; public ConnectionCallbackHandler(IPublisher publisher) { _publisher = publisher; } public Task OnClientConnectedAsync(MqttClientConfig config) => _publisher.PublishAsync(new ClientConnectedMessage()); } See also Broker Callbacks"
  },
  "concepts/broker/mqtt/multiple-clients.html": {
    "href": "concepts/broker/mqtt/multiple-clients.html",
    "title": "Multiple Clients (in same process) | Silverback",
    "keywords": "Multiple Clients (in same process) In some cases you may want to subscribe multiple times the same consumed message, to perform independent tasks. Having multiple subscribers handling the very same message is not a good idea since a failure in one of them will cause the message to be consumed again and thus reprocessed by all subscribers. A much safer approach is to bind multiple consumers to the same topic, using a different client id. This will cause the message to be consumed multiple times (once per client) and being committed independently. The MqttClientIdFilterAttribute can be used to execute a subscribed method according to the client id. EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddMqttEndpoints(endpoints => endpoints .Configure( config => config .ConnectViaTcp(\"localhost\")) .AddInbound(endpoint => endpoint .Configure(config => config.WithClientId(\"client1\")) .ConsumeFrom(\"document-events\")) .AddInbound(endpoint => endpoint .Configure(config => config.WithClientId(\"client2\")) .ConsumeFrom(\"document-events\"))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddInbound( new MqttConsumerEndpoint(\"document-events\") { Configuration = { ClientId = \"client1\", ChannelOptions = new MqttClientTcpOptions { Server = \"localhost\" } } }) .AddInbound( new MqttConsumerEndpoint(\"document-events\") { Configuration = { ClientId = \"client2\", ChannelOptions = new MqttClientTcpOptions { Server = \"localhost\" } } }); } public class MySubscriber { [MqttClientIdFilter(\"client1\")] public void PerformTask1(MyEvent @event) => ... [MqttClientIdFilter(\"client2\")] public void PerformTask2(MyEvent @event) => ... } Note The filters can be added dynamically using the overloads of AddSubscriber accepting a SubscriptionOptions or TypeSubscriptionOptions and this allows you to use a variable for the client id. .AddSingletonSubscriber<MySubscriber>( new TypeSubscriptionOptions { Filters = new[] { new MqttClientIdFilterAttribute(\"client1\") } }) Using the MqttClientIdFilterAttribute is the cleanest and easiest approach but alternatively you can always subscribe to the IInboundEnvelope<TMessage> and perform different tasks according to the ClientId value. public class MySubscriber { public void OnMessageReceived(IInboundEnvelope<MyEvent> envelope) { switch (((MqttConsumerEndpoint)envelope.Endpoint).Configuration.ClientId) { case \"client1\": PerformTask1(envelope.Message); break; case \"client2\": PerformTask2(envelope.Message); break; } } private void PerformTask1(MyEvent @event) => ... private void PerformTask2(MyEvent @event) => ... }"
  },
  "concepts/broker/outbound.html": {
    "href": "concepts/broker/outbound.html",
    "title": "Outbound Endpoint | Silverback",
    "keywords": "Outbound Endpoint An outbound endpoint is used to configure silverback to automatically relay the integration messages that ate published to the internal bus to the message broker. Multiple outbound endpoints can be configured and Silverback will route the messages according to their type or a custom routing logic. The endpoint object identifies the topic/queue that is being connected and the client configuration, such the connection options. The endpoint object is therefore very specific and every broker type will define it's own implementation of IProducerEndpoint . The options in the endpoint object are also used to tweak the Silverback behavior (e.g. the serialization ) and to enable additional features such as chunking , encryption , etc. Apache Kafka The KafkaProducerEndpoint is defined by Silverback.Integration.Kafka and is used to declare an outbound endpoint connected to Apache Kafka. Fluent (preferred) Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\") .EnableChunking(500000) .ProduceToOutbox())); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new KafkaProducerEndpoint(\"order-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Chunk = new ChunkSettings { Size = 500000 }, Strategy = new OutboxProduceStrategy() }); } Note For a more in-depth documentation about the Kafka client configuration refer also to the confluent-kafka-dotnet documentation . MQTT The MqttProducerEndpoint is defined by Silverback.Integration.MQTT and is used to declare an outbound endpoint connected to an MQTT broker. Fluent (preferred) Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddMqttEndpoints(endpoints => endpoints .Configure( config => config .WithClientId(\"order-service\") .ConnectViaTcp(\"localhost\") .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"testaments\"))) .AddOutbound<IIntegrationEvent>(endpoint => endpoint .ProduceTo(\"order-events\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .Retain())); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new MqttProducerEndpoint(\"order-events\") { Configuration = { ClientId = \"order-service\", ChannelOptions = new MqttClientTcpOptions { Server = \"localhost\" }, WillMessage = new MqttApplicationMessage() { ... } }, QualityOfServiceLevel = MqttQualityOfServiceLevel.AtLeastOnce, Retain = true }); } Note For a more in-depth documentation about the MQTT client configuration refer also to the MQTTNet documentation . RabbitMQ Silverback.Integration.RabbitMQ is a bit more intricate and uses 2 different classes to specify an endpoint that connects to a queue ( RabbitQueueProducerEndpoint ) or directly to an exchange ( RabbitExchangeProducerEndpoint ). public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new RabbitQueueProducerEndpoint(\"inventory-commands-queue\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Queue = new RabbitQueueConfig { IsDurable = true, IsExclusive = false, IsAutoDeleteEnabled = false } }) .AddOutbound<IIntegrationEvent>( new RabbitExchangeProducerEndpoint(\"order-events\") { Connection = new RabbitConnectionConfig { HostName = \"localhost\", UserName = \"guest\", Password = \"guest\" }, Exchange = new RabbitExchangeConfig { IsDurable = true, IsAutoDeleteEnabled = false, ExchangeType = ExchangeType.Fanout } }); } Note For a more in-depth documentation about the RabbitMQ configuration refer to the RabbitMQ tutorials and documentation . Transactional outbox strategy The transactional outbox pattern purpose is to reliably update the database and publish the messages in the same atomic transaction. This is achieved storing the outbound messages into a temporary outbox table, whose changes are committed together with the other changes to the rest of the data. Messages 1, 2 and 3 are stored in the outbox table and produced by a separate thread or process. When using entity framework the outbound messages are stored into a DbSet and are therefore implicitly saved in the same transaction used to save all other changes. Note The Silverback.Core.EntityFrameworkCore package is also required and the DbContext must include a DbSet of OutboxMessage . See also the Sample DbContext (EF Core) . Important The current OutboxWorker cannot scale horizontally and starting multiple instances will cause the messages to be produced multiple times. In the following example a distributed lock (stored in the database) is used to ensure that only one instance is running and another one will immediately take over when it stops (the DbContext must include a DbSet of Lock as well, see also the Sample DbContext (EF Core) ). Startup EndpointsConfigurator (fluent) EndpointsConfigurator (legacy) Publisher public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() // Setup the lock manager using the database // to handle the distributed locks. // If this line is omitted the OutboundWorker will still // work without locking. .AddDbDistributedLockManager() .WithConnectionToMessageBroker(options => options .AddKafka() .AddOutboxDatabaseTable() .AddOutboxWorker()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<IIntegrationEvent>( endpoint => endpoint .ProduceTo(\"order-events\") .ProduceToOutbox())); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IIntegrationEvent>( new KafkaProducerEndpoint(\"order-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Strategy = new OutboxProduceStrategy() }); } private readonly IPublisher _publisher; private readonly SampleDbContext _dbContext; public async Task CancelOrder(int orderId) { // You can use _dbContext to update/insert entities here await _publisher.PublishAsync(new OrderCancelledEvent { OrderId = orderId }); // No messages will be published unless you call SaveChangesAsync! await _dbContext.SaveChangesAsync(); } Custom outbox You can easily use another kind of storage as outbox, simply creating your own IOutboxWriter and IOutboxReader implementations. At the moment only a database table accessed using Entity Framework is supported as outbox, but a custom storage can be used implementing IOutboxWriter and IOutboxReader . public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .UseDbContext<MyDbContext>() .AddDbDistributedLockManager() .WithConnectionToMessageBroker(options => options .AddKafka() .AddOutbox<MyCustomOutboxWriter, MyCustomOutboxReader() .AddOutboxWorker()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } Subscribing locally The published messages that are routed to an outbound endpoint cannot be subscribed locally (within the same process), unless explicitly desired. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddDbDistributedLockManager() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>() .PublishOutboundMessagesToInternalBus(); } } Note What said above is only partially true, as you can subscribe to the wrapped message ( IOutboundEnvelope<TMessage> ) even without calling PublishOutboundMessagesToInternalBus . Producing the same message to multiple endpoints An outbound route can point to multiple endpoints resulting in a broadcast to all endpoints. Messages 1, 2 and 3 are published to both topics simultaneously. public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddOutbound<IIntegrationCommand>( new KafkaProducerEndpoint(\"topic-1\") { ... }, new KafkaProducerEndpoint(\"topic-2\") { ... })); } } A message will also be routed to all outbound endpoint mapped to a type compatible with the message type. In the example below an OrderCreatedMessage (that inherits from OrderMessage ) would be sent to both endpoints. public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddOutbound<OrderMessage>( new KafkaProducerEndpoint(\"topic-1\") { ... }) .AddOutbound<OrderCreatedMessage>( new KafkaProducerEndpoint(\"topic-2\") { ... })); } } Dynamic custom routing By default Silverback routes the messages according to their type and the static configuration defined at startup. In some cases you may need more flexibility, being able to apply your own routing rules. More information in the dedicated Outbound Messages Routing chapter. Samples All"
  },
  "concepts/broker/outbound-routing.html": {
    "href": "concepts/broker/outbound-routing.html",
    "title": "Outbound Messages Routing | Silverback",
    "keywords": "Outbound Messages Routing By default Silverback routes the messages according to their type and the static configuration defined at startup. In some cases you may need more flexibility, being able to apply your own routing rules. In such cases it is possible to either take advantage of the simple endpoint name resolvers or even implement a fully customized router. The messages are dynamically routed to the appropriate endpoint. Endpoint name resolver Using an endpoint name resolver is fairly simple and just requires a slightly different configuration in the IProducerEndpoint . Here below a few examples of custom routing. Please refer to the KafkaProducerEndpoint / IKafkaProducerEndpointBuilder or MqttProducerEndpoint / IMqttProducerEndpointBuilder API documentation for further information about all the possibilities. Fluent Legacy ProducerEndpointNameResolver public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) // Using a resolver function .AddOutbound<OrderCreatedEvent>(endpoint => endpoint .ProduceTo<OrderCreatedEvent>(envelope => { if (envelope.Message.IsPriority) return \"priority-orders\"; else return \"normal-orders\"; })) // Using format string and arguments function .AddOutbound<OrderCreatedEvent>(endpoint => endpoint .ProduceTo<OrderCreatedEvent>( \"orders-{0}\", envelope => { if (envelope.Message.IsPriority) return new[] { \"priority\" }; else return new[] { \"normal\" }; })) // Using a resolver class .AddOutbound<OrderCreatedEvent>(endpoint => endpoint .UseEndpointNameResolver<MyEndpointNameResolver>()) // Kafka only: using a partition resolver function .AddOutbound<InventoryUpdateMessage>(endpoint => endpoint .ProduceTo<InventoryUpdateMessage>( _ => \"topic1\", envelope => { switch (envelope.Message.Supplier) { case \"foo\": return 0; case \"bar\": return 1; case \"baz\": return 2; } })))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder // Using a resolver function .AddOutbound<OrderCreatedEvent>( new KafkaProducerEndpoint(envelope => { var message = (OrderCreatedEvent) envelope.Message; if (message.IsPriority) return \"priority-orders\"; else return \"normal-orders\"; }) { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }) // Using format string and arguments function .AddOutbound<OrderCreatedEvent>( new KafkaProducerEndpoint( \"orders-{0}\", envelope => { var message = (OrderCreatedEvent) envelope.Message; if (message.IsPriority) return new[] { \"priority\" }; else return new[] { \"normal\" }; }) { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }) // Using a resolver class .AddOutbound<OrderCreatedEvent>( new KafkaProducerEndpoint(typeof(MyEndpointNameResolver)) { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }) // Kafka only: using a partition resolver function .AddOutbound<InventoryUpdateMessage>( new KafkaProducerEndpoint( _ => \"topic1\", envelope => { var message = (InventoryUpdateMessage) envelope.Message; switch (message.Supplier) { case \"foo\": return 0; case \"bar\": return 1; case \"baz\": return 2; } }) { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" } }); } public class MyEndpointNameResolver : ProducerEndpointNameResolver<TestEventOne> { private readonly IMyService _service; public MyEndpointNameResolver(IMyService service) { _service = service; } protected override string GetName(IOutboundEnvelope<TestEventOne> envelope) { if (_service.IsPriorityOrder(envelope.Message.OrderNumber)) return \"priority-orders\"; else return \"normal-orders\"; } } Custom router In the following example a custom router is used to route the messages according to their priority (a copy is also sent to a catch-all topic). Startup EndpointsConfigurator public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<IPrioritizedCommand>( (message, _, endpointsDictionary) => new [] { endpointsDictionary[message.Priority.ToString()], endpointsDictionary[\"all\"] }, new Dictionary<string, Action<IKafkaProducerEndpointBuilder>> { { \"low\", endpoint => endpoint.ProduceTo(\"low-priority\") }, { \"normal\", endpoint => endpoint.ProduceTo(\"normal-priority\") }, { \"high\", endpoint => endpoint.ProduceTo(\"high-priority\") }, { \"all\", endpoint => endpoint.ProduceTo(\"all\") } }); } Alternatively, an actual router class can also be created to encapsulate the routing logic. Startup EndpointsConfigurator Router public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<MyEndpointsConfigurator>() .AddSingletonOutboundRouter<PrioritizedRouter>(); } } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder.AddOutbound<IPrioritizedCommand, PrioritizedRouter>(); } public class PrioritizedRouter : OutboundRouter<IPrioritizedCommand> { private static readonly IProducerEndpoint HighPriorityEndpoint = new KafkaProducerEndpoint(\"high-priority\") { ... }; private static readonly IProducerEndpoint NormalPriorityEndpoint = new KafkaProducerEndpoint(\"normal-priority\") { ... }; private static readonly IProducerEndpoint LowPriorityEndpoint = new KafkaProducerEndpoint(\"low-priority\") { ... }; private static readonly IProducerEndpoint AllMessagesEndpoint = new KafkaProducerEndpoint(\"all\") { ... }; public override IEnumerable<IProducerEndpoint> Endpoints { get { yield return AllMessagesEndpoint; yield return LowPriorityEndpoint; yield return NormalPriorityEndpoint; yield return HighPriorityEndpoint; } } public override IEnumerable<IProducerEndpoint> GetDestinationEndpoints( IPrioritizedCommand message, MessageHeaderCollection headers) { yield return AllMessagesEndpoint; switch (message.Priority) { case MessagePriority.Low: yield return LowPriorityEndpoint; break; case MessagePriority.High: yield return HighPriorityEndpoint; break; default: yield return NormalPriorityEndpoint; break; } } }"
  },
  "concepts/broker/producer.html": {
    "href": "concepts/broker/producer.html",
    "title": "Producer | Silverback",
    "keywords": "Producer In some cases when high throughput is important you might want to skip the IPublisher and take advantage of the several options offered by the IProducer interface. Producing pre serialized messages A pre-serialized message can be produced via the normal Produce / ProduceAsync or the RawProduce / RawProduceAsync methods. The difference is that the latter skip the entire Silverback behaviors pipeline (note that it means that no chunking or other features will kick in). Non-blocking overloads These are especially important for Kafka, since the underlying library is able to batch the outgoing messages for efficiency and that improves the throughput a lot. They will complete as soon as the message has been enqueued and invoke a callback when it is successfully produced (or when it fails / times out). These overloads exist for Produce , ProduceAsync , RawProduce and RawProduceAsync . (Note that ) public class ProducerService { private readonly IProducer _producer; private readonly ILogger _logger; public ProducerService( IBroker broker, ILogger<ProducerService> logger) { _producer = broker.GetProducer(\"some-topic\"); _logger = logger; } public async Task Produce(byte[] rawMessage) { for (int i = 0; i < 100000; i++) { _producer.RawProduce( rawMessage, null, () => _logger.LogInformation($\"Produced {i}\"), ex => _logger.LogError(ex, $\"Failed to produce {i}\"); } } } Note The non-async overload with callback functions is generally the fastest option with Kafka."
  },
  "concepts/broker/rabbit/routing-key.html": {
    "href": "concepts/broker/rabbit/routing-key.html",
    "title": "Routing Key | Silverback",
    "keywords": "Routing Key With RabbitMQ a routing key can be used to route the messages to a specific queue or filter the messages in a topic. See also the routing and topics tutorials on the official RabbitMQ web site. The messages are routed according to the routing key. Silverback offers a convenient way to specify the routing key, using the RabbitRoutingKeyAttribute . public class MyMessage : IIntegrationMessage { [RabbitRoutingKey] public string Key { get; set; } ... }"
  },
  "concepts/broker/serialization.html": {
    "href": "concepts/broker/serialization.html",
    "title": "Serialization | Silverback",
    "keywords": "Serialization Being flexible when serializing and deserializing the messages sent over the message broker is crucial for interoperability and these mechanisms are therefore completely customizable. Default JSON serialization The default JsonMessageSerializer internally uses System.Text.Json to serialize the messages as JSON and encode them in UTF-8. A few headers are added to the message, in particular x-message-type is used by the JsonMessageSerializer to know the message type when deserializing it in the consumer, thus allowing messages of different types being sent over the same topic or queue. Warning The JsonMessageSerializer will obviously try to map the message to a type with the exact assembly qualified name found in the x-message-type header. It is therefore a good practice to share the message models among the services, maybe through a shared project or a nuget package. This is the suggested serialization strategy when both producer and consumer are based on Silverback but may not be ideal for interoperability. Have a look at the Message Headers section for an overview on the headers that are appended to the messages. Fixed-type JSON for interoperability If you are consuming a message coming from another system (not based on Silverback), chances are that the message type name is not being delivered as header. In that case you can resort to the typed JsonMessageSerializer<TMessage> . This serializer works like the default one seen in the previous chapter, but the message type is hard-coded, instead of being resolved according to the message header. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .SerializeAsJson(serializer => serializer .UseFixedType<InventoryEvent>())) // Specifying the message type will automatically // switch to the JsonMessageSerializer<TMessage> // and deserialize the specified type without // needing the type header .AddInbound<OrderEvent>(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; })) // The following configurations is equivalent to the // previous one, but more verbose .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeJson(serializer => serializer .UseFixedType<OrderEvent>()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new JsonMessageSerializer<InventoryEvent>() }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Serializer = new JsonMessageSerializer<OrderEvent>() }); } JSON using Newtonsoft.Json Prior to release 3.0.0 the default JsonMessageSerializer was based on Newtonsoft.Json instead of System.Text.Json . For backward compatibility reasons and since System.Text.Json may not support all use cases covered by Newtonsoft.Json , the old serializers have been renamed to NewtonsoftJsonMessageSerializer and NewtonsoftJsonMessageSerializer<TMessage> and moved into the dedicated Silverback.Integration.Newtonsoft package. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .SerializeAsJsonUsingNewtonsoft()) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeJsonUsingNewtonsoft()) // Specifying the message type will automatically // switch to the NewtonsoftJsonMessageSerializer<TMessage> .AddInbound<DeliveryNotification>(endpoint => endpoint .ConsumeFrom(\"delivery-notification-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeJsonUsingNewtonsoft()) ); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new NewtonsoftJsonMessageSerializer() }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Serializer = new NewtonsoftJsonMessageSerializer() }); } Apache Avro The AvroMessageSerializer<TMessage> contained in the Silverback.Integration.Kafka.SchemaRegistry package can be used to connect with a schema registry and exchange messages in Apache Avro format. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .SerializeAsAvro(serializer => serializer .UseType<InventoryEvent>() .Configure( schemaRegistryConfig => { schemaRegistryConfig.Url = \"localhost:8081\"; }, serializerConfig => { serializerConfig.AutoRegisterSchemas = true; }))) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeAvro(serializer => serializer .UseType<OrderEvent>() .Configure( schemaRegistryConfig => { schemaRegistryConfig.Url = \"localhost:8081\"; }, serializerConfig => { serializerConfig.AutoRegisterSchemas = true; })))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new AvroMessageSerializer<InventoryEvent> { SchemaRegistryConfig = new SchemaRegistryConfig { Url = \"localhost:8081\" }, AvroSerializerConfig = new AvroSerializerConfig { AutoRegisterSchemas = true } } }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Serializer = new AvroMessageSerializer<OrderEvent> { SchemaRegistryConfig = new SchemaRegistryConfig { Url = \"localhost:8081\" }, AvroSerializerConfig = new AvroSerializerConfig { AutoRegisterSchemas = true } } }); } Note The C# message models can be generated from an Avro schema using AvroGen . Note This serializer is built for Kafka but it could work with other brokers, as long as a schema registry is available. Custom serializer In some cases you may want to build your very own custom serializer implementing IMessageSerializer directly. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .SerializeUsing(new MyCustomSerializer())) .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeUsing(new MyCustomSerializer()))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, Serializer = new MyCustomSerialzer() }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, Serializer = new MyCustomSerialzer() }); } Note You may need to implement IKafkaMessageSerializer if you want to have full control over the serialization of the Kafka key as well. Binary Files Please refer to the Binary Files page if you need to produce or consume raw binary files."
  },
  "concepts/broker/streaming.html": {
    "href": "concepts/broker/streaming.html",
    "title": "Streaming | Silverback",
    "keywords": "Streaming The IMessageStreamEnumerable<TMessage> can be used to consume an endpoint in a streaming fashion and it is the only way to consume sequences (see for example batch processing ). This stream will be forwarded to the subscribed method as soon as the first message is consumed and it is then asynchronously pushed with the next messages. IMessageStreamEnumerable<TMessage> implements both IEnumerable and IAsyncEnumerable and the subscriber method can either declare an IMessageStreamEnumerable<TMessage> , an IEnumerable or an IAsyncEnumerable as argument. Since the asynchronous and I/O bound nature of this stream it is recommended to take advantage of the IAsyncEnumerable capabilities to asynchronously loop through the messages. public class StreamSubscriber { public async Task OnOrderStreamReceived( IAsyncEnumerable<OrderEvent> eventsStream) { await foreach(var orderEvent in eventsStream) { // ...process the event... } } } A single instance of IMessageStreamEnumerable<TMessage> is created and published per each queue/topic/partition and the messages are acknowledged (committed) after a single iteration completes, unless sequencing (e.g. batch processing ) is configured or a sequence is automatically recognized by Silverback (e.g. a dataset). In that case an instance is published per each sequence and the entire sequence is atomically committed. Rx (Observable) The Silverback.Core.Rx package adds the IMessageStreamObservable<TMessage> that works like the IMessageStreamEnumerable<TMessage> but implements IObservable enabling the usage of Rx.NET . Startup Subscriber public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddSilverback().AsObservable(); } } public class StreamSubscriber { public async Task OnOrderStreamReceived( IObservable<OrderEvent> eventsStream) { stream.Subscribe(...); } } Notes, suggestions and insights The stream will be pushed with messages as they are read from the message broker. Since the I/O bound nature of the operation you should obviously prefer to subscribe to an IAsyncEnumerable instead of an IEnumerable and in any case loop asynchronously ( await foreach or similar approach). If the sequence is interrupted because the application is disconnecting or an error occurred in another subscriber, the IEnumerator will throw an OperationCancelledException . Handle it if you need to gracefully abort or cleanup. Throwing an exception while enumerating a sequence (e.g. a BatchSequence ) will cause it to be aborted and handled according to the defined error policies . If you just break the iteration and the subscriber return, the operation will be considered successful instead and the sequence will be committed."
  },
  "concepts/broker/testing.html": {
    "href": "concepts/broker/testing.html",
    "title": "Testing | Silverback",
    "keywords": "Testing Silverback ships a mocked version of the message broker implementations on a different nuget package: Silverback.Integration.Kafka.Testing (coming soon) Silverback.Integration.RabbitMQ.Testing These packages allow to perform end-to-end tests without having to integrate with a real message broker. Unit Tests Here an example of an xUnit test built using Silverback.Integration.Kafka.Testing . public class KafkaTests { private readonly IServiceProvider _serviceProvider; // Configure DI during setup public InMemoryBrokerTests() { var services = new ServiceCollection(); // Loggers are a prerequisite services.AddSingleton<ILoggerFactory, NullLoggerFactory>(); services.AddSingleton(typeof(ILogger<>), typeof(NullLogger<>)); services // Register Silverback as usual .AddSilverback() // Register the mocked KafkaBroker .WithConnectionToMessageBroker(config => config.AddMockedKafka()) // Configure inbound and outbound endpoints .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://tests\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"test-topic\")) .AddInbound(endpoint => endpoint .ConsumeFrom(\"test-topic\") .Configure(config => { config.GroupId = \"my-test-consumer\" }))) // Register the subscriber under test .AddScopedSubscriber<MySubscriber>(); // ...register all other types you need... _serviceProvider = services.BuildServiceProvider(); } [Fact] public async Task SampleTest() { // Arrange // Connect the broker await _serviceProvider.GetRequiredService<IBroker>().ConnectAsync(); // Create a producer to push to test-topic var producer = _serviceProvider .GetRequiredService<IBroker>() .GetProducer(new KafkaProducerEndpoint(\"test-topic\")); // Act await producer.ProduceAsync(new TestMessage { Content = \"hello!\" }); await producer.ProduceAsync(new TestMessage { Content = \"hello 2!\" }); // Assert // ...your assertions... } } Integration Tests Mocking the message broker is especially interesting for the integration tests, where you probably leverage the ASP.NET Core integration tests to perform a full test based on the real configuration applied in the application's startup class. The following code shows the simplest integration test possible, in which an object is published to the broker and e.g. a subscriber is called. public class IntegrationTests : IClassFixture<WebApplicationFactory<Startup>> { private readonly WebApplicationFactory<Startup> _factory; public IntegrationTests(WebApplicationFactory<Startup> factory) { _factory = factory.WithWebHostBuilder(builder => { builder.ConfigureTestServices(services => { // Replace the usual broker (KafkaBroker) // with the mocked version services.UseMockedKafka(); }); }; } [Fact] public async Task SampleTest() { // Arrange // Resolve a producer to push to test-topic var producer = _factory.Server.Host.Services .GetRequiredService<IBroker>() .GetProducer(new KafkaProducerEndpoint(\"tst-topic\")); // Act await producer.ProduceAsync(new TestMessage { Content = \"abc\" }); // Assert // ...your assertions... } } Testing helper The testing helpers (such has IKafkaTestingHelper ) contain some methods that simplify testing with the message broker, given it's asynchronous nature. public class IntegrationTests : IClassFixture<WebApplicationFactory<Startup>> { private readonly WebApplicationFactory<Startup> _factory; public IntegrationTests(WebApplicationFactory<Startup> factory) { _factory = factory.WithWebHostBuilder(builder => { builder.ConfigureTestServices(services => { services.UseMockedKafka(); }); }; } [Fact] public async Task SampleTest() { // Arrange // Resolve the IKafkaTestingHelper (used below) var testingHelper = _factory.Server.Host.Services .GetRequiredService<IKafkaTestingHelper>(); // Resolve a producer to push to test-topic var producer = testingHelper.Broker .GetProducer(new KafkaProducerEndpoint(\"tst-topic\")); // Act await producer.ProduceAsync(new TestMessage { Content = \"abc\" }); // Wait until all messages have been consumed and // committed before asserting await testingHelper.WaitUntilAllMessagesAreConsumedAsync(); // Assert // ...your assertions... } } IntegrationSpy The IIntegrationSpy ships with the Silverback.Integration.Testing package (referenced by the other Integration.Testing.* packages) and can be used to inspect all outbound and inbound messages. public class IntegrationTests : IClassFixture<WebApplicationFactory<Startup>> { private readonly WebApplicationFactory<Startup> _factory; public IntegrationTests(WebApplicationFactory<Startup> factory) { _factory = factory.WithWebHostBuilder(builder => { builder.ConfigureTestServices(services => { services .ConfigureSilverback() .UseMockedKafka() .AddIntegrationSpy(); }); }; } [Fact] public async Task SampleTest() { // Arrange var testingHelper = _factory.Server.Host.Services .GetRequiredService<IKafkaTestingHelper>(); var producer = testingHelper.Broker .GetProducer(new KafkaProducerEndpoint(\"tst-topic\")); // Act await producer.ProduceAsync(new TestMessage { Content = \"abc\" }); // Wait until all messages have been consumed and // committed before asserting await testingHelper.WaitUntilAllMessagesAreConsumedAsync(); // Assert testingHelper.Spy.OutboundEnvelopes.Should().HaveCount(1); testingHelper.Spy.InboundEnvelopes.Should().HaveCount(1); testingHelper.Spy.InboundEnvelopes[0].Message.As<TestMessage> .Content.Should().Be(\"abc\"); } } Mocked Kafka Many aspects of the Kafka broker have been mocked to replicated as much as possible the behavior you have when connected with the real broker. This new implementation supports commits, kafka events, offset reset, partitioning, rebalance, etc. The implementation revolves around the IInMemoryTopicCollection . This type is registered as singleton and can be resolved in the tests to gain access to the IInMemoryTopic instances directly and inspect their partitions, offsets, etc. Alternatively the IInMemoryTopic can be retrieved via the GetTopic method of the IKafkaTestingHelper . Partitioning By default 5 partitions will be created per each topic being mocked. This number can be configured as shown in the following snippet. The setting is per broker and there's currently no way to configure each topic independently. public class IntegrationTests : IClassFixture<WebApplicationFactory<Startup>> { private readonly WebApplicationFactory<Startup> _factory; public IntegrationTests(WebApplicationFactory<Startup> factory) { _factory = factory.WithWebHostBuilder(builder => { builder.ConfigureTestServices(services => { services .UseMockedKafka(options => options .WithDefaultPartitionsCount(10)); }); }; } }"
  },
  "concepts/broker/tombstone.html": {
    "href": "concepts/broker/tombstone.html",
    "title": "Tombstone Message | Silverback",
    "keywords": "Tombstone Message A tombstone message is a message with a null body, used to indicate that the record has been deleted. This technique is for example used with Kafka topics compaction, to get rid of obsolete records. Consumer Silverback maps by default the messages with a null body to a Tombstone or Tombstone<TMessage> . This behavior can be changed setting using the SkipNullMessages or UseLegacyNullMessageHandling of the IConsumerEndpointBuilder<TBuilder> , or setting the NullMessageHandlingStrategy property of the ConsumerEndpoint ). The Tombstone / Tombstone<TMessage> message exposes a single property containing the message identifier . EndpointConfigurator Subscriber public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddInbound(endpoint => endpoint .ConsumeFrom(\"catalog-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .DeserializeJson(serializer => serializer .UseFixedType<Product>()))); } public class MySubscriber { public async Task OnProductDeleted(Tombstone<Product> tombstone) { // TODO: use tombstone.MessageId to remove the product // from the local database } } Important In order to create a typed Tombstone<TMessage> it is required that either the consumed message declares the x-message-type header or a fixed type deserializer is used (as shown in the example above). Otherwise the null message will be mapped to a simple Tombstone . Producer A Tombstone<TMessage> (or Tombstone ) can also be used to produce a null message. EndpointConfigurator Publisher public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<Product>(endpoint => endpoint .ProduceTo(\"catalog-events\"))); } public class MyService { private readonly IPublisher _publisher; public MyService(IPublisher publisher) { _publisher = publisher; } public async Task DeleteProduct(string productId) { ... await _publisher.PublishAsync(new Tombstone<Product>(productId)); } } Note The Tombstone<TMessage> messages are routed according to the type parameter TMessage . This means that they will be published to the outbound endpoints papped to the same TMessage ( Product in the above example), as well as to the outbound endpoints explicitly mapping Tombstone ."
  },
  "concepts/broker/translating-messages.html": {
    "href": "concepts/broker/translating-messages.html",
    "title": "Translating Messages | Silverback",
    "keywords": "Translating Messages It is not uncommon to be willing to slightly transform the internal message and maybe publish only a subset of the information to the message broker (e.g. you may not want to export the full entity related to the domain event). You can easily achieve this with a subscriber that just maps/translates the messages. public class MapperService { public IMessage MapCheckoutEvent(CheckoutDomainEvent message) => new CheckoutIntegrationEvent { UserId = message.Source.UserId, Total = mesage.Source.Total, ... }; } As explained in the Publishing section, when the subscriber returns one or more messages those are automatically republished to the bus. The message is then relayed to the message broker, if its type matches with an outbound endpoint declaration."
  },
  "concepts/broker/validation.html": {
    "href": "concepts/broker/validation.html",
    "title": "Message Validation | Silverback",
    "keywords": "Message Validation Both the consumed and produced messages are being validated using the same mechanism implemented in the asp.net controllers. You can either decorate the message model with the System.ComponentModel.DataAnnotations.ValidationAttribute standard implementations, create your own attributes (extending ValidationAttribute ) or otherwise you can implement the IValidatableObject interface in your message model. Configuration The MessageValidationMode can be configured per endpoint and has 3 values: LogWarning (default): a warning is logged if the message is not valid ThrowException : an exception is thrown if the message is not valid None : the validation is completely disabled Note If an invalid message is produced, the MessageValidationException will be rethrown by the Produce / Publish method. In the consumer it will instead be handled like any other exception, according to the configured policies, or leading to the consumer being stopped. Warning The validation might have a - relatively speaking - big impact on the performance, depending on the object size, the number of validations to be performed and their complexity. You might want to consider disabling the validation, if performance is a critical concern in your use case. Fluent Legacy public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddKafkaEndpoints(endpoints => endpoints .Configure(config => { config.BootstrapServers = \"PLAINTEXT://kafka:9092\"; }) .AddOutbound<InventoryEvent>(endpoint => endpoint .ProduceTo(\"inventory-events\") .DisableMessageValidation() .AddInbound(endpoint => endpoint .ConsumeFrom(\"order-events\") .Configure(config => { config.GroupId = \"my-consumer\"; }) .ValidateMessage(throwException: true))); } public class MyEndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) => builder .AddOutbound<InventoryEvent>( new KafkaProducerEndpoint(\"inventory-events\") { Configuration = new KafkaProducerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\" }, MessageValidationMode = MessageValidationMode.None }) .AddInbound( new KafkaConsumerEndpoint(\"order-events\") { Configuration = new KafkaConsumerConfig { BootstrapServers = \"PLAINTEXT://kafka:9092\", GroupId = \"my-consumer\" }, MessageValidationMode = MessageValidationMode.ThrowException }); } Validated models examples Using annotations public class CreateUserCommand { [Required] [MinLength(3)] [MaxLength(100)] public string Username { get; set; } } Implementing IValidatableObject public class CreateUserCommand : IValidatableObject { public string Username { get; set; } public IEnumerable<ValidationResult> Validate( ValidationContext validationContext) { if (Username == null || Username.Length < 3 || Username.Length > 100) { yield return new ValidationResult( \"Invalid username.\", new[] { nameof(Username) }); } } }"
  },
  "concepts/bus/behaviors.html": {
    "href": "concepts/bus/behaviors.html",
    "title": "Behaviors | Silverback",
    "keywords": "Behaviors The behaviors can be used to build a custom pipeline (similar to the asp.net pipeline), easily adding your cross-cutting concerns such as logging, validation, etc. The behaviors are implementations of the IBehavior interface and will be invoked by the IPublisher every time a message is published to the internal bus (this includes the inbound/outbound messages, but they will be wrapped into an IInboundEnvelope<TMessage> or IOutboundEnvelope<TMessage> ). The HandleAsync method of each registered behavior is called every time a message (or a batch of messages) is published to the internal bus, passing in the collection of messages and the delegate to the next step in the pipeline. This gives you the flexibility to execute any sort of code before and after the messages have been actually published (before or after calling the next step). You can for example modify the messages before publishing them, validate them (like in the above example), add some logging / tracing, etc. The IBehavior implementation have simply to be registered for DI. IBehavior example The following example demonstrates how to use a behavior to trace the messages. Behavior Startup public class TracingBehavior : IBehavior { private readonly ITracer _tracer; public TracingBehavior(ITracer tracer) { _tracer = tracer; } public async Task<IReadOnlyCollection<object?>> HandleAsync( object message, MessageHandler next) { tracer.TraceProcessing(message); var result = await next(message); tracer.TraceProcessed(message); return result; } } public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddScopedBehavior<TracingBehavior>(); } } Note IInboundEnvelope and IOutboundEnvelope are internally used by Silverback to wrap the messages being sent to or received from the message broker and will be received by the IBroker . Those interfaces contains the message plus the additional data like endpoint, headers, offset, etc. Sorting The order in which the behaviors are executed might matter and it is possible to precisely define it implementing the ISorted interface. public class SortedBehavior : IBehavior, ISorted { public int SortIndex => 120; public Task<IReadOnlyCollection<object?>> HandleAsync( object message, MessageHandler next) { // ...your logic... return next(message); } } See also Broker behaviors pipeline"
  },
  "concepts/bus/enabling.html": {
    "href": "concepts/bus/enabling.html",
    "title": "Enabling Silverback | Silverback",
    "keywords": "Enabling Silverback Enabling the bus Silverback's main component is the internal in-memory message bus and pretty much all other features are built on top of that. The first mandatory step to start using Silverback is to register the core services (internal bus) with the .net core dependency injection. public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddSilverback(); } } Configuring Silverback The AddSilverback method highlighted in the previous chapter returns an ISilverbackBuilder that exposes all the methods needed to configure Silverback and wire everything up. The several configuration options will are exhaustively presented in each dedicated section of this documentation but here is a basic sample startup. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()) .AddEndpointsConfigurator<OrdersEndpointsConfigurator>() .AddEndpointsConfigurator<ProductsEndpointsConfigurator>() .AddScopedSubscriber<OrderEventsSubscriber>() .AddScopedSubscriber<ProductEventsSubscriber>(); } } Note that AddSilverback should be called only once but you can use the ConfigureSilverback extension method on the IServiceCollection to retrieve the ISilverbackBuilder instance once again. Startup Orders Feature Products Feature public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithConnectionToMessageBroker(options => options .AddKafka()); services .AddOrdersFeature() .AddProductsFeature(); } } public static class OrdersFeatureConfigurator { public static void AddOrdersFeature(this IServiceCollection services) { services .ConfigureSilverback() .AddEndpointsConfigurator<OrdersEndpointsConfigurator>() .AddScopedSubscriber<OrderEventsSubscriber>(); } } public static class ProductsFeatureConfigurator { public static void AddProductsFeature(this IServiceCollection services) { services .ConfigureSilverback() .AddEndpointsConfigurator<ProductsEndpointsConfigurator>() .AddScopedSubscriber<ProductEventsSubscriber>(); } }"
  },
  "concepts/bus/model.html": {
    "href": "concepts/bus/model.html",
    "title": "Creating the Message model | Silverback",
    "keywords": "Creating the Message model Basics First of all we need to create a message class. The message class can be any POCO class, it just need to be serializable. public class SampleMessage { public string Content { get; set; } } It is very much suggested to consider using the Silverback.Core.Model package (documented in the next chapter) to better organize your message and write better and more readable code. Silverback.Core.Model A hierarchy of interfaces is available in Silverback.Core.Model to help specify the meaning of each message and produce in better, cleaner and more readable code. The internal messages are being sent through the internal in-memory bus and don't leave the service scope, while the integration messages are those messages exchanged between different microservices, through a message broker like Apache Kafka or RabbitMQ. Event though strongly suggested, it's not mandatory to use the proposed hierarchy from Silverback.Core.Model and everything can be achieved using POCO classes as messages and using the generic IPublisher to publish them. In the following chapters you will find an overview of the different message types and their meaning but first of all we need to reference the Silverback.Core.Model package and register it with the dependency injection. public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddSilverback().UseModel(); } } Internal Messages This messages can be used internally to the microservice bus but cannot be relayed to the message broker. See Translating Messages for a convenient way to map the internal message to an IIntegrationMessage . Events IEvent is to be used to notify thing that happened inside a service and may be of some interest for one or more other service. The events are a fire-and-forget message type and no response is expected. The IDomainEvent and IDomainEvent<TEntity> extend IEvent and the types implementing this interface are usually published only from within the domain entities (actually adding them to the internal collection and letting them be published during the save changes transaction). See also DDD and Domain Events . Commands ICommand or ICommand<TResult> are used to trigger an action in another service or component and are therefore very specific and usually consumed by one single subscriber. This messages can return a value (of type TResult). Queries IQuery<TResult> works exactly like ICommand<TResult> . This messages are obviously always returning something since they represent a request for data (query). Integration messages The IIntegrationMessage interface identifies those messages that are either published to the message broker or received through it. Note that IIntegrationMessage implements IMessage , obviously. Integration Event IIntegrationEvent can be used to export events to other microservices or, more generally, other applications. IEventPublisher can be used to publish these events and they will automatically be routed to the message broker if an outbound connector was properly configured. See Connecting to a Message Broker for details. Integration Command IIntegrationCommand is used to trigger an action on another microservices (or application). ICommandPublisher can be used to publish these messages and they will automatically be routed to the message broker if an outbound connector was properly configured. See Connecting to a Message Broker for details."
  },
  "concepts/bus/publish.html": {
    "href": "concepts/bus/publish.html",
    "title": "Publishing | Silverback",
    "keywords": "Publishing Basic Publishing To publish the message you just need an instance of IPublisher (or derived interfaces if using Silverback.Core.Model , as shown later on). using Silverback.Messaging.Publishing; public class PublishingService { private readonly IPublisher _publisher; public PublishingService(IPublisher publisher) { _publisher = publisher; } public async Task PublishSomething() { await _publisher.PublishAsync(new SampleMessage { Content = \"whatever\" }); } } The publisher always exposes a synchronous and an asynchronous version of each method. The second option is of course to be preferred to take advantage of non-blocking async/await. Return values In some cases you will of course return a response after having processed the message. public async Task<Report> PublishSomething() { var result = await _publisher.PublishAsync(new ReportQuery() { ... }); return result.Single(); } Important Please note the required call to Single() , because Silverback allows you to have multiple subscribers for the same message and therefore collect multiple return values. This is not needed if using IQueryPublisher or ICommandPublisher described in the Creating the Message model page. Silverback.Core.Model Silverback.Core.Model has been introduced in the previous page Creating the Message model . Each message type ( IEvent , ICommand / ICommand<TResult> and IQuery<TResult> ) also comes with its specialized IPublisher as quickly shown in the following sub-chapters. Events The messages implementing IEvent , IDomainEvent or IIntegrationEvent can be published using an IEventPublisher . using Silverback.Messaging.Publishing; public class PublishingService { private readonly IEventPublisher _publisher; public PublishingService(IEventPublisher publisher) { _publisher = publisher; } public async Task PublishEvent() { var myEvent = new MyEvent() { ... }; await _publisher.PublishAsync(myEvent); } } Commands The messages that implement ICommand , ICommand<TResult> or IIntegrationCommand can be published using an ICommandPublisher . Without result With result using Silverback.Messaging.Publishing; public class PublishingService { private readonly ICommandPublisher _publisher; public PublishingService(ICommandPublisher publisher) { _publisher = publisher; } public async Task ExecuteCommand() { var command = new MyCommand() { ... }; await _publisher.ExecuteAsync(command); } } using Silverback.Messaging.Publishing; public class PublishingService { private readonly ICommandPublisher _publisher; public PublishingService(ICommandPublisher publisher) { _publisher = publisher; } public async Task<MyResult> ExecuteCommand() { var command = new MyCommand() { ... }; var result = await _publisher.ExecuteAsync(command); return result; } } Queries The IQueryPublisher ca be used to publish the messages implementing the IQuery<TResult> interface. using Silverback.Messaging.Publishing; public class PublishingService { private readonly IQueryPublisher _publisher; public PublishingService(IQueryPublisher publisher) { _publisher = publisher; } public async Task<MyResult> GetResults() { var query = new MyQuery() { ... }; var result = await _publisher.ExecuteAsync(myQuery); return result; } }"
  },
  "concepts/bus/subscribe.html": {
    "href": "concepts/bus/subscribe.html",
    "title": "Subscribing | Silverback",
    "keywords": "Subscribing Now all is left to do is write a subscriber method to process the published messages. Introduction The subscription in the Silverback internal bus is based on the message type. This means that when a message is published Silverback will simply evaluate the signature of the subscribed methods and invoke the ones that accept a message of that specific type, a base type or an implemented interface. For example, given the following message structure: public abstract class OrderEvent : IEvent { ... } public class OrderCreatedEvent : OrderEvent { ... } All these subscriber methods will be invoked to handle an instance of OrderCreatedEvent : void Handle(OrderCreatedEvent message) void Handle(OrderMessage message) void Handle(IEvent message) Note It is perfectly fine to have multiple subscribers handling the same message but you have to be aware that all them will share the same DI scope (and thus the same DbContext instance). Subscriber class The default and usually preferred way to subscribe is to implement the message handling logic into a subscriber class. Such class can declare one or more public message handler methods that are automatically subscribed. All subscribers must be registered with the service provider as shown in the following example. Subscriber Startup public class SubscribingService { public async Task OnMessageReceived(SampleMessage message) { // TODO: Process message } public async Task OnOtherMessageReceived(OtherSampleMessage message) { // TODO: Process message } } public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddScopedSubscriber<SubscribingService>(); } } Subscription options All public methods are automatically subscribed by default but the SubscribeAttribute can be used to decorate the non-public methods and subscribe them as well. The SubscribeAttribute can also be used to customize the subscription options, see the attribute properties for details. It is also possible to disable the automatic subscription of the public methods. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddScopedSubscriber<SubscribingService>( autoSubscribeAllPublicMethods: false) } } Delegate based subscription In some cases you may prefer to subscribe a method delegate (or an inline lambda) directly using the AddDelegateSubscriber method. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddDelegateSubscriber((SampleMessage message) => { // TODO: Process messages }); } } Supported methods and parameters The subscribed method can either be synchronous or asynchronous (returning a Task ). The first parameter must be the message and the parameter type can be the specific message, a base class or an implemented interface. Furthermore, when consuming from a message broker, it is possible to subscribe to the message stream and asynchronously enumerate through the messages, as shown in the Streaming chapter. The method can have other parameters that will be resolved using the service provider. Most useful to integrate existing code subscribing via a delegate. Delegate Subscriber public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .AddDelegateSubscriber( (BasketCheckoutMessage message, CheckoutService service) => { service.Checkout(message.BaksetId, message.UserId) }); } } public class SubscribingService { public async Task OnMessageReceived(BasketCheckoutMessage message, CheckoutService service) { service.Checkout(message.BaksetId, message.UserId) } } Return values A subscriber can also have a return value that can be collected by the publisher. public class SubscribingService { public async Task<SampleResult> OnMessageReceived(SampleMessage message) { ... return new SampleResult(...); } } Return new messages (republishing) A subscribed method can also optionally return a message or a collection of messages (either IEnumerable , IReadOnlyCollection or IObservable , if using Silverback.Core.Rx ) that will be automatically republished to the internal bus. Single Multiple public class SubscribingService { public async Task<OtherSampleMessage> OnMessageReceived(SampleMessage message) { ... return new OtherSampleMessage { ... }; } } public class SubscribingService { public IEnumerable<IMessage> OnMessageReceived(IEnumerable<SampleMessage> messages) => messages.SelectMany(message => { yield return new OtherSampleMessage1 { ... }; yield return new OtherSampleMessage2 { ... }; }); } Silverback recognizes per default only the messages implementing IMessage but you can register your own types (you can register base types and interfaces as well). Startup Subscriber Message Model public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .HandleMessagesOfType<ICustomMessage>(); } } public class SubscribingService { public async Task<CustomSampleMessage> OnMessageReceived(SampleMessage message) { ... return new CustomSampleMessage { ... }; } } public class CustomSampleMessage : ICustomMessage { public string SomeProperty { get; set; } }"
  },
  "concepts/dbcontext.html": {
    "href": "concepts/dbcontext.html",
    "title": "Sample DbContext (EF Core) | Silverback",
    "keywords": "Sample DbContext (EF Core) Default Tables Some features rely on data being stored in a persistent storage such as a database. This chapter highlights the DbSet 's that have to be added to your DbContext when using Silverback in combination with EF Core (via the Silverback.Core.EntityFrameworkCore ). Here a breakdown of the use cases that require a DbSet : Using an outbox table (see Outbound Endpoint ) will require a DbSet<OutboundMessage> and possibly a DbSet<Lock> , to enable horizontal scaling. Either a DbSet<StoredOffset> or a DbSet<InboundMessage> is necessary to ensure exactly-once processing (see Inbound Endpoint ). When consuming chunked messages (see Chunking ), you may want to temporary store the received chunks into a database table, until all chunks are received and the full message can be rebuilt and processed and you therefore need a DbSet<TemporaryMessageChunk> to be configured. This is what a DbContext built to support all the aforementioned features will look like. using Microsoft.EntityFrameworkCore; using Silverback.Database.Model; using Silverback.EntityFrameworkCore; namespace Sample { public class SampleDbContext : DbContext { public SampleDbContext(DbContextOptions options) : base(options) { } public DbSet<OutboxMessage> Outbox { get; set; } = null!; public DbSet<InboundLogEntry> InboundMessages { get; set; } = null!; public DbSet<StoredOffset> StoredOffsets { get; set; } = null!; public DbSet<Lock> Locks { get; set; } = null!; protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<InboundLogEntry>() .HasKey(t => new { t.MessageId, t.ConsumerGroupName }); } } } Warning InboundLogEntry declare a composite primary key via annotation, thing that isn't supported yet by EF Core. It is therefore mandatory to explicitly redeclare their primary key via the HasKey fluent API. DDD and Transactional Messages Some additional changes are required in order for the events generated by the domain entities to be fired as part of the SaveChanges transaction. More details on this topic can be found in the DDD and Domain Events section. using Microsoft.EntityFrameworkCore; using Silverback.EntityFrameworkCore; using Silverback.Messaging.Publishing; namespace Sample { public class SampleDbContext : DbContext { private readonly DbContextEventsPublisher _eventsPublisher; public SampleDbContext(IPublisher publisher) { _eventsPublisher = new DbContextEventsPublisher(publisher, this); } public SampleDbContext(DbContextOptions options, IPublisher publisher) : base(options) { _eventsPublisher = new DbContextEventsPublisher(publisher, this); } // ...DbSet properties and OnModelCreating... public override int SaveChanges() => SaveChanges(true); public override int SaveChanges(bool acceptAllChangesOnSuccess) => _eventsPublisher.ExecuteSaveTransaction(() => base.SaveChanges(acceptAllChangesOnSuccess)); public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) => SaveChangesAsync(true, cancellationToken); public override Task<int> SaveChangesAsync( bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default) => _eventsPublisher.ExecuteSaveTransactionAsync(() => base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken)); } }"
  },
  "concepts/domain-events.html": {
    "href": "concepts/domain-events.html",
    "title": "DDD and Domain Events | Silverback",
    "keywords": "DDD and Domain Events One of the core features of Silverback is the ability to publish the domain events as part of the DbContext save changes transaction in order to guarantee consistency. The Silverback.Core.Model package contains a sample implementation of a DomainEntity but you can also implement you own type. Important In case of a custom implementation the only constraint is that you must implement the IMessagesSource interface in order for Silverback to be able to access the associated events. The DomainEntity.AddEvent method adds the domain event to the events collection, to be published when the entity is saved. To enable this mechanism we just need to override the various SaveChanges methods to plug-in the DbContextEventsPublisher contained in the Silverback.Core.EntityFrameworkCore package. Sample Entity DbContext using Silverback.Domain; namespace Sample { public class Basket : DomainEntity, IAggregateRoot { private readonly List<BasketItem> _items = new List<BasketItem>(); private Basket() { } public Basket(Guid userId) { UserId = userId; Created = DateTime.UtcNow; } [Key] public int Id { get; private set; } public IEnumerable<BasketItem> Items => _items.AsReadOnly(); public Guid UserId { get; private set; } public DateTime Created { get; private set; } public DateTime? CheckoutDate { get; private set; } public void Checkout() { CheckoutDate = DateTime.UtcNow; AddEvent<BasketCheckoutEvent>(); } } } using Microsoft.EntityFrameworkCore; using Silverback.EntityFrameworkCore; using Silverback.Messaging.Publishing; namespace Sample { public class SampleDbContext : DbContext { private readonly DbContextEventsPublisher _eventsPublisher; public SampleDbContext(IPublisher publisher) { _eventsPublisher = new DbContextEventsPublisher(publisher, this); } public SampleDbContext(DbContextOptions options, IPublisher publisher) : base(options) { _eventsPublisher = new DbContextEventsPublisher(publisher, this); } public override int SaveChanges() => SaveChanges(true); public override int SaveChanges(bool acceptAllChangesOnSuccess) => _eventsPublisher.ExecuteSaveTransaction(() => base.SaveChanges(acceptAllChangesOnSuccess)); public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) => SaveChangesAsync(true, cancellationToken); public override Task<int> SaveChangesAsync( bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default) => _eventsPublisher.ExecuteSaveTransactionAsync(() => base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken)); } }"
  },
  "concepts/event-sourcing.html": {
    "href": "concepts/event-sourcing.html",
    "title": "Event Sourcing | Silverback",
    "keywords": "Event Sourcing Silverback.EventSourcing is a basic implementation of an event store that perfectly integrates within the Silverback ecosystem. At the moment only a version using Entity Framework Core is implemented, allowing to store the events in a database but other implementations may be added in the future. Configuration The only needed configuration is the call to UseDbContext<TDbContext> when initializing Silverback. public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddSilverback().UseDbContext<MyDbContext>() } } Creating the Event Store Creating an event store is very straightforward and requires basically just 3 components: a domain entity model, the event store model and a repository. Domain Entity model The domain entity have to extend EventSourcingDomainEntity (or a custom class implementing IEventSourcingDomainEntity ). The two generic type parameters refer to the type of the key (entity unique identifier) and the base type for the domain events (can be omited if you don't need domain events). public class Person : EventSourcingDomainEntity<int, PersonDomainEvent> { public Person() { } public Person(IReadOnlyCollection<IEntityEvent> events) : base(events) { } public string Name { get; private set; } public string SocialSecurityNumber { get; private set; } public int Age { get; private set; } public string PhoneNumber { get; private set; } } Important The domain entity must have a constructor able to rebuild the entity state from the stored events. The AddAndApplyEvent protected method must be used to add new events. public class Person : EventSourcingDomainEntity<int, PersonDomainEvent> { public void ChangeName(string newName) => AddAndApplyEvent(new NameChangedEvent { NewName = newName }); public void ChangeAge(int newAge) => AddAndApplyEvent(new AgeChangedEvent { NewAge = newAge }); public void ChangePhoneNumber(string newPhoneNumber) => AddAndApplyEvent(new PhoneNumberChangedEvent { NewPhoneNumber = newPhoneNumber }); } An Apply method is needed for each event type to modify the entity current state according to the described mutation. public class Person : EventSourcingDomainEntity<int, PersonDomainEvent> { private void Apply(NameChangedEvent @event) => Name = @event.NewName; private void Apply(AgeChangedEvent @event) => Age = @event.NewAge; private void Apply(PhoneNumberChangedEvent @event, bool isReplaying) { PhoneNumber = @event.NewPhoneNumber; // Fire domain event only if the event is new if (!isReplaying) AddEvent<PhoneNumberChangedDomainEvent>(); } } Note The apply method can be private but it must have a specific signature: its name must begin with \"Apply\" and have a parameter of the specific event type (or base type). It can also receive an additional boolean parameter ( isReplaying ) that will let you differentiate between new events and events that are being reapplied because loaded from the store. The events are just models inheriting from EntityEvent (or another custom class implementing IEntityEvent ). public class NameChangedEvent : EntityEvent { public string NewName { get; set; } } public class AgeChangedEvent : EntityEvent { public int NewAge { get; set; } } public class PhoneNumberChangedEvent : EntityEvent { public string NewPhoneNumber { get; set; } } Event Store model The event store basically consists of an EventStore entity and related event (they either inherit from EventStoreEntity and EventEntity or implement the interfaces IEventStoreEntity and IEventEntity respectively). public class PersonEventStore : EventStoreEntity<PersonEvent> { [Key] public int Id { get; set; } public string SocialSecurityNumber { get; set; } } public class PersonEvent : EventEntity { [Key] public int Id { get; private set; } } Note The event store record can be extended with extra fields (see SocialSecurityNumber in the example above) and those will be automatically set with the value of the matching propertyi in the domain entity (unless the mapping method is overridden in the repository implementing a custom logic). Important It is advised to add some indexes and a concurrency token, to ensure proper performance and consistency. A DbSet must also be mapped to the defined event store entity and that's it. public class MyDbContext : DbContext { public MyDbContext(DbContextOptions options) : base(options) { } public DbSet<PersonEventStore> Persons { get; set; } } EventStore repository The repository is the component that is storing the domain entity in form of single events, being able to rebuild it afterwards. The repository must inherit from DbContextEventStoreRepository and the 4 generic type parameters refer respectively to: the domain entity its unique key the event store entity its related event entity public class PersonEventStoreRepository : DbContextEventStoreRepository<Person, int, PersonEventStore, PersonEvent> { public PersonEventStoreRepository(DbContext dbContext) : base(dbContext) { } } Storing and retrieving entities Using the EventStoreRepository to store and retrieve domain entities is fairly simple. Have a look at the following code snippet to get an idea. public class PersonService { private readonly MyDbContext _dbContext; private readonly PersonEventStoreRepository _repository = new PersonEventStoreRepository(_dbContext); public async Task<Person> CreatePerson(string name, int age) { var person = new Person(); person.ChangeName(\"Sergio\"); person.ChangeAge(35); person = await _repository.StoreAsync(person); await _dbContext.SaveChangesAsync(); return person; } public async Task<Person> ChangePhoneNumber( int personId, string newPhoneNumber) { var person = _repository.Get(p => p.Id == personId); person.ChangePhoneNumber(newPhoneNumber); person = await _repository.StoreAsync(person); await _dbContext.SaveChangesAsync(); return person; } } Merging events / handling conflicts You may need to merge events coming from different sources and/or being received with a certain latency. In the example below the Apply method checks whether another (newer) conflicting event was added already in the meantime. private void Apply(NameChangedEvent @event, bool isReplaying) { // Skip if a newer event exists if (!isReplaying && Events.Any(e => e is NameChangedEvent && e.Timestamp > @event.Timestamp)) { return; } Name = @event.NewName; }"
  },
  "concepts/introduction.html": {
    "href": "concepts/introduction.html",
    "title": "Introduction | Silverback",
    "keywords": "Introduction What's Silverback? Silverback is essentially a bus that can be either used internally to an application or connected to a message broker to integrate different applications or microservices. Silverback is used to exchange message inside an application and/or connect to a message broker to integrate with other applications or microservices. Samples and examples This documentation is filled with examples and code snippets, plus an entire section is dedicated to fully functional ready-to-run code samples . The plan is to improve the samples section over time, adding real-world scenarios that demonstrates how to take advantage of the various Silverback features in your projects. A few notes about the code: Even though it will compile and work just fine (most of the time), it is intended for demo purpose only and don't automatically imply the best practices are being in place nor it is by any mean production ready. Sometimes some shortcuts may have been taken to keep the code compact, readable and focused on the aspect that is being highlighted. Not all examples are ported to each message broker implementation, but most of them can be adapted to work with either Kafka, MQTT or Rabbit with minimal effort (unless some broker-specific features are being used, of course). Packages Silverback is modular and delivered in multiple packages, available through nuget.org . Core Silverback.Core It implements a very simple, yet very effective, publish/subscribe in-memory bus that can be used to decouple the software parts and easily implement a Domain Driven Design approach. Silverback.Core.Model It contains some interfaces that will help organize the messages and write cleaner code, adding some semantic. It also includes a sample implementation of a base class for your domain entities. Silverback.Core.EntityFrameworkCore It contains the storage implementation to integrate Silverback with Entity Framework Core. It is needed to use a DbContext as storage for (temporary) data and to fire the domain events as part of the SaveChanges transaction. Silverback.Core.Rx Adds the possibility to create an Rx Observable over the internal bus. Integration Silverback.Integration Contains the message broker and connectors abstraction. Inbound and outbound connectors can be attached to a message broker to either export some events/commands/messages to other microservices or react to the messages fired by other microservices in the same way as internal messages are handled. Silverback.Integration.Testing Includes some utilities to help writing automated tests involving Silverback.Integration. Silverback.Integration.Kafka An implementation of Silverback.Integration for the popular Apache Kafka message broker. Silverback.Integration.Kafka.SchemaRegistry Adds the support for Apache Avro and the schema registry on top of Silverback.Integration.Kafka . Silverback.Integration.Kafka.Testing Includes a mock for the Kafka message broker to be used for in-memory testing. Silverback.Integration.MQTT An implementation of Silverback.Integration for MQTT. Silverback.Integration.MQTT.Testing Includes a mock for the MQTT message broker to be used for in-memory testing. Silverback.Integration.RabbitMQ An implementation of Silverback.Integration for the popular RabbitMQ message broker. Silverback.Integration.RabbitMQ.Testing (coming soon) Includes a mock for the RabbitMQ message broker to be used for in-memory testing. Silverback.Integration.HealthChecks Contains the extensions for Microsoft.Extensions.Diagnostics.HealthChecks to monitor the connection to the message broker. Silverback.Integration.Newtonsoft Contains the legacy implementations of IMessageSerializer , based on Newtonsoft.Json. Event Sourcing Silverback.EventSourcing Contains an implementation of an event store that perfectly integrates within the Silverback ecosystem. Glossary The following list serves as introduction to the terminology and types used in Silverback. Publisher An object that can be used to publish messages to the internal in-memory bus. It is represented by the IPublisher or (better) the more specific IEventPublisher and ICommandPublisher interfaces, that can be resolved via dependency injection. Subscriber A method (or delegate) that is subscribed to the bus and will process some (or all) of the messages that will be published or consumed from a message broker (since those messages are automatically pushed to the internal bus). Broker A message broker, like Apache Kafka or RabbitMQ. It is represented by the IBroker interface and is used internally by Silverback to bind the internal bus with a message broker. It can be resolved and used directly but that shouldn't be necessary for most of the use cases. Producer An object used to publish messages to the broker. It is represented by the IProducer interface. Consumer An object used to receive messages from the broker. It is represented by the IConsumer interface. Endpoint Identifies a specific topic or queue. It also contains all the settings to bind to that endpoint and is therefore specific to the message broker implementation. It is represented by an implementation of the IEndpoint interface. Inbound Endpoint / Consumer Endpoint An endpoint that is consumed and whose messages are relayed into the internal bus, where they can be consumed by one or more subscribers. It is represented by an implementation of the IConsumerEndpoint interface such as the KafkaConsumerEndpoint . Outbound Endpoint / Producer Endpoint Silverback can be configured to automatically publish some messages to the message broker, observing the internal bus and relaying the messages matching with the configure type. The outbound/producer endpoint specifies the topic or queue where those message have to be produced. It is represented by an implementation of the IProducerEndpoint interface such as the KafkaProducerEndpoint . Behavior Multiple behaviors are chained to build a sort of pipeline to process the messages transiting across the internal bus, the consumer or the producer. They are used to implement cross-cutting concerns, isolate responsibilities and allow for greater flexibility. Some built-in behaviors are responsible for serialization, error policies enforcement, batching, chunking, encryption, etc."
  },
  "concepts/logging.html": {
    "href": "concepts/logging.html",
    "title": "Logging | Silverback",
    "keywords": "Logging Silverback logs quite a few events that may be very useful for troubleshooting. It is recommended to set the minum log level to Information for the Silverback namespace, in order to have the important logs while avoiding too much noise. Customizing log levels The WithLogLevels configuration method can be used to tweak the log levels of each event. public class Startup { public void ConfigureServices(IServiceCollection services) { services .AddSilverback() .WithLogLevels(configurator => configurator .SetLogLevel(IntegrationLogEvents.MessageSkipped, LogLevel.Critical) .SetLogLevel(IntegrationLogEvents.ErrorProcessingInboundMessage, LogLevel.Error)); } } Each package (that writes any log) has a static class declaring each log event (see next chapter). Logged events Here is a list of all events that are being logged and their default log level. See also: CoreLogEvents IntegrationLogEvents KafkaLogEvents RabbitLogEvents Core Id Level Message Reference 11 Debug Discarding result of type {type} because it doesn't match the expected return type {expectedType}. SubscriberResultDiscarded 21 Information Trying to acquire lock {lockName} ({lockUniqueId})... AcquiringDistributedLock 22 Information Acquired lock {lockName} ({lockUniqueId}). DistributedLockAcquired 23 Debug Failed to acquire lock {lockName} ({lockUniqueId}). FailedToAcquireDistributedLock 24 Information Released lock {lockName} ({lockUniqueId}). DistributedLockReleased 25 Warning Failed to release lock {lockName} ({lockUniqueId}). FailedToReleaseDistributedLock 26 Error Failed to check lock {lockName} ({lockUniqueId}). FailedToCheckDistributedLock 27 Error Failed to send heartbeat for lock {lockName} ({lockUniqueId}). FailedToSendDistributedLockHeartbeat 41 Information Starting background service {backgroundService}... BackgroundServiceStarting 42 Information Lock acquired, executing background service {backgroundService}. BackgroundServiceLockAcquired 43 Error Background service {backgroundService} execution failed. BackgroundServiceException 51 Information Background service {backgroundService} stopped. RecurringBackgroundServiceStopped 52 Debug Background service {backgroundService} sleeping for {delay} milliseconds. RecurringBackgroundServiceSleeping 53 Warning Background service {backgroundService} execution failed. RecurringBackgroundServiceException Integration Id Level Message Reference 1001 Information Processing inbound message. ProcessingInboundMessage 1002 Error Error occurred processing the inbound message. ErrorProcessingInboundMessage 1003 Debug Message '{messageId}' added to {sequenceType} '{sequenceId}'. | length: {sequenceLength} MessageAddedToSequence 1004 Debug Started new {sequenceType} '{sequenceId}'. SequenceStarted 1005 Debug {sequenceType} '{sequenceId}' completed. | length: {sequenceLength} SequenceCompleted 1006 Debug The {sequenceType} '{sequenceId}' processing has been aborted. | length: {sequenceLength}, reason: {reason} SequenceProcessingAborted 1007 Error Error occurred processing the {sequenceType} '{sequenceId}'. | length: {sequenceLength} ErrorProcessingInboundSequence 1008 Warning The incomplete {sequenceType} '{sequenceId}' is aborted. | length: {sequenceLength} IncompleteSequenceAborted 1009 Warning Skipping the incomplete sequence '{sequenceId}'. The first message is missing. SkippingIncompleteSequence 1110 Warning Error occurred aborting the {sequenceType} '{sequenceId}'. ErrorAbortingInboundSequence 1011 Debug {broker} connecting to message broker... BrokerConnecting 1012 Information {broker} connected to message broker. BrokerConnected 1013 Debug {broker} disconnecting from message broker... BrokerDisconnecting 1014 Information {broker} disconnected from message broker. BrokerDisconnected 1015 Information Creating new consumer for endpoint '{endpointName}'. CreatingNewConsumer 1016 Information Creating new producer for endpoint '{endpointName}'. CreatingNewProducer 1017 Error Error occurred connecting to the message broker(s). BrokerConnectionError 1021 Debug Connected consumer to endpoint. ConsumerConnected 1022 Debug Disconnected consumer from endpoint. ConsumerDisconnected 1023 Critical Fatal error occurred processing the consumed message. The consumer will be stopped. ConsumerFatalError 1024 Warning Error occurred while disposing the consumer. ConsumerDisposingError 1025 Error Commit failed. ConsumerCommitError 1026 Error Rollback failed. ConsumerRollbackError 1127 Error Error occurred while connecting the consumer. ConsumerConnectError 1128 Error Error occurred while disconnecting the consumer. ConsumerDisconnectError 1129 Error Error occurred while (re)starting the consumer. ConsumerStartError 1130 Error Error occurred while stopping the consumer. ConsumerStopError 1131 Warning Failed to reconnect the consumer. Will retry in {retryDelay} milliseconds. ErrorReconnectingConsumer 1027 Debug Connected producer to endpoint. ProducerConnected 1028 Debug Disconnected producer from endpoint. ProducerDisconnected 1031 Information Message produced. MessageProduced 1032 Warning Error occurred producing the message. ErrorProducingMessage 1041 Trace The {policyType} will be skipped because the current failed attempts ({failedAttempts}) exceeds the configured maximum attempts ({maxFailedAttempts}). PolicyMaxFailedAttemptsExceeded 1042 Trace The {policyType} will be skipped because the {exceptionType} is not in the list of handled exceptions. PolicyExceptionNotIncluded 1043 Trace The {policyType} will be skipped because the {exceptionType} is in the list of excluded exceptions. PolicyExceptionExcluded 1044 Trace The {policyType} will be skipped because the apply rule evaluated to false. PolicyApplyRuleReturnedFalse 1045 Trace All policies have been applied but the message(s) couldn't be successfully processed. The consumer will be stopped. PolicyChainCompleted 1046 Information The message(s) will be processed again. RetryMessageProcessing 1047 Trace Waiting {delay} milliseconds before retrying to process the message(s). RetryDelayed 1048 Information The message will be moved to the endpoint '{targetEndpointName}'. MessageMoved 1049 Information The message(s) will be skipped. MessageSkipped 1050 Warning The message belongs to a {sequenceType} and cannot be moved. CannotMoveSequences 1051 Warning Error occurred while rolling back, the retry error policy cannot be applied. The consumer will be reconnected. RollbackToRetryFailed 1052 Warning Error occurred while rolling back or committing, the skip message error policy cannot be applied. The consumer will be reconnected. RollbackToSkipFailed 1061 Warning Not used anymore. ErrorInitializingActivity 1062 Information The null message will be skipped. NullMessageSkipped 1072 Information Message is being skipped since it was already processed. MessageAlreadyProcessed 1073 Debug Writing the outbound message to the transactional outbox. MessageWrittenToOutbox 1074 Trace Reading a batch of {readBatchSize} messages from the outbox queue... ReadingMessagesFromOutbox 1075 Trace The outbox is empty. OutboxEmpty 1076 Debug Processing outbox message {currentMessageIndex} of {totalMessages}. ProcessingOutboxStoredMessage 1077 Error Failed to produce the message stored in the outbox. ErrorProducingOutboxStoredMessage 1078 Error Error occurred processing the outbox. ErrorProcessingOutbox 1079 Warning An invalid message has been produced. | validation errors:{validationErrors} InvalidMessageProduced 1080 Warning An invalid message has been processed. | validation errors:{validationErrors} InvalidMessageProcessed 1101 Critical Invalid configuration for endpoint '{endpointName}'. InvalidEndpointConfiguration 1102 Critical Error occurred configuring the endpoints. | configurator: {endpointsConfiguratorName} EndpointConfiguratorError 1103 Error Error occurred invoking the callback handler(s). CallbackHandlerError 1999 Trace The actual message will vary. LowLevelTracing Kafka Id Level Message Reference 2011 Debug Consuming message: {topic}[{partition}]@{offset}. ConsumingMessage 2012 Information Partition EOF reached: {topic}[{partition}]@{offset}. EndOfPartition 2013 Warning An error occurred while trying to pull the next message. The consumer will try to recover. KafkaExceptionAutoRecovery 2014 Error An error occurred while trying to pull the next message. The consumer will be stopped. Enable auto recovery to allow Silverback to automatically try to recover (EnableAutoRecovery=true in the consumer configuration). KafkaExceptionNoAutoRecovery 2015 Warning Not used anymore. ErrorRecoveringFromKafkaException 2016 Trace Consuming canceled. ConsumingCanceled 2021 Debug Creating Confluent.Kafka.Producer... CreatingConfluentProducer 2022 Warning The message was transmitted to broker, but no acknowledgement was received. ProduceNotAcknowledged 2031 Information Assigned partition {topic}[{partition}]. PartitionAssigned 2032 Debug {topic}[{partition}] offset will be reset to {offset}. PartitionOffsetReset 2033 Information Revoked partition {topic}[{partition}] (offset was {offset}). PartitionRevoked 2034 Debug Successfully committed offset {topic}[{partition}]@{offset}. OffsetCommitted 2035 Error Error occurred committing the offset {topic}[{partition}]@{offset}: '{errorReason}' ({errorCode}). OffsetCommitError 2036 Error Fatal error in Kafka consumer: '{errorReason}' ({errorCode}). ConfluentConsumerFatalError 2037 Error Error in Kafka error handler. KafkaErrorHandlerError 2038 Debug Kafka consumer statistics received: {statistics} ConsumerStatisticsReceived 2039 Debug Kafka producer statistics received: {statistics} ProducerStatisticsReceived 2040 Error The received statistics JSON couldn't be deserialized. StatisticsDeserializationError 2041 Information Assigned partition {topic}[{partition}]@{offset}. PartitionManuallyAssigned 2042 Warning Error in Kafka consumer: '{errorReason}' ({errorCode}). ConfluentConsumerError 2043 Error Error in Kafka log handler. KafkaLogHandlerError 2050 Warning An error occurred while disconnecting the consumer. ConfluentConsumerDisconnectError 2060 Warning {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. -> The consumer will try to recover. PollTimeoutAutoRecovery 2061 Error {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. -> Enable auto recovery to allow Silverback to automatically try to recover (EnableAutoRecovery=true in the consumer configuration). PollTimeoutNoAutoRecovery 2201 Critical {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogCritical 2202 Error {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogError 2203 Warning {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogWarning 2204 Information {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogInformation 2205 Debug {sysLogLevel} event from Confluent.Kafka producer: '{logMessage}'. ConfluentProducerLogDebug 2211 Critical {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogCritical 2212 Error {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogError 2213 Warning {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogWarning 2214 Information {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogInformation 2215 Debug {sysLogLevel} event from Confluent.Kafka consumer: '{logMessage}'. ConfluentConsumerLogDebug MQTT Id Level Message Reference 4011 Debug Consuming message '{messageId}' from topic '{topic}'. ConsumingMessage 4021 Warning Error occurred connecting to the MQTT broker. | clientId: {clientId} ConnectError 4022 Debug Error occurred retrying to connect to the MQTT broker. | clientId: {clientId} ConnectRetryError 4023 Warning Connection with the MQTT broker lost. The client will try to reconnect. | clientId: {clientId} ConnectionLost 4031 Debug Producer queue processing was canceled. ProducerQueueProcessingCanceled 4101 Error Error from MqttClient ({source}): '{logMessage}'. MqttClientLogError 4102 Warning Warning from MqttClient ({source}): '{logMessage}'. MqttClientLogWarning 4103 Information Information from MqttClient ({source}): '{logMessage}'. MqttClientLogInformation 4104 Trace Verbose from MqttClient ({source}): '{logMessage}'. MqttClientLogVerbose Tracing An Activity is created: in the Consumer when a message is received (initialized with the traceparent header, if submitted) in the Producer when a message is being sent (submitting the Activity.Id in the traceparent header ) when a sequence (e.g. a BatchSequence ) is being consumed when a subscriber is being invoked (either internally or from a consumer) This allows to trace the methods execution and follow a message across different services (distributed tracing). The following table summarizes the activities and the information being tracked. Id Description / Tags Silverback.Integration.Produce A message is being produced to a message broker. Tags: messaging.message_id messaging.destination [ messaging.kafka.message_key ] [ messaging.kafka.partition ] Silverback.Integration.Consume A consumed message is being processed. Tags: messaging.message_id messaging.destination [ messaging.sequence.activity ] [ messaging.kafka.message_key ] [ messaging.kafka.partition ] Silverback.Integration.Sequence A sequence of messages is being processed. Tags: none Silverback.Core.Subscribers.InvokeSubscriber A subscriber is being invoked to process a message. Tags: SubscriberType SubscriberMethod"
  },
  "contributing.html": {
    "href": "contributing.html",
    "title": "Contributing | Silverback",
    "keywords": "Contributing You are encouraged to contribute to Silverback! Please check out the how to contribute guide for guidelines about how to proceed. Source Code The full source code is available on GitHub Versioning The Directory.Build.props file in the root of the repository contains the current version of the NuGet packages being built and referenced. The <BaseVersion> and <VersionSuffix> tags can be used to increment the current version. Commits Please try to follow the Conventional Commits specification for the commit messages. Building (NuGet packages) The nuget packages can be built locally using the powershell script under /nuget/Update.ps1 . Add the -l switch to clear the local nuget cache as well (especially useful when building the same version over and over). Testing The main solution contains quite a few unit tests and additionally some samples are implemented in a separate solution. Contributors Thank you to all the present and future contributors . You are amazing!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | Silverback",
    "keywords": ""
  },
  "releases.html": {
    "href": "releases.html",
    "title": "Releases | Silverback",
    "keywords": "Releases 4.0.1 What's new Upgrade to MQTTnet 4.1.4.563 4.0.0 What's new Upgrade to MQTTnet 4.1.3.436 Upgrade to Confluent.Kafka 1.9.3 Upgrade to Newtonsoft.Json 13.0.2 Disable server-side offset commit in KafkaConsumer when GroupId is not set Breaking changes Some breaking changes in MQTTnet 4 are reflected into Silverback 3.8.0 What's new Topic name resolvers can be used to filter the messages to be produce: returning null will discard the message Fixes Fix error policies not being triggered consistently when batch consuming Make IntegrationSpy fully thread-safe Prevent errors when the IKafkaPartitionsRevokedCallback is invoked during application shutdown Improve error handling during connection to MQTT 3.7.3 Fixes Support topic names with symbols (e.g. hyphens) in mocked MQTT broker 3.7.2 Fixes Correctly invoke the IKafkaOffsetCommittedCallback when auto commit is disabled [ #167 ] 3.7.1 Fixes Improve message streams abort process to avoid first chance exceptions (e.g. during dispose) 3.7.0 What's new Implement basic support for Kafka transactions via <xref:Silverback.Messaging.Broker.KafkaTransactionalProducer> (Note: this is just a first step and a more comprehensive implementation is planned for the upcoming release 4.0.0) Skip chunking when processing single chunk messages Fixes Fix possible race condition in consumer pipeline 3.6.1 Fixes Handle race condition in BatchSequence with timeout Limit consumer status history 3.6.0 What's new Handle IAsyncEnumerable<T> returned by the subscriber and republished the contained messages Enrich Kafka messages moved by the MoveMessageErrorPolicy adding some extra headers containing some information about the source topic, partition, offset, etc. (see Message Headers ) Allow filters such as the KafkaGroupIdFilterAttribute or MqttClientIdFilterAttribute to be added to the subscribers at runtime via the configuration API (see Multiple Consumer Groups (in same process) and Multiple Clients (in same process) ) Add overload for Publish method in the error policies that forwards the exception as well as the envelope Throw TimeoutException from KafkaTestingHelper and MqttTestingHelper Improve MQTT connection related logs (info for successful reconnect and add broker name to log messages) Support shared sessions in mocked MQTT broker Fixes Ensure each consumed message gets a unique traceId (when the traceparent header is not present) Fix memory leak in consumer Fully validate messages, including nested objects 3.5.0 What's new Log MqttClient internal events (see Logging ) Upgrade to Confluent.Kafka 1.8.2 Upgrade to MQTTnet 3.0.16 Upgrade to RabbitMQ.Client 6.2.2 Update several dependencies Fixes Fix MqttConsumer reconnection issues Handle edge cases related to MQTT acknowledgment timeout in MqttConsumer Allow max retries specification and error policies chains with MQTT V3 3.4.0 What's new Support encryption key rotation (see Encryption ) 3.3.1 Fixes Fix AddHeaders<TMessage> and WithKafkaKey<TMessage> not being correctly invoked by all IProducer.Produce and IProducer.ProducerAsync overloads Add endpoint friendly name to all logs 3.3.0 What's new Optimize in-memory mocked Kafka (avoid spawning too many threads) Support multiple brokers (with overlapping topic names) in mocked Kafka and MQTT Add message validation for both producer and consumer (see Message Validation ) Add new AddInbound overloads specifying message type for a more compact configuration when using the typed deserializer (see Serialization ) Fixes Invoke the Kafka partition EOF callback for all connected consumers Ignore null or empty Kafka key in producer 3.2.0 What's new Add new Kafka partition EOF callback to be notified when the end of a partition is reached by the consumer (see Kafka Events and IKafkaPartitionEofCallback ) Allow multiple calls to IKafkaConsumerEndpointBuilder.Configure or IKafkaProducerEndpointBuilder.Configure for the same endpoint Observe a grace period in the ConsumersHealthCheck to prevent false positives during a normal Kafka rebalance Add optional friendly name to the endpoints (see IEndpointBuilder .WithName and Endpoint.FriendlyName ) Allow filtering the endpoints targeted by the ConsumersHealthCheck (see AddConsumersCheck ) 3.1.1 Fixes Invoke broker callbacks during the application shutdown to allow custom code to be run when disconnecting 3.1.0 What's new Add new ways to configure headers and kafka key (see Message Headers and Kafka Partitioning and Message Key ) New callbacks for Kafka log events (see Kafka Events ) Improve consumer status tracking introducing ConsumerStatus.Ready Revert the Kafka consumer status from Ready to Connected whenever partitions are revoked or a poll timeout occurs Adapt consumer health check to monitor the new status and report unhealthy if not Ready (see Health Monitoring ) Try to automatically recover from Kafka maximum poll interval exceed errors Improve Kafka static partition assignment with resolver function and fetching the available partitions (see Kafka Partitioning and Message Key ) Upgrade to Confluent.Kafka 1.7.0 Upgrade to MQTTnet 3.0.15 Fixes Prevent possible race condition causing messages to be skipped when a RetryPolicy kicks in for messages from multiple Kafka partitions simultaneously Prevent ObjectDisposedException to be thrown when Kafka events (e.g. statistics) are fired during the application shutdown Prevent ObjectDisposedException to be thrown when Consumer.Dispose is called multiple times Properly clear the trace context ( Activity ) when reconnecting the consumer to prevent the newly started consume loop to be tracked under the current message traceId Fix wrong prefix in MQTT log event names 3.0.1 Fixes Fix IOutboxWriter lifecycle [ #128 ] 3.0.0 What's new Add support for MQTT (see Connecting to a Message Broker , Inbound Endpoint , Outbound Endpoint , ...) Simplify configuration and reduce boilerplate (see Subscribing and Connecting to a Message Broker ) Simplify subscribers registration and get rid of the ISubscriber interface (see Subscribing ) Scan subscribers automatically at startup to reduce cost of first message Connect brokers and handle graceful shutdown automatically (see Connecting to a Message Broker ) Improve endpoints configuration API (see Connecting to a Message Broker ) Add IServiceCollection.ConfigureSilverback extension method to conveniently split the configuration code (see Enabling Silverback ) Refactor Silverback.Integration to support streaming Create IMessageStreamEnumerable<TMessage> (see Streaming ) Improve chunking support in conjunction with streaming, requiring only one chunk at a time to be loaded into memory Redesign sequences handling to support chunking, batch consuming and future sequences as well Improve Kafka partitions handling (see Kafka Partitioning and Message Key ) Process partitions independently and concurrently Add setting to produce to a specific partition Add setting to manually assign the consumer partitions Add option to throw an exception if no subscriber is handling a message that was published to the internal bus or was consumed from a message broker (see throwIfUnhandled argument in the IPublisher methods and ThrowIfUnhandled property in the IConsumerEndpoint ) Handle null messages as Tombstone / Tombstone<TMessage> (see Tombstone Message ) Replace Newtonsoft.Json with System.Text.Json to improve serialization and deserialization performance (the old serializers have been moved into the Silverback.Integration.Newtonsoft package, see Serialization ) Improve outbound routing customization options with endpoint name resolvers (see Outbound Messages Routing ) Add non-blocking Produce / ProduceAsync / RawProduce / RawProduceAsync overloads to IProducer , better suitable for higher throughput scenarios (see Producer ) Refactor broker event handlers (see Broker Callbacks ) Expose IConsumer.StopAsync and IConsumer.StartAsync methods to pause and resume consumers Add log levels configuration (see Logging ) Improve (distributed) tracing (see Logging ) Allow header names customization (see Message Headers ) Add consumer status information and statistics (see Connecting to a Message Broker ) Add basic consumer health check (see Health Monitoring ) Allow broker behaviors to be registered as transient, meaning that an instance will be created per each producer or consumer (see Broker behaviors pipeline ) Improve code quality Enhance CI pipeline to use Roslyn analyzers Integrate SonarCloud ) Improve integration tests Increase automated tests coverage Enable nullable reference types and adjust all API Document the entire public API (see API Documentation ) Released some utilities to help writing automated tests involving Silverback.Integration (see Testing ) Upgrade to Confluent.Kafka 1.6.2 Upgrade to RabbitMQ.Client 6.2.1 Fixes Fix OutboxWorker not publishing custom headers [ #102 ] Breaking Changes Refactored IPublisher Removed the overloads to publish a batch of messages (see Publishing ) Cannot subscribe to collection of messages anymore (see Subscribing ), unless they are consumed from a message broker (see Streaming ) The chunks belonging to the same message must be contiguous (interleaved messages are at the moment not supported anymore) and in the same partition in case of Kafka Removed ISubscriber interface Removed BusConfigurator (moved all the configuration into the ISilverbackBuilder extension methods) Replaced BusConfigurator.Connect with ISilverbackBuilder.AddEndpointsConfigurator and ISilverbackBuilder.AddEndpoints (or ISilverbackBuilder.AddKafkaEndpoints etc.) to configure the endpoints, while the broker is connected automatically at startup (see Connecting to a Message Broker ) Replaced BusConfigurator.Subscribe methods with ISilverbackBuilder.AddDelegateSubscriber (see Subscribing ) Replaced BusConfigurator.HandleMessagesOfType methods with ISilverbackBuilder.HandleMessageOfType (see Subscribing ) BusConfigurator.ScanSubscribers is not needed anymore since it gets called automatically at startup (from an IHostedService ) Removed IServiceCollection.Add*Subscriber , IServiceCollection.Add*Behavior , IServiceCollection.Add*BrokerBehavior , IServiceCollection.AddEndpointsConfigurator , IServiceCollection.Add*OutboundRouter extension methods, use the same methods on the ISilverbackBuilder (using IServiceCollection.ConfigureSilverback to get an instance if the ISilverbackBuilder if necessary, as shown in Enabling Silverback ) Removed IBrokerOptionsBuilder.Add*BrokerBehavior , IBrokerOptionsBuilder.RegisterConfigurator , IBrokerOptionsBuilder.Add*OutboundRouter extension methods, use the same methods on the ISilverbackBuilder (using IServiceCollection.ConfigureSilverback to get an instance if the ISilverbackBuilder if necessary, as shown in Enabling Silverback ) Reorganized the Silverback.Messaging.Configuration namespace moving some broker specific types under Silverback.Messaging.Configuration.Kafka , Silverback.Messaging.Configuration.Rabbit or Silverback.Messaging.Configuration.Mqtt The visibility of some types has been changed to internal to favor a cleaner and clearer API where the public types are well documented and their backward compatibility is valued Removed Silverback prefix from exceptions name Removed the IRequest interface (it was implemented by both IQuery<TResult> and ICommand<TResult> ) Changed Impl methods suffix with Core , this affects some virtual members in the Broker<TProducerEndpoint, TConsumerEndpoint> and other base classes IConsumer.Received event replaced by a callback delegate IBroker.GetConsumer and IBrokerCollection.GetConsumer methods renamed to IBroker.AddConsumer and IBrokerCollection.AddConsumer IQueueProducer and IQueueConsumer renamed to IOutboxWriter and IOutboxReader The messages with a null body are by default mapped to a Tombstone / Tombstone<TMessage> (see Tombstone Message ) Database: Moved all entities (used with Entity Framework Core) to the Silverback.Database.Model namespace Replaced InboundMessage entity with InboundLogEntry Replaced OutboundMessage entity with OutboxMessage Removed TemporaryMessageChunk Modified schema of StoredOffset entity Moved and renamed some internally used types (e.g. QueuedMessage , DbQueuedMessage , ...) Complete redesign of the error policies Removed IMessageIdProvider and all related logic: the Id or MessageId property will not be automatically initialized anymore and its value will not be used as identifier for the outbound message anymore (refer to the Message Identifier page for further details on how to set a custom message id, if needed) WithConnectionTo<> , WithConnectionToKafka , WithConnectionToRabbitMQ and WithInMemoryBroker have been removed, please use the new WithConnectionToMessageBroker and AddKafka / AddRabbit methods (see Connecting to a Message Broker ) Replaced the internal messages for the Kafka events such as partitions revoked/assigned, offset commit, error, log and statistics with event handler interfaces (see Kafka Events ) Deprecated Silverback.Integration.InMemory , use Silverback.Integration.Kafka.Testing , Silverback.Integration.RabbitMQ.Testing , etc. instead Renamed PartitioningKeyMemberAttribute to KafkaKeyMemberAttribute Silverback.Integration.Configuration has been discontinued Renamed Settings property to Options in the default JsonMessageSerializer (since the switch to System.Text.Json ) Removed LogWithLevel method from SkipMessageErrorPolicy , use the new WithLogLevels configuration instead Removed Parallel option from SubscribeAttribute Renamed Offset to a more generic BrokerMessageIdentifier in the Silverback.Integration abstractions (including the envelopes) Some changes to the behaviors: Renamed Handle to HandleAsync in the IBehavior , IProducerBehavior and IConsumerBehavior Changed signature of the HandleAsync method (see Behaviors and Broker behaviors pipeline ) Changed some sort indexes and introduced some new broker behaviors, you may need to adjust the sort index of your custom behaviors (see Broker behaviors pipeline for the updated list of built-in behaviors) Replaced IBroker.Connect and IBroker.Disconnect with IBroker.ConnectAsync and IBroker.DisconnectAsync Some major changes to batch consuming: Removed all batch events ( BatchStartedEvent , BatchCompleteEvent , BatchProcessedEvent , BatchAbortedEvent ), refer to Streaming to learn how to leverage the new IMessageStreamEnumerable<TMessage> Setting the batch size to 1 doesn't disable batching anymore, set the Batch to null in the ConsumerEndpoint to disable it When batching is enabled the messages can be subscribed only via the IMessageStreamEnumerable<TMessage> (see Streaming ), the subscribers to the single messages will not be invoked ChunkSettings moved from Silverback.Messaging.LargeMessages namespace to Silverback.Messaging.Sequences.Chunking Replaced CoreEventIds , IntegrationEventIds , KafkaEventIds and RabbitEventIds with CoreLogEvents , IntegrationLogEvents , KafkaLogEvents and RabbitLogEvents (see also Logging ) Deprecated support for Entity Framework 2, only the version 3.0.1 of Silverback.Core.EntityFrameworkCore will work with Silverback 3.0.0 Modified message encryption for chunked messages and it will not be compatible with previous versions of Silverback (affects chunking+encryption only) 2.2.0 What's new Allow custom outbound routers to be registered as scoped or transient (instead of singleton only) 2.1.2 Fixes Fix delay in Retry policy [ #97 ] 2.1.1 What's new Add support for multiple message brokers (Kafka and RabbitMQ) in the same application (see Connecting to a Message Broker ) Add end-to-end message encryption (see Encryption ) Add dynamic custom routing of outbound messages (see Outbound Messages Routing ) Improve support for message headers (see Message Headers ) Add support for binary files (see Binary Files ) Improve message identifier handling: the IIntegrationMessage is not required to have an Id property anymore (the x-message-id header will still be generated and if the property exists will continue to be automatically initialized) x-first-chunk-offset header added by default (see Message Headers ) Deserialize KafkaStasticsEvent JSON and provided its content as an object (in addition to the raw JSON) Add support for Apache Avro and schema registry (see Serialization ) Upgrade to Confluent.Kafka 1.4.2 Add consumer PrefetchSize and PrefetchCount settings to RabbitConsumerEndpoint Add AcknowledgeEach to the RabbitConsumerEndpoint to define the number of message processed before sending the acknowledgment to the server Upgrade to RabbitMQ.Client 6.0.0 Improve message type resolution performance and reliability in JsonMessageSerializer Add LogWithLevel method to SkipMessageErrorPolicy to specify the desired level for the \"Message skipped\" log entry (the default is now increased to Error ) Breaking Changes These changes shouldn't affect you unless you built your own IBroker implementation or are interacting at low-level with the IBroker (this is why has been decided to still mark this as a minor release): The IBroker interface and Broker<TProducerEndpoint, TConsumerEndpoint> abstract base class have been modified to explicitly declare which endpoint type is being handled by the broker implementation The IMessageSerializer interfaces has been changed The IConsumerBehavior and IProducerBehavior interfaces have been changed Changed the parameters order in some less used overloads in the IBrokerOptionBuilder Announced Breaking Changes These aren't real breaking changes but some methods have been marked as deprecated and will be removed in one of the next major releases: WithConnectionTo<> , WithConnectionToKafka and WithConnectionToRabbitMQ are deprecated (they will still be supported in this version), please use the new WithConnectionToMessageBroker and AddKafka / AddRabbit methods (see Connecting to a Message Broker ) 2.0.0 What's new Create Silverback.Integration.RabbitMQ package to connect Silverback with RabbitMQ (see Connecting to a Message Broker ) Enable subscription of messages with an empty body (you must subscribe to the IInboundEnvelope ) [ #61 ] Add hook to manually set the Kafka partition start offset when a partition is assigned to the consumer (see Kafka Events ) [ #57 ] Support for multiple consumer groups running in the same process (see Multiple Consumer Groups (in same process) ) [ #59 ] Publish KafkaStatisticsEvent also from the KafkaProducer (previously done in KafkaConsumer only) Several reliability and performance related improvements Breaking Changes The IBroker , IProducer and IConsumer interfaces have been slightly modified (it shouldn't affect you unless you built your own IBroker implementation) Many interfaces (such as IBehavior ) and delegates have been slightly modified to pass around an IReadOnlyCollection instead of an IEnumerable , to avoid the possible issues related to multiple enumeration of an IEnumerable The IMessageKeyProvider interface has been renamed to IMessageIdProvider to prevent to be mistaken with the Kafka Key or Rabbit's Routing Key IInboundMessage / IOutboundMessage (plus all the related types) have been renamed to IInboundEnvelope / IOutboundEnvelope and the property containing the actual message has been renamed from Content to Message The MustUnwrap option has been removed from the inbound connector configuration (messages are unwrapped by default) 1.2.0 What's new Publish events to the internal bus as a consequence to the Kafka events such as partitions assigned or revoked (see Kafka Events ) [ #34 ] 1.1.0 What's new Add IEndpointsConfigurator interface to allow splitting the endpoints configuration across multiple types (see Connecting to a Message Broker ) Add support for distributed tracing (based on System.Diagnostics ) Add IProducerBehavior and IConsumerBehavior to create an extension point closer to the actual message broker logic (see Broker behaviors pipeline ) Breaking Changes Replaced ISortedBehavior with a generic ISorted interface 1.0.5 What's new Upgrade to Confluent.Kafka 1.3.0 Fixes Fix OutboundQueueHealthCheck [ #43 ] Remove automatic disposal of the KafkaProducer when a KafkaException is thrown (creating too many instances of the producer over a short time span could lead to too many active TCP connections) Fix the bug preventing a KafkaConsumerEndpoint pointing to multiple topics to be successfully subscribed 1.0.4 Fixes Fix mortal loop issue: it is finally safe to consume and produce the same type of messages from within the same process (in a natural way, without any extra configuration) Since version 1.0.0 the messages routed to an endpoint aren't forwarded to any subscriber directly Now the inbound connector has been fixed as well, preventing the inbound messages to be immediately routed once again to the outbound endpoint and eliminating all possible causes of mortal loops 1.0.3 What's new Deprecate PartitioningKeyMemberAttribute in favor of KafkaKeyMemberAttribute , since the message key isn't used just for partitioning (see Kafka Partitioning and Message Key ) Fixes Forward Kafka message key as-is (not hashed anymore) to avoid possible collisions and simplify debugging 1.0.2 Fixes Reintroduce Add*Subscriber and Add*Behavior as IServiceCollection extension methods (for backward compatibility and greater flexibility) [ #41 ] Add WithInMemoryBroker and OverrideWithInMemoryBroker extension methods (see Testing ) 1.0.0 What's new Optimize message size (no wrappers anymore) Improve headers usage: identifiers, types, chunks information, etc. are now all sent in the headers Review severity of some log entries Improve and clean up internal implementation Improve exception handling (flattening of AggregateException ) Upgrade to Confluent.Kafka 1.2.2 Add automatic recovers from fatal errors in KafkaConsumer (can be disabled via Endpoint configuration) Support .Net Core 3.0 and Entity Framework Core 3.0 Refactor packages (EF binding logic is now in a single package, versioned after the related EF version) Improve configuration API Improve and optimize performance (including #37 ) Improve database locks mechanism (used also to run the OutboundQueueWorker ) Fixes Fix issue requiring types not implementing IMessage to be registered with HandleMessagesOfType<T> to consume them [ #33 ] Mitigate issue causing the DistributedBackgroundService to sometime fail to acquire the database lock [ #39 ] Fix partition key value being lost when using the DeferredOutboundConnector Other small fixes to improve stability and reliability Breaking Changes By default the messages published via IPublisher that are routed to an outbound endpoint are not sent through to the internal bus and cannot therefore be subscribed locally, within the same process (see Outbound Endpoint ) Some changes in IInboundMessage and IOutboundMessage interfaces Changes to the schema of the outbox table ( Silverback.Messaging.Connectors.Model.OutboundMessage ) The configuration fluent API changed quite a bit, refer to the current documentation Important WithConnectionTo<KafkaBroker> has to be replaced with WithConnectionToKafka in order for all features to work properly. When failing to do so no message key will be generated, causing the messages to land in a random partition and/or preventing to publish to a compacted topic. (see Kafka Partitioning and Message Key ) Silverback.Integration.EntityFrameworkCore and Silverback.EventSourcing.EntityFrameworkCore have been deprecated ( Silverback.Core.EntityFrameworkCore contains all the necessary logic to use EF as store) KeyMemberAttribute has been renamed to PartitioningKeyMemberAttribute (see Connecting to a Message Broker ) 0.10.0 What's new Improve error handling: now all exceptions, including the ones thrown by the message serialzer can be handled through the error policies Improve logs: promoted some important logs to Information level, writing all processing errors as (at least) Warning and improved logged information quality (logged attributes) Add ability to modify messages and headers when moving them via MoveMessageErrorPolicy Refactor message processing to a cleaner, more extensible and predictable API and behavior Fixes Fixed several small (and not so small) issues and bugs 0.8.0 - 0.9.0 Released two versions mostly to fix bugs, do some small adjustments according to some user feedbacks and update the external dependencies (e.g. Confluent.Kafka 1.0.1). Fixes Fix exception loading error policies from JSON in Silverback.Integration.Configuration [ #24 ] 0.7.0 What's new Upgrade to Confluent.Kafka 1.0.0 Create a simple event store that perfectly integrates with the rest of the Silverback framework (see Event Sourcing ) Add Silverback.Integration.InMemory package to mock the message broker behavior in your unit tests Several small optimizations and improvements 0.6.0 What's new Add support for message headers Simplify message subscription even further: now all public methods of the types implementing the marker interface ISubscriber are automatically subscribed by default without having to annotate them with the SubscribeAttribute (this behavior is customizable) Upgrade to Confluent.Kafka 1.0.0-RC1 0.3.x - 0.5.x Some releases where done adding quite a few features. What's new Add Silverback.Integration.Configuration package to load the inbound/outbound configuration from the app.settings json Add batch processing Add parallel subscribers Add delegate subscription as an alternative to SubscribeAttribute based subscription Improve support for Rx.net Add support for legacy messages and POCO classes Add offset storage as an alternative and more optimized way to guarantee exactly once processing, storing just the offset of the last message instead of logging every message (see Inbound Endpoint ) Add behaviors as a convenient way to implement your cross-cutting concerns (like logging, validation, etc.) to be plugged into the internal bus publishing pipeline (see Behaviors ) Add message chunking to automatically split the larger messages and rebuild them on the other end (see Chunking ) ...much more...and a huge amount of refactorings Fixes Several fixes and optimizations 0.3.2 The very first public release of Silverback! It included: In-process message bus Inbound/outbound connector for message broker abstraction Kafka broker implementation Outbox table pattern implementation Exactly once processing ..."
  },
  "samples/kafka/basic.html": {
    "href": "samples/kafka/basic.html",
    "title": "Kafka - Basic | Silverback",
    "keywords": "Kafka - Basic This sample implements the simple possible producer and consumer. See also: Connecting to a Message Broker Common The message being exchanged is defined in a common project. namespace Silverback.Samples.Kafka.Basic.Common { public class SampleMessage { public int Number { get; set; } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Basic.Common Producer The producer uses a hosted service to publish some messages in the background. Startup EndpointsConfigurator Background Service using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.Basic.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add the hosted service that produces the random sample messages services.AddHostedService<ProducerBackgroundService>(); } public void Configure() { } } } using Silverback.Messaging.Configuration; using Silverback.Samples.Kafka.Basic.Common; namespace Silverback.Samples.Kafka.Basic.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Produce the SampleMessage to the samples-basic topic .AddOutbound<SampleMessage>( endpoint => endpoint .ProduceTo(\"samples-basic\"))); } } } using System; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using Silverback.Messaging.Broker; using Silverback.Messaging.Publishing; using Silverback.Samples.Kafka.Basic.Common; namespace Silverback.Samples.Kafka.Basic.Producer { public class ProducerBackgroundService : BackgroundService { private readonly IServiceScopeFactory _serviceScopeFactory; private readonly ILogger<ProducerBackgroundService> _logger; public ProducerBackgroundService( IServiceScopeFactory serviceScopeFactory, ILogger<ProducerBackgroundService> logger) { _serviceScopeFactory = serviceScopeFactory; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken stoppingToken) { // Create a service scope and resolve the IPublisher // (the IPublisher cannot be resolved from the root scope and cannot // therefore be directly injected into the BackgroundService) using var scope = _serviceScopeFactory.CreateScope(); var publisher = scope.ServiceProvider.GetRequiredService<IPublisher>(); var broker = scope.ServiceProvider.GetRequiredService<IBroker>(); int number = 0; while (!stoppingToken.IsCancellationRequested) { // Check whether the connection has been established, since the // BackgroundService will start immediately, before the application // is completely bootstrapped if (!broker.IsConnected) { await Task.Delay(100, stoppingToken); continue; } await ProduceMessageAsync(publisher, ++number); await Task.Delay(100, stoppingToken); } } private async Task ProduceMessageAsync(IPublisher publisher, int number) { try { await publisher.PublishAsync( new SampleMessage { Number = number }); _logger.LogInformation($\"Produced {number}\"); } catch (Exception ex) { _logger.LogError(ex, $\"Failed to produce {number}\"); } } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Basic.Producer Consumer The consumer processes the messages and outputs their value to the standard output. Startup EndpointsConfigurator Subscriber using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.Basic.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<SampleMessageSubscriber>(); } public void Configure() { } } } using Confluent.Kafka; using Silverback.Messaging.Configuration; namespace Silverback.Samples.Kafka.Basic.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Consume the samples-basic topic .AddInbound( endpoint => endpoint .ConsumeFrom(\"samples-basic\") .Configure( config => { // The consumer needs at least the bootstrap // server address and a group id to be able // to connect config.GroupId = \"sample-consumer\"; // AutoOffsetReset.Earliest means that the // consumer must start consuming from the // beginning of the topic, if no offset was // stored for this consumer group config.AutoOffsetReset = AutoOffsetReset.Earliest; }))); } } } using Microsoft.Extensions.Logging; using Silverback.Samples.Kafka.Basic.Common; namespace Silverback.Samples.Kafka.Basic.Consumer { public class SampleMessageSubscriber { private readonly ILogger<SampleMessageSubscriber> _logger; public SampleMessageSubscriber(ILogger<SampleMessageSubscriber> logger) { _logger = logger; } public void OnMessageReceived(SampleMessage message) => _logger.LogInformation($\"Received {message.Number}\"); } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Basic.Consumer"
  },
  "samples/kafka/batch.html": {
    "href": "samples/kafka/batch.html",
    "title": "Kafka - Batch Processing | Silverback",
    "keywords": "Kafka - Batch Processing In this sample the consumed messages are processed in batch. See also: Inbound Endpoint - Batch processing Common The message being exchanged is defined in a common project. namespace Silverback.Samples.Kafka.Batch.Common { public class SampleMessage { public int Number { get; set; } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Batch.Common Producer The producer uses a hosted service to publish some messages in the background. Startup EndpointsConfigurator Background Service using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.Batch.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add the hosted service that produces the random sample messages services.AddHostedService<ProducerBackgroundService>(); } public void Configure() { } } } using Silverback.Messaging.Configuration; using Silverback.Samples.Kafka.Batch.Common; namespace Silverback.Samples.Kafka.Batch.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Produce the SampleMessage to the samples-batch topic .AddOutbound<SampleMessage>( endpoint => endpoint .ProduceTo(\"samples-batch\"))); } } } using System; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using Silverback.Messaging.Broker; using Silverback.Messaging.Publishing; using Silverback.Samples.Kafka.Batch.Common; namespace Silverback.Samples.Kafka.Batch.Producer { public class ProducerBackgroundService : BackgroundService { private readonly IServiceScopeFactory _serviceScopeFactory; private readonly ILogger<ProducerBackgroundService> _logger; public ProducerBackgroundService( IServiceScopeFactory serviceScopeFactory, ILogger<ProducerBackgroundService> logger) { _serviceScopeFactory = serviceScopeFactory; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken stoppingToken) { // Create a service scope and resolve the IPublisher // (the IPublisher cannot be resolved from the root scope and cannot // therefore be directly injected into the BackgroundService) using var scope = _serviceScopeFactory.CreateScope(); var publisher = scope.ServiceProvider.GetRequiredService<IPublisher>(); var broker = scope.ServiceProvider.GetRequiredService<IBroker>(); int number = 0; while (!stoppingToken.IsCancellationRequested) { // Check whether the connection has been established, since the // BackgroundService will start immediately, before the application // is completely bootstrapped if (!broker.IsConnected) { await Task.Delay(100, stoppingToken); continue; } await ProduceMessageAsync(publisher, ++number); await Task.Delay(50, stoppingToken); } } private async Task ProduceMessageAsync(IPublisher publisher, int number) { try { await publisher.PublishAsync( new SampleMessage { Number = number }); _logger.LogInformation($\"Produced {number}\"); } catch (Exception ex) { _logger.LogError(ex, $\"Failed to produce {number}\"); } } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Batch.Producer Consumer The consumer processes the messages in batch and outputs the batch sum to the standard output. Startup EndpointsConfigurator Subscriber using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.Batch.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<SampleMessageBatchSubscriber>(); } public void Configure() { } } } using System; using Confluent.Kafka; using Silverback.Messaging.Configuration; namespace Silverback.Samples.Kafka.Batch.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Consume the samples-batch topic .AddInbound( endpoint => endpoint .ConsumeFrom(\"samples-batch\") .Configure( config => { // The consumer needs at least the bootstrap // server address and a group id to be able // to connect config.GroupId = \"sample-consumer\"; // AutoOffsetReset.Earliest means that the // consumer must start consuming from the // beginning of the topic, if no offset was // stored for this consumer group config.AutoOffsetReset = AutoOffsetReset.Earliest; }) // Configure processing in batches of 100 messages, // with a max wait time of 5 seconds .EnableBatchProcessing(100, TimeSpan.FromSeconds(5)))); } } } using System; using System.Collections.Generic; using System.Threading.Tasks; using Microsoft.Extensions.Logging; using Silverback.Messaging.Messages; using Silverback.Samples.Common; using Silverback.Samples.Kafka.Batch.Common; namespace Silverback.Samples.Kafka.Batch.Consumer { public class SampleMessageBatchSubscriber { private readonly ILogger<SampleMessageBatchSubscriber> _logger; public SampleMessageBatchSubscriber( ILogger<SampleMessageBatchSubscriber> logger) { _logger = logger; } public async Task OnBatchReceivedAsync(IAsyncEnumerable<SampleMessage> batch) { int sum = 0; int count = 0; await foreach (var message in batch) { sum += message.Number; count++; } _logger.LogInformation( $\"{Environment.NewLine}{Environment.NewLine}{Environment.NewLine}\" + $\"Received batch of {count} message -> sum: {sum}\" + $\"{Environment.NewLine}{Environment.NewLine}{Environment.NewLine}\"); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/Batch.Consumer"
  },
  "samples/kafka/binaryfile-streaming.html": {
    "href": "samples/kafka/binaryfile-streaming.html",
    "title": "Kafka - Files Streaming | Silverback",
    "keywords": "Kafka - Files Streaming This sample demonstrates how to deal with raw binary contents and large messages, to transfer some files through Kafka. See also: Binary Files , Chunking Producer The producer exposes two REST API that receive the path of a local file to be streamed. The second API uses a custom BinaryFileMessage to forward further metadata (the file name in this example). Startup EndpointsConfigurator CustomBinaryFileMessage API Controller using Microsoft.AspNetCore.Builder; using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add API controllers and SwaggerGen services.AddControllers(); services.AddSwaggerGen(); } public void Configure(IApplicationBuilder app) { // Enable middlewares to serve generated Swagger JSON and UI app.UseSwagger().UseSwaggerUI( uiOptions => { uiOptions.SwaggerEndpoint( \"/swagger/v1/swagger.json\", $\"{GetType().Assembly.FullName} API\"); }); // Enable routing and endpoints for controllers app.UseRouting(); app.UseEndpoints(endpoints => { endpoints.MapControllers(); }); } } } using Silverback.Messaging.Configuration; using Silverback.Messaging.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Produce the binary files to the // samples-binary-file-streaming topic .AddOutbound<BinaryFileMessage>( endpoint => endpoint // Force producing to a specific partition (0 in this // case) to be able to scale to multiple producers // writing to the same topic. Assigning a different // partition to each one will ensure that the chunks // are always contiguous. // This isn't mandatory and necessary only when // horizontally scaling the producer. // (In the final solution the \"0\" constant value // should be replaced by a configuration setting.) .ProduceTo(\"samples-binary-file-streaming\", 0) // Split the binary files into chunks of 512 kB .EnableChunking(524288))); } } } using Silverback.Messaging.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Producer.Messages { public class CustomBinaryFileMessage : BinaryFileMessage { [Header(\"x-filename\")] public string? Filename { get; set; } } } using System.IO; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Silverback.Messaging.Messages; using Silverback.Messaging.Publishing; using Silverback.Samples.Kafka.BinaryFileStreaming.Producer.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Producer.Controllers { [ApiController] [Route(\"[controller]\")] public class ProducerController : ControllerBase { private readonly IPublisher _publisher; public ProducerController(IPublisher publisher) { _publisher = publisher; } [HttpPost(\"binary-file\")] public async Task<IActionResult> ProduceBinaryFileAsync( string filePath, string? contentType) { // Open specified file stream using var fileStream = System.IO.File.OpenRead(filePath); // Create a BinaryFileMessage that wraps the file stream var binaryFileMessage = new BinaryFileMessage(fileStream); if (!string.IsNullOrEmpty(contentType)) binaryFileMessage.ContentType = contentType; // Publish the BinaryFileMessage that will be routed to the outbound // endpoint. The FileStream will be read and produced chunk by chunk, // without the entire file being loaded into memory. await _publisher.PublishAsync(binaryFileMessage); return NoContent(); } [HttpPost(\"custom-binary-file\")] public async Task<IActionResult> ProduceBinaryFileWithCustomHeadersAsync( string filePath, string? contentType) { // Open specified file stream using var fileStream = System.IO.File.OpenRead(filePath); // Create a CustomBinaryFileMessage that wraps the file stream. The // CustomBinaryFileMessage extends the BinaryFileMessage adding an extra // Filename property that is also exported as header. var binaryFileMessage = new CustomBinaryFileMessage { Content = fileStream, Filename = Path.GetFileName(filePath) }; if (!string.IsNullOrEmpty(contentType)) binaryFileMessage.ContentType = contentType; // Publish the BinaryFileMessage that will be routed to the outbound // endpoint. The FileStream will be read and produced chunk by chunk, // without the entire file being loaded into memory. await _publisher.PublishAsync(binaryFileMessage); return NoContent(); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/BinaryFileStreaming.Producer Consumer The consumer simply streams the file to a temporary folder in the local file system. Startup EndpointsConfigurator CustomBinaryFileMessage Subscriber using Microsoft.Extensions.DependencyInjection; using Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Subscribers; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Kafka as message broker .WithConnectionToMessageBroker( options => options .AddKafka()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<BinaryFileSubscriber>(); } public void Configure() { } } } using Confluent.Kafka; using Silverback.Messaging.Configuration; using Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddKafkaEndpoints( endpoints => endpoints // Configure the properties needed by all consumers/producers .Configure( config => { // The bootstrap server address is needed to connect config.BootstrapServers = \"PLAINTEXT://localhost:9092\"; }) // Consume the samples-binary-file-streaming topic .AddInbound( endpoint => endpoint // Manually assign the partitions to prevent the // broker to rebalance in the middle of a potentially // huge sequence of chunks. This is just an // optimization and isn't strictly necessary. // (The partitions resolver function returns the // untouched collection to assign all available // partitions.) .ConsumeFrom( \"samples-binary-file-streaming\", partitions => partitions) .Configure( config => { // The consumer needs at least the bootstrap // server address and a group id to be able // to connect config.GroupId = \"sample-consumer\"; // AutoOffsetReset.Earliest means that the // consumer must start consuming from the // beginning of the topic, if no offset was // stored for this consumer group config.AutoOffsetReset = AutoOffsetReset.Earliest; }) // Force the consumer to use the // BinaryFileMessageSerializer: this is not strictly // necessary when the messages are produced by // Silverback but it increases the interoperability, // since it doesn't have to rely on the // 'x-message-type' header value to switch to the // BinaryFileMessageSerializer. // // In this example the BinaryFileMessageSerializer is // also set to return a CustomBinaryFileMessage // instead of the normal BinaryFileMessage. This is // only needed because we want to read the custom // 'x-message-filename' header, otherwise // 'ConsumeBinaryFiles()' would work perfectly fine // (returning a basic BinaryFileMessage, without the // extra properties). .ConsumeBinaryFiles( serializer => serializer .UseModel<CustomBinaryFileMessage>()) // Retry each chunks sequence 5 times in case of an // exception .OnError(policy => policy.Retry(5)))); } } } using Silverback.Messaging.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Messages { public class CustomBinaryFileMessage : BinaryFileMessage { [Header(\"x-filename\")] public string? Filename { get; set; } } } using System; using System.IO; using System.Threading.Tasks; using Microsoft.Extensions.Logging; using Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Messages; namespace Silverback.Samples.Kafka.BinaryFileStreaming.Consumer.Subscribers { public class BinaryFileSubscriber { private const string OutputPath = \"../../temp\"; private readonly ILogger<BinaryFileSubscriber> _logger; public BinaryFileSubscriber(ILogger<BinaryFileSubscriber> logger) { _logger = logger; } public async Task OnBinaryFileMessageReceivedAsync( CustomBinaryFileMessage binaryFileMessage) { EnsureTargetFolderExists(); var filename = Guid.NewGuid().ToString(\"N\") + binaryFileMessage.Filename; _logger.LogInformation($\"Saving binary file as {filename}...\"); // Create a FileStream to save the file using var fileStream = File.OpenWrite(Path.Combine(OutputPath, filename)); if (binaryFileMessage.Content != null) { // Asynchronously copy the message content to the FileStream. // The message chunks are streamed directly and the entire file is // never loaded into memory. await binaryFileMessage.Content.CopyToAsync(fileStream); } _logger.LogInformation( $\"Written {fileStream.Length} bytes into {filename}.\"); } private static void EnsureTargetFolderExists() { if (!Directory.Exists(OutputPath)) Directory.CreateDirectory(OutputPath); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Kafka/BinaryFileStreaming.Consumer"
  },
  "samples/mqtt/basic.html": {
    "href": "samples/mqtt/basic.html",
    "title": "MQTT - Basic | Silverback",
    "keywords": "MQTT - Basic This sample implements the simple possible producer and consumer. See also: Connecting to a Message Broker Common The message being exchanged is defined in a common project. namespace Silverback.Samples.Mqtt.Basic.Common { public class SampleMessage { public int Number { get; set; } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.Common Producer The producer uses a hosted service to publish some messages in the background. Startup EndpointsConfigurator Background Service using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.Basic.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add the hosted service that produces the random sample messages services.AddHostedService<ProducerBackgroundService>(); } public void Configure() { } } } using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.basic.producer\") .ConnectViaTcp(\"localhost\")) // Produce the SampleMessage to the samples-basic topic .AddOutbound<SampleMessage>( endpoint => endpoint .ProduceTo(\"samples/basic\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .Retain())); } } } using System; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using Silverback.Messaging.Broker; using Silverback.Messaging.Publishing; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.Producer { public class ProducerBackgroundService : BackgroundService { private readonly IServiceScopeFactory _serviceScopeFactory; private readonly ILogger<ProducerBackgroundService> _logger; public ProducerBackgroundService( IServiceScopeFactory serviceScopeFactory, ILogger<ProducerBackgroundService> logger) { _serviceScopeFactory = serviceScopeFactory; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken stoppingToken) { // Create a service scope and resolve the IPublisher // (the IPublisher cannot be resolved from the root scope and cannot // therefore be directly injected into the BackgroundService) using var scope = _serviceScopeFactory.CreateScope(); var publisher = scope.ServiceProvider.GetRequiredService<IPublisher>(); var broker = scope.ServiceProvider.GetRequiredService<IBroker>(); int number = 0; while (!stoppingToken.IsCancellationRequested) { // Check whether the connection has been established, since the // BackgroundService will start immediately, before the application // is completely bootstrapped if (!broker.IsConnected) { await Task.Delay(100, stoppingToken); continue; } await ProduceMessageAsync(publisher, ++number); await Task.Delay(100, stoppingToken); } } private async Task ProduceMessageAsync(IPublisher publisher, int number) { try { await publisher.PublishAsync( new SampleMessage { Number = number }); _logger.LogInformation($\"Produced {number}\"); } catch (Exception ex) { _logger.LogError(ex, $\"Failed to produce {number}\"); } } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.Producer Consumer The consumer processes the messages and outputs their value to the standard output. Startup EndpointsConfigurator Subscriber using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.Basic.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<SampleMessageSubscriber>(); } public void Configure() { } } } using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.basic.consumer\") .ConnectViaTcp(\"localhost\") // Send last will message if disconnecting // ungracefully .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"samples/testaments\"))) // Consume the samples/basic topic .AddInbound( endpoint => endpoint .ConsumeFrom(\"samples/basic\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) // Silently skip the messages in case of exception .OnError(policy => policy.Skip()))); } } } using Microsoft.Extensions.Logging; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.Consumer { public class SampleMessageSubscriber { private readonly ILogger<SampleMessageSubscriber> _logger; public SampleMessageSubscriber(ILogger<SampleMessageSubscriber> logger) { _logger = logger; } public void OnMessageReceived(SampleMessage message) => _logger.LogInformation($\"Received {message.Number}\"); } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.Consumer"
  },
  "samples/mqtt/basic-v3.html": {
    "href": "samples/mqtt/basic-v3.html",
    "title": "MQTT - Basic (v3) | Silverback",
    "keywords": "MQTT - Basic (v3) This sample implements the simple possible producer and consumer, but using MQTT protocol version 3. See also: Connecting to a Message Broker Common The message being exchanged is defined in a common project. namespace Silverback.Samples.Mqtt.Basic.Common { public class SampleMessage { public int Number { get; set; } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.Common Producer The producer uses a hosted service to publish some messages in the background. Startup EndpointsConfigurator Background Service using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.Basic.ProducerV3 { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add the hosted service that produces the random sample messages services.AddHostedService<ProducerBackgroundService>(); } public void Configure() { } } } using MQTTnet.Formatter; using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.ProducerV3 { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.basic.producer\") .ConnectViaTcp(\"localhost\") .UseProtocolVersion(MqttProtocolVersion.V310)) // Produce the SampleMessage to the samples-basic topic .AddOutbound<SampleMessage>( endpoint => endpoint .ProduceTo(\"samples/basic\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) .Retain())); } } } using System; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; using Silverback.Messaging.Broker; using Silverback.Messaging.Publishing; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.ProducerV3 { public class ProducerBackgroundService : BackgroundService { private readonly IServiceScopeFactory _serviceScopeFactory; private readonly ILogger<ProducerBackgroundService> _logger; public ProducerBackgroundService( IServiceScopeFactory serviceScopeFactory, ILogger<ProducerBackgroundService> logger) { _serviceScopeFactory = serviceScopeFactory; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken stoppingToken) { // Create a service scope and resolve the IPublisher // (the IPublisher cannot be resolved from the root scope and cannot // therefore be directly injected into the BackgroundService) using var scope = _serviceScopeFactory.CreateScope(); var publisher = scope.ServiceProvider.GetRequiredService<IPublisher>(); var broker = scope.ServiceProvider.GetRequiredService<IBroker>(); int number = 0; while (!stoppingToken.IsCancellationRequested) { // Check whether the connection has been established, since the // BackgroundService will start immediately, before the application // is completely bootstrapped if (!broker.IsConnected) { await Task.Delay(100, stoppingToken); continue; } await ProduceMessageAsync(publisher, ++number); await Task.Delay(100, stoppingToken); } } private async Task ProduceMessageAsync(IPublisher publisher, int number) { try { await publisher.PublishAsync( new SampleMessage { Number = number }); _logger.LogInformation($\"Produced {number}\"); } catch (Exception ex) { _logger.LogError(ex, $\"Failed to produce {number}\"); } } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.ProducerV3 Consumer The consumer processes the messages and outputs their value to the standard output. Startup EndpointsConfigurator Subscriber using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.Basic.ConsumerV3 { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<SampleMessageSubscriber>(); } public void Configure() { } } } using MQTTnet.Formatter; using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.ConsumerV3 { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.basic.consumer\") .ConnectViaTcp(\"localhost\") .UseProtocolVersion(MqttProtocolVersion.V310) // Send last will message if disconnecting // ungracefully .SendLastWillMessage( lastWill => lastWill .Message(new TestamentMessage()) .ProduceTo(\"samples/testaments\"))) // Consume the samples/basic topic // Note: It is mandatory to specify the message type, since // MQTT 3 doesn't support message headers (aka user // properties) .AddInbound<SampleMessage>( endpoint => endpoint .ConsumeFrom(\"samples/basic\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) // Silently skip the messages in case of exception .OnError(policy => policy.Skip()))); } } } using Microsoft.Extensions.Logging; using Silverback.Samples.Mqtt.Basic.Common; namespace Silverback.Samples.Mqtt.Basic.ConsumerV3 { public class SampleMessageSubscriber { private readonly ILogger<SampleMessageSubscriber> _logger; public SampleMessageSubscriber(ILogger<SampleMessageSubscriber> logger) { _logger = logger; } public void OnMessageReceived(SampleMessage message) => _logger.LogInformation($\"Received {message.Number}\"); } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/Basic.ConsumerV3"
  },
  "samples/mqtt/binaryfile-streaming.html": {
    "href": "samples/mqtt/binaryfile-streaming.html",
    "title": "MQTT - Files Streaming | Silverback",
    "keywords": "MQTT - Files Streaming This sample demonstrates how to deal with raw binary contents and large messages, to transfer some files through Mqtt. See also: Binary Files , Chunking Producer The producer exposes two REST API that receive the path of a local file to be streamed. The second API uses a custom BinaryFileMessage to forward further metadata (the file name in this example). Startup EndpointsConfigurator CustomBinaryFileMessage API Controller using Microsoft.AspNetCore.Builder; using Microsoft.Extensions.DependencyInjection; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Producer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>(); // Add API controllers and SwaggerGen services.AddControllers(); services.AddSwaggerGen(); } public void Configure(IApplicationBuilder app) { // Enable middlewares to serve generated Swagger JSON and UI app.UseSwagger().UseSwaggerUI( uiOptions => { uiOptions.SwaggerEndpoint( \"/swagger/v1/swagger.json\", $\"{GetType().Assembly.FullName} API\"); }); // Enable routing and endpoints for controllers app.UseRouting(); app.UseEndpoints(endpoints => { endpoints.MapControllers(); }); } } } using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Messaging.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Producer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.binary-file.producer\") .ConnectViaTcp(\"localhost\")) // Produce the binary files to the // samples-binary-file-streaming topic .AddOutbound<BinaryFileMessage>( endpoint => endpoint .ProduceTo(\"samples/binary-files\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce))); } } } using Silverback.Messaging.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Producer.Messages { public class CustomBinaryFileMessage : BinaryFileMessage { [Header(\"x-filename\")] public string? Filename { get; set; } } } using System.IO; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Silverback.Messaging.Messages; using Silverback.Messaging.Publishing; using Silverback.Samples.Mqtt.BinaryFileStreaming.Producer.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Producer.Controllers { [ApiController] [Route(\"[controller]\")] public class ProducerController : ControllerBase { private readonly IPublisher _publisher; public ProducerController(IPublisher publisher) { _publisher = publisher; } [HttpPost(\"binary-file\")] public async Task<IActionResult> ProduceBinaryFileAsync( string filePath, string? contentType) { // Open specified file stream using var fileStream = System.IO.File.OpenRead(filePath); // Create a BinaryFileMessage that wraps the file stream var binaryFileMessage = new BinaryFileMessage(fileStream); if (!string.IsNullOrEmpty(contentType)) binaryFileMessage.ContentType = contentType; // Publish the BinaryFileMessage that will be routed to the outbound // endpoint. The FileStream will be read and produced chunk by chunk, // without the entire file being loaded into memory. await _publisher.PublishAsync(binaryFileMessage); return NoContent(); } [HttpPost(\"custom-binary-file\")] public async Task<IActionResult> ProduceBinaryFileWithCustomHeadersAsync( string filePath, string? contentType) { // Open specified file stream using var fileStream = System.IO.File.OpenRead(filePath); // Create a CustomBinaryFileMessage that wraps the file stream. The // CustomBinaryFileMessage extends the BinaryFileMessage adding an extra // Filename property that is also exported as header. var binaryFileMessage = new CustomBinaryFileMessage { Content = fileStream, Filename = Path.GetFileName(filePath) }; if (!string.IsNullOrEmpty(contentType)) binaryFileMessage.ContentType = contentType; // Publish the BinaryFileMessage that will be routed to the outbound // endpoint. The FileStream will be read and produced chunk by chunk, // without the entire file being loaded into memory. await _publisher.PublishAsync(binaryFileMessage); return NoContent(); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/BinaryFileStreaming.Producer Consumer The consumer simply streams the file to a temporary folder in the local file system. Startup EndpointsConfigurator CustomBinaryFileMessage Subscriber using Microsoft.Extensions.DependencyInjection; using Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Subscribers; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer { public class Startup { public void ConfigureServices(IServiceCollection services) { // Enable Silverback services .AddSilverback() // Use Apache Mqtt as message broker .WithConnectionToMessageBroker( options => options .AddMqtt()) // Delegate the inbound/outbound endpoints configuration to a separate // class. .AddEndpointsConfigurator<EndpointsConfigurator>() // Register the subscribers .AddSingletonSubscriber<BinaryFileSubscriber>(); } public void Configure() { } } } using MQTTnet.Protocol; using Silverback.Messaging.Configuration; using Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer { public class EndpointsConfigurator : IEndpointsConfigurator { public void Configure(IEndpointsConfigurationBuilder builder) { builder .AddMqttEndpoints( endpoints => endpoints // Configure the client options .Configure( config => config .WithClientId(\"samples.binary-file.consumer\") .ConnectViaTcp(\"localhost\")) // Consume the samples-binary-file-streaming topic .AddInbound( endpoint => endpoint .ConsumeFrom(\"samples/binary-files\") .WithQualityOfServiceLevel( MqttQualityOfServiceLevel.AtLeastOnce) // Force the consumer to use the // BinaryFileMessageSerializer: this is not strictly // necessary when the messages are produced by // Silverback but it increases the interoperability, // since it doesn't have to rely on the // 'x-message-type' header value to switch to the // BinaryFileMessageSerializer. // // In this example the BinaryFileMessageSerializer is // also set to return a CustomBinaryFileMessage // instead of the normal BinaryFileMessage. This is // only needed because we want to read the custom // 'x-message-filename' header, otherwise // 'ConsumeBinaryFiles()' would work perfectly fine // (returning a basic BinaryFileMessage, without the // extra properties). .ConsumeBinaryFiles( serializer => serializer .UseModel<CustomBinaryFileMessage>()) // Retry each chunks sequence 5 times in case of an // exception .OnError(policy => policy.Retry(5)))); } } } using Silverback.Messaging.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Messages { public class CustomBinaryFileMessage : BinaryFileMessage { [Header(\"x-filename\")] public string? Filename { get; set; } } } using System; using System.IO; using System.Threading.Tasks; using Microsoft.Extensions.Logging; using Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Messages; namespace Silverback.Samples.Mqtt.BinaryFileStreaming.Consumer.Subscribers { public class BinaryFileSubscriber { private const string OutputPath = \"../../temp\"; private readonly ILogger<BinaryFileSubscriber> _logger; public BinaryFileSubscriber(ILogger<BinaryFileSubscriber> logger) { _logger = logger; } public async Task OnBinaryFileMessageReceivedAsync( CustomBinaryFileMessage binaryFileMessage) { EnsureTargetFolderExists(); var filename = Guid.NewGuid().ToString(\"N\") + binaryFileMessage.Filename; _logger.LogInformation($\"Saving binary file as {filename}...\"); // Create a FileStream to save the file using var fileStream = File.OpenWrite(Path.Combine(OutputPath, filename)); if (binaryFileMessage.Content != null) { // Asynchronously copy the message content to the FileStream. // The message chunks are streamed directly and the entire file is // never loaded into memory. await binaryFileMessage.Content.CopyToAsync(fileStream); } _logger.LogInformation( $\"Written {fileStream.Length} bytes into {filename}.\"); } private static void EnsureTargetFolderExists() { if (!Directory.Exists(OutputPath)) Directory.CreateDirectory(OutputPath); } } } Full source code: https://github.com/BEagle1984/silverback/tree/master/samples/Mqtt/BinaryFileStreaming.Consumer"
  },
  "samples/samples.html": {
    "href": "samples/samples.html",
    "title": "Samples | Silverback",
    "keywords": "Samples In this section you find a collection of working samples based on Silverback and implementing a wide range of different use cases. The full source code can be found in the GitHub repository under the /samples folder. A README.md in the root of the samples folder explains how to run each of the samples."
  }
}